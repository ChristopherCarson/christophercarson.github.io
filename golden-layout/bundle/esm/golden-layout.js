/******/ "use strict";
/******/ var __webpack_modules__ = ({

/***/ "./src/ts/config/config.ts":
/*!*********************************!*\
  !*** ./src/ts/config/config.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ItemConfig": () => (/* binding */ ItemConfig),
/* harmony export */   "HeaderedItemConfig": () => (/* binding */ HeaderedItemConfig),
/* harmony export */   "StackItemConfig": () => (/* binding */ StackItemConfig),
/* harmony export */   "ComponentItemConfig": () => (/* binding */ ComponentItemConfig),
/* harmony export */   "RowOrColumnItemConfig": () => (/* binding */ RowOrColumnItemConfig),
/* harmony export */   "RootItemConfig": () => (/* binding */ RootItemConfig),
/* harmony export */   "LayoutConfig": () => (/* binding */ LayoutConfig),
/* harmony export */   "PopoutLayoutConfig": () => (/* binding */ PopoutLayoutConfig)
/* harmony export */ });
/* harmony import */ var _errors_external_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _resolved_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolved-config */ "./src/ts/config/resolved-config.ts");




/** @public */
var ItemConfig;
(function (ItemConfig) {
    function resolve(itemConfig) {
        switch (itemConfig.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.ConfigurationError('ItemConfig cannot specify type ground', JSON.stringify(itemConfig));
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
                return RowOrColumnItemConfig.resolve(itemConfig);
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
                return StackItemConfig.resolve(itemConfig);
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return ComponentItemConfig.resolve(itemConfig);
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnreachableCaseError('UCUICR55499', itemConfig.type);
        }
    }
    ItemConfig.resolve = resolve;
    function resolveContent(content) {
        if (content === undefined) {
            return [];
        }
        else {
            const count = content.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                result[i] = ItemConfig.resolve(content[i]);
            }
            return result;
        }
    }
    ItemConfig.resolveContent = resolveContent;
    function resolveId(id) {
        if (id === undefined) {
            return _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.id;
        }
        else {
            if (Array.isArray(id)) {
                if (id.length === 0) {
                    return _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.id;
                }
                else {
                    return id[0];
                }
            }
            else {
                return id;
            }
        }
    }
    ItemConfig.resolveId = resolveId;
    function isGround(config) {
        return config.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground;
    }
    ItemConfig.isGround = isGround;
    function isRow(config) {
        return config.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row;
    }
    ItemConfig.isRow = isRow;
    function isColumn(config) {
        return config.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column;
    }
    ItemConfig.isColumn = isColumn;
    function isStack(config) {
        return config.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack;
    }
    ItemConfig.isStack = isStack;
    function isComponent(config) {
        return config.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component;
    }
    ItemConfig.isComponent = isComponent;
})(ItemConfig || (ItemConfig = {}));
/** @public */
var HeaderedItemConfig;
(function (HeaderedItemConfig) {
    const legacyMaximisedId = '__glMaximised';
    let Header;
    (function (Header) {
        function resolve(header, hasHeaders) {
            var _a;
            if (header === undefined && hasHeaders === undefined) {
                return undefined;
            }
            else {
                const result = {
                    show: (_a = header === null || header === void 0 ? void 0 : header.show) !== null && _a !== void 0 ? _a : (hasHeaders === undefined ? undefined : hasHeaders ? _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.show : false),
                    popout: header === null || header === void 0 ? void 0 : header.popout,
                    maximise: header === null || header === void 0 ? void 0 : header.maximise,
                    close: header === null || header === void 0 ? void 0 : header.close,
                    minimise: header === null || header === void 0 ? void 0 : header.minimise,
                    tabDropdown: header === null || header === void 0 ? void 0 : header.tabDropdown,
                };
                return result;
            }
        }
        Header.resolve = resolve;
    })(Header = HeaderedItemConfig.Header || (HeaderedItemConfig.Header = {}));
    function resolveIdAndMaximised(config) {
        let id;
        // To support legacy configs with Id saved as an array of string, assign config.id to a type which includes string array
        let legacyId = config.id;
        let legacyMaximised = false;
        if (legacyId === undefined) {
            id = _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.id;
        }
        else {
            if (Array.isArray(legacyId)) {
                const idx = legacyId.findIndex((id) => id === legacyMaximisedId);
                if (idx > 0) {
                    legacyMaximised = true;
                    legacyId = legacyId.splice(idx, 1);
                }
                if (legacyId.length > 0) {
                    id = legacyId[0];
                }
                else {
                    id = _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.id;
                }
            }
            else {
                id = legacyId;
            }
        }
        let maximised;
        if (config.maximised !== undefined) {
            maximised = config.maximised;
        }
        else {
            maximised = legacyMaximised;
        }
        return { id, maximised };
    }
    HeaderedItemConfig.resolveIdAndMaximised = resolveIdAndMaximised;
})(HeaderedItemConfig || (HeaderedItemConfig = {}));
/** @public */
var StackItemConfig;
(function (StackItemConfig) {
    function resolve(itemConfig) {
        var _a, _b, _c, _d, _e, _f;
        const { id, maximised } = HeaderedItemConfig.resolveIdAndMaximised(itemConfig);
        const result = {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack,
            content: resolveContent(itemConfig.content),
            width: (_a = itemConfig.width) !== null && _a !== void 0 ? _a : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.width,
            minWidth: (_b = itemConfig.minWidth) !== null && _b !== void 0 ? _b : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.minWidth,
            height: (_c = itemConfig.height) !== null && _c !== void 0 ? _c : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.height,
            minHeight: (_d = itemConfig.minHeight) !== null && _d !== void 0 ? _d : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.minHeight,
            id,
            maximised,
            isClosable: (_e = itemConfig.isClosable) !== null && _e !== void 0 ? _e : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.isClosable,
            activeItemIndex: (_f = itemConfig.activeItemIndex) !== null && _f !== void 0 ? _f : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedStackItemConfig.defaultActiveItemIndex,
            header: HeaderedItemConfig.Header.resolve(itemConfig.header, itemConfig.hasHeaders),
        };
        return result;
    }
    StackItemConfig.resolve = resolve;
    function resolveContent(content) {
        if (content === undefined) {
            return [];
        }
        else {
            const count = content.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                const childItemConfig = content[i];
                const itemConfig = ItemConfig.resolve(childItemConfig);
                if (!_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.isComponentItem(itemConfig)) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('UCUSICRC91114', JSON.stringify(itemConfig));
                }
                else {
                    result[i] = itemConfig;
                }
            }
            return result;
        }
    }
    StackItemConfig.resolveContent = resolveContent;
})(StackItemConfig || (StackItemConfig = {}));
/** @public */
var ComponentItemConfig;
(function (ComponentItemConfig) {
    function resolve(itemConfig) {
        var _a, _b, _c, _d, _e, _f, _g;
        let componentType = itemConfig.componentType;
        if (componentType === undefined) {
            componentType = itemConfig.componentName;
        }
        if (componentType === undefined) {
            throw new Error('ComponentItemConfig.componentType is undefined');
        }
        else {
            const { id, maximised } = HeaderedItemConfig.resolveIdAndMaximised(itemConfig);
            let title;
            if (itemConfig.title === undefined || itemConfig.title === '') {
                title = ComponentItemConfig.componentTypeToTitle(componentType);
            }
            else {
                title = itemConfig.title;
            }
            const result = {
                type: itemConfig.type,
                content: [],
                width: (_a = itemConfig.width) !== null && _a !== void 0 ? _a : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.width,
                minWidth: (_b = itemConfig.minWidth) !== null && _b !== void 0 ? _b : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.minWidth,
                height: (_c = itemConfig.height) !== null && _c !== void 0 ? _c : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.height,
                minHeight: (_d = itemConfig.minHeight) !== null && _d !== void 0 ? _d : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.minHeight,
                id,
                maximised,
                isClosable: (_e = itemConfig.isClosable) !== null && _e !== void 0 ? _e : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.isClosable,
                reorderEnabled: (_f = itemConfig.reorderEnabled) !== null && _f !== void 0 ? _f : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedComponentItemConfig.defaultReorderEnabled,
                title,
                header: HeaderedItemConfig.Header.resolve(itemConfig.header, itemConfig.hasHeaders),
                componentType,
                componentState: (_g = itemConfig.componentState) !== null && _g !== void 0 ? _g : {},
            };
            return result;
        }
    }
    ComponentItemConfig.resolve = resolve;
    function componentTypeToTitle(componentType) {
        const componentTypeType = typeof componentType;
        switch (componentTypeType) {
            case 'string': return componentType;
            case 'number': return componentType.toString();
            case 'boolean': return componentType.toString();
            default: return '';
        }
    }
    ComponentItemConfig.componentTypeToTitle = componentTypeToTitle;
})(ComponentItemConfig || (ComponentItemConfig = {}));
/** @public */
var RowOrColumnItemConfig;
(function (RowOrColumnItemConfig) {
    function isChildItemConfig(itemConfig) {
        switch (itemConfig.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return true;
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                return false;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnreachableCaseError('UROCOSPCICIC13687', itemConfig.type);
        }
    }
    RowOrColumnItemConfig.isChildItemConfig = isChildItemConfig;
    function resolve(itemConfig) {
        var _a, _b, _c, _d, _e;
        const result = {
            type: itemConfig.type,
            content: RowOrColumnItemConfig.resolveContent(itemConfig.content),
            width: (_a = itemConfig.width) !== null && _a !== void 0 ? _a : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.width,
            minWidth: (_b = itemConfig.width) !== null && _b !== void 0 ? _b : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.minWidth,
            height: (_c = itemConfig.height) !== null && _c !== void 0 ? _c : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.height,
            minHeight: (_d = itemConfig.height) !== null && _d !== void 0 ? _d : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.minHeight,
            id: ItemConfig.resolveId(itemConfig.id),
            isClosable: (_e = itemConfig.isClosable) !== null && _e !== void 0 ? _e : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.isClosable,
        };
        return result;
    }
    RowOrColumnItemConfig.resolve = resolve;
    function resolveContent(content) {
        if (content === undefined) {
            return [];
        }
        else {
            const count = content.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                const childItemConfig = content[i];
                if (!RowOrColumnItemConfig.isChildItemConfig(childItemConfig)) {
                    throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.ConfigurationError('ItemConfig is not Row, Column or Stack', childItemConfig);
                }
                else {
                    const resolvedChildItemConfig = ItemConfig.resolve(childItemConfig);
                    if (!_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedRowOrColumnItemConfig.isChildItemConfig(resolvedChildItemConfig)) {
                        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('UROCOSPIC99512', JSON.stringify(resolvedChildItemConfig));
                    }
                    else {
                        result[i] = resolvedChildItemConfig;
                    }
                }
            }
            return result;
        }
    }
    RowOrColumnItemConfig.resolveContent = resolveContent;
})(RowOrColumnItemConfig || (RowOrColumnItemConfig = {}));
/** @public */
var RootItemConfig;
(function (RootItemConfig) {
    function isRootItemConfig(itemConfig) {
        switch (itemConfig.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return true;
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                return false;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnreachableCaseError('URICIR23687', itemConfig.type);
        }
    }
    RootItemConfig.isRootItemConfig = isRootItemConfig;
    function resolve(itemConfig) {
        if (itemConfig === undefined) {
            return undefined;
        }
        else {
            const result = ItemConfig.resolve(itemConfig);
            if (!_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedRootItemConfig.isRootItemConfig(result)) {
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.ConfigurationError('ItemConfig is not Row, Column or Stack', JSON.stringify(itemConfig));
            }
            else {
                return result;
            }
        }
    }
    RootItemConfig.resolve = resolve;
})(RootItemConfig || (RootItemConfig = {}));
/** Use to specify LayoutConfig with defaults or deserialise a LayoutConfig.
 * Deserialisation will handle backwards compatibility.
 * Note that LayoutConfig should be used for serialisation (not LayoutConfig)
 * @public
 */
var LayoutConfig;
(function (LayoutConfig) {
    let Settings;
    (function (Settings) {
        function resolve(settings) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            const result = {
                constrainDragToContainer: (_a = settings === null || settings === void 0 ? void 0 : settings.constrainDragToContainer) !== null && _a !== void 0 ? _a : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.constrainDragToContainer,
                reorderEnabled: (_b = settings === null || settings === void 0 ? void 0 : settings.reorderEnabled) !== null && _b !== void 0 ? _b : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.reorderEnabled,
                popoutWholeStack: (_c = settings === null || settings === void 0 ? void 0 : settings.popoutWholeStack) !== null && _c !== void 0 ? _c : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.popoutWholeStack,
                blockedPopoutsThrowError: (_d = settings === null || settings === void 0 ? void 0 : settings.blockedPopoutsThrowError) !== null && _d !== void 0 ? _d : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.blockedPopoutsThrowError,
                closePopoutsOnUnload: (_e = settings === null || settings === void 0 ? void 0 : settings.closePopoutsOnUnload) !== null && _e !== void 0 ? _e : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.closePopoutsOnUnload,
                responsiveMode: (_f = settings === null || settings === void 0 ? void 0 : settings.responsiveMode) !== null && _f !== void 0 ? _f : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.responsiveMode,
                tabOverlapAllowance: (_g = settings === null || settings === void 0 ? void 0 : settings.tabOverlapAllowance) !== null && _g !== void 0 ? _g : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.tabOverlapAllowance,
                reorderOnTabMenuClick: (_h = settings === null || settings === void 0 ? void 0 : settings.reorderOnTabMenuClick) !== null && _h !== void 0 ? _h : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.reorderOnTabMenuClick,
                tabControlOffset: (_j = settings === null || settings === void 0 ? void 0 : settings.tabControlOffset) !== null && _j !== void 0 ? _j : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.tabControlOffset,
                popInOnClose: (_k = settings === null || settings === void 0 ? void 0 : settings.popInOnClose) !== null && _k !== void 0 ? _k : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.popInOnClose,
            };
            return result;
        }
        Settings.resolve = resolve;
    })(Settings = LayoutConfig.Settings || (LayoutConfig.Settings = {}));
    let Dimensions;
    (function (Dimensions) {
        function resolve(dimensions) {
            var _a, _b, _c, _d, _e, _f, _g;
            const result = {
                borderWidth: (_a = dimensions === null || dimensions === void 0 ? void 0 : dimensions.borderWidth) !== null && _a !== void 0 ? _a : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.borderWidth,
                borderGrabWidth: (_b = dimensions === null || dimensions === void 0 ? void 0 : dimensions.borderGrabWidth) !== null && _b !== void 0 ? _b : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.borderGrabWidth,
                minItemHeight: (_c = dimensions === null || dimensions === void 0 ? void 0 : dimensions.minItemHeight) !== null && _c !== void 0 ? _c : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.minItemHeight,
                minItemWidth: (_d = dimensions === null || dimensions === void 0 ? void 0 : dimensions.minItemWidth) !== null && _d !== void 0 ? _d : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.minItemWidth,
                headerHeight: (_e = dimensions === null || dimensions === void 0 ? void 0 : dimensions.headerHeight) !== null && _e !== void 0 ? _e : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.headerHeight,
                dragProxyWidth: (_f = dimensions === null || dimensions === void 0 ? void 0 : dimensions.dragProxyWidth) !== null && _f !== void 0 ? _f : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.dragProxyWidth,
                dragProxyHeight: (_g = dimensions === null || dimensions === void 0 ? void 0 : dimensions.dragProxyHeight) !== null && _g !== void 0 ? _g : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.dragProxyHeight,
            };
            return result;
        }
        Dimensions.resolve = resolve;
    })(Dimensions = LayoutConfig.Dimensions || (LayoutConfig.Dimensions = {}));
    let Header;
    (function (Header) {
        function resolve(header, settings, labels) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            let show;
            if ((header === null || header === void 0 ? void 0 : header.show) !== undefined) {
                show = header.show;
            }
            else {
                if (settings !== undefined && settings.hasHeaders !== undefined) {
                    show = settings.hasHeaders ? _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.show : false;
                }
                else {
                    show = _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.show;
                }
            }
            const result = {
                show,
                popout: (_b = (_a = header === null || header === void 0 ? void 0 : header.popout) !== null && _a !== void 0 ? _a : labels === null || labels === void 0 ? void 0 : labels.popout) !== null && _b !== void 0 ? _b : ((settings === null || settings === void 0 ? void 0 : settings.showPopoutIcon) === false ? false : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.popout),
                dock: (_d = (_c = header === null || header === void 0 ? void 0 : header.popin) !== null && _c !== void 0 ? _c : labels === null || labels === void 0 ? void 0 : labels.popin) !== null && _d !== void 0 ? _d : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.dock,
                maximise: (_f = (_e = header === null || header === void 0 ? void 0 : header.maximise) !== null && _e !== void 0 ? _e : labels === null || labels === void 0 ? void 0 : labels.maximise) !== null && _f !== void 0 ? _f : ((settings === null || settings === void 0 ? void 0 : settings.showMaximiseIcon) === false ? false : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.maximise),
                close: (_h = (_g = header === null || header === void 0 ? void 0 : header.close) !== null && _g !== void 0 ? _g : labels === null || labels === void 0 ? void 0 : labels.close) !== null && _h !== void 0 ? _h : ((settings === null || settings === void 0 ? void 0 : settings.showCloseIcon) === false ? false : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.close),
                minimise: (_k = (_j = header === null || header === void 0 ? void 0 : header.minimise) !== null && _j !== void 0 ? _j : labels === null || labels === void 0 ? void 0 : labels.minimise) !== null && _k !== void 0 ? _k : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.minimise,
                tabDropdown: (_m = (_l = header === null || header === void 0 ? void 0 : header.tabDropdown) !== null && _l !== void 0 ? _l : labels === null || labels === void 0 ? void 0 : labels.tabDropdown) !== null && _m !== void 0 ? _m : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.tabDropdown,
            };
            return result;
        }
        Header.resolve = resolve;
    })(Header = LayoutConfig.Header || (LayoutConfig.Header = {}));
    function isPopout(config) {
        return 'parentId' in config || 'indexInParent' in config || 'window' in config;
    }
    LayoutConfig.isPopout = isPopout;
    function resolve(layoutConfig) {
        if (isPopout(layoutConfig)) {
            return PopoutLayoutConfig.resolve(layoutConfig);
        }
        else {
            let root;
            if (layoutConfig.root !== undefined) {
                root = layoutConfig.root;
            }
            else {
                if (layoutConfig.content !== undefined && layoutConfig.content.length > 0) {
                    root = layoutConfig.content[0];
                }
                else {
                    root = undefined;
                }
            }
            const config = {
                resolved: true,
                root: RootItemConfig.resolve(root),
                openPopouts: LayoutConfig.resolveOpenPopouts(layoutConfig.openPopouts),
                dimensions: LayoutConfig.Dimensions.resolve(layoutConfig.dimensions),
                settings: LayoutConfig.Settings.resolve(layoutConfig.settings),
                header: LayoutConfig.Header.resolve(layoutConfig.header, layoutConfig.settings, layoutConfig.labels),
            };
            return config;
        }
    }
    LayoutConfig.resolve = resolve;
    function fromResolved(config) {
        const copiedConfig = _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.createCopy(config);
        const result = {
            root: copiedConfig.root,
            openPopouts: copiedConfig.openPopouts,
            dimensions: copiedConfig.dimensions,
            settings: copiedConfig.settings,
            header: copiedConfig.header,
        };
        return result;
    }
    LayoutConfig.fromResolved = fromResolved;
    function isResolved(configOrResolvedConfig) {
        const config = configOrResolvedConfig;
        return config.resolved !== undefined && (config.resolved === true);
    }
    LayoutConfig.isResolved = isResolved;
    function resolveOpenPopouts(popoutConfigs) {
        if (popoutConfigs === undefined) {
            return [];
        }
        else {
            const count = popoutConfigs.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                result[i] = PopoutLayoutConfig.resolve(popoutConfigs[i]);
            }
            return result;
        }
    }
    LayoutConfig.resolveOpenPopouts = resolveOpenPopouts;
})(LayoutConfig || (LayoutConfig = {}));
/** @public */
var PopoutLayoutConfig;
(function (PopoutLayoutConfig) {
    let Window;
    (function (Window) {
        function resolve(window, dimensions) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            let result;
            const defaults = _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedPopoutLayoutConfig.Window.defaults;
            if (window !== undefined) {
                result = {
                    width: (_a = window.width) !== null && _a !== void 0 ? _a : defaults.width,
                    height: (_b = window.height) !== null && _b !== void 0 ? _b : defaults.height,
                    left: (_c = window.left) !== null && _c !== void 0 ? _c : defaults.left,
                    top: (_d = window.top) !== null && _d !== void 0 ? _d : defaults.top,
                };
            }
            else {
                result = {
                    width: (_e = dimensions === null || dimensions === void 0 ? void 0 : dimensions.width) !== null && _e !== void 0 ? _e : defaults.width,
                    height: (_f = dimensions === null || dimensions === void 0 ? void 0 : dimensions.height) !== null && _f !== void 0 ? _f : defaults.height,
                    left: (_g = dimensions === null || dimensions === void 0 ? void 0 : dimensions.left) !== null && _g !== void 0 ? _g : defaults.left,
                    top: (_h = dimensions === null || dimensions === void 0 ? void 0 : dimensions.top) !== null && _h !== void 0 ? _h : defaults.top,
                };
            }
            return result;
        }
        Window.resolve = resolve;
    })(Window = PopoutLayoutConfig.Window || (PopoutLayoutConfig.Window = {}));
    function resolve(popoutConfig) {
        var _a, _b;
        let root;
        if (popoutConfig.root !== undefined) {
            root = popoutConfig.root;
        }
        else {
            if (popoutConfig.content !== undefined && popoutConfig.content.length > 0) {
                root = popoutConfig.content[0];
            }
            else {
                root = undefined;
            }
        }
        const config = {
            root: RootItemConfig.resolve(root),
            openPopouts: LayoutConfig.resolveOpenPopouts(popoutConfig.openPopouts),
            settings: LayoutConfig.Settings.resolve(popoutConfig.settings),
            dimensions: LayoutConfig.Dimensions.resolve(popoutConfig.dimensions),
            header: LayoutConfig.Header.resolve(popoutConfig.header, popoutConfig.settings, popoutConfig.labels),
            parentId: (_a = popoutConfig.parentId) !== null && _a !== void 0 ? _a : null,
            indexInParent: (_b = popoutConfig.indexInParent) !== null && _b !== void 0 ? _b : null,
            window: PopoutLayoutConfig.Window.resolve(popoutConfig.window, popoutConfig.dimensions),
            resolved: true,
        };
        return config;
    }
    PopoutLayoutConfig.resolve = resolve;
})(PopoutLayoutConfig || (PopoutLayoutConfig = {}));


/***/ }),

/***/ "./src/ts/config/resolved-config.ts":
/*!******************************************!*\
  !*** ./src/ts/config/resolved-config.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResolvedItemConfig": () => (/* binding */ ResolvedItemConfig),
/* harmony export */   "ResolvedHeaderedItemConfig": () => (/* binding */ ResolvedHeaderedItemConfig),
/* harmony export */   "ResolvedStackItemConfig": () => (/* binding */ ResolvedStackItemConfig),
/* harmony export */   "ResolvedComponentItemConfig": () => (/* binding */ ResolvedComponentItemConfig),
/* harmony export */   "ResolvedRowOrColumnItemConfig": () => (/* binding */ ResolvedRowOrColumnItemConfig),
/* harmony export */   "ResolvedRootItemConfig": () => (/* binding */ ResolvedRootItemConfig),
/* harmony export */   "ResolvedGroundItemConfig": () => (/* binding */ ResolvedGroundItemConfig),
/* harmony export */   "ResolvedLayoutConfig": () => (/* binding */ ResolvedLayoutConfig),
/* harmony export */   "ResolvedPopoutLayoutConfig": () => (/* binding */ ResolvedPopoutLayoutConfig)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_config_minifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/config-minifier */ "./src/ts/utils/config-minifier.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");




/** @public */
var ResolvedItemConfig;
(function (ResolvedItemConfig) {
    ResolvedItemConfig.defaults = {
        type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground,
        content: [],
        width: 50,
        minWidth: 0,
        height: 50,
        minHeight: 0,
        id: '',
        isClosable: true,
    };
    /** Creates a copy of the original ResolvedItemConfig using an alternative content if specified */
    function createCopy(original, content) {
        switch (original.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
                return ResolvedRowOrColumnItemConfig.createCopy(original, content);
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
                return ResolvedStackItemConfig.createCopy(original, content);
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return ResolvedComponentItemConfig.createCopy(original);
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnreachableCaseError('CICC91354', original.type, 'Invalid Config Item type specified');
        }
    }
    ResolvedItemConfig.createCopy = createCopy;
    function createDefault(type) {
        switch (type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.AssertError('CICCDR91562'); // Get default root from LayoutConfig
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
                return ResolvedRowOrColumnItemConfig.createDefault(type);
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
                return ResolvedStackItemConfig.createDefault();
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return ResolvedComponentItemConfig.createDefault();
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnreachableCaseError('CICCDD91563', type, 'Invalid Config Item type specified');
        }
    }
    ResolvedItemConfig.createDefault = createDefault;
    function isComponentItem(itemConfig) {
        return itemConfig.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component;
    }
    ResolvedItemConfig.isComponentItem = isComponentItem;
    function isStackItem(itemConfig) {
        return itemConfig.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack;
    }
    ResolvedItemConfig.isStackItem = isStackItem;
    /** @internal */
    function isGroundItem(itemConfig) {
        return itemConfig.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground;
    }
    ResolvedItemConfig.isGroundItem = isGroundItem;
})(ResolvedItemConfig || (ResolvedItemConfig = {}));
/** @public */
var ResolvedHeaderedItemConfig;
(function (ResolvedHeaderedItemConfig) {
    ResolvedHeaderedItemConfig.defaultMaximised = false;
    let Header;
    (function (Header) {
        function createCopy(original, show) {
            if (original === undefined) {
                return undefined;
            }
            else {
                return {
                    show: show !== null && show !== void 0 ? show : original.show,
                    popout: original.popout,
                    close: original.close,
                    maximise: original.maximise,
                    minimise: original.minimise,
                    tabDropdown: original.tabDropdown,
                };
            }
        }
        Header.createCopy = createCopy;
    })(Header = ResolvedHeaderedItemConfig.Header || (ResolvedHeaderedItemConfig.Header = {}));
})(ResolvedHeaderedItemConfig || (ResolvedHeaderedItemConfig = {}));
/** @public */
var ResolvedStackItemConfig;
(function (ResolvedStackItemConfig) {
    ResolvedStackItemConfig.defaultActiveItemIndex = 0;
    function createCopy(original, content) {
        const result = {
            type: original.type,
            content: content !== undefined ? copyContent(content) : copyContent(original.content),
            width: original.width,
            minWidth: original.minWidth,
            height: original.height,
            minHeight: original.minHeight,
            id: original.id,
            maximised: original.maximised,
            isClosable: original.isClosable,
            activeItemIndex: original.activeItemIndex,
            header: ResolvedHeaderedItemConfig.Header.createCopy(original.header),
        };
        return result;
    }
    ResolvedStackItemConfig.createCopy = createCopy;
    function copyContent(original) {
        const count = original.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = ResolvedItemConfig.createCopy(original[i]);
        }
        return result;
    }
    ResolvedStackItemConfig.copyContent = copyContent;
    function createDefault() {
        const result = {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack,
            content: [],
            width: ResolvedItemConfig.defaults.width,
            minWidth: ResolvedItemConfig.defaults.minWidth,
            height: ResolvedItemConfig.defaults.height,
            minHeight: ResolvedItemConfig.defaults.minHeight,
            id: ResolvedItemConfig.defaults.id,
            maximised: ResolvedHeaderedItemConfig.defaultMaximised,
            isClosable: ResolvedItemConfig.defaults.isClosable,
            activeItemIndex: ResolvedStackItemConfig.defaultActiveItemIndex,
            header: undefined,
        };
        return result;
    }
    ResolvedStackItemConfig.createDefault = createDefault;
})(ResolvedStackItemConfig || (ResolvedStackItemConfig = {}));
/** @public */
var ResolvedComponentItemConfig;
(function (ResolvedComponentItemConfig) {
    ResolvedComponentItemConfig.defaultReorderEnabled = true;
    function resolveComponentTypeName(itemConfig) {
        const componentType = itemConfig.componentType;
        if (typeof componentType === 'string') {
            return componentType;
        }
        else {
            return undefined;
        }
    }
    ResolvedComponentItemConfig.resolveComponentTypeName = resolveComponentTypeName;
    function createCopy(original) {
        const result = {
            type: original.type,
            content: [],
            width: original.width,
            minWidth: original.minWidth,
            height: original.height,
            minHeight: original.minHeight,
            id: original.id,
            maximised: original.maximised,
            isClosable: original.isClosable,
            reorderEnabled: original.reorderEnabled,
            title: original.title,
            header: ResolvedHeaderedItemConfig.Header.createCopy(original.header),
            componentType: original.componentType,
            componentState: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.deepExtendValue)(undefined, original.componentState),
        };
        return result;
    }
    ResolvedComponentItemConfig.createCopy = createCopy;
    function createDefault(componentType = '', componentState, title = '') {
        const result = {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component,
            content: [],
            width: ResolvedItemConfig.defaults.width,
            minWidth: ResolvedItemConfig.defaults.minWidth,
            height: ResolvedItemConfig.defaults.height,
            minHeight: ResolvedItemConfig.defaults.minHeight,
            id: ResolvedItemConfig.defaults.id,
            maximised: ResolvedHeaderedItemConfig.defaultMaximised,
            isClosable: ResolvedItemConfig.defaults.isClosable,
            reorderEnabled: ResolvedComponentItemConfig.defaultReorderEnabled,
            title,
            header: undefined,
            componentType,
            componentState,
        };
        return result;
    }
    ResolvedComponentItemConfig.createDefault = createDefault;
    function copyComponentType(componentType) {
        return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.deepExtendValue)({}, componentType);
    }
    ResolvedComponentItemConfig.copyComponentType = copyComponentType;
})(ResolvedComponentItemConfig || (ResolvedComponentItemConfig = {}));
/** @public */
var ResolvedRowOrColumnItemConfig;
(function (ResolvedRowOrColumnItemConfig) {
    function isChildItemConfig(itemConfig) {
        switch (itemConfig.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return true;
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                return false;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnreachableCaseError('CROCOSPCICIC13687', itemConfig.type);
        }
    }
    ResolvedRowOrColumnItemConfig.isChildItemConfig = isChildItemConfig;
    function createCopy(original, content) {
        const result = {
            type: original.type,
            content: content !== undefined ? copyContent(content) : copyContent(original.content),
            width: original.width,
            minWidth: original.minWidth,
            height: original.height,
            minHeight: original.minHeight,
            id: original.id,
            isClosable: original.isClosable,
        };
        return result;
    }
    ResolvedRowOrColumnItemConfig.createCopy = createCopy;
    function copyContent(original) {
        const count = original.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = ResolvedItemConfig.createCopy(original[i]);
        }
        return result;
    }
    ResolvedRowOrColumnItemConfig.copyContent = copyContent;
    function createDefault(type) {
        const result = {
            type,
            content: [],
            width: ResolvedItemConfig.defaults.width,
            minWidth: ResolvedItemConfig.defaults.minWidth,
            height: ResolvedItemConfig.defaults.height,
            minHeight: ResolvedItemConfig.defaults.minHeight,
            id: ResolvedItemConfig.defaults.id,
            isClosable: ResolvedItemConfig.defaults.isClosable,
        };
        return result;
    }
    ResolvedRowOrColumnItemConfig.createDefault = createDefault;
})(ResolvedRowOrColumnItemConfig || (ResolvedRowOrColumnItemConfig = {}));
/** @public */
var ResolvedRootItemConfig;
(function (ResolvedRootItemConfig) {
    function createCopy(config) {
        return ResolvedItemConfig.createCopy(config);
    }
    ResolvedRootItemConfig.createCopy = createCopy;
    function isRootItemConfig(itemConfig) {
        switch (itemConfig.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return true;
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                return false;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnreachableCaseError('CROCOSPCICIC13687', itemConfig.type);
        }
    }
    ResolvedRootItemConfig.isRootItemConfig = isRootItemConfig;
})(ResolvedRootItemConfig || (ResolvedRootItemConfig = {}));
/** @internal */
var ResolvedGroundItemConfig;
(function (ResolvedGroundItemConfig) {
    function create(rootItemConfig) {
        const content = rootItemConfig === undefined ? [] : [rootItemConfig];
        return {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground,
            content,
            width: 100,
            minWidth: 0,
            height: 100,
            minHeight: 0,
            id: '',
            isClosable: false,
            title: '',
            reorderEnabled: false,
        };
    }
    ResolvedGroundItemConfig.create = create;
})(ResolvedGroundItemConfig || (ResolvedGroundItemConfig = {}));
/** @public */
var ResolvedLayoutConfig;
(function (ResolvedLayoutConfig) {
    let Settings;
    (function (Settings) {
        Settings.defaults = {
            constrainDragToContainer: true,
            reorderEnabled: true,
            popoutWholeStack: false,
            blockedPopoutsThrowError: true,
            closePopoutsOnUnload: true,
            responsiveMode: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ResponsiveMode.none,
            tabOverlapAllowance: 0,
            reorderOnTabMenuClick: true,
            tabControlOffset: 10,
            popInOnClose: false,
        };
        function createCopy(original) {
            return {
                constrainDragToContainer: original.constrainDragToContainer,
                reorderEnabled: original.reorderEnabled,
                popoutWholeStack: original.popoutWholeStack,
                blockedPopoutsThrowError: original.blockedPopoutsThrowError,
                closePopoutsOnUnload: original.closePopoutsOnUnload,
                responsiveMode: original.responsiveMode,
                tabOverlapAllowance: original.tabOverlapAllowance,
                reorderOnTabMenuClick: original.reorderOnTabMenuClick,
                tabControlOffset: original.tabControlOffset,
                popInOnClose: original.popInOnClose,
            };
        }
        Settings.createCopy = createCopy;
    })(Settings = ResolvedLayoutConfig.Settings || (ResolvedLayoutConfig.Settings = {}));
    let Dimensions;
    (function (Dimensions) {
        function createCopy(original) {
            return {
                borderWidth: original.borderWidth,
                borderGrabWidth: original.borderGrabWidth,
                minItemHeight: original.minItemHeight,
                minItemWidth: original.minItemWidth,
                headerHeight: original.headerHeight,
                dragProxyWidth: original.dragProxyWidth,
                dragProxyHeight: original.dragProxyHeight,
            };
        }
        Dimensions.createCopy = createCopy;
        Dimensions.defaults = {
            borderWidth: 5,
            borderGrabWidth: 5,
            minItemHeight: 10,
            minItemWidth: 10,
            headerHeight: 20,
            dragProxyWidth: 300,
            dragProxyHeight: 200
        };
    })(Dimensions = ResolvedLayoutConfig.Dimensions || (ResolvedLayoutConfig.Dimensions = {}));
    let Header;
    (function (Header) {
        function createCopy(original) {
            return {
                show: original.show,
                popout: original.popout,
                dock: original.dock,
                close: original.close,
                maximise: original.maximise,
                minimise: original.minimise,
                tabDropdown: original.tabDropdown,
            };
        }
        Header.createCopy = createCopy;
        Header.defaults = {
            show: _utils_types__WEBPACK_IMPORTED_MODULE_0__.Side.top,
            popout: 'open in new window',
            dock: 'dock',
            maximise: 'maximise',
            minimise: 'minimise',
            close: 'close',
            tabDropdown: 'additional tabs'
        };
    })(Header = ResolvedLayoutConfig.Header || (ResolvedLayoutConfig.Header = {}));
    function isPopout(config) {
        return 'parentId' in config;
    }
    ResolvedLayoutConfig.isPopout = isPopout;
    function createDefault() {
        const result = {
            root: undefined,
            openPopouts: [],
            dimensions: ResolvedLayoutConfig.Dimensions.defaults,
            settings: ResolvedLayoutConfig.Settings.defaults,
            header: ResolvedLayoutConfig.Header.defaults,
            resolved: true,
        };
        return result;
    }
    ResolvedLayoutConfig.createDefault = createDefault;
    function createCopy(config) {
        if (isPopout(config)) {
            return ResolvedPopoutLayoutConfig.createCopy(config);
        }
        else {
            const result = {
                root: config.root === undefined ? undefined : ResolvedRootItemConfig.createCopy(config.root),
                openPopouts: ResolvedLayoutConfig.copyOpenPopouts(config.openPopouts),
                settings: ResolvedLayoutConfig.Settings.createCopy(config.settings),
                dimensions: ResolvedLayoutConfig.Dimensions.createCopy(config.dimensions),
                header: ResolvedLayoutConfig.Header.createCopy(config.header),
                resolved: config.resolved,
            };
            return result;
        }
    }
    ResolvedLayoutConfig.createCopy = createCopy;
    function copyOpenPopouts(original) {
        const count = original.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = ResolvedPopoutLayoutConfig.createCopy(original[i]);
        }
        return result;
    }
    ResolvedLayoutConfig.copyOpenPopouts = copyOpenPopouts;
    /**
     * Takes a GoldenLayout configuration object and
     * replaces its keys and values recursively with
     * one letter counterparts
     */
    function minifyConfig(layoutConfig) {
        return _utils_config_minifier__WEBPACK_IMPORTED_MODULE_3__.ConfigMinifier.translateObject(layoutConfig, true);
    }
    ResolvedLayoutConfig.minifyConfig = minifyConfig;
    /**
     * Takes a configuration Object that was previously minified
     * using minifyConfig and returns its original version
     */
    function unminifyConfig(minifiedConfig) {
        return _utils_config_minifier__WEBPACK_IMPORTED_MODULE_3__.ConfigMinifier.translateObject(minifiedConfig, false);
    }
    ResolvedLayoutConfig.unminifyConfig = unminifyConfig;
})(ResolvedLayoutConfig || (ResolvedLayoutConfig = {}));
/** @public */
var ResolvedPopoutLayoutConfig;
(function (ResolvedPopoutLayoutConfig) {
    let Window;
    (function (Window) {
        function createCopy(original) {
            return {
                width: original.width,
                height: original.height,
                left: original.left,
                top: original.top,
            };
        }
        Window.createCopy = createCopy;
        Window.defaults = {
            width: null,
            height: null,
            left: null,
            top: null,
        };
    })(Window = ResolvedPopoutLayoutConfig.Window || (ResolvedPopoutLayoutConfig.Window = {}));
    function createCopy(original) {
        const result = {
            root: original.root === undefined ? undefined : ResolvedRootItemConfig.createCopy(original.root),
            openPopouts: ResolvedLayoutConfig.copyOpenPopouts(original.openPopouts),
            settings: ResolvedLayoutConfig.Settings.createCopy(original.settings),
            dimensions: ResolvedLayoutConfig.Dimensions.createCopy(original.dimensions),
            header: ResolvedLayoutConfig.Header.createCopy(original.header),
            parentId: original.parentId,
            indexInParent: original.indexInParent,
            window: ResolvedPopoutLayoutConfig.Window.createCopy(original.window),
            resolved: original.resolved,
        };
        return result;
    }
    ResolvedPopoutLayoutConfig.createCopy = createCopy;
})(ResolvedPopoutLayoutConfig || (ResolvedPopoutLayoutConfig = {}));


/***/ }),

/***/ "./src/ts/container/component-container.ts":
/*!*************************************************!*\
  !*** ./src/ts/container/component-container.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentContainer": () => (/* binding */ ComponentContainer)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_style_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/style-constants */ "./src/ts/utils/style-constants.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");






/** @public */
class ComponentContainer extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /** @internal */
    constructor(
    /** @internal */
    _config, 
    /** @internal */
    _parent, 
    /** @internal */
    _layoutManager, 
    /** @internal */
    _element, 
    /** @internal */
    _updateItemConfigEvent, 
    /** @internal */
    _showEvent, 
    /** @internal */
    _hideEvent, 
    /** @internal */
    _focusEvent, 
    /** @internal */
    _blurEvent) {
        super();
        this._config = _config;
        this._parent = _parent;
        this._layoutManager = _layoutManager;
        this._element = _element;
        this._updateItemConfigEvent = _updateItemConfigEvent;
        this._showEvent = _showEvent;
        this._hideEvent = _hideEvent;
        this._focusEvent = _focusEvent;
        this._blurEvent = _blurEvent;
        /** @internal */
        this._stackMaximised = false;
        this._width = 0;
        this._height = 0;
        this._visible = true;
        this._isShownWithZeroDimensions = true;
        this._componentType = _config.componentType;
        this._isClosable = _config.isClosable;
        this._initialState = _config.componentState;
        this._state = this._initialState;
        this._boundComponent = this.layoutManager.bindComponent(this, _config);
        this.updateElementPositionPropertyFromBoundComponent();
    }
    get width() { return this._width; }
    get height() { return this._height; }
    get parent() { return this._parent; }
    /** @internal @deprecated use {@link (ComponentContainer:class).componentType} */
    get componentName() { return this._componentType; }
    get componentType() { return this._componentType; }
    get virtual() { return this._boundComponent.virtual; }
    get component() { return this._boundComponent.component; }
    get tab() { return this._tab; }
    get title() { return this._parent.title; }
    get layoutManager() { return this._layoutManager; }
    get isHidden() { return !this._visible; }
    get visible() { return this._visible; }
    get state() { return this._state; }
    /** Return the initial component state */
    get initialState() { return this._initialState; }
    /** The inner DOM element where the container's content is intended to live in */
    get element() { return this._element; }
    /** @internal */
    destroy() {
        this.releaseComponent();
        this.stateRequestEvent = undefined;
        this.emit('destroy');
    }
    /** @deprecated use {@link (ComponentContainer:class).element } */
    getElement() {
        return this._element;
    }
    /**
     * Hides the container's component item (and hence, the container) if not already hidden.
     * Emits hide event prior to hiding the container.
     */
    hide() {
        this._hideEvent();
    }
    /**
     * Shows the container's component item (and hence, the container) if not visible.
     * Emits show event prior to hiding the container.
     */
    show() {
        this._showEvent();
    }
    /**
     * Focus this component in Layout.
     */
    focus(suppressEvent = false) {
        this._focusEvent(suppressEvent);
    }
    /**
     * Remove focus from this component in Layout.
     */
    blur(suppressEvent = false) {
        this._blurEvent(suppressEvent);
    }
    /**
     * Set the size from within the container. Traverses up
     * the item tree until it finds a row or column element
     * and resizes its items accordingly.
     *
     * If this container isn't a descendant of a row or column
     * it returns false
     * @param width - The new width in pixel
     * @param height - The new height in pixel
     *
     * @returns resizeSuccesful
     *
     * @internal
     */
    setSize(width, height) {
        let ancestorItem = this._parent;
        if (ancestorItem.isColumn || ancestorItem.isRow || ancestorItem.parent === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.AssertError('ICSSPRC', 'ComponentContainer cannot have RowColumn Parent');
        }
        else {
            let ancestorChildItem;
            do {
                ancestorChildItem = ancestorItem;
                ancestorItem = ancestorItem.parent;
            } while (ancestorItem !== null && !ancestorItem.isColumn && !ancestorItem.isRow);
            if (ancestorItem === null) {
                // no Row or Column found
                return false;
            }
            else {
                // ancestorItem is Row or Column
                const direction = ancestorItem.isColumn ? 'height' : 'width';
                const currentSize = this[direction];
                if (currentSize === null) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('ICSSCS11194');
                }
                else {
                    const newSize = direction === 'height' ? height : width;
                    const totalPixel = currentSize * (1 / (ancestorChildItem[direction] / 100));
                    const percentage = (newSize / totalPixel) * 100;
                    const delta = (ancestorChildItem[direction] - percentage) / (ancestorItem.contentItems.length - 1);
                    for (let i = 0; i < ancestorItem.contentItems.length; i++) {
                        if (ancestorItem.contentItems[i] === ancestorChildItem) {
                            ancestorItem.contentItems[i][direction] = percentage;
                        }
                        else {
                            ancestorItem.contentItems[i][direction] += delta;
                        }
                    }
                    ancestorItem.updateSize();
                    return true;
                }
            }
        }
    }
    /**
     * Closes the container if it is closable. Can be called by
     * both the component within at as well as the contentItem containing
     * it. Emits a close event before the container itself is closed.
     */
    close() {
        if (this._isClosable) {
            this.emit('close');
            this._parent.close();
        }
    }
    /** Replaces component without affecting layout */
    replaceComponent(itemConfig) {
        this.releaseComponent();
        if (!_config_config__WEBPACK_IMPORTED_MODULE_2__.ItemConfig.isComponent(itemConfig)) {
            throw new Error('ReplaceComponent not passed a component ItemConfig');
        }
        else {
            const config = _config_config__WEBPACK_IMPORTED_MODULE_2__.ComponentItemConfig.resolve(itemConfig);
            this._initialState = config.componentState;
            this._state = this._initialState;
            this._componentType = config.componentType;
            this._updateItemConfigEvent(config);
            this._boundComponent = this.layoutManager.bindComponent(this, config);
            this.updateElementPositionPropertyFromBoundComponent();
            this.emit('stateChanged');
        }
    }
    /**
     * Returns the initial component state or the latest passed in setState()
     * @returns state
     * @deprecated Use {@link (ComponentContainer:class).initialState}
     */
    getState() {
        return this._state;
    }
    /**
     * Merges the provided state into the current one
     * @deprecated Use {@link (ComponentContainer:class).stateRequestEvent}
     */
    extendState(state) {
        const extendedState = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.deepExtend)(this._state, state);
        this.setState(extendedState);
    }
    /**
     * Sets the component state
     * @deprecated Use {@link (ComponentContainer:class).stateRequestEvent}
     */
    setState(state) {
        this._state = state;
        this._parent.emitBaseBubblingEvent('stateChanged');
    }
    /**
     * Set's the components title
     */
    setTitle(title) {
        this._parent.setTitle(title);
    }
    /** @internal */
    setTab(tab) {
        this._tab = tab;
        this.emit('tab', tab);
    }
    /** @internal */
    setVisibility(value) {
        if (this._boundComponent.virtual) {
            if (this.virtualVisibilityChangeRequiredEvent !== undefined) {
                this.virtualVisibilityChangeRequiredEvent(this, value);
            }
        }
        if (value) {
            if (!this._visible) {
                this._visible = true;
                if (this._height === 0 && this._width === 0) {
                    this._isShownWithZeroDimensions = true;
                }
                else {
                    this._isShownWithZeroDimensions = false;
                    this.setSizeToNodeSize(this._width, this._height, true);
                    this.emitShow();
                }
            }
            else {
                if (this._isShownWithZeroDimensions && (this._height !== 0 || this._width !== 0)) {
                    this._isShownWithZeroDimensions = false;
                    this.setSizeToNodeSize(this._width, this._height, true);
                    this.emitShow();
                }
            }
        }
        else {
            if (this._visible) {
                this._visible = false;
                this._isShownWithZeroDimensions = false;
                this.emitHide();
            }
        }
    }
    /**
     * Set the container's size, but considered temporary (for dragging)
     * so don't emit any events.
     * @internal
     */
    enterDragMode(width, height) {
        this._width = width;
        this._height = height;
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.setElementWidth)(this._element, width);
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.setElementHeight)(this._element, height);
        if (this.virtualZIndexChangeRequiredEvent !== undefined) {
            this.virtualZIndexChangeRequiredEvent(this, _utils_types__WEBPACK_IMPORTED_MODULE_4__.LogicalZIndex.drag, _utils_style_constants__WEBPACK_IMPORTED_MODULE_5__.StyleConstants.defaultComponentDragZIndex);
        }
        this.drag();
    }
    /** @internal */
    exitDragMode() {
        if (this.virtualZIndexChangeRequiredEvent !== undefined) {
            this.virtualZIndexChangeRequiredEvent(this, _utils_types__WEBPACK_IMPORTED_MODULE_4__.LogicalZIndex.base, _utils_style_constants__WEBPACK_IMPORTED_MODULE_5__.StyleConstants.defaultComponentBaseZIndex);
        }
    }
    /** @internal */
    enterStackMaximised() {
        this._stackMaximised = true;
        if (this.virtualZIndexChangeRequiredEvent !== undefined) {
            this.virtualZIndexChangeRequiredEvent(this, _utils_types__WEBPACK_IMPORTED_MODULE_4__.LogicalZIndex.stackMaximised, _utils_style_constants__WEBPACK_IMPORTED_MODULE_5__.StyleConstants.defaultComponentStackMaximisedZIndex);
        }
    }
    /** @internal */
    exitStackMaximised() {
        if (this.virtualZIndexChangeRequiredEvent !== undefined) {
            this.virtualZIndexChangeRequiredEvent(this, _utils_types__WEBPACK_IMPORTED_MODULE_4__.LogicalZIndex.base, _utils_style_constants__WEBPACK_IMPORTED_MODULE_5__.StyleConstants.defaultComponentBaseZIndex);
        }
        this._stackMaximised = false;
    }
    /** @internal */
    drag() {
        if (this._boundComponent.virtual) {
            if (this.virtualRectingRequiredEvent !== undefined) {
                this._layoutManager.fireBeforeVirtualRectingEvent(1);
                try {
                    this.virtualRectingRequiredEvent(this, this._width, this._height);
                }
                finally {
                    this._layoutManager.fireAfterVirtualRectingEvent();
                }
            }
        }
    }
    /**
     * Sets the container's size. Called by the container's component item.
     * To instead set the size programmatically from within the component itself,
     * use the public setSize method
     * @param width - in px
     * @param height - in px
     * @param force - set even if no change
     * @internal
     */
    setSizeToNodeSize(width, height, force) {
        if (width !== this._width || height !== this._height || force) {
            this._width = width;
            this._height = height;
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.setElementWidth)(this._element, width);
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.setElementHeight)(this._element, height);
            if (this._boundComponent.virtual) {
                this.addVirtualSizedContainerToLayoutManager();
            }
            else {
                this.emit('resize');
                this.checkShownFromZeroDimensions();
            }
        }
    }
    /** @internal */
    notifyVirtualRectingRequired() {
        if (this.virtualRectingRequiredEvent !== undefined) {
            this.virtualRectingRequiredEvent(this, this._width, this._height);
            this.emit('resize');
            this.checkShownFromZeroDimensions();
        }
    }
    /** @internal */
    updateElementPositionPropertyFromBoundComponent() {
        if (this._boundComponent.virtual) {
            this._element.style.position = 'static';
        }
        else {
            this._element.style.position = ''; // set it back to attribute value
        }
    }
    /** @internal */
    addVirtualSizedContainerToLayoutManager() {
        this._layoutManager.beginVirtualSizedContainerAdding();
        try {
            this._layoutManager.addVirtualSizedContainer(this);
        }
        finally {
            this._layoutManager.endVirtualSizedContainerAdding();
        }
    }
    /** @internal */
    checkShownFromZeroDimensions() {
        if (this._isShownWithZeroDimensions && (this._height !== 0 || this._width !== 0)) {
            this._isShownWithZeroDimensions = false;
            this.emitShow();
        }
    }
    /** @internal */
    emitShow() {
        this.emit('shown');
        this.emit('show');
    }
    /** @internal */
    emitHide() {
        this.emit('hide');
    }
    /** @internal */
    releaseComponent() {
        if (this._stackMaximised) {
            this.exitStackMaximised();
        }
        this.emit('beforeComponentRelease', this._boundComponent.component);
        this.layoutManager.unbindComponent(this, this._boundComponent.virtual, this._boundComponent.component);
    }
}


/***/ }),

/***/ "./src/ts/controls/browser-popout.ts":
/*!*******************************************!*\
  !*** ./src/ts/controls/browser-popout.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserPopout": () => (/* binding */ BrowserPopout)
/* harmony export */ });
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _errors_external_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");





/**
 * Pops a content item out into a new browser window.
 * This is achieved by
 *
 *    - Creating a new configuration with the content item as root element
 *    - Serializing and minifying the configuration
 *    - Opening the current window's URL with the configuration as a GET parameter
 *    - GoldenLayout when opened in the new window will look for the GET parameter
 *      and use it instead of the provided configuration
 * @public
 */
class BrowserPopout extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /**
     * @param _config - GoldenLayout item config
     * @param _initialWindowSize - A map with width, height, top and left
     * @internal
     */
    constructor(
    /** @internal */
    _config, 
    /** @internal */
    _initialWindowSize, 
    /** @internal */
    _layoutManager) {
        super();
        this._config = _config;
        this._initialWindowSize = _initialWindowSize;
        this._layoutManager = _layoutManager;
        this._isInitialised = false;
        this._popoutWindow = null;
        this.createWindow();
    }
    toConfig() {
        var _a, _b;
        if (this._isInitialised === false) {
            throw new Error('Can\'t create config, layout not yet initialised');
        }
        const glInstance = this.getGlInstance();
        const glInstanceConfig = glInstance.saveLayout();
        let left;
        let top;
        if (this._popoutWindow === null) {
            left = null;
            top = null;
        }
        else {
            left = (_a = this._popoutWindow.screenX) !== null && _a !== void 0 ? _a : this._popoutWindow.screenLeft;
            top = (_b = this._popoutWindow.screenY) !== null && _b !== void 0 ? _b : this._popoutWindow.screenTop;
        }
        const window = {
            width: this.getGlInstance().width,
            height: this.getGlInstance().height,
            left,
            top,
        };
        const config = {
            root: glInstanceConfig.root,
            openPopouts: glInstanceConfig.openPopouts,
            settings: glInstanceConfig.settings,
            dimensions: glInstanceConfig.dimensions,
            header: glInstanceConfig.header,
            window,
            parentId: this._config.parentId,
            indexInParent: this._config.indexInParent,
            resolved: true,
        };
        return config;
    }
    getGlInstance() {
        if (this._popoutWindow === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('BPGGI24693');
        }
        return this._popoutWindow.__glInstance;
    }
    /**
     * Retrieves the native BrowserWindow backing this popout.
     * Might throw an UnexpectedNullError exception when the window is not initialized yet.
     * @public
     */
    getWindow() {
        if (this._popoutWindow === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('BPGW087215');
        }
        return this._popoutWindow;
    }
    close() {
        if (this.getGlInstance()) {
            this.getGlInstance().closeWindow();
        }
        else {
            try {
                this.getWindow().close();
            }
            catch (e) {
                //
            }
        }
    }
    /**
     * Returns the popped out item to its original position. If the original
     * parent isn't available anymore it falls back to the layout's topmost element
     */
    popIn() {
        let parentItem;
        let index = this._config.indexInParent;
        if (!this._config.parentId) {
            return;
        }
        /*
        * The deepExtend call seems a bit pointless, but it's crucial to
        * copy the config returned by this.getGlInstance().toConfig()
        * onto a new object. Internet Explorer keeps the references
        * to objects on the child window, resulting in the following error
        * once the child window is closed:
        *
        * The callee (server [not server application]) is not available and disappeared
        */
        const glInstanceLayoutConfig = this.getGlInstance().saveLayout();
        const copiedGlInstanceLayoutConfig = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.deepExtend)({}, glInstanceLayoutConfig);
        const copiedRoot = copiedGlInstanceLayoutConfig.root;
        if (copiedRoot === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('BPPIR19998');
        }
        const groundItem = this._layoutManager.groundItem;
        if (groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('BPPIG34972');
        }
        parentItem = groundItem.getItemsByPopInParentId(this._config.parentId)[0];
        /*
        * Fallback if parentItem is not available. Either add it to the topmost
        * item or make it the topmost item if the layout is empty
        */
        if (!parentItem) {
            if (groundItem.contentItems.length > 0) {
                parentItem = groundItem.contentItems[0];
            }
            else {
                parentItem = groundItem;
            }
            index = 0;
        }
        const newContentItem = this._layoutManager.createAndInitContentItem(copiedRoot, parentItem);
        parentItem.addChild(newContentItem, index);
        if (this._layoutManager.layoutConfig.settings.popInOnClose) {
            this._onClose();
        }
        else {
            this.close();
        }
    }
    /**
     * Creates the URL and window parameter
     * and opens a new window
     * @internal
     */
    createWindow() {
        const url = this.createUrl();
        /**
         * Bogus title to prevent re-usage of existing window with the
         * same title. The actual title will be set by the new window's
         * GoldenLayout instance if it detects that it is in subWindowMode
         */
        const target = Math.floor(Math.random() * 1000000).toString(36);
        /**
         * The options as used in the window.open string
         */
        const features = this.serializeWindowFeatures({
            width: this._initialWindowSize.width,
            height: this._initialWindowSize.height,
            innerWidth: this._initialWindowSize.width,
            innerHeight: this._initialWindowSize.height,
            menubar: 'no',
            toolbar: 'no',
            location: 'no',
            personalbar: 'no',
            resizable: 'yes',
            scrollbars: 'no',
            status: 'no'
        });
        this._popoutWindow = globalThis.open(url, target, features);
        if (!this._popoutWindow) {
            if (this._layoutManager.layoutConfig.settings.blockedPopoutsThrowError === true) {
                const error = new _errors_external_error__WEBPACK_IMPORTED_MODULE_3__.PopoutBlockedError('Popout blocked');
                throw error;
            }
            else {
                return;
            }
        }
        this._popoutWindow.addEventListener('load', () => this.positionWindow(), { passive: true });
        this._popoutWindow.addEventListener('beforeunload', () => {
            if (this._layoutManager.layoutConfig.settings.popInOnClose) {
                this.popIn();
            }
            else {
                this._onClose();
            }
        }, { passive: true });
        /**
         * Polling the childwindow to find out if GoldenLayout has been initialised
         * doesn't seem optimal, but the alternatives - adding a callback to the parent
         * window or raising an event on the window object - both would introduce knowledge
         * about the parent to the child window which we'd rather avoid
         */
        this._checkReadyInterval = setInterval(() => this.checkReady(), 10);
    }
    /** @internal */
    checkReady() {
        if (this._popoutWindow === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('BPCR01844');
        }
        else {
            if (this._popoutWindow.__glInstance && this._popoutWindow.__glInstance.isInitialised) {
                this.onInitialised();
                if (this._checkReadyInterval !== undefined) {
                    clearInterval(this._checkReadyInterval);
                    this._checkReadyInterval = undefined;
                }
            }
        }
    }
    /**
     * Serialises a map of key:values to a window options string
     *
     * @param windowOptions -
     *
     * @returns serialised window options
     * @internal
     */
    serializeWindowFeatures(windowOptions) {
        const windowOptionsString = [];
        for (const key in windowOptions) {
            windowOptionsString.push(key + '=' + windowOptions[key].toString());
        }
        return windowOptionsString.join(',');
    }
    /**
     * Creates the URL for the new window, including the
     * config GET parameter
     *
     * @returns URL
     * @internal
     */
    createUrl() {
        const storageKey = 'gl-window-config-' + (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId)();
        const config = _config_resolved_config__WEBPACK_IMPORTED_MODULE_4__.ResolvedLayoutConfig.minifyConfig(this._config);
        try {
            localStorage.setItem(storageKey, JSON.stringify(config));
        }
        catch (e) {
            throw new Error('Error while writing to localStorage ' + e.toString());
        }
        const url = new URL(location.href);
        url.searchParams.set('gl-window', storageKey);
        return url.toString();
    }
    /**
     * Move the newly created window roughly to
     * where the component used to be.
     * @internal
     */
    positionWindow() {
        if (this._popoutWindow === null) {
            throw new Error('BrowserPopout.positionWindow: null popoutWindow');
        }
        else {
            this._popoutWindow.moveTo(this._initialWindowSize.left, this._initialWindowSize.top);
            this._popoutWindow.focus();
        }
    }
    /**
     * Callback when the new window is opened and the GoldenLayout instance
     * within it is initialised
     * @internal
     */
    onInitialised() {
        this._isInitialised = true;
        this.getGlInstance().on('popIn', () => this.popIn());
        this.emit('initialised');
    }
    /**
     * Invoked 50ms after the window unload event
     * @internal
     */
    _onClose() {
        setTimeout(() => this.emit('closed'), 50);
    }
}


/***/ }),

/***/ "./src/ts/controls/drag-proxy.ts":
/*!***************************************!*\
  !*** ./src/ts/controls/drag-proxy.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DragProxy": () => (/* binding */ DragProxy)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _items_stack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../items/stack */ "./src/ts/items/stack.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_jquery_legacy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/jquery-legacy */ "./src/ts/utils/jquery-legacy.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");






/**
 * This class creates a temporary container
 * for the component whilst it is being dragged
 * and handles drag events
 * @internal
 */
class DragProxy extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /**
     * @param x - The initial x position
     * @param y - The initial y position
     * @internal
     */
    constructor(x, y, _dragListener, _layoutManager, _componentItem, _originalParent) {
        super();
        this._dragListener = _dragListener;
        this._layoutManager = _layoutManager;
        this._componentItem = _componentItem;
        this._originalParent = _originalParent;
        this._area = null;
        this._lastValidArea = null;
        this._dragListener.on('drag', (offsetX, offsetY, event) => this.onDrag(offsetX, offsetY, event));
        this._dragListener.on('dragStop', () => this.onDrop());
        this.createDragProxyElements(x, y);
        if (this._componentItem.parent === null) {
            // Note that _contentItem will have dummy GroundItem as parent if initiated by a external drag source
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('DPC10097');
        }
        this._componentItemFocused = this._componentItem.focused;
        if (this._componentItemFocused) {
            this._componentItem.blur();
        }
        this._componentItem.parent.removeChild(this._componentItem, true);
        this.setDimensions();
        document.body.appendChild(this._element);
        this.determineMinMaxXY();
        if (this._layoutManager.layoutConfig.settings.constrainDragToContainer) {
            const constrainedPosition = this.getXYWithinMinMax(x, y);
            x = constrainedPosition.x;
            y = constrainedPosition.y;
        }
        this._layoutManager.calculateItemAreas();
        this.setDropPosition(x, y);
    }
    get element() { return this._element; }
    /** Create Stack-like structure to contain the dragged component */
    createDragProxyElements(initialX, initialY) {
        this._element = document.createElement('div');
        this._element.classList.add("lm_dragProxy" /* DragProxy */);
        const headerElement = document.createElement('div');
        headerElement.classList.add("lm_header" /* Header */);
        const tabsElement = document.createElement('div');
        tabsElement.classList.add("lm_tabs" /* Tabs */);
        const tabElement = document.createElement('div');
        tabElement.classList.add("lm_tab" /* Tab */);
        const titleElement = document.createElement('span');
        titleElement.classList.add("lm_title" /* Title */);
        tabElement.appendChild(titleElement);
        tabsElement.appendChild(tabElement);
        headerElement.appendChild(tabsElement);
        this._proxyContainerElement = document.createElement('div');
        this._proxyContainerElement.classList.add("lm_content" /* Content */);
        this._element.appendChild(headerElement);
        this._element.appendChild(this._proxyContainerElement);
        if (this._originalParent instanceof _items_stack__WEBPACK_IMPORTED_MODULE_2__.Stack && this._originalParent.headerShow) {
            this._sided = this._originalParent.headerLeftRightSided;
            this._element.classList.add('lm_' + this._originalParent.headerSide);
            if ([_utils_types__WEBPACK_IMPORTED_MODULE_3__.Side.right, _utils_types__WEBPACK_IMPORTED_MODULE_3__.Side.bottom].indexOf(this._originalParent.headerSide) >= 0) {
                this._proxyContainerElement.insertAdjacentElement('afterend', headerElement);
            }
        }
        this._element.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(initialX);
        this._element.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(initialY);
        tabElement.setAttribute('title', this._componentItem.title);
        titleElement.insertAdjacentText('afterbegin', this._componentItem.title);
        this._proxyContainerElement.appendChild(this._componentItem.element);
    }
    determineMinMaxXY() {
        const offset = (0,_utils_jquery_legacy__WEBPACK_IMPORTED_MODULE_5__.getJQueryOffset)(this._layoutManager.container);
        this._minX = offset.left;
        this._minY = offset.top;
        const { width: containerWidth, height: containerHeight } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.getElementWidthAndHeight)(this._layoutManager.container);
        this._maxX = containerWidth + this._minX;
        this._maxY = containerHeight + this._minY;
    }
    getXYWithinMinMax(x, y) {
        if (x <= this._minX) {
            x = Math.ceil(this._minX + 1);
        }
        else if (x >= this._maxX) {
            x = Math.floor(this._maxX - 1);
        }
        if (y <= this._minY) {
            y = Math.ceil(this._minY + 1);
        }
        else if (y >= this._maxY) {
            y = Math.floor(this._maxY - 1);
        }
        return { x, y };
    }
    /**
     * Callback on every mouseMove event during a drag. Determines if the drag is
     * still within the valid drag area and calls the layoutManager to highlight the
     * current drop area
     *
     * @param offsetX - The difference from the original x position in px
     * @param offsetY - The difference from the original y position in px
     * @param event -
     * @internal
     */
    onDrag(offsetX, offsetY, event) {
        const x = event.pageX;
        const y = event.pageY;
        if (!this._layoutManager.layoutConfig.settings.constrainDragToContainer) {
            this.setDropPosition(x, y);
        }
        else {
            const isWithinContainer = x > this._minX && x < this._maxX && y > this._minY && y < this._maxY;
            if (isWithinContainer) {
                this.setDropPosition(x, y);
            }
        }
        this._componentItem.drag();
    }
    /**
     * Sets the target position, highlighting the appropriate area
     *
     * @param x - The x position in px
     * @param y - The y position in px
     *
     * @internal
     */
    setDropPosition(x, y) {
        this._element.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(x);
        this._element.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(y);
        this._area = this._layoutManager.getArea(x, y);
        if (this._area !== null) {
            this._lastValidArea = this._area;
            this._area.contentItem.highlightDropZone(x, y, this._area);
        }
    }
    /**
     * Callback when the drag has finished. Determines the drop area
     * and adds the child to it
     * @internal
     */
    onDrop() {
        const dropTargetIndicator = this._layoutManager.dropTargetIndicator;
        if (dropTargetIndicator === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('DPOD30011');
        }
        else {
            dropTargetIndicator.hide();
        }
        this._componentItem.exitDragMode();
        /*
         * Valid drop area found
         */
        let droppedComponentItem;
        if (this._area !== null) {
            droppedComponentItem = this._componentItem;
            this._area.contentItem.onDrop(droppedComponentItem, this._area);
            /**
             * No valid drop area available at present, but one has been found before.
             * Use it
             */
        }
        else if (this._lastValidArea !== null) {
            droppedComponentItem = this._componentItem;
            const newParentContentItem = this._lastValidArea.contentItem;
            newParentContentItem.onDrop(droppedComponentItem, this._lastValidArea);
            /**
             * No valid drop area found during the duration of the drag. Return
             * content item to its original position if a original parent is provided.
             * (Which is not the case if the drag had been initiated by createDragSource)
             */
        }
        else if (this._originalParent) {
            droppedComponentItem = this._componentItem;
            this._originalParent.addChild(droppedComponentItem);
            /**
             * The drag didn't ultimately end up with adding the content item to
             * any container. In order to ensure clean up happens, destroy the
             * content item.
             */
        }
        else {
            this._componentItem.destroy(); // contentItem children are now destroyed as well
        }
        this._element.remove();
        this._layoutManager.emit('itemDropped', this._componentItem);
        if (this._componentItemFocused && droppedComponentItem !== undefined) {
            droppedComponentItem.focus();
        }
    }
    /**
     * Updates the Drag Proxy's dimensions
     * @internal
     */
    setDimensions() {
        const dimensions = this._layoutManager.layoutConfig.dimensions;
        if (dimensions === undefined) {
            throw new Error('DragProxy.setDimensions: dimensions undefined');
        }
        let width = dimensions.dragProxyWidth;
        let height = dimensions.dragProxyHeight;
        if (width === undefined || height === undefined) {
            throw new Error('DragProxy.setDimensions: width and/or height undefined');
        }
        const headerHeight = this._layoutManager.layoutConfig.header.show === false ? 0 : dimensions.headerHeight;
        this._element.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(width);
        this._element.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(height);
        width -= (this._sided ? headerHeight : 0);
        height -= (!this._sided ? headerHeight : 0);
        this._proxyContainerElement.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(width);
        this._proxyContainerElement.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(height);
        this._componentItem.enterDragMode(width, height);
        this._componentItem.show();
    }
}


/***/ }),

/***/ "./src/ts/controls/drag-source.ts":
/*!****************************************!*\
  !*** ./src/ts/controls/drag-source.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DragSource": () => (/* binding */ DragSource)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _items_component_item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../items/component-item */ "./src/ts/items/component-item.ts");
/* harmony import */ var _items_ground_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../items/ground-item */ "./src/ts/items/ground-item.ts");
/* harmony import */ var _utils_drag_listener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/drag-listener */ "./src/ts/utils/drag-listener.ts");
/* harmony import */ var _drag_proxy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./drag-proxy */ "./src/ts/controls/drag-proxy.ts");
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/resolved-config */ "./src/ts/config/resolved-config.ts");







/**
 * Allows for any DOM item to create a component on drag
 * start to be dragged into the Layout
 * @public
 */
class DragSource {
    /** @internal */
    constructor(
    /** @internal */
    _layoutManager, 
    /** @internal */
    _element, 
    /** @internal */
    _extraAllowableChildTargets, 
    /** @internal */
    _componentTypeOrFtn, 
    /** @internal */
    _componentState, 
    /** @internal */
    _title) {
        this._layoutManager = _layoutManager;
        this._element = _element;
        this._extraAllowableChildTargets = _extraAllowableChildTargets;
        this._componentTypeOrFtn = _componentTypeOrFtn;
        this._componentState = _componentState;
        this._title = _title;
        this._dragListener = null;
        this._dummyGroundContainer = document.createElement('div');
        const dummyRootItemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_0__.ResolvedRowOrColumnItemConfig.createDefault('row');
        this._dummyGroundContentItem = new _items_ground_item__WEBPACK_IMPORTED_MODULE_1__.GroundItem(this._layoutManager, dummyRootItemConfig, this._dummyGroundContainer);
        this.createDragListener();
    }
    /**
     * Disposes of the drag listeners so the drag source is not usable any more.
     * @internal
     */
    destroy() {
        this.removeDragListener();
    }
    /**
     * Called initially and after every drag
     * @internal
     */
    createDragListener() {
        this.removeDragListener();
        this._dragListener = new _utils_drag_listener__WEBPACK_IMPORTED_MODULE_2__.DragListener(this._element, this._extraAllowableChildTargets);
        this._dragListener.on('dragStart', (x, y) => this.onDragStart(x, y));
        this._dragListener.on('dragStop', () => this.onDragStop());
    }
    /**
     * Callback for the DragListener's dragStart event
     *
     * @param x - The x position of the mouse on dragStart
     * @param y - The x position of the mouse on dragStart
     * @internal
     */
    onDragStart(x, y) {
        let componentType;
        let componentState;
        let title;
        if (typeof this._componentTypeOrFtn === "function") {
            const dragSourceItemConfig = this._componentTypeOrFtn();
            componentType = dragSourceItemConfig.type;
            componentState = dragSourceItemConfig.state;
            title = dragSourceItemConfig.title;
        }
        else {
            componentType = this._componentTypeOrFtn;
            componentState = this._componentState;
            title = this._title;
        }
        // Create a dummy ContentItem only for drag purposes
        // All ContentItems (except for GroundItem) need a parent.  When dragging, the parent is not used.
        // Instead of allowing null parents (as Javascript version did), use a temporary dummy GroundItem parent and add ContentItem to that
        // If this does not work, need to create alternative GroundItem class
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        const resolvedItemConfig = _config_config__WEBPACK_IMPORTED_MODULE_3__.ComponentItemConfig.resolve(itemConfig);
        const componentItem = new _items_component_item__WEBPACK_IMPORTED_MODULE_4__.ComponentItem(this._layoutManager, resolvedItemConfig, this._dummyGroundContentItem);
        this._dummyGroundContentItem.contentItems.push(componentItem);
        if (this._dragListener === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedNullError('DSODSD66746');
        }
        else {
            const dragProxy = new _drag_proxy__WEBPACK_IMPORTED_MODULE_6__.DragProxy(x, y, this._dragListener, this._layoutManager, componentItem, this._dummyGroundContentItem);
            const transitionIndicator = this._layoutManager.transitionIndicator;
            if (transitionIndicator === null) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedNullError('DSODST66746');
            }
            else {
                transitionIndicator.transitionElements(this._element, dragProxy.element);
            }
        }
    }
    /** @internal */
    onDragStop() {
        // if (this._dummyGroundContentItem === undefined) {
        //     throw new UnexpectedUndefinedError('DSODSDRU08116');
        // } else {
        //     this._dummyGroundContentItem._$destroy
        //     this._dummyGroundContentItem = undefined;
        // }
        this.createDragListener();
    }
    /**
     * Called after every drag and when the drag source is being disposed of.
     * @internal
     */
    removeDragListener() {
        if (this._dragListener !== null) {
            this._dragListener.destroy();
            this._dragListener = null;
        }
    }
}


/***/ }),

/***/ "./src/ts/controls/drop-target-indicator.ts":
/*!**************************************************!*\
  !*** ./src/ts/controls/drop-target-indicator.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DropTargetIndicator": () => (/* binding */ DropTargetIndicator)
/* harmony export */ });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");

/** @internal */
class DropTargetIndicator {
    constructor() {
        // Maybe use container instead of Document Body?
        this._element = document.createElement('div');
        this._element.classList.add("lm_dropTargetIndicator" /* DropTargetIndicator */);
        const innerElement = document.createElement('div');
        innerElement.classList.add("lm_inner" /* Inner */);
        this._element.appendChild(innerElement);
        document.body.appendChild(this._element);
    }
    destroy() {
        this._element.remove();
    }
    highlightArea(area) {
        this._element.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(area.x1);
        this._element.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(area.y1);
        this._element.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(area.x2 - area.x1);
        this._element.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(area.y2 - area.y1);
        this._element.style.display = 'block';
    }
    hide() {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.setElementDisplayVisibility)(this._element, false);
    }
}


/***/ }),

/***/ "./src/ts/controls/header-button.ts":
/*!******************************************!*\
  !*** ./src/ts/controls/header-button.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HeaderButton": () => (/* binding */ HeaderButton)
/* harmony export */ });
/** @internal */
class HeaderButton {
    constructor(_header, label, cssClass, _pushEvent) {
        this._header = _header;
        this._pushEvent = _pushEvent;
        this._clickEventListener = (ev) => this.onClick(ev);
        this._touchStartEventListener = (ev) => this.onTouchStart(ev);
        this._element = document.createElement('div');
        this._element.classList.add(cssClass);
        this._element.title = label;
        this._header.on('destroy', () => this.destroy());
        this._element.addEventListener('click', this._clickEventListener, { passive: true });
        this._element.addEventListener('touchstart', this._touchStartEventListener, { passive: true });
        this._header.controlsContainerElement.appendChild(this._element);
    }
    get element() { return this._element; }
    destroy() {
        var _a;
        this._element.removeEventListener('click', this._clickEventListener);
        this._element.removeEventListener('touchstart', this._touchStartEventListener);
        (_a = this._element.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this._element);
    }
    onClick(ev) {
        this._pushEvent(ev);
    }
    onTouchStart(ev) {
        this._pushEvent(ev);
    }
}


/***/ }),

/***/ "./src/ts/controls/header.ts":
/*!***********************************!*\
  !*** ./src/ts/controls/header.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Header": () => (/* binding */ Header)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _header_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./header-button */ "./src/ts/controls/header-button.ts");
/* harmony import */ var _tabs_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tabs-container */ "./src/ts/controls/tabs-container.ts");






/**
 * This class represents a header above a Stack ContentItem.
 * @public
 */
class Header extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /** @internal */
    constructor(
    /** @internal */
    _layoutManager, 
    /** @internal */
    _parent, settings, 
    /** @internal */
    _configClosable, 
    /** @internal */
    _getActiveComponentItemEvent, closeEvent, 
    /** @internal */
    _popoutEvent, 
    /** @internal */
    _maximiseToggleEvent, 
    /** @internal */
    _clickEvent, 
    /** @internal */
    _touchStartEvent, 
    /** @internal */
    _componentRemoveEvent, 
    /** @internal */
    _componentFocusEvent, 
    /** @internal */
    _componentDragStartEvent) {
        super();
        this._layoutManager = _layoutManager;
        this._parent = _parent;
        this._configClosable = _configClosable;
        this._getActiveComponentItemEvent = _getActiveComponentItemEvent;
        this._popoutEvent = _popoutEvent;
        this._maximiseToggleEvent = _maximiseToggleEvent;
        this._clickEvent = _clickEvent;
        this._touchStartEvent = _touchStartEvent;
        this._componentRemoveEvent = _componentRemoveEvent;
        this._componentFocusEvent = _componentFocusEvent;
        this._componentDragStartEvent = _componentDragStartEvent;
        /** @internal */
        this._clickListener = (ev) => this.onClick(ev);
        /** @internal */
        this._touchStartListener = (ev) => this.onTouchStart(ev);
        /** @internal */
        this._rowColumnClosable = true;
        /** @internal */
        this._closeButton = null;
        /** @internal */
        this._popoutButton = null;
        this._tabsContainer = new _tabs_container__WEBPACK_IMPORTED_MODULE_1__.TabsContainer(this._layoutManager, (item) => this.handleTabInitiatedComponentRemoveEvent(item), (item) => this.handleTabInitiatedComponentFocusEvent(item), (x, y, dragListener, item) => this.handleTabInitiatedDragStartEvent(x, y, dragListener, item), () => this.processTabDropdownActiveChanged());
        this._show = settings.show;
        this._popoutEnabled = settings.popoutEnabled;
        this._popoutLabel = settings.popoutLabel;
        this._maximiseEnabled = settings.maximiseEnabled;
        this._maximiseLabel = settings.maximiseLabel;
        this._minimiseEnabled = settings.minimiseEnabled;
        this._minimiseLabel = settings.minimiseLabel;
        this._closeEnabled = settings.closeEnabled;
        this._closeLabel = settings.closeLabel;
        this._tabDropdownEnabled = settings.tabDropdownEnabled;
        this._tabDropdownLabel = settings.tabDropdownLabel;
        this.setSide(settings.side);
        this._canRemoveComponent = this._configClosable;
        this._element = document.createElement('section');
        this._element.classList.add("lm_header" /* Header */);
        this._controlsContainerElement = document.createElement('section');
        this._controlsContainerElement.classList.add("lm_controls" /* Controls */);
        this._element.appendChild(this._tabsContainer.element);
        this._element.appendChild(this._controlsContainerElement);
        this._element.appendChild(this._tabsContainer.dropdownElement);
        this._element.addEventListener('click', this._clickListener, { passive: true });
        this._element.addEventListener('touchstart', this._touchStartListener, { passive: true });
        this._documentMouseUpListener = () => this._tabsContainer.hideAdditionalTabsDropdown();
        globalThis.document.addEventListener('mouseup', this._documentMouseUpListener, { passive: true });
        this._tabControlOffset = this._layoutManager.layoutConfig.settings.tabControlOffset;
        if (this._tabDropdownEnabled) {
            this._tabDropdownButton = new _header_button__WEBPACK_IMPORTED_MODULE_2__.HeaderButton(this, this._tabDropdownLabel, "lm_tabdropdown" /* TabDropdown */, () => this._tabsContainer.showAdditionalTabsDropdown());
        }
        if (this._popoutEnabled) {
            this._popoutButton = new _header_button__WEBPACK_IMPORTED_MODULE_2__.HeaderButton(this, this._popoutLabel, "lm_popout" /* Popout */, () => this.handleButtonPopoutEvent());
        }
        /**
         * Maximise control - set the component to the full size of the layout
         */
        if (this._maximiseEnabled) {
            this._maximiseButton = new _header_button__WEBPACK_IMPORTED_MODULE_2__.HeaderButton(this, this._maximiseLabel, "lm_maximise" /* Maximise */, (ev) => this.handleButtonMaximiseToggleEvent(ev));
        }
        /**
         * Close button
         */
        if (this._configClosable) {
            // this._closeButton = new _header_button__WEBPACK_IMPORTED_MODULE_2__.HeaderButton(this, this._closeLabel, "lm_close" /* Close */, () => closeEvent());
        }
        this.processTabDropdownActiveChanged();
    }
    // /** @internal */
    // private _activeComponentItem: ComponentItem | null = null; // only used to identify active tab
    /** @internal */
    get show() { return this._show; }
    /** @internal */
    get side() { return this._side; }
    /** @internal */
    get leftRightSided() { return this._leftRightSided; }
    get layoutManager() { return this._layoutManager; }
    get parent() { return this._parent; }
    get tabs() { return this._tabsContainer.tabs; }
    get lastVisibleTabIndex() { return this._tabsContainer.lastVisibleTabIndex; }
    /**
     * @deprecated use {@link (Stack:class).getActiveComponentItem} */
    get activeContentItem() {
        const activeComponentItem = this._getActiveComponentItemEvent();
        if (activeComponentItem === undefined) {
            return null;
        }
        else {
            return activeComponentItem;
        }
    }
    get element() { return this._element; }
    /** @deprecated use {@link (Header:class).tabsContainerElement} */
    get tabsContainer() { return this._tabsContainer.element; }
    get tabsContainerElement() { return this._tabsContainer.element; }
    get controlsContainerElement() { return this._controlsContainerElement; }
    /** @deprecated use {@link (Header:class).controlsContainerElement} */
    get controlsContainer() { return this._controlsContainerElement; }
    /**
     * Destroys the entire header
     * @internal
     */
    destroy() {
        this.emit('destroy');
        this._popoutEvent = undefined;
        this._maximiseToggleEvent = undefined;
        this._clickEvent = undefined;
        this._touchStartEvent = undefined;
        this._componentRemoveEvent = undefined;
        this._componentFocusEvent = undefined;
        this._componentDragStartEvent = undefined;
        this._tabsContainer.destroy();
        globalThis.document.removeEventListener('mouseup', this._documentMouseUpListener);
        this._element.remove();
    }
    /**
     * Creates a new tab and associates it with a contentItem
     * @param index - The position of the tab
     * @internal
     */
    createTab(componentItem, index) {
        this._tabsContainer.createTab(componentItem, index);
    }
    /**
     * Finds a tab based on the contentItem its associated with and removes it.
     * Cannot remove tab if it has the active ComponentItem
     * @internal
     */
    removeTab(componentItem) {
        this._tabsContainer.removeTab(componentItem);
    }
    /** @internal */
    processActiveComponentChanged(newActiveComponentItem) {
        this._tabsContainer.processActiveComponentChanged(newActiveComponentItem);
        this.updateTabSizes();
    }
    /** @internal */
    setSide(value) {
        this._side = value;
        this._leftRightSided = [_utils_types__WEBPACK_IMPORTED_MODULE_3__.Side.right, _utils_types__WEBPACK_IMPORTED_MODULE_3__.Side.left].includes(this._side);
    }
    /**
     * Programmatically set closability.
     * @param value - Whether to enable/disable closability.
     * @returns Whether the action was successful
     * @internal
     */
    setRowColumnClosable(value) {
        this._rowColumnClosable = value;
        this.updateClosability();
    }
    /**
     * Updates the header's closability. If a stack/header is able
     * to close, but has a non closable component added to it, the stack is no
     * longer closable until all components are closable.
     * @internal
     */
    updateClosability() {
        let isClosable;
        if (!this._configClosable) {
            isClosable = false;
        }
        else {
            if (!this._rowColumnClosable) {
                isClosable = false;
            }
            else {
                isClosable = true;
                const len = this.tabs.length;
                for (let i = 0; i < len; i++) {
                    const tab = this._tabsContainer.tabs[i];
                    const item = tab.componentItem;
                    if (!item.isClosable) {
                        isClosable = false;
                        break;
                    }
                }
            }
        }
        if (this._closeButton !== null) {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementDisplayVisibility)(this._closeButton.element, isClosable);
        }
        if (this._popoutButton !== null) {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementDisplayVisibility)(this._popoutButton.element, isClosable);
        }
        this._canRemoveComponent = isClosable || this._tabsContainer.tabCount > 1;
    }
    /** @internal */
    applyFocusedValue(value) {
        if (value) {
            this._element.classList.add("lm_focused" /* Focused */);
        }
        else {
            this._element.classList.remove("lm_focused" /* Focused */);
        }
    }
    /** @internal */
    processMaximised() {
        if (this._maximiseButton === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HPMAX16997');
        }
        else {
            this._maximiseButton.element.setAttribute('title', this._minimiseLabel);
        }
    }
    /** @internal */
    processMinimised() {
        if (this._maximiseButton === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HPMIN16997');
        }
        else {
            this._maximiseButton.element.setAttribute('title', this._maximiseLabel);
        }
    }
    /**
     * Pushes the tabs to the tab dropdown if the available space is not sufficient
     * @internal
     */
    updateTabSizes() {
        if (this._tabsContainer.tabCount > 0) {
            const headerHeight = this._show ? this._layoutManager.layoutConfig.dimensions.headerHeight : 0;
            if (this._leftRightSided) {
                this._element.style.height = '';
                this._element.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(headerHeight);
            }
            else {
                this._element.style.width = '';
                this._element.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(headerHeight);
            }
            let availableWidth;
            if (this._leftRightSided) {
                availableWidth = this._element.offsetHeight - this._controlsContainerElement.offsetHeight - this._tabControlOffset;
            }
            else {
                availableWidth = this._element.offsetWidth - this._controlsContainerElement.offsetWidth - this._tabControlOffset;
            }
            this._tabsContainer.updateTabSizes(availableWidth, this._getActiveComponentItemEvent());
        }
    }
    /** @internal */
    handleTabInitiatedComponentRemoveEvent(componentItem) {
        if (this._canRemoveComponent) {
            if (this._componentRemoveEvent === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HHTCE22294');
            }
            else {
                this._componentRemoveEvent(componentItem);
            }
        }
    }
    /** @internal */
    handleTabInitiatedComponentFocusEvent(componentItem) {
        if (this._componentFocusEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HHTAE22294');
        }
        else {
            this._componentFocusEvent(componentItem);
        }
    }
    /** @internal */
    handleTabInitiatedDragStartEvent(x, y, dragListener, componentItem) {
        if (!this._canRemoveComponent) {
            dragListener.cancelDrag();
        }
        else {
            if (this._componentDragStartEvent === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HHTDSE22294');
            }
            else {
                this._componentDragStartEvent(x, y, dragListener, componentItem);
            }
        }
    }
    /** @internal */
    processTabDropdownActiveChanged() {
        if (this._tabDropdownButton !== undefined) {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementDisplayVisibility)(this._tabDropdownButton.element, this._tabsContainer.dropdownActive);
        }
    }
    /** @internal */
    handleButtonPopoutEvent() {
        if (this._layoutManager.layoutConfig.settings.popoutWholeStack) {
            if (this._popoutEvent === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HHBPOE17834');
            }
            else {
                this._popoutEvent();
            }
        }
        else {
            const activeComponentItem = this._getActiveComponentItemEvent();
            if (activeComponentItem) {
                activeComponentItem.popout();
            }
            // else: if the stack is empty there won't be an active item (and nothing to popout)
        }
    }
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    handleButtonMaximiseToggleEvent(ev) {
        if (this._maximiseToggleEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HHBMTE16834');
        }
        else {
            this._maximiseToggleEvent();
        }
    }
    /**
     * Invoked when the header's background is clicked (not it's tabs or controls)
     * @internal
     */
    onClick(event) {
        if (event.target === this._element) {
            this.notifyClick(event);
        }
    }
    /**
     * Invoked when the header's background is touched (not it's tabs or controls)
     * @internal
     */
    onTouchStart(event) {
        if (event.target === this._element) {
            this.notifyTouchStart(event);
        }
    }
    /** @internal */
    notifyClick(ev) {
        if (this._clickEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HNHC46834');
        }
        else {
            this._clickEvent(ev);
        }
    }
    /** @internal */
    notifyTouchStart(ev) {
        if (this._touchStartEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HNHTS46834');
        }
        else {
            this._touchStartEvent(ev);
        }
    }
}


/***/ }),

/***/ "./src/ts/controls/splitter.ts":
/*!*************************************!*\
  !*** ./src/ts/controls/splitter.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Splitter": () => (/* binding */ Splitter)
/* harmony export */ });
/* harmony import */ var _utils_drag_listener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/drag-listener */ "./src/ts/utils/drag-listener.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");


/** @internal */
class Splitter {
    constructor(_isVertical, _size, grabSize) {
        this._isVertical = _isVertical;
        this._size = _size;
        this._grabSize = grabSize < this._size ? this._size : grabSize;
        this._element = document.createElement('div');
        this._element.classList.add("lm_splitter" /* Splitter */);
        const dragHandleElement = document.createElement('div');
        dragHandleElement.classList.add("lm_drag_handle" /* DragHandle */);
        const handleExcessSize = this._grabSize - this._size;
        const handleExcessPos = handleExcessSize / 2;
        if (this._isVertical) {
            dragHandleElement.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(-handleExcessPos);
            dragHandleElement.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(this._size + handleExcessSize);
            this._element.classList.add("lm_vertical" /* Vertical */);
            this._element.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(this._size);
        }
        else {
            dragHandleElement.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(-handleExcessPos);
            dragHandleElement.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(this._size + handleExcessSize);
            this._element.classList.add("lm_horizontal" /* Horizontal */);
            this._element.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(this._size);
        }
        this._element.appendChild(dragHandleElement);
        this._dragListener = new _utils_drag_listener__WEBPACK_IMPORTED_MODULE_1__.DragListener(this._element, [dragHandleElement]);
    }
    get element() { return this._element; }
    destroy() {
        this._element.remove();
    }
    on(eventName, callback) {
        this._dragListener.on(eventName, callback);
    }
}


/***/ }),

/***/ "./src/ts/controls/tab.ts":
/*!********************************!*\
  !*** ./src/ts/controls/tab.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tab": () => (/* binding */ Tab)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_drag_listener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/drag-listener */ "./src/ts/utils/drag-listener.ts");


/**
 * Represents an individual tab within a Stack's header
 * @public
 */
class Tab {
    /** @internal */
    constructor(
    /** @internal */
    _layoutManager, 
    /** @internal */
    _componentItem, 
    /** @internal */
    _closeEvent, 
    /** @internal */
    _focusEvent, 
    /** @internal */
    _dragStartEvent) {
        var _a;
        this._layoutManager = _layoutManager;
        this._componentItem = _componentItem;
        this._closeEvent = _closeEvent;
        this._focusEvent = _focusEvent;
        this._dragStartEvent = _dragStartEvent;
        /** @internal */
        this._isActive = false;
        /** @internal */
        this._tabClickListener = (ev) => this.onTabClickDown(ev);
        /** @internal */
        this._tabTouchStartListener = (ev) => this.onTabTouchStart(ev);
        /** @internal */
        this._closeClickListener = () => this.onCloseClick();
        /** @internal */
        this._closeTouchStartListener = () => this.onCloseTouchStart();
        // /** @internal */
        // private readonly _closeMouseDownListener = () => this.onCloseMousedown();
        /** @internal */
        this._dragStartListener = (x, y) => this.onDragStart(x, y);
        /** @internal */
        this._contentItemDestroyListener = () => this.onContentItemDestroy();
        /** @internal */
        this._tabTitleChangedListener = (title) => this.setTitle(title);
        this._element = document.createElement('div');
        this._element.classList.add("lm_tab" /* Tab */);
        this._titleElement = document.createElement('span');
        this._titleElement.classList.add("lm_title" /* Title */);
        this._closeElement = document.createElement('div');
        this._closeElement.classList.add("lm_close_tab" /* CloseTab */);
        this._element.appendChild(this._titleElement);
        this._element.appendChild(this._closeElement);
        if (_componentItem.isClosable) {
            this._closeElement.style.display = '';
        }
        else {
            this._closeElement.style.display = 'none';
        }
        this.setTitle(_componentItem.title);
        this._componentItem.on('titleChanged', this._tabTitleChangedListener);
        const reorderEnabled = (_a = _componentItem.reorderEnabled) !== null && _a !== void 0 ? _a : this._layoutManager.layoutConfig.settings.reorderEnabled;
        if (reorderEnabled) {
            this.enableReorder();
        }
        this._element.addEventListener('click', this._tabClickListener, { passive: true });
        this._element.addEventListener('touchstart', this._tabTouchStartListener, { passive: true });
        if (this._componentItem.isClosable) {
            this._closeElement.addEventListener('click', this._closeClickListener, { passive: true });
            this._closeElement.addEventListener('touchstart', this._closeTouchStartListener, { passive: true });
            // this._closeElement.addEventListener('mousedown', this._closeMouseDownListener, { passive: true });
        }
        else {
            this._closeElement.remove();
            this._closeElement = undefined;
        }
        this._componentItem.setTab(this);
        this._layoutManager.emit('tabCreated', this);
    }
    get isActive() { return this._isActive; }
    // get header(): Header { return this._header; }
    get componentItem() { return this._componentItem; }
    /** @deprecated use {@link (Tab:class).componentItem} */
    get contentItem() { return this._componentItem; }
    get element() { return this._element; }
    get titleElement() { return this._titleElement; }
    get closeElement() { return this._closeElement; }
    get reorderEnabled() { return this._dragListener !== undefined; }
    set reorderEnabled(value) {
        if (value !== this.reorderEnabled) {
            if (value) {
                this.enableReorder();
            }
            else {
                this.disableReorder();
            }
        }
    }
    /**
     * Sets the tab's title to the provided string and sets
     * its title attribute to a pure text representation (without
     * html tags) of the same string.
     */
    setTitle(title) {
        this._titleElement.innerText = title;
        this._element.title = title;
    }
    /**
     * Sets this tab's active state. To programmatically
     * switch tabs, use Stack.setActiveComponentItem( item ) instead.
     */
    setActive(isActive) {
        if (isActive === this._isActive) {
            return;
        }
        this._isActive = isActive;
        if (isActive) {
            this._element.classList.add("lm_active" /* Active */);
        }
        else {
            this._element.classList.remove("lm_active" /* Active */);
        }
    }
    /**
     * Destroys the tab
     * @internal
     */
    destroy() {
        var _a, _b;
        this._closeEvent = undefined;
        this._focusEvent = undefined;
        this._dragStartEvent = undefined;
        this._element.removeEventListener('click', this._tabClickListener);
        this._element.removeEventListener('touchstart', this._tabTouchStartListener);
        (_a = this._closeElement) === null || _a === void 0 ? void 0 : _a.removeEventListener('click', this._closeClickListener);
        (_b = this._closeElement) === null || _b === void 0 ? void 0 : _b.removeEventListener('touchstart', this._closeTouchStartListener);
        // this._closeElement?.removeEventListener('mousedown', this._closeMouseDownListener);
        this._componentItem.off('titleChanged', this._tabTitleChangedListener);
        if (this.reorderEnabled) {
            this.disableReorder();
        }
        this._element.remove();
    }
    /** @internal */
    setBlurred() {
        this._element.classList.remove("lm_focused" /* Focused */);
        this._titleElement.classList.remove("lm_focused" /* Focused */);
    }
    /** @internal */
    setFocused() {
        this._element.classList.add("lm_focused" /* Focused */);
        this._titleElement.classList.add("lm_focused" /* Focused */);
    }
    /**
     * Callback for the DragListener
     * @param x - The tabs absolute x position
     * @param y - The tabs absolute y position
     * @internal
     */
    onDragStart(x, y) {
        if (this._dragListener === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_0__.UnexpectedUndefinedError('TODSDLU10093');
        }
        else {
            if (this._dragStartEvent === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_0__.UnexpectedUndefinedError('TODS23309');
            }
            else {
                this._dragStartEvent(x, y, this._dragListener, this.componentItem);
            }
        }
    }
    /** @internal */
    onContentItemDestroy() {
        if (this._dragListener !== undefined) {
            this._dragListener.destroy();
            this._dragListener = undefined;
        }
    }
    /**
     * Callback when the tab is clicked
     * @internal
     */
    onTabClickDown(event) {
        const target = event.target;
        if (target === this._element || target === this._titleElement) {
            // left mouse button
            if (event.button === 0) {
                // event.stopPropagation();
                this.notifyFocus();
                // middle mouse button
            }
            else if (event.button === 1 && this._componentItem.isClosable) {
                // event.stopPropagation();
                this.notifyClose();
            }
        }
    }
    /** @internal */
    onTabTouchStart(event) {
        if (event.target === this._element) {
            this.notifyFocus();
        }
    }
    /**
     * Callback when the tab's close button is clicked
     * @internal
     */
    onCloseClick() {
        this.notifyClose();
    }
    /** @internal */
    onCloseTouchStart() {
        this.notifyClose();
    }
    /**
     * Callback to capture tab close button mousedown
     * to prevent tab from activating.
     * @internal
     */
    // private onCloseMousedown(): void {
    //     // event.stopPropagation();
    // }
    /** @internal */
    notifyClose() {
        if (this._closeEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_0__.UnexpectedUndefinedError('TNC15007');
        }
        else {
            this._closeEvent(this._componentItem);
        }
    }
    /** @internal */
    notifyFocus() {
        if (this._focusEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_0__.UnexpectedUndefinedError('TNA15007');
        }
        else {
            this._focusEvent(this._componentItem);
        }
    }
    /** @internal */
    enableReorder() {
        this._dragListener = new _utils_drag_listener__WEBPACK_IMPORTED_MODULE_1__.DragListener(this._element, [this._titleElement]);
        this._dragListener.on('dragStart', this._dragStartListener);
        this._componentItem.on('destroy', this._contentItemDestroyListener);
    }
    /** @internal */
    disableReorder() {
        if (this._dragListener === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_0__.UnexpectedUndefinedError('TDR87745');
        }
        else {
            this._componentItem.off('destroy', this._contentItemDestroyListener);
            this._dragListener.off('dragStart', this._dragStartListener);
            this._dragListener = undefined;
        }
    }
}


/***/ }),

/***/ "./src/ts/controls/tabs-container.ts":
/*!*******************************************!*\
  !*** ./src/ts/controls/tabs-container.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TabsContainer": () => (/* binding */ TabsContainer)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _tab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tab */ "./src/ts/controls/tab.ts");



/** @internal */
class TabsContainer {
    constructor(_layoutManager, _componentRemoveEvent, _componentFocusEvent, _componentDragStartEvent, _dropdownActiveChangedEvent) {
        this._layoutManager = _layoutManager;
        this._componentRemoveEvent = _componentRemoveEvent;
        this._componentFocusEvent = _componentFocusEvent;
        this._componentDragStartEvent = _componentDragStartEvent;
        this._dropdownActiveChangedEvent = _dropdownActiveChangedEvent;
        // There is one tab per ComponentItem in stack.  However they may not be ordered the same
        this._tabs = [];
        this._lastVisibleTabIndex = -1;
        this._dropdownActive = false;
        this._element = document.createElement('section');
        this._element.classList.add("lm_tabs" /* Tabs */);
        this._dropdownElement = document.createElement('section');
        this._dropdownElement.classList.add("lm_tabdropdown_list" /* TabDropdownList */);
        this._dropdownElement.style.display = 'none';
    }
    get tabs() { return this._tabs; }
    get tabCount() { return this._tabs.length; }
    get lastVisibleTabIndex() { return this._lastVisibleTabIndex; }
    get element() { return this._element; }
    get dropdownElement() { return this._dropdownElement; }
    get dropdownActive() { return this._dropdownActive; }
    destroy() {
        for (let i = 0; i < this._tabs.length; i++) {
            this._tabs[i].destroy();
        }
    }
    /**
     * Creates a new tab and associates it with a contentItem
     * @param index - The position of the tab
     */
    createTab(componentItem, index) {
        //If there's already a tab relating to the
        //content item, don't do anything
        for (let i = 0; i < this._tabs.length; i++) {
            if (this._tabs[i].componentItem === componentItem) {
                return;
            }
        }
        const tab = new _tab__WEBPACK_IMPORTED_MODULE_0__.Tab(this._layoutManager, componentItem, (item) => this.handleTabCloseEvent(item), (item) => this.handleTabFocusEvent(item), (x, y, dragListener, item) => this.handleTabDragStartEvent(x, y, dragListener, item));
        if (this._tabs.length === 0) {
            this._tabs.push(tab);
            this._element.appendChild(tab.element);
        }
        else {
            if (index === undefined) {
                index = this._tabs.length;
            }
            if (index > 0) {
                this._tabs[index - 1].element.insertAdjacentElement('afterend', tab.element);
            }
            else {
                this._tabs[0].element.insertAdjacentElement('beforebegin', tab.element);
            }
            this._tabs.splice(index, 0, tab);
        }
    }
    removeTab(componentItem) {
        // componentItem cannot be ActiveComponentItem
        for (let i = 0; i < this._tabs.length; i++) {
            if (this._tabs[i].componentItem === componentItem) {
                const tab = this._tabs[i];
                tab.destroy();
                this._tabs.splice(i, 1);
                return;
            }
        }
        throw new Error('contentItem is not controlled by this header');
    }
    processActiveComponentChanged(newActiveComponentItem) {
        let activeIndex = -1;
        for (let i = 0; i < this._tabs.length; i++) {
            const isActive = this._tabs[i].componentItem === newActiveComponentItem;
            this._tabs[i].setActive(isActive);
            if (isActive) {
                activeIndex = i;
            }
        }
        if (activeIndex < 0) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.AssertError('HSACI56632');
        }
        else {
            if (this._layoutManager.layoutConfig.settings.reorderOnTabMenuClick) {
                /**
                 * If the tab selected was in the dropdown, move everything down one to make way for this one to be the first.
                 * This will make sure the most used tabs stay visible.
                 */
                if (this._lastVisibleTabIndex !== -1 && activeIndex > this._lastVisibleTabIndex) {
                    const activeTab = this._tabs[activeIndex];
                    for (let j = activeIndex; j > 0; j--) {
                        this._tabs[j] = this._tabs[j - 1];
                    }
                    this._tabs[0] = activeTab;
                    // updateTabSizes will always be called after this and it will reposition tab elements
                }
            }
        }
    }
    /**
     * Pushes the tabs to the tab dropdown if the available space is not sufficient
     */
    updateTabSizes(availableWidth, activeComponentItem) {
        let dropDownActive = false;
        const success = this.tryUpdateTabSizes(dropDownActive, availableWidth, activeComponentItem);
        if (!success) {
            dropDownActive = true;
            // this will always succeed
            this.tryUpdateTabSizes(dropDownActive, availableWidth, activeComponentItem);
        }
        if (dropDownActive !== this._dropdownActive) {
            this._dropdownActive = dropDownActive;
            this._dropdownActiveChangedEvent();
        }
    }
    tryUpdateTabSizes(dropdownActive, availableWidth, activeComponentItem) {
        if (this._tabs.length > 0) {
            if (activeComponentItem === undefined) {
                throw new Error('non-empty tabs must have active component item');
            }
            let cumulativeTabWidth = 0;
            let tabOverlapAllowanceExceeded = false;
            const tabOverlapAllowance = this._layoutManager.layoutConfig.settings.tabOverlapAllowance;
            const activeIndex = this._tabs.indexOf(activeComponentItem.tab);
            const activeTab = this._tabs[activeIndex];
            this._lastVisibleTabIndex = -1;
            for (let i = 0; i < this._tabs.length; i++) {
                const tabElement = this._tabs[i].element;
                //Put the tab in the tabContainer so its true width can be checked
                if (tabElement.parentElement !== this._element) {
                    this._element.appendChild(tabElement);
                }
                const tabMarginRightPixels = getComputedStyle(activeTab.element).marginRight;
                const tabMarginRight = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.pixelsToNumber)(tabMarginRightPixels);
                const tabWidth = tabElement.offsetWidth + tabMarginRight;
                cumulativeTabWidth += tabWidth;
                //Include the active tab's width if it isn't already
                //This is to ensure there is room to show the active tab
                let visibleTabWidth = 0;
                if (activeIndex <= i) {
                    visibleTabWidth = cumulativeTabWidth;
                }
                else {
                    const activeTabMarginRightPixels = getComputedStyle(activeTab.element).marginRight;
                    const activeTabMarginRight = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.pixelsToNumber)(activeTabMarginRightPixels);
                    visibleTabWidth = cumulativeTabWidth + activeTab.element.offsetWidth + activeTabMarginRight;
                }
                // If the tabs won't fit, check the overlap allowance.
                if (visibleTabWidth > availableWidth) {
                    //Once allowance is exceeded, all remaining tabs go to menu.
                    if (!tabOverlapAllowanceExceeded) {
                        //No overlap for first tab or active tab
                        //Overlap spreads among non-active, non-first tabs
                        let overlap;
                        if (activeIndex > 0 && activeIndex <= i) {
                            overlap = (visibleTabWidth - availableWidth) / (i - 1);
                        }
                        else {
                            overlap = (visibleTabWidth - availableWidth) / i;
                        }
                        //Check overlap against allowance.
                        if (overlap < tabOverlapAllowance) {
                            for (let j = 0; j <= i; j++) {
                                const marginLeft = (j !== activeIndex && j !== 0) ? '-' + (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.numberToPixels)(overlap) : '';
                                this._tabs[j].element.style.zIndex = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.numberToPixels)(i - j);
                                this._tabs[j].element.style.marginLeft = marginLeft;
                            }
                            this._lastVisibleTabIndex = i;
                            if (tabElement.parentElement !== this._element) {
                                this._element.appendChild(tabElement);
                            }
                        }
                        else {
                            tabOverlapAllowanceExceeded = true;
                        }
                    }
                    else if (i === activeIndex) {
                        //Active tab should show even if allowance exceeded. (We left room.)
                        tabElement.style.zIndex = 'auto';
                        tabElement.style.marginLeft = '';
                        if (tabElement.parentElement !== this._element) {
                            this._element.appendChild(tabElement);
                        }
                    }
                    if (tabOverlapAllowanceExceeded && i !== activeIndex) {
                        if (dropdownActive) {
                            //Tab menu already shown, so we just add to it.
                            tabElement.style.zIndex = 'auto';
                            tabElement.style.marginLeft = '';
                            if (tabElement.parentElement !== this._dropdownElement) {
                                this._dropdownElement.appendChild(tabElement);
                            }
                        }
                        else {
                            //We now know the tab menu must be shown, so we have to recalculate everything.
                            return false;
                        }
                    }
                }
                else {
                    this._lastVisibleTabIndex = i;
                    tabElement.style.zIndex = 'auto';
                    tabElement.style.marginLeft = '';
                    if (tabElement.parentElement !== this._element) {
                        this._element.appendChild(tabElement);
                    }
                }
            }
        }
        return true;
    }
    /**
     * Shows drop down for additional tabs when there are too many to display.
     */
    showAdditionalTabsDropdown() {
        this._dropdownElement.style.display = '';
    }
    /**
     * Hides drop down for additional tabs when there are too many to display.
     */
    hideAdditionalTabsDropdown() {
        this._dropdownElement.style.display = 'none';
    }
    handleTabCloseEvent(componentItem) {
        this._componentRemoveEvent(componentItem);
    }
    handleTabFocusEvent(componentItem) {
        this._componentFocusEvent(componentItem);
    }
    handleTabDragStartEvent(x, y, dragListener, componentItem) {
        this._componentDragStartEvent(x, y, dragListener, componentItem);
    }
}


/***/ }),

/***/ "./src/ts/controls/transition-indicator.ts":
/*!*************************************************!*\
  !*** ./src/ts/controls/transition-indicator.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TransitionIndicator": () => (/* binding */ TransitionIndicator)
/* harmony export */ });
/** @internal @deprecated To be removed */
class TransitionIndicator {
    constructor() {
        this._element = document.createElement('div');
        this._element.classList.add("lm_transition_indicator" /* TransitionIndicator */);
        document.body.appendChild(this._element);
        this._toElement = null;
        this._fromDimensions = null;
        this._totalAnimationDuration = 200;
        this._animationStartTime = null;
    }
    destroy() {
        this._element.remove();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    transitionElements(fromElement, toElement) {
        /**
         * TODO - This is not quite as cool as expected. Review.
         */
        return;
        // this._toElement = toElement;
        // this._animationStartTime = now();
        // this._fromDimensions = this._measure(fromElement);
        // this._fromDimensions.opacity = 0.8;
        // this._element.show().css(this._fromDimensions);
        // animFrame(fnBind(this._nextAnimationFrame, this));
    }
    nextAnimationFrame() {
        // if (this._toElement === null || this._fromDimensions === null || this._animationStartTime === null) {
        //     throw new UnexpectedNullError('TINAFTD97115');
        // } else {
        //     const toDimensions = this.measure(this._toElement);
        //     const animationProgress = (now() - this._animationStartTime) / this._totalAnimationDuration;
        //     const currentFrameStyles = {};
        //     const cssProperty;
        //     if (animationProgress >= 1) {
        //         this._element.style.display = 'none';
        //         return;
        //     }
        //     toDimensions.opacity = 0;
        //     for (const cssProperty in this._fromDimensions) {
        //         currentFrameStyles[cssProperty] = this._fromDimensions[cssProperty] +
        //             (toDimensions[cssProperty] - this._fromDimensions[cssProperty]) *
        //             animationProgress;
        //     }
        //     this._element.css(currentFrameStyles);
        //     animFrame(fnBind(this._nextAnimationFrame, this));
        // }
    }
    measure(element) {
        const rect = element.getBoundingClientRect();
        return {
            left: rect.left,
            top: rect.top,
            width: element.offsetWidth,
            height: element.offsetHeight,
        };
    }
}


/***/ }),

/***/ "./src/ts/errors/external-error.ts":
/*!*****************************************!*\
  !*** ./src/ts/errors/external-error.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExternalError": () => (/* binding */ ExternalError),
/* harmony export */   "ConfigurationError": () => (/* binding */ ConfigurationError),
/* harmony export */   "PopoutBlockedError": () => (/* binding */ PopoutBlockedError),
/* harmony export */   "ApiError": () => (/* binding */ ApiError),
/* harmony export */   "BindError": () => (/* binding */ BindError)
/* harmony export */ });
/** @public */
class ExternalError extends Error {
    /** @internal */
    constructor(type, message) {
        super(message);
        this.type = type;
    }
}
/** @public */
class ConfigurationError extends ExternalError {
    /** @internal */
    constructor(message, node) {
        super('Configuration', message);
        this.node = node;
    }
}
/** @public */
class PopoutBlockedError extends ExternalError {
    /** @internal */
    constructor(message) {
        super('PopoutBlocked', message);
    }
}
/** @public */
class ApiError extends ExternalError {
    /** @internal */
    constructor(message) {
        super('API', message);
    }
}
/** @public */
class BindError extends ExternalError {
    /** @internal */
    constructor(message) {
        super('Bind', message);
    }
}


/***/ }),

/***/ "./src/ts/errors/internal-error.ts":
/*!*****************************************!*\
  !*** ./src/ts/errors/internal-error.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssertError": () => (/* binding */ AssertError),
/* harmony export */   "UnreachableCaseError": () => (/* binding */ UnreachableCaseError),
/* harmony export */   "UnexpectedNullError": () => (/* binding */ UnexpectedNullError),
/* harmony export */   "UnexpectedUndefinedError": () => (/* binding */ UnexpectedUndefinedError)
/* harmony export */ });
/** @internal */
class InternalError extends Error {
    constructor(type, code, message) {
        super(`${type}: ${code}${message === undefined ? '' : ': ' + message}`);
    }
}
/** @internal */
class AssertError extends InternalError {
    constructor(code, message) {
        super('Assert', code, message);
    }
}
/** @internal */
class UnreachableCaseError extends InternalError {
    constructor(code, variableValue, message) {
        super('UnreachableCase', code, `${variableValue}${message === undefined ? '' : ': ' + message}`);
    }
}
/** @internal */
class UnexpectedNullError extends InternalError {
    constructor(code, message) {
        super('UnexpectedNull', code, message);
    }
}
/** @internal */
class UnexpectedUndefinedError extends InternalError {
    constructor(code, message) {
        super('UnexpectedUndefined', code, message);
    }
}


/***/ }),

/***/ "./src/ts/golden-layout.ts":
/*!*********************************!*\
  !*** ./src/ts/golden-layout.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GoldenLayout": () => (/* binding */ GoldenLayout)
/* harmony export */ });
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _errors_external_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/i18n-strings */ "./src/ts/utils/i18n-strings.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _virtual_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./virtual-layout */ "./src/ts/virtual-layout.ts");






/** @public */
class GoldenLayout extends _virtual_layout__WEBPACK_IMPORTED_MODULE_0__.VirtualLayout {
    constructor() {
        super(...arguments);
        /** @internal */
        this._componentTypesMap = new Map();
        /** @internal */
        this._virtuableComponentMap = new Map();
        /** @internal */
        this._containerVirtualRectingRequiredEventListener = (container, width, height) => this.handleContainerVirtualRectingRequiredEvent(container, width, height);
        /** @internal */
        this._containerVirtualVisibilityChangeRequiredEventListener = (container, visible) => this.handleContainerVirtualVisibilityChangeRequiredEvent(container, visible);
        /** @internal */
        this._containerVirtualZIndexChangeRequiredEventListener = (container, logicalZIndex, defaultZIndex) => this.handleContainerVirtualZIndexChangeRequiredEvent(container, logicalZIndex, defaultZIndex);
    }
    /**
     * Register a new component type with the layout manager.
     *
     * @deprecated See {@link https://stackoverflow.com/questions/40922531/how-to-check-if-a-javascript-function-is-a-constructor}
     * instead use {@link (GoldenLayout:class).registerComponentConstructor}
     * or {@link (GoldenLayout:class).registerComponentFactoryFunction}
     */
    registerComponent(name, componentConstructorOrFactoryFtn, virtual = false) {
        if (typeof componentConstructorOrFactoryFtn !== 'function') {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.ApiError('registerComponent() componentConstructorOrFactoryFtn parameter is not a function');
        }
        else {
            if (componentConstructorOrFactoryFtn.hasOwnProperty('prototype')) {
                const componentConstructor = componentConstructorOrFactoryFtn;
                this.registerComponentConstructor(name, componentConstructor, virtual);
            }
            else {
                const componentFactoryFtn = componentConstructorOrFactoryFtn;
                this.registerComponentFactoryFunction(name, componentFactoryFtn, virtual);
            }
        }
    }
    /**
     * Register a new component type with the layout manager.
     */
    registerComponentConstructor(typeName, componentConstructor, virtual = false) {
        if (typeof componentConstructor !== 'function') {
            throw new Error(_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[1]);
        }
        const existingComponentType = this._componentTypesMap.get(typeName);
        if (existingComponentType !== undefined) {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError(`${_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[3]}: ${typeName}`);
        }
        this._componentTypesMap.set(typeName, {
            constructor: componentConstructor,
            factoryFunction: undefined,
            virtual,
        });
    }
    /**
     * Register a new component with the layout manager.
     */
    registerComponentFactoryFunction(typeName, componentFactoryFunction, virtual = false) {
        if (typeof componentFactoryFunction !== 'function') {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError('Please register a constructor function');
        }
        const existingComponentType = this._componentTypesMap.get(typeName);
        if (existingComponentType !== undefined) {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError(`${_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[3]}: ${typeName}`);
        }
        this._componentTypesMap.set(typeName, {
            constructor: undefined,
            factoryFunction: componentFactoryFunction,
            virtual,
        });
    }
    /**
     * Register a component function with the layout manager. This function should
     * return a constructor for a component based on a config.
     * This function will be called if a component type with the required name is not already registered.
     * It is recommended that applications use the {@link (VirtualLayout:class).getComponentEvent} and
     * {@link (VirtualLayout:class).releaseComponentEvent} instead of registering a constructor callback
     * @deprecated use {@link (GoldenLayout:class).registerGetComponentConstructorCallback}
     */
    registerComponentFunction(callback) {
        this.registerGetComponentConstructorCallback(callback);
    }
    /**
     * Register a callback closure with the layout manager which supplies a Component Constructor.
     * This callback should return a constructor for a component based on a config.
     * This function will be called if a component type with the required name is not already registered.
     * It is recommended that applications use the {@link (VirtualLayout:class).getComponentEvent} and
     * {@link (VirtualLayout:class).releaseComponentEvent} instead of registering a constructor callback
     */
    registerGetComponentConstructorCallback(callback) {
        if (typeof callback !== 'function') {
            throw new Error('Please register a callback function');
        }
        if (this._getComponentConstructorFtn !== undefined) {
            console.warn('Multiple component functions are being registered.  Only the final registered function will be used.');
        }
        this._getComponentConstructorFtn = callback;
    }
    getRegisteredComponentTypeNames() {
        const typeNamesIterableIterator = this._componentTypesMap.keys();
        return Array.from(typeNamesIterableIterator);
    }
    /**
     * Returns a previously registered component instantiator.  Attempts to utilize registered
     * component type by first, then falls back to the component constructor callback function (if registered).
     * If neither gets an instantiator, then returns `undefined`.
     * Note that `undefined` will return if config.componentType is not a string
     *
     * @param config - The item config
     * @public
     */
    getComponentInstantiator(config) {
        let instantiator;
        const typeName = _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedComponentItemConfig.resolveComponentTypeName(config);
        if (typeName !== undefined) {
            instantiator = this._componentTypesMap.get(typeName);
        }
        if (instantiator === undefined) {
            if (this._getComponentConstructorFtn !== undefined) {
                instantiator = {
                    constructor: this._getComponentConstructorFtn(config),
                    factoryFunction: undefined,
                    virtual: false,
                };
            }
        }
        return instantiator;
    }
    /** @internal */
    bindComponent(container, itemConfig) {
        let instantiator;
        const typeName = _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedComponentItemConfig.resolveComponentTypeName(itemConfig);
        if (typeName !== undefined) {
            instantiator = this._componentTypesMap.get(typeName);
        }
        if (instantiator === undefined) {
            if (this._getComponentConstructorFtn !== undefined) {
                instantiator = {
                    constructor: this._getComponentConstructorFtn(itemConfig),
                    factoryFunction: undefined,
                    virtual: false,
                };
            }
        }
        let result;
        if (instantiator !== undefined) {
            const virtual = instantiator.virtual;
            // handle case where component is obtained by name or component constructor callback
            let componentState;
            if (itemConfig.componentState === undefined) {
                componentState = undefined;
            }
            else {
                // make copy
                componentState = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.deepExtendValue)({}, itemConfig.componentState);
            }
            let component;
            const componentConstructor = instantiator.constructor;
            if (componentConstructor !== undefined) {
                component = new componentConstructor(container, componentState, virtual);
            }
            else {
                const factoryFunction = instantiator.factoryFunction;
                if (factoryFunction !== undefined) {
                    component = factoryFunction(container, componentState, virtual);
                }
                else {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.AssertError('LMBCFFU10008');
                }
            }
            if (virtual) {
                if (component === undefined) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('GLBCVCU988774');
                }
                else {
                    const virtuableComponent = component;
                    const componentRootElement = virtuableComponent.rootHtmlElement;
                    if (componentRootElement === undefined) {
                        throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError(`${_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[5]}: ${typeName}`);
                    }
                    else {
                        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.ensureElementPositionAbsolute)(componentRootElement);
                        this.container.appendChild(componentRootElement);
                        this._virtuableComponentMap.set(container, virtuableComponent);
                        container.virtualRectingRequiredEvent = this._containerVirtualRectingRequiredEventListener;
                        container.virtualVisibilityChangeRequiredEvent = this._containerVirtualVisibilityChangeRequiredEventListener;
                        container.virtualZIndexChangeRequiredEvent = this._containerVirtualZIndexChangeRequiredEventListener;
                    }
                }
            }
            result = {
                virtual: instantiator.virtual,
                component,
            };
        }
        else {
            // Use getComponentEvent
            result = super.bindComponent(container, itemConfig);
        }
        return result;
    }
    /** @internal */
    unbindComponent(container, virtual, component) {
        const virtuableComponent = this._virtuableComponentMap.get(container);
        if (virtuableComponent === undefined) {
            super.unbindComponent(container, virtual, component);
        }
        else {
            const componentRootElement = virtuableComponent.rootHtmlElement;
            if (componentRootElement === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.AssertError('GLUC77743', container.title);
            }
            else {
                this.container.removeChild(componentRootElement);
                this._virtuableComponentMap.delete(container);
            }
        }
    }
    fireBeforeVirtualRectingEvent(count) {
        this._goldenLayoutBoundingClientRect = this.container.getBoundingClientRect();
        super.fireBeforeVirtualRectingEvent(count);
    }
    /** @internal */
    handleContainerVirtualRectingRequiredEvent(container, width, height) {
        const virtuableComponent = this._virtuableComponentMap.get(container);
        if (virtuableComponent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('GLHCSCE55933');
        }
        else {
            const rootElement = virtuableComponent.rootHtmlElement;
            if (rootElement === undefined) {
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError(_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[4] + ' ' + container.title);
            }
            else {
                const containerBoundingClientRect = container.element.getBoundingClientRect();
                const left = containerBoundingClientRect.left - this._goldenLayoutBoundingClientRect.left;
                rootElement.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(left);
                const top = containerBoundingClientRect.top - this._goldenLayoutBoundingClientRect.top;
                rootElement.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(top);
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementWidth)(rootElement, width);
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementHeight)(rootElement, height);
            }
        }
    }
    /** @internal */
    handleContainerVirtualVisibilityChangeRequiredEvent(container, visible) {
        const virtuableComponent = this._virtuableComponentMap.get(container);
        if (virtuableComponent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('GLHCVVCRE55934');
        }
        else {
            const rootElement = virtuableComponent.rootHtmlElement;
            if (rootElement === undefined) {
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError(_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[4] + ' ' + container.title);
            }
            else {
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementDisplayVisibility)(rootElement, visible);
            }
        }
    }
    /** @internal */
    handleContainerVirtualZIndexChangeRequiredEvent(container, logicalZIndex, defaultZIndex) {
        const virtuableComponent = this._virtuableComponentMap.get(container);
        if (virtuableComponent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('GLHCVZICRE55935');
        }
        else {
            const rootElement = virtuableComponent.rootHtmlElement;
            if (rootElement === undefined) {
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError(_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[4] + ' ' + container.title);
            }
            else {
                rootElement.style.zIndex = defaultZIndex;
            }
        }
    }
}


/***/ }),

/***/ "./src/ts/items/component-item.ts":
/*!****************************************!*\
  !*** ./src/ts/items/component-item.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentItem": () => (/* binding */ ComponentItem)
/* harmony export */ });
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _container_component_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../container/component-container */ "./src/ts/container/component-container.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _content_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./content-item */ "./src/ts/items/content-item.ts");






/** @public */
class ComponentItem extends _content_item__WEBPACK_IMPORTED_MODULE_0__.ContentItem {
    /** @internal */
    constructor(layoutManager, config, 
    /** @internal */
    _parentItem) {
        super(layoutManager, config, _parentItem, document.createElement('div'));
        this._parentItem = _parentItem;
        /** @internal */
        this._focused = false;
        this.isComponent = true;
        this._reorderEnabled = config.reorderEnabled;
        this.applyUpdatableConfig(config);
        this._initialWantMaximise = config.maximised;
        const containerElement = document.createElement('div');
        containerElement.classList.add("lm_content" /* Content */);
        this.element.appendChild(containerElement);
        this._container = new _container_component_container__WEBPACK_IMPORTED_MODULE_1__.ComponentContainer(config, this, layoutManager, containerElement, (itemConfig) => this.handleUpdateItemConfigEvent(itemConfig), () => this.show(), () => this.hide(), (suppressEvent) => this.focus(suppressEvent), (suppressEvent) => this.blur(suppressEvent));
    }
    /** @internal @deprecated use {@link (ComponentItem:class).componentType} */
    get componentName() { return this._container.componentType; }
    get componentType() { return this._container.componentType; }
    get reorderEnabled() { return this._reorderEnabled; }
    /** @internal */
    get initialWantMaximise() { return this._initialWantMaximise; }
    get component() { return this._container.component; }
    get container() { return this._container; }
    get parentItem() { return this._parentItem; }
    get headerConfig() { return this._headerConfig; }
    get title() { return this._title; }
    get tab() { return this._tab; }
    get focused() { return this._focused; }
    /** @internal */
    destroy() {
        this._container.destroy();
        super.destroy();
    }
    applyUpdatableConfig(config) {
        this.setTitle(config.title);
        this._headerConfig = config.header;
    }
    toConfig() {
        const stateRequestEvent = this._container.stateRequestEvent;
        const state = stateRequestEvent === undefined ? this._container.state : stateRequestEvent();
        const result = {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_2__.ItemType.component,
            content: [],
            width: this.width,
            minWidth: this.minWidth,
            height: this.height,
            minHeight: this.minHeight,
            id: this.id,
            maximised: false,
            isClosable: this.isClosable,
            reorderEnabled: this._reorderEnabled,
            title: this._title,
            header: _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedHeaderedItemConfig.Header.createCopy(this._headerConfig),
            componentType: _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedComponentItemConfig.copyComponentType(this.componentType),
            componentState: state,
        };
        return result;
    }
    close() {
        if (this.parent === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_4__.UnexpectedNullError('CIC68883');
        }
        else {
            this.parent.removeChild(this, false);
        }
    }
    // Used by Drag Proxy
    /** @internal */
    enterDragMode(width, height) {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementWidth)(this.element, width);
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementHeight)(this.element, height);
        this._container.enterDragMode(width, height);
    }
    /** @internal */
    exitDragMode() {
        this._container.exitDragMode();
    }
    /** @internal */
    enterStackMaximised() {
        this._container.enterStackMaximised();
    }
    /** @internal */
    exitStackMaximised() {
        this._container.exitStackMaximised();
    }
    // Used by Drag Proxy
    /** @internal */
    drag() {
        this._container.drag();
    }
    /** @internal */
    updateSize() {
        this.updateNodeSize();
    }
    /** @internal */
    init() {
        this.updateNodeSize();
        super.init();
        this._container.emit('open');
        this.initContentItems();
    }
    /**
     * Set this component's title
     *
     * @public
     * @param title -
     */
    setTitle(title) {
        this._title = title;
        this.emit('titleChanged', title);
        this.emit('stateChanged');
    }
    setTab(tab) {
        this._tab = tab;
        this.emit('tab', tab);
        this._container.setTab(tab);
    }
    /** @internal */
    hide() {
        super.hide();
        this._container.setVisibility(false);
    }
    /** @internal */
    show() {
        super.show();
        this._container.setVisibility(true);
    }
    /**
     * Focuses the item if it is not already focused
     */
    focus(suppressEvent = false) {
        this.parentItem.setActiveComponentItem(this, true, suppressEvent);
    }
    /** @internal */
    setFocused(suppressEvent) {
        this._focused = true;
        this.tab.setFocused();
        if (!suppressEvent) {
            this.emitBaseBubblingEvent('focus');
        }
    }
    /**
     * Blurs (defocuses) the item if it is focused
     */
    blur(suppressEvent = false) {
        if (this._focused) {
            this.layoutManager.setFocusedComponentItem(undefined, suppressEvent);
        }
    }
    /** @internal */
    setBlurred(suppressEvent) {
        this._focused = false;
        this.tab.setBlurred();
        if (!suppressEvent) {
            this.emitBaseBubblingEvent('blur');
        }
    }
    /** @internal */
    setParent(parent) {
        this._parentItem = parent;
        super.setParent(parent);
    }
    /** @internal */
    handleUpdateItemConfigEvent(itemConfig) {
        this.applyUpdatableConfig(itemConfig);
    }
    /** @internal */
    updateNodeSize() {
        if (this.element.style.display !== 'none') {
            // Do not update size of hidden components to prevent unwanted reflows
            const { width, height } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.getElementWidthAndHeight)(this.element);
            this._container.setSizeToNodeSize(width, height, false);
        }
    }
}


/***/ }),

/***/ "./src/ts/items/component-parentable-item.ts":
/*!***************************************************!*\
  !*** ./src/ts/items/component-parentable-item.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentParentableItem": () => (/* binding */ ComponentParentableItem)
/* harmony export */ });
/* harmony import */ var _content_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./content-item */ "./src/ts/items/content-item.ts");

class ComponentParentableItem extends _content_item__WEBPACK_IMPORTED_MODULE_0__.ContentItem {
    constructor() {
        super(...arguments);
        /** @internal */
        this._focused = false;
    }
    get focused() { return this._focused; }
    /** @internal */
    setFocusedValue(value) {
        this._focused = value;
    }
}


/***/ }),

/***/ "./src/ts/items/content-item.ts":
/*!**************************************!*\
  !*** ./src/ts/items/content-item.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContentItem": () => (/* binding */ ContentItem)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_jquery_legacy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/jquery-legacy */ "./src/ts/utils/jquery-legacy.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");




/**
 * This is the baseclass that all content items inherit from.
 * Most methods provide a subset of what the sub-classes do.
 *
 * It also provides a number of functions for tree traversal
 * @public
 */
class ContentItem extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /** @internal */
    constructor(layoutManager, config, 
    /** @internal */
    _parent, 
    /** @internal */
    _element) {
        super();
        this.layoutManager = layoutManager;
        this._parent = _parent;
        this._element = _element;
        /** @internal */
        this._popInParentIds = [];
        this._type = config.type;
        this._id = config.id;
        this._isInitialised = false;
        this.isGround = false;
        this.isRow = false;
        this.isColumn = false;
        this.isStack = false;
        this.isComponent = false;
        this.width = config.width;
        this.minWidth = config.minWidth;
        this.height = config.height;
        this.minHeight = config.minHeight;
        this._isClosable = config.isClosable;
        this._pendingEventPropagations = {};
        this._throttledEvents = ['stateChanged'];
        this._contentItems = this.createContentItems(config.content);
    }
    get type() { return this._type; }
    get id() { return this._id; }
    /** @internal */
    get popInParentIds() { return this._popInParentIds; }
    get parent() { return this._parent; }
    get contentItems() { return this._contentItems; }
    get isClosable() { return this._isClosable; }
    get element() { return this._element; }
    get isInitialised() { return this._isInitialised; }
    static isStack(item) {
        return item.isStack;
    }
    static isComponentItem(item) {
        return item.isComponent;
    }
    static isComponentParentableItem(item) {
        return item.isStack || item.isGround;
    }
    /**
     * Removes a child node (and its children) from the tree
     * @param contentItem - The child item to remove
     * @param keepChild - Whether to destroy the removed item
     */
    removeChild(contentItem, keepChild = false) {
        /*
         * Get the position of the item that's to be removed within all content items this node contains
         */
        const index = this._contentItems.indexOf(contentItem);
        /*
         * Make sure the content item to be removed is actually a child of this item
         */
        if (index === -1) {
            throw new Error('Can\'t remove child item. Unknown content item');
        }
        /**
         * Call destroy on the content item.
         * All children are destroyed as well
         */
        if (!keepChild) {
            this._contentItems[index].destroy();
        }
        /**
         * Remove the content item from this nodes array of children
         */
        this._contentItems.splice(index, 1);
        /**
         * If this node still contains other content items, adjust their size
         */
        if (this._contentItems.length > 0) {
            this.updateSize();
        }
        else {
            /**
             * If this was the last content item, remove this node as well
             */
            if (!this.isGround && this._isClosable === true) {
                if (this._parent === null) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('CIUC00874');
                }
                else {
                    this._parent.removeChild(this);
                }
            }
        }
    }
    /**
     * Sets up the tree structure for the newly added child
     * The responsibility for the actual DOM manipulations lies
     * with the concrete item
     *
     * @param contentItem -
     * @param index - If omitted item will be appended
     * @param suspendResize - Used by descendent implementations
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    addChild(contentItem, index, suspendResize) {
        index !== null && index !== void 0 ? index : (index = this._contentItems.length);
        this._contentItems.splice(index, 0, contentItem);
        contentItem.setParent(this);
        if (this._isInitialised === true && contentItem._isInitialised === false) {
            contentItem.init();
        }
        return index;
    }
    /**
     * Replaces oldChild with newChild
     * @param oldChild -
     * @param newChild -
     * @internal
     */
    replaceChild(oldChild, newChild, destroyOldChild = false) {
        // Do not try to replace ComponentItem - will not work
        const index = this._contentItems.indexOf(oldChild);
        const parentNode = oldChild._element.parentNode;
        if (index === -1) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.AssertError('CIRCI23232', 'Can\'t replace child. oldChild is not child of this');
        }
        if (parentNode === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('CIRCP23232');
        }
        else {
            parentNode.replaceChild(newChild._element, oldChild._element);
            /*
            * Optionally destroy the old content item
            */
            if (destroyOldChild === true) {
                oldChild._parent = null;
                oldChild.destroy(); // will now also destroy all children of oldChild
            }
            /*
            * Wire the new contentItem into the tree
            */
            this._contentItems[index] = newChild;
            newChild.setParent(this);
            // newChild inherits the sizes from the old child:
            newChild.height = oldChild.height;
            newChild.width = oldChild.width;
            //TODO This doesn't update the config... refactor to leave item nodes untouched after creation
            if (newChild._parent === null) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('CIRCNC45699');
            }
            else {
                if (newChild._parent._isInitialised === true && newChild._isInitialised === false) {
                    newChild.init();
                }
                this.updateSize();
            }
        }
    }
    /**
     * Convenience method.
     * Shorthand for this.parent.removeChild( this )
     */
    remove() {
        if (this._parent === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('CIR11110');
        }
        else {
            this._parent.removeChild(this);
        }
    }
    /**
     * Removes the component from the layout and creates a new
     * browser window with the component and its children inside
     */
    popout() {
        const parentId = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId)();
        const browserPopout = this.layoutManager.createPopoutFromContentItem(this, undefined, parentId, undefined);
        this.emitBaseBubblingEvent('stateChanged');
        return browserPopout;
    }
    /** @internal */
    calculateConfigContent() {
        const contentItems = this._contentItems;
        const count = contentItems.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            const item = contentItems[i];
            result[i] = item.toConfig();
        }
        return result;
    }
    /** @internal */
    highlightDropZone(x, y, area) {
        const dropTargetIndicator = this.layoutManager.dropTargetIndicator;
        if (dropTargetIndicator === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('ACIHDZ5593');
        }
        else {
            dropTargetIndicator.highlightArea(area);
        }
    }
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onDrop(contentItem, area) {
        this.addChild(contentItem);
    }
    /** @internal */
    show() {
        // Not sure why showAllActiveContentItems() was called. GoldenLayout seems to work fine without it.  Left commented code
        // in source in case a reason for it becomes apparent.
        // this.layoutManager.showAllActiveContentItems();
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.setElementDisplayVisibility)(this._element, true);
        this.layoutManager.updateSizeFromContainer();
        for (let i = 0; i < this._contentItems.length; i++) {
            this._contentItems[i].show();
        }
    }
    /**
     * Destroys this item ands its children
     * @internal
     */
    destroy() {
        for (let i = 0; i < this._contentItems.length; i++) {
            this._contentItems[i].destroy();
        }
        this._contentItems = [];
        this.emitBaseBubblingEvent('beforeItemDestroyed');
        this._element.remove();
        this.emitBaseBubblingEvent('itemDestroyed');
    }
    /**
     * Returns the area the component currently occupies
     * @internal
     */
    getElementArea(element) {
        element = element !== null && element !== void 0 ? element : this._element;
        const offset = (0,_utils_jquery_legacy__WEBPACK_IMPORTED_MODULE_3__.getJQueryOffset)(element);
        const width = element.offsetWidth;
        const height = element.offsetHeight;
        // const widthAndHeight = getJQueryWidthAndHeight(element);
        return {
            x1: offset.left + 1,
            y1: offset.top + 1,
            x2: offset.left + width - 1,
            y2: offset.top + height - 1,
            surface: width * height,
            contentItem: this
        };
    }
    /**
     * The tree of content items is created in two steps: First all content items are instantiated,
     * then init is called recursively from top to bottem. This is the basic init function,
     * it can be used, extended or overwritten by the content items
     *
     * Its behaviour depends on the content item
     * @internal
     */
    init() {
        this._isInitialised = true;
        this.emitBaseBubblingEvent('itemCreated');
        this.emitUnknownBubblingEvent(this.type + 'Created');
    }
    /** @internal */
    setParent(parent) {
        this._parent = parent;
    }
    /** @internal */
    addPopInParentId(id) {
        if (!this.popInParentIds.includes(id)) {
            this.popInParentIds.push(id);
        }
    }
    /** @internal */
    initContentItems() {
        for (let i = 0; i < this._contentItems.length; i++) {
            this._contentItems[i].init();
        }
    }
    /** @internal */
    hide() {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.setElementDisplayVisibility)(this._element, false);
        this.layoutManager.updateSizeFromContainer();
    }
    /** @internal */
    updateContentItemsSize() {
        for (let i = 0; i < this._contentItems.length; i++) {
            this._contentItems[i].updateSize();
        }
    }
    /**
     * creates all content items for this node at initialisation time
     * PLEASE NOTE, please see addChild for adding contentItems at runtime
     * @internal
     */
    createContentItems(content) {
        const count = content.length;
        const result = new Array(count);
        for (let i = 0; i < content.length; i++) {
            result[i] = this.layoutManager.createContentItem(content[i], this);
        }
        return result;
    }
    /**
     * Called for every event on the item tree. Decides whether the event is a bubbling
     * event and propagates it to its parent
     *
     * @param name - The name of the event
     * @param event -
     * @internal
     */
    propagateEvent(name, args) {
        if (args.length === 1) {
            const event = args[0];
            if (event instanceof _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter.BubblingEvent &&
                event.isPropagationStopped === false &&
                this._isInitialised === true) {
                /**
                 * In some cases (e.g. if an element is created from a DragSource) it
                 * doesn't have a parent and is not a child of GroundItem. If that's the case
                 * propagate the bubbling event from the top level of the substree directly
                 * to the layoutManager
                 */
                if (this.isGround === false && this._parent) {
                    this._parent.emitUnknown(name, event);
                }
                else {
                    this.scheduleEventPropagationToLayoutManager(name, event);
                }
            }
        }
    }
    tryBubbleEvent(name, args) {
        if (args.length === 1) {
            const event = args[0];
            if (event instanceof _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter.BubblingEvent &&
                event.isPropagationStopped === false &&
                this._isInitialised === true) {
                /**
                 * In some cases (e.g. if an element is created from a DragSource) it
                 * doesn't have a parent and is not a child of GroundItem. If that's the case
                 * propagate the bubbling event from the top level of the substree directly
                 * to the layoutManager
                 */
                if (this.isGround === false && this._parent) {
                    this._parent.emitUnknown(name, event);
                }
                else {
                    this.scheduleEventPropagationToLayoutManager(name, event);
                }
            }
        }
    }
    /**
     * All raw events bubble up to the Ground element. Some events that
     * are propagated to - and emitted by - the layoutManager however are
     * only string-based, batched and sanitized to make them more usable
     *
     * @param name - The name of the event
     * @internal
     */
    scheduleEventPropagationToLayoutManager(name, event) {
        if (this._throttledEvents.indexOf(name) === -1) {
            this.layoutManager.emitUnknown(name, event);
        }
        else {
            if (this._pendingEventPropagations[name] !== true) {
                this._pendingEventPropagations[name] = true;
                globalThis.requestAnimationFrame(() => this.propagateEventToLayoutManager(name, event));
            }
        }
    }
    /**
     * Callback for events scheduled by _scheduleEventPropagationToLayoutManager
     *
     * @param name - The name of the event
     * @internal
     */
    propagateEventToLayoutManager(name, event) {
        this._pendingEventPropagations[name] = false;
        this.layoutManager.emitUnknown(name, event);
    }
}


/***/ }),

/***/ "./src/ts/items/ground-item.ts":
/*!*************************************!*\
  !*** ./src/ts/items/ground-item.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GroundItem": () => (/* binding */ GroundItem)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _component_item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component-item */ "./src/ts/items/component-item.ts");
/* harmony import */ var _component_parentable_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component-parentable-item */ "./src/ts/items/component-parentable-item.ts");
/* harmony import */ var _content_item__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./content-item */ "./src/ts/items/content-item.ts");
/* harmony import */ var _row_or_column__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./row-or-column */ "./src/ts/items/row-or-column.ts");









/**
 * GroundItem is the ContentItem whose one child is the root ContentItem (Root is planted in Ground).
 * (Previously it was called root however this was incorrect as its child is the root item)
 * There is only one instance of GroundItem and it is automatically created by the Layout Manager
 * @internal
 */
class GroundItem extends _component_parentable_item__WEBPACK_IMPORTED_MODULE_0__.ComponentParentableItem {
    constructor(layoutManager, rootItemConfig, containerElement) {
        super(layoutManager, _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedGroundItemConfig.create(rootItemConfig), null, GroundItem.createElement(document));
        this.isGround = true;
        this._childElementContainer = this.element;
        this._containerElement = containerElement;
        this._containerElement.appendChild(this.element);
    }
    init() {
        if (this.isInitialised === true)
            return;
        this.updateNodeSize();
        for (let i = 0; i < this.contentItems.length; i++) {
            this._childElementContainer.appendChild(this.contentItems[i].element);
        }
        super.init();
        this.initContentItems();
    }
    /**
     * Loads a new Layout
     * Internal only.  To load a new layout with API, use {@link (LayoutManager:class).loadLayout}
     */
    loadRoot(rootItemConfig) {
        // Remove existing root if it exists
        this.clearRoot();
        if (rootItemConfig !== undefined) {
            const rootContentItem = this.layoutManager.createAndInitContentItem(rootItemConfig, this);
            this.addChild(rootContentItem, 0);
        }
    }
    clearRoot() {
        // Remove existing root if it exists
        const contentItems = this.contentItems;
        switch (contentItems.length) {
            case 0: {
                return;
            }
            case 1: {
                const existingRootContentItem = contentItems[0];
                existingRootContentItem.remove();
                return;
            }
            default: {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('GILR07721');
            }
        }
    }
    /**
     * Adds a ContentItem child to root ContentItem.
     * Internal only.  To load a add with API, use {@link (LayoutManager:class).addItem}
     * @returns -1 if added as root otherwise index in root ContentItem's content
     */
    addItem(itemConfig, index) {
        this.layoutManager.checkMinimiseMaximisedStack();
        const resolvedItemConfig = _config_config__WEBPACK_IMPORTED_MODULE_3__.ItemConfig.resolve(itemConfig);
        let parent;
        if (this.contentItems.length > 0) {
            parent = this.contentItems[0];
        }
        else {
            parent = this;
        }
        if (parent.isComponent) {
            throw new Error('Cannot add item as child to ComponentItem');
        }
        else {
            const contentItem = this.layoutManager.createAndInitContentItem(resolvedItemConfig, parent);
            index = parent.addChild(contentItem, index);
            return (parent === this) ? -1 : index;
        }
    }
    loadComponentAsRoot(itemConfig) {
        // Remove existing root if it exists
        this.clearRoot();
        const resolvedItemConfig = _config_config__WEBPACK_IMPORTED_MODULE_3__.ItemConfig.resolve(itemConfig);
        if (resolvedItemConfig.maximised) {
            throw new Error('Root Component cannot be maximised');
        }
        else {
            const rootContentItem = new _component_item__WEBPACK_IMPORTED_MODULE_4__.ComponentItem(this.layoutManager, resolvedItemConfig, this);
            rootContentItem.init();
            this.addChild(rootContentItem, 0);
        }
    }
    /**
     * Adds a Root ContentItem.
     * Internal only.  To replace Root ContentItem with API, use {@link (LayoutManager:class).loadLayout}
     */
    addChild(contentItem, index) {
        if (this.contentItems.length > 0) {
            throw new Error('Ground node can only have a single child');
        }
        else {
            // contentItem = this.layoutManager._$normalizeContentItem(contentItem, this);
            this._childElementContainer.appendChild(contentItem.element);
            index = super.addChild(contentItem, index);
            this.updateSize();
            this.emitBaseBubblingEvent('stateChanged');
            return index;
        }
    }
    /** @internal */
    calculateConfigContent() {
        const contentItems = this.contentItems;
        const count = contentItems.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            const item = contentItems[i];
            const itemConfig = item.toConfig();
            if (_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedRootItemConfig.isRootItemConfig(itemConfig)) {
                result[i] = itemConfig;
            }
            else {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('RCCC66832');
            }
        }
        return result;
    }
    /** @internal */
    setSize(width, height) {
        if (width === undefined || height === undefined) {
            this.updateSize(); // For backwards compatibility with v1.x API
        }
        else {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementWidth)(this.element, width);
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementHeight)(this.element, height);
            // GroundItem can be empty
            if (this.contentItems.length > 0) {
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementWidth)(this.contentItems[0].element, width);
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementHeight)(this.contentItems[0].element, height);
            }
            this.updateContentItemsSize();
        }
    }
    /**
     * Adds a Root ContentItem.
     * Internal only.  To replace Root ContentItem with API, use {@link (LayoutManager:class).updateRootSize}
     */
    updateSize() {
        this.layoutManager.beginVirtualSizedContainerAdding();
        try {
            this.updateNodeSize();
            this.updateContentItemsSize();
        }
        finally {
            this.layoutManager.endVirtualSizedContainerAdding();
        }
    }
    createSideAreas() {
        const areaSize = 50;
        const oppositeSides = GroundItem.Area.oppositeSides;
        const result = new Array(Object.keys(oppositeSides).length);
        let idx = 0;
        for (const key in oppositeSides) {
            const side = key;
            const area = this.getElementArea();
            if (area === null) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnexpectedNullError('RCSA77553');
            }
            else {
                area.side = side;
                if (oppositeSides[side][1] === '2')
                    area[side] = area[oppositeSides[side]] - areaSize;
                else
                    area[side] = area[oppositeSides[side]] + areaSize;
                area.surface = (area.x2 - area.x1) * (area.y2 - area.y1);
                result[idx++] = area;
            }
        }
        return result;
    }
    highlightDropZone(x, y, area) {
        this.layoutManager.tabDropPlaceholder.remove();
        super.highlightDropZone(x, y, area);
    }
    onDrop(contentItem, area) {
        if (contentItem.isComponent) {
            const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedStackItemConfig.createDefault();
            // since ResolvedItemConfig.contentItems not set up, we need to add header from Component
            const component = contentItem;
            itemConfig.header = _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedHeaderedItemConfig.Header.createCopy(component.headerConfig);
            const stack = this.layoutManager.createAndInitContentItem(itemConfig, this);
            stack.addChild(contentItem);
            contentItem = stack;
        }
        if (this.contentItems.length === 0) {
            this.addChild(contentItem);
        }
        else {
            /*
             * If the contentItem that's being dropped is not dropped on a Stack (cases which just passed above and
             * which would wrap the contentItem in a Stack) we need to check whether contentItem is a RowOrColumn.
             * If it is, we need to re-wrap it in a Stack like it was when it was dragged by its Tab (it was dragged!).
             */
            if (contentItem.type === _utils_types__WEBPACK_IMPORTED_MODULE_6__.ItemType.row || contentItem.type === _utils_types__WEBPACK_IMPORTED_MODULE_6__.ItemType.column) {
                const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedStackItemConfig.createDefault();
                const stack = this.layoutManager.createContentItem(itemConfig, this);
                stack.addChild(contentItem);
                contentItem = stack;
            }
            const type = area.side[0] == 'x' ? _utils_types__WEBPACK_IMPORTED_MODULE_6__.ItemType.row : _utils_types__WEBPACK_IMPORTED_MODULE_6__.ItemType.column;
            const dimension = area.side[0] == 'x' ? 'width' : 'height';
            const insertBefore = area.side[1] == '2';
            const column = this.contentItems[0];
            if (!(column instanceof _row_or_column__WEBPACK_IMPORTED_MODULE_7__.RowOrColumn) || column.type !== type) {
                const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedItemConfig.createDefault(type);
                const rowOrColumn = this.layoutManager.createContentItem(itemConfig, this);
                this.replaceChild(column, rowOrColumn);
                rowOrColumn.addChild(contentItem, insertBefore ? 0 : undefined, true);
                rowOrColumn.addChild(column, insertBefore ? undefined : 0, true);
                column[dimension] = 50;
                contentItem[dimension] = 50;
                rowOrColumn.updateSize();
            }
            else {
                const sibling = column.contentItems[insertBefore ? 0 : column.contentItems.length - 1];
                column.addChild(contentItem, insertBefore ? 0 : undefined, true);
                sibling[dimension] *= 0.5;
                contentItem[dimension] = sibling[dimension];
                column.updateSize();
            }
        }
    }
    // No ContentItem can dock with groundItem.  However Stack can have a GroundItem parent and Stack requires that
    // its parent implement dock() function.  Accordingly this function is implemented but throws an exception as it should
    // never be called
    dock() {
        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('GID87731');
    }
    // No ContentItem can dock with groundItem.  However Stack can have a GroundItem parent and Stack requires that
    // its parent implement validateDocking() function.  Accordingly this function is implemented but throws an exception as it should
    // never be called
    validateDocking() {
        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('GIVD87732');
    }
    getAllContentItems() {
        const result = [this];
        this.deepGetAllContentItems(this.contentItems, result);
        return result;
    }
    getConfigMaximisedItems() {
        const result = [];
        this.deepFilterContentItems(this.contentItems, result, (item) => {
            if (_content_item__WEBPACK_IMPORTED_MODULE_8__.ContentItem.isStack(item) && item.initialWantMaximise) {
                return true;
            }
            else {
                if (_content_item__WEBPACK_IMPORTED_MODULE_8__.ContentItem.isComponentItem(item) && item.initialWantMaximise) {
                    return true;
                }
                else {
                    return false;
                }
            }
        });
        return result;
    }
    getItemsByPopInParentId(popInParentId) {
        const result = [];
        this.deepFilterContentItems(this.contentItems, result, (item) => item.popInParentIds.includes(popInParentId));
        return result;
    }
    toConfig() {
        throw new Error('Cannot generate GroundItem config');
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setActiveComponentItem(item, focus, suppressFocusEvent) {
        // only applicable if ComponentItem is root and then it always has focus
    }
    updateNodeSize() {
        const { width, height } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.getElementWidthAndHeight)(this._containerElement);
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementWidth)(this.element, width);
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementHeight)(this.element, height);
        /*
         * GroundItem can be empty
         */
        if (this.contentItems.length > 0) {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementWidth)(this.contentItems[0].element, width);
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementHeight)(this.contentItems[0].element, height);
        }
    }
    deepGetAllContentItems(content, result) {
        for (let i = 0; i < content.length; i++) {
            const contentItem = content[i];
            result.push(contentItem);
            this.deepGetAllContentItems(contentItem.contentItems, result);
        }
    }
    deepFilterContentItems(content, result, checkAcceptFtn) {
        for (let i = 0; i < content.length; i++) {
            const contentItem = content[i];
            if (checkAcceptFtn(contentItem)) {
                result.push(contentItem);
            }
            this.deepFilterContentItems(contentItem.contentItems, result, checkAcceptFtn);
        }
    }
}
/** @internal */
(function (GroundItem) {
    let Area;
    (function (Area) {
        Area.oppositeSides = {
            y2: 'y1',
            x2: 'x1',
            y1: 'y2',
            x1: 'x2',
        };
    })(Area = GroundItem.Area || (GroundItem.Area = {}));
    function createElement(document) {
        const element = document.createElement('div');
        element.classList.add("lm_goldenlayout" /* GoldenLayout */);
        element.classList.add("lm_item" /* Item */);
        element.classList.add("lm_root" /* Root */);
        return element;
    }
    GroundItem.createElement = createElement;
})(GroundItem || (GroundItem = {}));


/***/ }),

/***/ "./src/ts/items/row-or-column.ts":
/*!***************************************!*\
  !*** ./src/ts/items/row-or-column.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RowOrColumn": () => (/* binding */ RowOrColumn)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _controls_splitter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../controls/splitter */ "./src/ts/controls/splitter.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _content_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./content-item */ "./src/ts/items/content-item.ts");






/** @public */
class RowOrColumn extends _content_item__WEBPACK_IMPORTED_MODULE_0__.ContentItem {
    /** @internal */
    constructor(isColumn, layoutManager, config, 
    /** @internal */
    _rowOrColumnParent) {
        super(layoutManager, config, _rowOrColumnParent, RowOrColumn.createElement(document, isColumn));
        this._rowOrColumnParent = _rowOrColumnParent;
        /** @internal */
        this._splitter = [];
        this.isRow = !isColumn;
        this.isColumn = isColumn;
        this._childElementContainer = this.element;
        this._splitterSize = layoutManager.layoutConfig.dimensions.borderWidth;
        this._splitterGrabSize = layoutManager.layoutConfig.dimensions.borderGrabWidth;
        this._isColumn = isColumn;
        this._dimension = isColumn ? 'height' : 'width';
        this._splitterPosition = null;
        this._splitterMinPosition = null;
        this._splitterMaxPosition = null;
        switch (config.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_1__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_1__.ItemType.column:
                this._configType = config.type;
                break;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('ROCCCT00925');
        }
    }
    newComponent(componentType, componentState, title, index) {
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        return this.newItem(itemConfig, index);
    }
    addComponent(componentType, componentState, title, index) {
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        return this.addItem(itemConfig, index);
    }
    newItem(itemConfig, index) {
        index = this.addItem(itemConfig, index);
        const createdItem = this.contentItems[index];
        if (_content_item__WEBPACK_IMPORTED_MODULE_0__.ContentItem.isStack(createdItem) && (_config_config__WEBPACK_IMPORTED_MODULE_3__.ItemConfig.isComponent(itemConfig))) {
            // createdItem is a Stack which was created to hold wanted component.  Return component
            return createdItem.contentItems[0];
        }
        else {
            return createdItem;
        }
    }
    addItem(itemConfig, index) {
        this.layoutManager.checkMinimiseMaximisedStack();
        const resolvedItemConfig = _config_config__WEBPACK_IMPORTED_MODULE_3__.ItemConfig.resolve(itemConfig);
        const contentItem = this.layoutManager.createAndInitContentItem(resolvedItemConfig, this);
        return this.addChild(contentItem, index, false);
    }
    /**
     * Add a new contentItem to the Row or Column
     *
     * @param contentItem -
     * @param index - The position of the new item within the Row or Column.
     *                If no index is provided the item will be added to the end
     * @param suspendResize - If true the items won't be resized. This will leave the item in
     *                        an inconsistent state and is only intended to be used if multiple
     *                        children need to be added in one go and resize is called afterwards
     *
     * @returns
     */
    addChild(contentItem, index, suspendResize) {
        // contentItem = this.layoutManager._$normalizeContentItem(contentItem, this);
        if (index === undefined) {
            index = this.contentItems.length;
        }
        if (this.contentItems.length > 0) {
            const splitterElement = this.createSplitter(Math.max(0, index - 1)).element;
            if (index > 0) {
                this.contentItems[index - 1].element.insertAdjacentElement('afterend', splitterElement);
                splitterElement.insertAdjacentElement('afterend', contentItem.element);
            }
            else {
                this.contentItems[0].element.insertAdjacentElement('beforebegin', splitterElement);
                splitterElement.insertAdjacentElement('beforebegin', contentItem.element);
            }
        }
        else {
            this._childElementContainer.appendChild(contentItem.element);
        }
        super.addChild(contentItem, index);
        const newItemSize = (1 / this.contentItems.length) * 100;
        if (suspendResize === true) {
            this.emitBaseBubblingEvent('stateChanged');
            return index;
        }
        for (let i = 0; i < this.contentItems.length; i++) {
            if (this.contentItems[i] === contentItem) {
                contentItem[this._dimension] = newItemSize;
            }
            else {
                const itemSize = this.contentItems[i][this._dimension] *= (100 - newItemSize) / 100;
                this.contentItems[i][this._dimension] = itemSize;
            }
        }
        this.updateSize();
        this.emitBaseBubblingEvent('stateChanged');
        return index;
    }
    /**
     * Removes a child of this element
     *
     * @param contentItem -
     * @param keepChild - If true the child will be removed, but not destroyed
     *
     */
    removeChild(contentItem, keepChild) {
        const index = this.contentItems.indexOf(contentItem);
        const splitterIndex = Math.max(index - 1, 0);
        if (index === -1) {
            throw new Error('Can\'t remove child. ContentItem is not child of this Row or Column');
        }
        /**
         * Remove the splitter before the item or after if the item happens
         * to be the first in the row/column
         */
        if (this._splitter[splitterIndex]) {
            this._splitter[splitterIndex].destroy();
            this._splitter.splice(splitterIndex, 1);
        }
        super.removeChild(contentItem, keepChild);
        if (this.contentItems.length === 1 && this.isClosable === true) {
            const childItem = this.contentItems[0];
            this.contentItems.length = 0;
            this._rowOrColumnParent.replaceChild(this, childItem, true);
        }
        else {
            this.updateSize();
            this.emitBaseBubblingEvent('stateChanged');
        }
    }
    /**
     * Replaces a child of this Row or Column with another contentItem
     */
    replaceChild(oldChild, newChild) {
        const size = oldChild[this._dimension];
        super.replaceChild(oldChild, newChild);
        newChild[this._dimension] = size;
        this.updateSize();
        this.emitBaseBubblingEvent('stateChanged');
    }
    /**
     * Called whenever the dimensions of this item or one of its parents change
     */
    updateSize() {
        this.layoutManager.beginVirtualSizedContainerAdding();
        try {
            this.updateNodeSize();
            this.updateContentItemsSize();
        }
        finally {
            this.layoutManager.endVirtualSizedContainerAdding();
        }
    }
    /**
     * Invoked recursively by the layout manager. ContentItem.init appends
     * the contentItem's DOM elements to the container, RowOrColumn init adds splitters
     * in between them
     * @internal
     */
    init() {
        if (this.isInitialised === true)
            return;
        this.updateNodeSize();
        for (let i = 0; i < this.contentItems.length; i++) {
            this._childElementContainer.appendChild(this.contentItems[i].element);
        }
        super.init();
        for (let i = 0; i < this.contentItems.length - 1; i++) {
            this.contentItems[i].element.insertAdjacentElement('afterend', this.createSplitter(i).element);
        }
        this.initContentItems();
    }
    toConfig() {
        const result = {
            type: this.type,
            content: this.calculateConfigContent(),
            width: this.width,
            minWidth: this.minWidth,
            height: this.height,
            minHeight: this.minHeight,
            id: this.id,
            isClosable: this.isClosable,
        };
        return result;
    }
    /** @internal */
    setParent(parent) {
        this._rowOrColumnParent = parent;
        super.setParent(parent);
    }
    /** @internal */
    updateNodeSize() {
        if (this.contentItems.length > 0) {
            this.calculateRelativeSizes();
            this.setAbsoluteSizes();
        }
        this.emitBaseBubblingEvent('stateChanged');
        this.emit('resize');
    }
    /**
     * Turns the relative sizes calculated by calculateRelativeSizes into
     * absolute pixel values and applies them to the children's DOM elements
     *
     * Assigns additional pixels to counteract Math.floor
     * @internal
     */
    setAbsoluteSizes() {
        const sizeData = this.calculateAbsoluteSizes();
        for (let i = 0; i < this.contentItems.length; i++) {
            if (sizeData.additionalPixel - i > 0) {
                sizeData.itemSizes[i]++;
            }
            if (this._isColumn) {
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementWidth)(this.contentItems[i].element, sizeData.totalWidth);
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementHeight)(this.contentItems[i].element, sizeData.itemSizes[i]);
            }
            else {
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementWidth)(this.contentItems[i].element, sizeData.itemSizes[i]);
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementHeight)(this.contentItems[i].element, sizeData.totalHeight);
            }
        }
    }
    /**
     * Calculates the absolute sizes of all of the children of this Item.
     * @returns Set with absolute sizes and additional pixels.
     * @internal
     */
    calculateAbsoluteSizes() {
        const totalSplitterSize = (this.contentItems.length - 1) * this._splitterSize;
        let { width: totalWidth, height: totalHeight } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.getElementWidthAndHeight)(this.element);
        if (this._isColumn) {
            totalHeight -= totalSplitterSize;
        }
        else {
            totalWidth -= totalSplitterSize;
        }
        let totalAssigned = 0;
        const itemSizes = [];
        for (let i = 0; i < this.contentItems.length; i++) {
            let itemSize;
            if (this._isColumn) {
                itemSize = Math.floor(totalHeight * (this.contentItems[i].height / 100));
            }
            else {
                itemSize = Math.floor(totalWidth * (this.contentItems[i].width / 100));
            }
            totalAssigned += itemSize;
            itemSizes.push(itemSize);
        }
        const additionalPixel = Math.floor((this._isColumn ? totalHeight : totalWidth) - totalAssigned);
        return {
            itemSizes: itemSizes,
            additionalPixel: additionalPixel,
            totalWidth: totalWidth,
            totalHeight: totalHeight
        };
    }
    /**
     * Calculates the relative sizes of all children of this Item. The logic
     * is as follows:
     *
     * - Add up the total size of all items that have a configured size
     *
     * - If the total == 100 (check for floating point errors)
     *        Excellent, job done
     *
     * - If the total is \> 100,
     *        set the size of items without set dimensions to 1/3 and add this to the total
     *        set the size off all items so that the total is hundred relative to their original size
     *
     * - If the total is \< 100
     *        If there are items without set dimensions, distribute the remainder to 100 evenly between them
     *        If there are no items without set dimensions, increase all items sizes relative to
     *        their original size so that they add up to 100
     *
     * @internal
     */
    calculateRelativeSizes() {
        let total = 0;
        const itemsWithoutSetDimension = [];
        for (let i = 0; i < this.contentItems.length; i++) {
            if (this.contentItems[i][this._dimension] !== undefined) {
                total += this.contentItems[i][this._dimension];
            }
            else {
                itemsWithoutSetDimension.push(this.contentItems[i]);
            }
        }
        /**
         * Everything adds up to hundred, all good :-)
         */
        if (Math.round(total) === 100) {
            this.respectMinItemWidth();
            return;
        }
        /**
         * Allocate the remaining size to the items without a set dimension
         */
        if (Math.round(total) < 100 && itemsWithoutSetDimension.length > 0) {
            for (let i = 0; i < itemsWithoutSetDimension.length; i++) {
                itemsWithoutSetDimension[i][this._dimension] = (100 - total) / itemsWithoutSetDimension.length;
            }
            this.respectMinItemWidth();
            return;
        }
        /**
         * If the total is > 100, but there are also items without a set dimension left, assing 50
         * as their dimension and add it to the total
         *
         * This will be reset in the next step
         */
        if (Math.round(total) > 100) {
            for (let i = 0; i < itemsWithoutSetDimension.length; i++) {
                itemsWithoutSetDimension[i][this._dimension] = 50;
                total += 50;
            }
        }
        /**
         * Set every items size relative to 100 relative to its size to total
         */
        for (let i = 0; i < this.contentItems.length; i++) {
            this.contentItems[i][this._dimension] = (this.contentItems[i][this._dimension] / total) * 100;
        }
        this.respectMinItemWidth();
    }
    /**
     * Adjusts the column widths to respect the dimensions minItemWidth if set.
     * @internal
     */
    respectMinItemWidth() {
        const minItemWidth = this.layoutManager.layoutConfig.dimensions.minItemWidth;
        let totalOverMin = 0;
        let totalUnderMin = 0;
        const entriesOverMin = [];
        const allEntries = [];
        if (this._isColumn || !minItemWidth || this.contentItems.length <= 1) {
            return;
        }
        const sizeData = this.calculateAbsoluteSizes();
        /**
         * Figure out how much we are under the min item size total and how much room we have to use.
         */
        for (let i = 0; i < sizeData.itemSizes.length; i++) {
            const itemSize = sizeData.itemSizes[i];
            let entry;
            if (itemSize < minItemWidth) {
                totalUnderMin += minItemWidth - itemSize;
                entry = {
                    width: minItemWidth
                };
            }
            else {
                totalOverMin += itemSize - minItemWidth;
                entry = {
                    width: itemSize
                };
                entriesOverMin.push(entry);
            }
            allEntries.push(entry);
        }
        /**
         * If there is nothing under min, or there is not enough over to make up the difference, do nothing.
         */
        if (totalUnderMin === 0 || totalUnderMin > totalOverMin) {
            return;
        }
        /**
         * Evenly reduce all columns that are over the min item width to make up the difference.
         */
        const reducePercent = totalUnderMin / totalOverMin;
        let remainingWidth = totalUnderMin;
        for (let i = 0; i < entriesOverMin.length; i++) {
            const entry = entriesOverMin[i];
            const reducedWidth = Math.round((entry.width - minItemWidth) * reducePercent);
            remainingWidth -= reducedWidth;
            entry.width -= reducedWidth;
        }
        /**
         * Take anything remaining from the last item.
         */
        if (remainingWidth !== 0) {
            allEntries[allEntries.length - 1].width -= remainingWidth;
        }
        /**
         * Set every items size relative to 100 relative to its size to total
         */
        for (let i = 0; i < this.contentItems.length; i++) {
            this.contentItems[i].width = (allEntries[i].width / sizeData.totalWidth) * 100;
        }
    }
    /**
     * Instantiates a new Splitter, binds events to it and adds
     * it to the array of splitters at the position specified as the index argument
     *
     * What it doesn't do though is append the splitter to the DOM
     *
     * @param index - The position of the splitter
     *
     * @returns
     * @internal
     */
    createSplitter(index) {
        const splitter = new _controls_splitter__WEBPACK_IMPORTED_MODULE_5__.Splitter(this._isColumn, this._splitterSize, this._splitterGrabSize);
        splitter.on('drag', (offsetX, offsetY) => this.onSplitterDrag(splitter, offsetX, offsetY));
        splitter.on('dragStop', () => this.onSplitterDragStop(splitter));
        splitter.on('dragStart', () => this.onSplitterDragStart(splitter));
        this._splitter.splice(index, 0, splitter);
        return splitter;
    }
    /**
     * Locates the instance of Splitter in the array of
     * registered splitters and returns a map containing the contentItem
     * before and after the splitters, both of which are affected if the
     * splitter is moved
     *
     * @returns A map of contentItems that the splitter affects
     * @internal
     */
    getItemsForSplitter(splitter) {
        const index = this._splitter.indexOf(splitter);
        return {
            before: this.contentItems[index],
            after: this.contentItems[index + 1]
        };
    }
    /**
     * Gets the minimum dimensions for the given item configuration array
     * @internal
     */
    getMinimumDimensions(arr) {
        var _a, _b;
        let minWidth = 0;
        let minHeight = 0;
        for (let i = 0; i < arr.length; ++i) {
            minWidth = Math.max((_a = arr[i].minWidth) !== null && _a !== void 0 ? _a : 0, minWidth);
            minHeight = Math.max((_b = arr[i].minHeight) !== null && _b !== void 0 ? _b : 0, minHeight);
        }
        return {
            horizontal: minWidth,
            vertical: minHeight
        };
    }
    /**
     * Invoked when a splitter's dragListener fires dragStart. Calculates the splitters
     * movement area once (so that it doesn't need calculating on every mousemove event)
     * @internal
     */
    onSplitterDragStart(splitter) {
        const items = this.getItemsForSplitter(splitter);
        const minSize = this.layoutManager.layoutConfig.dimensions[this._isColumn ? 'minItemHeight' : 'minItemWidth'];
        const beforeMinDim = this.getMinimumDimensions(items.before.contentItems);
        const beforeMinSize = this._isColumn ? beforeMinDim.vertical : beforeMinDim.horizontal;
        const afterMinDim = this.getMinimumDimensions(items.after.contentItems);
        const afterMinSize = this._isColumn ? afterMinDim.vertical : afterMinDim.horizontal;
        this._splitterPosition = 0;
        this._splitterMinPosition = -1 * ((0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.pixelsToNumber)(items.before.element.style[this._dimension]) - (beforeMinSize || minSize));
        this._splitterMaxPosition = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.pixelsToNumber)(items.after.element.style[this._dimension]) - (afterMinSize || minSize);
    }
    /**
     * Invoked when a splitter's DragListener fires drag. Updates the splitter's DOM position,
     * but not the sizes of the elements the splitter controls in order to minimize resize events
     *
     * @param splitter -
     * @param offsetX - Relative pixel values to the splitter's original position. Can be negative
     * @param offsetY - Relative pixel values to the splitter's original position. Can be negative
     * @internal
     */
    onSplitterDrag(splitter, offsetX, offsetY) {
        let offset = this._isColumn ? offsetY : offsetX;
        if (this._splitterMinPosition === null || this._splitterMaxPosition === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnexpectedNullError('ROCOSD59226');
        }
        offset = Math.max(offset, this._splitterMinPosition);
        offset = Math.min(offset, this._splitterMaxPosition);
        this._splitterPosition = offset;
        const offsetPixels = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(offset);
        if (this._isColumn) {
            splitter.element.style.top = offsetPixels;
        }
        else {
            splitter.element.style.left = offsetPixels;
        }
    }
    /**
     * Invoked when a splitter's DragListener fires dragStop. Resets the splitters DOM position,
     * and applies the new sizes to the elements before and after the splitter and their children
     * on the next animation frame
     * @internal
     */
    onSplitterDragStop(splitter) {
        if (this._splitterPosition === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnexpectedNullError('ROCOSDS66932');
        }
        else {
            const items = this.getItemsForSplitter(splitter);
            const sizeBefore = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.pixelsToNumber)(items.before.element.style[this._dimension]);
            const sizeAfter = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.pixelsToNumber)(items.after.element.style[this._dimension]);
            const splitterPositionInRange = (this._splitterPosition + sizeBefore) / (sizeBefore + sizeAfter);
            const totalRelativeSize = items.before[this._dimension] + items.after[this._dimension];
            items.before[this._dimension] = splitterPositionInRange * totalRelativeSize;
            items.after[this._dimension] = (1 - splitterPositionInRange) * totalRelativeSize;
            splitter.element.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(0);
            splitter.element.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(0);
            globalThis.requestAnimationFrame(() => this.updateSize());
        }
    }
}
/** @public */
(function (RowOrColumn) {
    /** @internal */
    function getElementDimensionSize(element, dimension) {
        if (dimension === 'width') {
            return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.getElementWidth)(element);
        }
        else {
            return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.getElementHeight)(element);
        }
    }
    RowOrColumn.getElementDimensionSize = getElementDimensionSize;
    /** @internal */
    function setElementDimensionSize(element, dimension, value) {
        if (dimension === 'width') {
            return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementWidth)(element, value);
        }
        else {
            return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementHeight)(element, value);
        }
    }
    RowOrColumn.setElementDimensionSize = setElementDimensionSize;
    /** @internal */
    function createElement(document, isColumn) {
        const element = document.createElement('div');
        element.classList.add("lm_item" /* Item */);
        if (isColumn) {
            element.classList.add("lm_column" /* Column */);
        }
        else {
            element.classList.add("lm_row" /* Row */);
        }
        return element;
    }
    RowOrColumn.createElement = createElement;
})(RowOrColumn || (RowOrColumn = {}));


/***/ }),

/***/ "./src/ts/items/stack.ts":
/*!*******************************!*\
  !*** ./src/ts/items/stack.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Stack": () => (/* binding */ Stack)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _controls_header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../controls/header */ "./src/ts/controls/header.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_jquery_legacy__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/jquery-legacy */ "./src/ts/utils/jquery-legacy.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _component_item__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./component-item */ "./src/ts/items/component-item.ts");
/* harmony import */ var _component_parentable_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component-parentable-item */ "./src/ts/items/component-parentable-item.ts");
/* harmony import */ var _content_item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./content-item */ "./src/ts/items/content-item.ts");











/** @public */
class Stack extends _component_parentable_item__WEBPACK_IMPORTED_MODULE_0__.ComponentParentableItem {
    /** @internal */
    constructor(layoutManager, config, parent) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        super(layoutManager, config, parent, Stack.createElement(document));
        /** @internal */
        this._headerSideChanged = false;
        /** @internal */
        this._resizeListener = () => this.handleResize();
        /** @internal */
        this._maximisedListener = () => this.handleMaximised();
        /** @internal */
        this._minimisedListener = () => this.handleMinimised();
        this._headerConfig = config.header;
        const layoutHeaderConfig = layoutManager.layoutConfig.header;
        const configContent = config.content;
        // If stack has only one component, then we can also check this for header settings
        let componentHeaderConfig;
        if (configContent.length !== 1) {
            componentHeaderConfig = undefined;
        }
        else {
            const firstChildItemConfig = configContent[0];
            componentHeaderConfig = firstChildItemConfig.header; // will be undefined if not component (and wont be stack)
        }
        this._initialWantMaximise = config.maximised;
        this._initialActiveItemIndex = (_a = config.activeItemIndex) !== null && _a !== void 0 ? _a : 0; // make sure defined
        // check for defined value for each item in order of Stack (this Item), Component (first child), Manager.
        const show = (_d = (_c = (_b = this._headerConfig) === null || _b === void 0 ? void 0 : _b.show) !== null && _c !== void 0 ? _c : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.show) !== null && _d !== void 0 ? _d : layoutHeaderConfig.show;
        const popout = (_g = (_f = (_e = this._headerConfig) === null || _e === void 0 ? void 0 : _e.popout) !== null && _f !== void 0 ? _f : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.popout) !== null && _g !== void 0 ? _g : layoutHeaderConfig.popout;
        const maximise = (_k = (_j = (_h = this._headerConfig) === null || _h === void 0 ? void 0 : _h.maximise) !== null && _j !== void 0 ? _j : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.maximise) !== null && _k !== void 0 ? _k : layoutHeaderConfig.maximise;
        const close = (_o = (_m = (_l = this._headerConfig) === null || _l === void 0 ? void 0 : _l.close) !== null && _m !== void 0 ? _m : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.close) !== null && _o !== void 0 ? _o : layoutHeaderConfig.close;
        const minimise = (_r = (_q = (_p = this._headerConfig) === null || _p === void 0 ? void 0 : _p.minimise) !== null && _q !== void 0 ? _q : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.minimise) !== null && _r !== void 0 ? _r : layoutHeaderConfig.minimise;
        const tabDropdown = (_u = (_t = (_s = this._headerConfig) === null || _s === void 0 ? void 0 : _s.tabDropdown) !== null && _t !== void 0 ? _t : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.tabDropdown) !== null && _u !== void 0 ? _u : layoutHeaderConfig.tabDropdown;
        this._maximisedEnabled = maximise !== false;
        const headerSettings = {
            show: show !== false,
            side: show === false ? _utils_types__WEBPACK_IMPORTED_MODULE_1__.Side.top : show,
            popoutEnabled: popout !== false,
            popoutLabel: popout === false ? '' : popout,
            maximiseEnabled: this._maximisedEnabled,
            maximiseLabel: maximise === false ? '' : maximise,
            closeEnabled: close !== false,
            closeLabel: close === false ? '' : close,
            minimiseEnabled: true,
            minimiseLabel: minimise,
            tabDropdownEnabled: tabDropdown !== false,
            tabDropdownLabel: tabDropdown === false ? '' : tabDropdown,
        };
        this._header = new _controls_header__WEBPACK_IMPORTED_MODULE_2__.Header(layoutManager, this, headerSettings, config.isClosable && close !== false, () => this.getActiveComponentItem(), () => this.remove(), () => this.handlePopoutEvent(), () => this.toggleMaximise(), (ev) => this.handleHeaderClickEvent(ev), (ev) => this.handleHeaderTouchStartEvent(ev), (item) => this.handleHeaderComponentRemoveEvent(item), (item) => this.handleHeaderComponentFocusEvent(item), (x, y, dragListener, item) => this.handleHeaderComponentStartDragEvent(x, y, dragListener, item));
        // this._dropZones = {};
        this.isStack = true;
        this._childElementContainer = document.createElement('section');
        this._childElementContainer.classList.add("lm_items" /* Items */);
        this.on('resize', this._resizeListener);
        if (this._maximisedEnabled) {
            this.on('maximised', this._maximisedListener);
            this.on('minimised', this._minimisedListener);
        }
        this.element.appendChild(this._header.element);
        this.element.appendChild(this._childElementContainer);
        this.setupHeaderPosition();
        this._header.updateClosability();
    }
    get childElementContainer() { return this._childElementContainer; }
    get headerShow() { return this._header.show; }
    get headerSide() { return this._header.side; }
    get headerLeftRightSided() { return this._header.leftRightSided; }
    /** @internal */
    get contentAreaDimensions() { return this._contentAreaDimensions; }
    /** @internal */
    get initialWantMaximise() { return this._initialWantMaximise; }
    get isMaximised() { return this === this.layoutManager.maximisedStack; }
    get stackParent() {
        if (!this.parent) {
            throw new Error('Stack should always have a parent');
        }
        return this.parent;
    }
    /** @internal */
    updateSize() {
        this.layoutManager.beginVirtualSizedContainerAdding();
        try {
            this.updateNodeSize();
            this.updateContentItemsSize();
        }
        finally {
            this.layoutManager.endVirtualSizedContainerAdding();
        }
    }
    /** @internal */
    init() {
        if (this.isInitialised === true)
            return;
        this.updateNodeSize();
        for (let i = 0; i < this.contentItems.length; i++) {
            this._childElementContainer.appendChild(this.contentItems[i].element);
        }
        super.init();
        const contentItems = this.contentItems;
        const contentItemCount = contentItems.length;
        if (contentItemCount > 0) { // contentItemCount will be 0 on drag drop
            if (this._initialActiveItemIndex < 0 || this._initialActiveItemIndex >= contentItemCount) {
                throw new Error(`ActiveItemIndex out of range: ${this._initialActiveItemIndex} id: ${this.id}`);
            }
            else {
                for (let i = 0; i < contentItemCount; i++) {
                    const contentItem = contentItems[i];
                    if (!(contentItem instanceof _component_item__WEBPACK_IMPORTED_MODULE_3__.ComponentItem)) {
                        throw new Error(`Stack Content Item is not of type ComponentItem: ${i} id: ${this.id}`);
                    }
                    else {
                        this._header.createTab(contentItem, i);
                        contentItem.hide();
                    }
                }
                this.setActiveComponentItem(contentItems[this._initialActiveItemIndex], false);
                this._header.updateTabSizes();
            }
        }
        this._header.updateClosability();
        this.initContentItems();
    }
    /** @deprecated Use {@link (Stack:class).setActiveComponentItem} */
    setActiveContentItem(item) {
        if (!_content_item__WEBPACK_IMPORTED_MODULE_4__.ContentItem.isComponentItem(item)) {
            throw new Error('Stack.setActiveContentItem: item is not a ComponentItem');
        }
        else {
            this.setActiveComponentItem(item, false);
        }
    }
    setActiveComponentItem(componentItem, focus, suppressFocusEvent = false) {
        if (this._activeComponentItem !== componentItem) {
            if (this.contentItems.indexOf(componentItem) === -1) {
                throw new Error('componentItem is not a child of this stack');
            }
            else {
                if (this._activeComponentItem !== undefined) {
                    this._activeComponentItem.hide();
                }
                this._activeComponentItem = componentItem;
                this._header.processActiveComponentChanged(componentItem);
                componentItem.show();
                this.emit('activeContentItemChanged', componentItem);
                this.layoutManager.emit('activeContentItemChanged', componentItem);
                this.emitStateChangedEvent();
            }
        }
        if (this.focused || focus) {
            this.layoutManager.setFocusedComponentItem(componentItem, suppressFocusEvent);
        }
    }
    /** @deprecated Use {@link (Stack:class).getActiveComponentItem} */
    getActiveContentItem() {
        var _a;
        return (_a = this.getActiveComponentItem()) !== null && _a !== void 0 ? _a : null;
    }
    getActiveComponentItem() {
        return this._activeComponentItem;
    }
    /** @internal */
    focusActiveContentItem() {
        var _a;
        (_a = this._activeComponentItem) === null || _a === void 0 ? void 0 : _a.focus();
    }
    /** @internal */
    setFocusedValue(value) {
        this._header.applyFocusedValue(value);
        super.setFocusedValue(value);
    }
    /** @internal */
    setRowColumnClosable(value) {
        this._header.setRowColumnClosable(value);
    }
    newComponent(componentType, componentState, title, index) {
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        return this.newItem(itemConfig, index);
    }
    addComponent(componentType, componentState, title, index) {
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        return this.addItem(itemConfig, index);
    }
    newItem(itemConfig, index) {
        index = this.addItem(itemConfig, index);
        return this.contentItems[index];
    }
    addItem(itemConfig, index) {
        this.layoutManager.checkMinimiseMaximisedStack();
        const resolvedItemConfig = _config_config__WEBPACK_IMPORTED_MODULE_5__.ItemConfig.resolve(itemConfig);
        const contentItem = this.layoutManager.createAndInitContentItem(resolvedItemConfig, this);
        return this.addChild(contentItem, index);
    }
    addChild(contentItem, index, focus = false) {
        if (index !== undefined && index > this.contentItems.length) {
            index -= 1;
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('SAC99728'); // undisplayChild() removed so this condition should no longer occur
        }
        if (!(contentItem instanceof _component_item__WEBPACK_IMPORTED_MODULE_3__.ComponentItem)) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('SACC88532'); // Stacks can only have Component children
        }
        else {
            index = super.addChild(contentItem, index);
            this._childElementContainer.appendChild(contentItem.element);
            this._header.createTab(contentItem, index);
            this.setActiveComponentItem(contentItem, focus);
            this._header.updateTabSizes();
            this.updateSize();
            this._header.updateClosability();
            this.emitStateChangedEvent();
            return index;
        }
    }
    removeChild(contentItem, keepChild) {
        const componentItem = contentItem;
        const index = this.contentItems.indexOf(componentItem);
        const stackWillBeDeleted = this.contentItems.length === 1;
        if (this._activeComponentItem === componentItem) {
            if (componentItem.focused) {
                componentItem.blur();
            }
            if (!stackWillBeDeleted) {
                // At this point we're already sure we have at least one content item left *after*
                // removing contentItem, so we can safely assume index 1 is a valid one if
                // the index of contentItem is 0, otherwise we just use the previous content item.
                const newActiveComponentIdx = index === 0 ? 1 : index - 1;
                this.setActiveComponentItem(this.contentItems[newActiveComponentIdx], false);
            }
        }
        this._header.removeTab(componentItem);
        super.removeChild(componentItem, keepChild);
        if (!stackWillBeDeleted) {
            this._header.updateClosability();
        }
        this.emitStateChangedEvent();
    }
    /**
     * Maximises the Item or minimises it if it is already maximised
     */
    toggleMaximise() {
        if (this.isMaximised) {
            this.minimise();
        }
        else {
            this.maximise();
        }
    }
    maximise() {
        if (!this.isMaximised) {
            this.layoutManager.setMaximisedStack(this);
            const contentItems = this.contentItems;
            const contentItemCount = contentItems.length;
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                if (contentItem instanceof _component_item__WEBPACK_IMPORTED_MODULE_3__.ComponentItem) {
                    contentItem.enterStackMaximised();
                }
                else {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('SMAXI87773');
                }
            }
            this.emitStateChangedEvent();
        }
    }
    minimise() {
        if (this.isMaximised) {
            this.layoutManager.setMaximisedStack(undefined);
            const contentItems = this.contentItems;
            const contentItemCount = contentItems.length;
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                if (contentItem instanceof _component_item__WEBPACK_IMPORTED_MODULE_3__.ComponentItem) {
                    contentItem.exitStackMaximised();
                }
                else {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('SMINI87773');
                }
            }
            this.emitStateChangedEvent();
        }
    }
    /** @internal */
    destroy() {
        var _a;
        if ((_a = this._activeComponentItem) === null || _a === void 0 ? void 0 : _a.focused) {
            this._activeComponentItem.blur();
        }
        super.destroy();
        this.off('resize', this._resizeListener);
        if (this._maximisedEnabled) {
            this.off('maximised', this._maximisedListener);
            this.off('minimised', this._minimisedListener);
        }
        this._header.destroy();
    }
    toConfig() {
        let activeItemIndex;
        if (this._activeComponentItem) {
            activeItemIndex = this.contentItems.indexOf(this._activeComponentItem);
            if (activeItemIndex < 0) {
                throw new Error('active component item not found in stack');
            }
        }
        if (this.contentItems.length > 0 && activeItemIndex === undefined) {
            throw new Error('expected non-empty stack to have an active component item');
        }
        else {
            const result = {
                type: 'stack',
                content: this.calculateConfigContent(),
                width: this.width,
                minWidth: this.minWidth,
                height: this.height,
                minHeight: this.minHeight,
                id: this.id,
                isClosable: this.isClosable,
                maximised: this.isMaximised,
                header: this.createHeaderConfig(),
                activeItemIndex,
            };
            return result;
        }
    }
    /**
     * Ok, this one is going to be the tricky one: The user has dropped a {@link (ContentItem:class)} onto this stack.
     *
     * It was dropped on either the stacks header or the top, right, bottom or left bit of the content area
     * (which one of those is stored in this._dropSegment). Now, if the user has dropped on the header the case
     * is relatively clear: We add the item to the existing stack... job done (might be good to have
     * tab reordering at some point, but lets not sweat it right now)
     *
     * If the item was dropped on the content part things are a bit more complicated. If it was dropped on either the
     * top or bottom region we need to create a new column and place the items accordingly.
     * Unless, of course if the stack is already within a column... in which case we want
     * to add the newly created item to the existing column...
     * either prepend or append it, depending on wether its top or bottom.
     *
     * Same thing for rows and left / right drop segments... so in total there are 9 things that can potentially happen
     * (left, top, right, bottom) * is child of the right parent (row, column) + header drop
     *
     * @internal
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onDrop(contentItem, area) {
        /*
         * The item was dropped on the header area. Just add it as a child of this stack and
         * get the hell out of this logic
         */
        if (this._dropSegment === "header" /* Header */) {
            this.resetHeaderDropZone();
            if (this._dropIndex === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('SODDI68990');
            }
            else {
                this.addChild(contentItem, this._dropIndex);
                return;
            }
        }
        /*
         * The stack is empty. Let's just add the element.
         */
        if (this._dropSegment === "body" /* Body */) {
            this.addChild(contentItem, 0, true);
            return;
        }
        /*
         * The item was dropped on the top-, left-, bottom- or right- part of the content. Let's
         * aggregate some conditions to make the if statements later on more readable
         */
        const isVertical = this._dropSegment === "top" /* Top */ || this._dropSegment === "bottom" /* Bottom */;
        const isHorizontal = this._dropSegment === "left" /* Left */ || this._dropSegment === "right" /* Right */;
        const insertBefore = this._dropSegment === "top" /* Top */ || this._dropSegment === "left" /* Left */;
        const hasCorrectParent = (isVertical && this.stackParent.isColumn) || (isHorizontal && this.stackParent.isRow);
        const dimension = isVertical ? 'height' : 'width';
        /*
         * The content item can be either a component or a stack. If it is a component, wrap it into a stack
         */
        if (contentItem.isComponent) {
            const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__.ResolvedStackItemConfig.createDefault();
            itemConfig.header = this.createHeaderConfig();
            const stack = this.layoutManager.createAndInitContentItem(itemConfig, this);
            stack.addChild(contentItem);
            contentItem = stack;
        }
        /*
         * If the contentItem that's being dropped is not dropped on a Stack (cases which just passed above and
         * which would wrap the contentItem in a Stack) we need to check whether contentItem is a RowOrColumn.
         * If it is, we need to re-wrap it in a Stack like it was when it was dragged by its Tab (it was dragged!).
         */
        if (contentItem.type === _utils_types__WEBPACK_IMPORTED_MODULE_1__.ItemType.row || contentItem.type === _utils_types__WEBPACK_IMPORTED_MODULE_1__.ItemType.column) {
            const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__.ResolvedStackItemConfig.createDefault();
            itemConfig.header = this.createHeaderConfig();
            const stack = this.layoutManager.createContentItem(itemConfig, this);
            stack.addChild(contentItem);
            contentItem = stack;
        }
        /*
         * If the item is dropped on top or bottom of a column or left and right of a row, it's already
         * layd out in the correct way. Just add it as a child
         */
        if (hasCorrectParent) {
            const index = this.stackParent.contentItems.indexOf(this);
            this.stackParent.addChild(contentItem, insertBefore ? index : index + 1, true);
            this[dimension] *= 0.5;
            contentItem[dimension] = this[dimension];
            this.stackParent.updateSize();
            /*
             * This handles items that are dropped on top or bottom of a row or left / right of a column. We need
             * to create the appropriate contentItem for them to live in
             */
        }
        else {
            const type = isVertical ? _utils_types__WEBPACK_IMPORTED_MODULE_1__.ItemType.column : _utils_types__WEBPACK_IMPORTED_MODULE_1__.ItemType.row;
            const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__.ResolvedItemConfig.createDefault(type);
            const rowOrColumn = this.layoutManager.createContentItem(itemConfig, this);
            this.stackParent.replaceChild(this, rowOrColumn);
            rowOrColumn.addChild(contentItem, insertBefore ? 0 : undefined, true);
            rowOrColumn.addChild(this, insertBefore ? undefined : 0, true);
            this[dimension] = 50;
            contentItem[dimension] = 50;
            rowOrColumn.updateSize();
        }
    }
    /**
     * If the user hovers above the header part of the stack, indicate drop positions for tabs.
     * otherwise indicate which segment of the body the dragged item would be dropped on
     *
     * @param x - Absolute Screen X
     * @param y - Absolute Screen Y
     * @internal
     */
    highlightDropZone(x, y) {
        for (const key in this._contentAreaDimensions) {
            const segment = key;
            const area = this._contentAreaDimensions[segment].hoverArea;
            if (area.x1 < x && area.x2 > x && area.y1 < y && area.y2 > y) {
                if (segment === "header" /* Header */) {
                    this._dropSegment = "header" /* Header */;
                    this.highlightHeaderDropZone(this._header.leftRightSided ? y : x);
                }
                else {
                    this.resetHeaderDropZone();
                    this.highlightBodyDropZone(segment);
                }
                return;
            }
        }
    }
    /** @internal */
    getArea() {
        if (this.element.style.display === 'none') {
            return null;
        }
        const headerArea = super.getElementArea(this._header.element);
        const contentArea = super.getElementArea(this._childElementContainer);
        if (headerArea === null || contentArea === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('SGAHC13086');
        }
        const contentWidth = contentArea.x2 - contentArea.x1;
        const contentHeight = contentArea.y2 - contentArea.y1;
        this._contentAreaDimensions = {
            header: {
                hoverArea: {
                    x1: headerArea.x1,
                    y1: headerArea.y1,
                    x2: headerArea.x2,
                    y2: headerArea.y2
                },
                highlightArea: {
                    x1: headerArea.x1,
                    y1: headerArea.y1,
                    x2: headerArea.x2,
                    y2: headerArea.y2
                }
            }
        };
        /**
         * Highlight the entire body if the stack is empty
         */
        if (this.contentItems.length === 0) {
            this._contentAreaDimensions.body = {
                hoverArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1,
                    x2: contentArea.x2,
                    y2: contentArea.y2
                },
                highlightArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1,
                    x2: contentArea.x2,
                    y2: contentArea.y2
                }
            };
            return super.getElementArea(this.element);
        }
        else {
            this._contentAreaDimensions.left = {
                hoverArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1,
                    x2: contentArea.x1 + contentWidth * 0.25,
                    y2: contentArea.y2
                },
                highlightArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1,
                    x2: contentArea.x1 + contentWidth * 0.5,
                    y2: contentArea.y2
                }
            };
            this._contentAreaDimensions.top = {
                hoverArea: {
                    x1: contentArea.x1 + contentWidth * 0.25,
                    y1: contentArea.y1,
                    x2: contentArea.x1 + contentWidth * 0.75,
                    y2: contentArea.y1 + contentHeight * 0.5
                },
                highlightArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1,
                    x2: contentArea.x2,
                    y2: contentArea.y1 + contentHeight * 0.5
                }
            };
            this._contentAreaDimensions.right = {
                hoverArea: {
                    x1: contentArea.x1 + contentWidth * 0.75,
                    y1: contentArea.y1,
                    x2: contentArea.x2,
                    y2: contentArea.y2
                },
                highlightArea: {
                    x1: contentArea.x1 + contentWidth * 0.5,
                    y1: contentArea.y1,
                    x2: contentArea.x2,
                    y2: contentArea.y2
                }
            };
            this._contentAreaDimensions.bottom = {
                hoverArea: {
                    x1: contentArea.x1 + contentWidth * 0.25,
                    y1: contentArea.y1 + contentHeight * 0.5,
                    x2: contentArea.x1 + contentWidth * 0.75,
                    y2: contentArea.y2
                },
                highlightArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1 + contentHeight * 0.5,
                    x2: contentArea.x2,
                    y2: contentArea.y2
                }
            };
            return super.getElementArea(this.element);
        }
    }
    /**
     * Programmatically operate with header position.
     *
     * @param position -
     *
     * @returns previous header position
     * @internal
     */
    positionHeader(position) {
        if (this._header.side !== position) {
            this._header.setSide(position);
            this._headerSideChanged = true;
            this.setupHeaderPosition();
        }
    }
    /** @internal */
    updateNodeSize() {
        if (this.element.style.display !== 'none') {
            const content = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.getElementWidthAndHeight)(this.element);
            if (this._header.show) {
                const dimension = this._header.leftRightSided ? _utils_types__WEBPACK_IMPORTED_MODULE_1__.WidthOrHeightPropertyName.width : _utils_types__WEBPACK_IMPORTED_MODULE_1__.WidthOrHeightPropertyName.height;
                content[dimension] -= this.layoutManager.layoutConfig.dimensions.headerHeight;
            }
            this._childElementContainer.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.numberToPixels)(content.width);
            this._childElementContainer.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.numberToPixels)(content.height);
            for (let i = 0; i < this.contentItems.length; i++) {
                this.contentItems[i].element.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.numberToPixels)(content.width);
                this.contentItems[i].element.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.numberToPixels)(content.height);
            }
            this.emit('resize');
            this.emitStateChangedEvent();
        }
    }
    /** @internal */
    highlightHeaderDropZone(x) {
        // Only walk over the visible tabs
        const tabsLength = this._header.lastVisibleTabIndex + 1;
        const dropTargetIndicator = this.layoutManager.dropTargetIndicator;
        if (dropTargetIndicator === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('SHHDZDTI97110');
        }
        let area;
        // Empty stack
        if (tabsLength === 0) {
            const headerOffset = (0,_utils_jquery_legacy__WEBPACK_IMPORTED_MODULE_9__.getJQueryOffset)(this._header.element);
            const elementHeight = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.getElementHeight)(this._header.element);
            area = {
                x1: headerOffset.left,
                x2: headerOffset.left + 100,
                y1: headerOffset.top + elementHeight - 20,
                y2: headerOffset.top + elementHeight,
            };
        }
        else {
            let tabIndex = 0;
            // This indicates whether our cursor is exactly over a tab
            let isAboveTab = false;
            let tabTop;
            let tabLeft;
            let tabWidth;
            let tabElement;
            do {
                tabElement = this._header.tabs[tabIndex].element;
                const offset = (0,_utils_jquery_legacy__WEBPACK_IMPORTED_MODULE_9__.getJQueryOffset)(tabElement);
                if (this._header.leftRightSided) {
                    tabLeft = offset.top;
                    tabTop = offset.left;
                    tabWidth = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.getElementHeight)(tabElement);
                }
                else {
                    tabLeft = offset.left;
                    tabTop = offset.top;
                    tabWidth = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.getElementWidth)(tabElement);
                }
                if (x >= tabLeft && x < tabLeft + tabWidth) {
                    isAboveTab = true;
                }
                else {
                    tabIndex++;
                }
            } while (tabIndex < tabsLength && !isAboveTab);
            // If we're not above any tabs, or to the right of any tab, we are out of the area, so give up
            if (isAboveTab === false && x < tabLeft) {
                return;
            }
            const halfX = tabLeft + tabWidth / 2;
            if (x < halfX) {
                this._dropIndex = tabIndex;
                tabElement.insertAdjacentElement('beforebegin', this.layoutManager.tabDropPlaceholder);
            }
            else {
                this._dropIndex = Math.min(tabIndex + 1, tabsLength);
                tabElement.insertAdjacentElement('afterend', this.layoutManager.tabDropPlaceholder);
            }
            const tabDropPlaceholderOffset = (0,_utils_jquery_legacy__WEBPACK_IMPORTED_MODULE_9__.getJQueryOffset)(this.layoutManager.tabDropPlaceholder);
            const tabDropPlaceholderWidth = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.getElementWidth)(this.layoutManager.tabDropPlaceholder);
            if (this._header.leftRightSided) {
                const placeHolderTop = tabDropPlaceholderOffset.top;
                area = {
                    x1: tabTop,
                    x2: tabTop + tabElement.clientHeight,
                    y1: placeHolderTop,
                    y2: placeHolderTop + tabDropPlaceholderWidth,
                };
            }
            else {
                const placeHolderLeft = tabDropPlaceholderOffset.left;
                area = {
                    x1: placeHolderLeft,
                    x2: placeHolderLeft + tabDropPlaceholderWidth,
                    y1: tabTop,
                    y2: tabTop + tabElement.clientHeight,
                };
            }
        }
        dropTargetIndicator.highlightArea(area);
        return;
    }
    /** @internal */
    resetHeaderDropZone() {
        this.layoutManager.tabDropPlaceholder.remove();
    }
    /** @internal */
    setupHeaderPosition() {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.setElementDisplayVisibility)(this._header.element, this._header.show);
        this.element.classList.remove("lm_left" /* Left */, "lm_right" /* Right */, "lm_bottom" /* Bottom */);
        if (this._header.leftRightSided) {
            this.element.classList.add('lm_' + this._header.side);
        }
        //if ([Side.right, Side.bottom].includes(this._header.side)) {
        //    // move the header behind the content.
        //    this.element.appendChild(this._header.element);
        //}
        this.updateSize();
    }
    /** @internal */
    highlightBodyDropZone(segment) {
        if (this._contentAreaDimensions === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('SHBDZC82265');
        }
        else {
            const highlightArea = this._contentAreaDimensions[segment].highlightArea;
            const dropTargetIndicator = this.layoutManager.dropTargetIndicator;
            if (dropTargetIndicator === null) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('SHBDZD96110');
            }
            else {
                dropTargetIndicator.highlightArea(highlightArea);
                this._dropSegment = segment;
            }
        }
    }
    /** @internal */
    handleResize() {
        this._header.updateTabSizes();
    }
    /** @internal */
    handleMaximised() {
        this._header.processMaximised();
    }
    /** @internal */
    handleMinimised() {
        this._header.processMinimised();
    }
    /** @internal */
    handlePopoutEvent() {
        this.popout();
    }
    /** @internal */
    handleHeaderClickEvent(ev) {
        const eventName = _utils_event_emitter__WEBPACK_IMPORTED_MODULE_10__.EventEmitter.headerClickEventName;
        const bubblingEvent = new _utils_event_emitter__WEBPACK_IMPORTED_MODULE_10__.EventEmitter.ClickBubblingEvent(eventName, this, ev);
        this.emit(eventName, bubblingEvent);
    }
    /** @internal */
    handleHeaderTouchStartEvent(ev) {
        const eventName = _utils_event_emitter__WEBPACK_IMPORTED_MODULE_10__.EventEmitter.headerTouchStartEventName;
        const bubblingEvent = new _utils_event_emitter__WEBPACK_IMPORTED_MODULE_10__.EventEmitter.TouchStartBubblingEvent(eventName, this, ev);
        this.emit(eventName, bubblingEvent);
    }
    /** @internal */
    handleHeaderComponentRemoveEvent(item) {
        this.removeChild(item, false);
    }
    /** @internal */
    handleHeaderComponentFocusEvent(item) {
        this.setActiveComponentItem(item, true);
    }
    /** @internal */
    handleHeaderComponentStartDragEvent(x, y, dragListener, componentItem) {
        if (this.isMaximised === true) {
            this.toggleMaximise();
        }
        this.layoutManager.startComponentDrag(x, y, dragListener, componentItem, this);
    }
    /** @internal */
    createHeaderConfig() {
        if (!this._headerSideChanged) {
            return _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__.ResolvedHeaderedItemConfig.Header.createCopy(this._headerConfig);
        }
        else {
            const show = this._header.show ? this._header.side : false;
            let result = _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__.ResolvedHeaderedItemConfig.Header.createCopy(this._headerConfig, show);
            if (result === undefined) {
                result = {
                    show,
                    popout: undefined,
                    maximise: undefined,
                    close: undefined,
                    minimise: undefined,
                    tabDropdown: undefined,
                };
            }
            return result;
        }
    }
    /** @internal */
    emitStateChangedEvent() {
        this.emitBaseBubblingEvent('stateChanged');
    }
}
/** @public */
(function (Stack) {
    /** @internal */
    function createElement(document) {
        const element = document.createElement('div');
        element.classList.add("lm_item" /* Item */);
        element.classList.add("lm_stack" /* Stack */);
        return element;
    }
    Stack.createElement = createElement;
})(Stack || (Stack = {}));


/***/ }),

/***/ "./src/ts/layout-manager.ts":
/*!**********************************!*\
  !*** ./src/ts/layout-manager.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LayoutManager": () => (/* binding */ LayoutManager)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _controls_browser_popout__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./controls/browser-popout */ "./src/ts/controls/browser-popout.ts");
/* harmony import */ var _controls_drag_proxy__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./controls/drag-proxy */ "./src/ts/controls/drag-proxy.ts");
/* harmony import */ var _controls_drag_source__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./controls/drag-source */ "./src/ts/controls/drag-source.ts");
/* harmony import */ var _controls_drop_target_indicator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./controls/drop-target-indicator */ "./src/ts/controls/drop-target-indicator.ts");
/* harmony import */ var _controls_transition_indicator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./controls/transition-indicator */ "./src/ts/controls/transition-indicator.ts");
/* harmony import */ var _errors_external_error__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _items_component_item__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./items/component-item */ "./src/ts/items/component-item.ts");
/* harmony import */ var _items_content_item__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./items/content-item */ "./src/ts/items/content-item.ts");
/* harmony import */ var _items_ground_item__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./items/ground-item */ "./src/ts/items/ground-item.ts");
/* harmony import */ var _items_row_or_column__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./items/row-or-column */ "./src/ts/items/row-or-column.ts");
/* harmony import */ var _items_stack__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./items/stack */ "./src/ts/items/stack.ts");
/* harmony import */ var _utils_config_minifier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/config-minifier */ "./src/ts/utils/config-minifier.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_event_hub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/event-hub */ "./src/ts/utils/event-hub.ts");
/* harmony import */ var _utils_i18n_strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/i18n-strings */ "./src/ts/utils/i18n-strings.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/utils */ "./src/ts/utils/utils.ts");




















/**
 * The main class that will be exposed as GoldenLayout.
 */
/** @public */
class LayoutManager extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /**
    * @param container - A Dom HTML element. Defaults to body
    * @internal
    */
    constructor(parameters) {
        super();
        /** @internal */
        this._isFullPage = false;
        /** @internal */
        this._isInitialised = false;
        /** @internal */
        this._groundItem = undefined;
        /** @internal */
        this._openPopouts = [];
        /** @internal */
        this._dropTargetIndicator = null;
        /** @internal */
        this._transitionIndicator = null;
        /** @internal */
        this._itemAreas = [];
        /** @internal */
        this._maximisePlaceholder = LayoutManager.createMaximisePlaceElement(document);
        /** @internal */
        this._tabDropPlaceholder = LayoutManager.createTabDropPlaceholderElement(document);
        /** @internal */
        this._dragSources = [];
        /** @internal */
        this._updatingColumnsResponsive = false;
        /** @internal */
        this._firstLoad = true;
        /** @internal */
        this._eventHub = new _utils_event_hub__WEBPACK_IMPORTED_MODULE_1__.EventHub(this);
        /** @internal */
        this._width = null;
        /** @internal */
        this._height = null;
        /** @internal */
        this._virtualSizedContainers = [];
        /** @internal */
        this._virtualSizedContainerAddingBeginCount = 0;
        /** @internal */
        this._windowResizeListener = () => this.processResizeWithDebounce();
        /** @internal */
        this._windowUnloadListener = () => this.onUnload();
        /** @internal */
        this._maximisedStackBeforeDestroyedListener = (ev) => this.cleanupBeforeMaximisedStackDestroyed(ev);
        let layoutConfig = parameters.layoutConfig;
        if (layoutConfig === undefined) {
            layoutConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_2__.ResolvedLayoutConfig.createDefault();
        }
        this.layoutConfig = layoutConfig;
        this.isSubWindow = parameters.isSubWindow;
        _utils_i18n_strings__WEBPACK_IMPORTED_MODULE_3__.I18nStrings.checkInitialise();
        _utils_config_minifier__WEBPACK_IMPORTED_MODULE_4__.ConfigMinifier.checkInitialise();
        if (parameters.containerElement !== undefined) {
            this._containerElement = parameters.containerElement;
        }
    }
    get container() { return this._containerElement; }
    get isInitialised() { return this._isInitialised; }
    /** @internal */
    get groundItem() { return this._groundItem; }
    /** @internal @deprecated use {@link (LayoutManager:class).groundItem} instead */
    get root() { return this._groundItem; }
    get openPopouts() { return this._openPopouts; }
    /** @internal */
    get dropTargetIndicator() { return this._dropTargetIndicator; }
    /** @internal @deprecated To be removed */
    get transitionIndicator() { return this._transitionIndicator; }
    get width() { return this._width; }
    get height() { return this._height; }
    /**
     * Retrieves the {@link (EventHub:class)} instance associated with this layout manager.
     * This can be used to propagate events between the windows
     * @public
     */
    get eventHub() { return this._eventHub; }
    get rootItem() {
        if (this._groundItem === undefined) {
            throw new Error('Cannot access rootItem before init');
        }
        else {
            const groundContentItems = this._groundItem.contentItems;
            if (groundContentItems.length === 0) {
                return undefined;
            }
            else {
                return this._groundItem.contentItems[0];
            }
        }
    }
    get focusedComponentItem() { return this._focusedComponentItem; }
    /** @internal */
    get tabDropPlaceholder() { return this._tabDropPlaceholder; }
    get maximisedStack() { return this._maximisedStack; }
    /**
     * Destroys the LayoutManager instance itself as well as every ContentItem
     * within it. After this is called nothing should be left of the LayoutManager.
     */
    destroy() {
        if (this._isInitialised) {
            if (this.layoutConfig.settings.closePopoutsOnUnload === true) {
                for (let i = 0; i < this._openPopouts.length; i++) {
                    this._openPopouts[i].close();
                }
            }
            if (this._isFullPage) {
                globalThis.removeEventListener('resize', this._windowResizeListener);
            }
            globalThis.removeEventListener('unload', this._windowUnloadListener);
            globalThis.removeEventListener('beforeunload', this._windowUnloadListener);
            if (this._groundItem !== undefined) {
                this._groundItem.destroy();
            }
            this._tabDropPlaceholder.remove();
            if (this._dropTargetIndicator !== null) {
                this._dropTargetIndicator.destroy();
            }
            if (this._transitionIndicator !== null) {
                this._transitionIndicator.destroy();
            }
            this._eventHub.destroy();
            for (const dragSource of this._dragSources) {
                dragSource.destroy();
            }
            this._dragSources = [];
            this._isInitialised = false;
        }
    }
    /**
     * Takes a GoldenLayout configuration object and
     * replaces its keys and values recursively with
     * one letter codes
     * @deprecated use {@link (ResolvedLayoutConfig:namespace).minifyConfig} instead
     */
    minifyConfig(config) {
        return _config_resolved_config__WEBPACK_IMPORTED_MODULE_2__.ResolvedLayoutConfig.minifyConfig(config);
    }
    /**
     * Takes a configuration Object that was previously minified
     * using minifyConfig and returns its original version
     * @deprecated use {@link (ResolvedLayoutConfig:namespace).unminifyConfig} instead
     */
    unminifyConfig(config) {
        return _config_resolved_config__WEBPACK_IMPORTED_MODULE_2__.ResolvedLayoutConfig.unminifyConfig(config);
    }
    /**
     * Called from GoldenLayout class. Finishes of init
     * @internal
     */
    init() {
        this.setContainer();
        this._dropTargetIndicator = new _controls_drop_target_indicator__WEBPACK_IMPORTED_MODULE_5__.DropTargetIndicator( /*this.container*/);
        this._transitionIndicator = new _controls_transition_indicator__WEBPACK_IMPORTED_MODULE_6__.TransitionIndicator();
        this.updateSizeFromContainer();
        const layoutConfig = this.layoutConfig;
        this._groundItem = new _items_ground_item__WEBPACK_IMPORTED_MODULE_7__.GroundItem(this, layoutConfig.root, this._containerElement);
        this._groundItem.init();
        this.checkLoadedLayoutMaximiseItem();
        this.bindEvents();
        this._isInitialised = true;
        this.adjustColumnsResponsive();
        this.emit('initialised');
    }
    /**
     * Loads a new layout
     * @param layoutConfig - New layout to be loaded
     */
    loadLayout(layoutConfig) {
        if (!this.isInitialised) {
            // In case application not correctly using legacy constructor
            throw new Error('GoldenLayout: Need to call init() if LayoutConfig with defined root passed to constructor');
        }
        else {
            if (this._groundItem === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMLL11119');
            }
            else {
                this.layoutConfig = _config_config__WEBPACK_IMPORTED_MODULE_9__.LayoutConfig.resolve(layoutConfig);
                this._groundItem.loadRoot(this.layoutConfig.root);
                this.checkLoadedLayoutMaximiseItem();
                this.adjustColumnsResponsive();
            }
        }
    }
    /**
     * Creates a layout configuration object based on the the current state
     *
     * @public
     * @returns GoldenLayout configuration
     */
    saveLayout() {
        if (this._isInitialised === false) {
            throw new Error('Can\'t create config, layout not yet initialised');
        }
        else {
            // if (root !== undefined && !(root instanceof ContentItem)) {
            //     throw new Error('Root must be a ContentItem');
            // }
            /*
            * Content
            */
            if (this._groundItem === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMTC18244');
            }
            else {
                const groundContent = this._groundItem.calculateConfigContent();
                let rootItemConfig;
                if (groundContent.length !== 1) {
                    rootItemConfig = undefined;
                }
                else {
                    rootItemConfig = groundContent[0];
                }
                /*
                * Retrieve config for subwindows
                */
                this.reconcilePopoutWindows();
                const openPopouts = [];
                for (let i = 0; i < this._openPopouts.length; i++) {
                    openPopouts.push(this._openPopouts[i].toConfig());
                }
                const config = {
                    root: rootItemConfig,
                    openPopouts,
                    settings: _config_resolved_config__WEBPACK_IMPORTED_MODULE_2__.ResolvedLayoutConfig.Settings.createCopy(this.layoutConfig.settings),
                    dimensions: _config_resolved_config__WEBPACK_IMPORTED_MODULE_2__.ResolvedLayoutConfig.Dimensions.createCopy(this.layoutConfig.dimensions),
                    header: _config_resolved_config__WEBPACK_IMPORTED_MODULE_2__.ResolvedLayoutConfig.Header.createCopy(this.layoutConfig.header),
                    resolved: true,
                };
                return config;
            }
        }
    }
    /**
     * Removes any existing layout. Effectively, an empty layout will be loaded.
     */
    clear() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMCL11129');
        }
        else {
            this._groundItem.clearRoot();
        }
    }
    /**
     * @deprecated Use {@link (LayoutManager:class).saveLayout}
     */
    toConfig() {
        return this.saveLayout();
    }
    /**
     * Adds a new ComponentItem.  Will use default location selectors to ensure a location is found and
     * component is successfully added
     * @param componentTypeName - Name of component type to be created.
     * @param state - Optional initial state to be assigned to component
     * @returns New ComponentItem created.
     */
    newComponent(componentType, componentState, title) {
        const componentItem = this.newComponentAtLocation(componentType, componentState, title);
        if (componentItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.AssertError('LMNC65588');
        }
        else {
            return componentItem;
        }
    }
    /**
     * Adds a ComponentItem at the first valid selector location.
     * @param componentTypeName - Name of component type to be created.
     * @param state - Optional initial state to be assigned to component
     * @param locationSelectors - Array of location selectors used to find location in layout where component
     * will be added. First location in array which is valid will be used. If locationSelectors is undefined,
     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used
     * @returns New ComponentItem created or undefined if no valid location selector was in array.
     */
    newComponentAtLocation(componentType, componentState, title, locationSelectors) {
        if (this._groundItem === undefined) {
            throw new Error('Cannot add component before init');
        }
        else {
            const location = this.addComponentAtLocation(componentType, componentState, title, locationSelectors);
            if (location === undefined) {
                return undefined;
            }
            else {
                const createdItem = location.parentItem.contentItems[location.index];
                if (!_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem.isComponentItem(createdItem)) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.AssertError('LMNC992877533');
                }
                else {
                    return createdItem;
                }
            }
        }
    }
    /**
     * Adds a new ComponentItem.  Will use default location selectors to ensure a location is found and
     * component is successfully added
     * @param componentType - Type of component to be created.
     * @param state - Optional initial state to be assigned to component
     * @returns Location of new ComponentItem created.
     */
    addComponent(componentType, componentState, title) {
        const location = this.addComponentAtLocation(componentType, componentState, title);
        if (location === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.AssertError('LMAC99943');
        }
        else {
            return location;
        }
    }
    /**
     * Adds a ComponentItem at the first valid selector location.
     * @param componentType - Type of component to be created.
     * @param state - Optional initial state to be assigned to component
     * @param locationSelectors - Array of location selectors used to find determine location in layout where component
     * will be added. First location in array which is valid will be used. If undefined,
     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used.
     * @returns Location of new ComponentItem created or undefined if no valid location selector was in array.
     */
    addComponentAtLocation(componentType, componentState, title, locationSelectors) {
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        return this.addItemAtLocation(itemConfig, locationSelectors);
    }
    /**
     * Adds a new ContentItem.  Will use default location selectors to ensure a location is found and
     * component is successfully added
     * @param itemConfig - ResolvedItemConfig of child to be added.
     * @returns New ContentItem created.
    */
    newItem(itemConfig) {
        const contentItem = this.newItemAtLocation(itemConfig);
        if (contentItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.AssertError('LMNC65588');
        }
        else {
            return contentItem;
        }
    }
    /**
     * Adds a new child ContentItem under the root ContentItem.  If a root does not exist, then create root ContentItem instead
     * @param itemConfig - ResolvedItemConfig of child to be added.
     * @param locationSelectors - Array of location selectors used to find determine location in layout where ContentItem
     * will be added. First location in array which is valid will be used. If undefined,
     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used.
     * @returns New ContentItem created or undefined if no valid location selector was in array. */
    newItemAtLocation(itemConfig, locationSelectors) {
        if (this._groundItem === undefined) {
            throw new Error('Cannot add component before init');
        }
        else {
            const location = this.addItemAtLocation(itemConfig, locationSelectors);
            if (location === undefined) {
                return undefined;
            }
            else {
                const createdItem = location.parentItem.contentItems[location.index];
                return createdItem;
            }
        }
    }
    /**
     * Adds a new ContentItem.  Will use default location selectors to ensure a location is found and
     * component is successfully added.
     * @param itemConfig - ResolvedItemConfig of child to be added.
     * @returns Location of new ContentItem created. */
    addItem(itemConfig) {
        const location = this.addItemAtLocation(itemConfig);
        if (location === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.AssertError('LMAI99943');
        }
        else {
            return location;
        }
    }
    /**
     * Adds a ContentItem at the first valid selector location.
     * @param itemConfig - ResolvedItemConfig of child to be added.
     * @param locationSelectors - Array of location selectors used to find determine location in layout where ContentItem
     * will be added. First location in array which is valid will be used. If undefined,
     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used.
     * @returns Location of new ContentItem created or undefined if no valid location selector was in array. */
    addItemAtLocation(itemConfig, locationSelectors) {
        if (this._groundItem === undefined) {
            throw new Error('Cannot add component before init');
        }
        else {
            if (locationSelectors === undefined) {
                // defaultLocationSelectors should always find a location
                locationSelectors = LayoutManager.defaultLocationSelectors;
            }
            const location = this.findFirstLocation(locationSelectors);
            if (location === undefined) {
                return undefined;
            }
            else {
                let parentItem = location.parentItem;
                let addIdx;
                switch (parentItem.type) {
                    case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.ground: {
                        const groundItem = parentItem;
                        addIdx = groundItem.addItem(itemConfig, location.index);
                        if (addIdx >= 0) {
                            parentItem = this._groundItem.contentItems[0]; // was added to rootItem
                        }
                        else {
                            addIdx = 0; // was added as rootItem (which is the first and only ContentItem in GroundItem)
                        }
                        break;
                    }
                    case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.row:
                    case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.column: {
                        const rowOrColumn = parentItem;
                        addIdx = rowOrColumn.addItem(itemConfig, location.index);
                        break;
                    }
                    case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.stack: {
                        if (!_config_config__WEBPACK_IMPORTED_MODULE_9__.ItemConfig.isComponent(itemConfig)) {
                            throw Error(_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_3__.i18nStrings[6]);
                        }
                        else {
                            const stack = parentItem;
                            addIdx = stack.addItem(itemConfig, location.index);
                            break;
                        }
                    }
                    case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.component: {
                        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.AssertError('LMAIALC87444602');
                    }
                    default:
                        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnreachableCaseError('LMAIALU98881733', parentItem.type);
                }
                if (_config_config__WEBPACK_IMPORTED_MODULE_9__.ItemConfig.isComponent(itemConfig)) {
                    // see if stack was inserted
                    const item = parentItem.contentItems[addIdx];
                    if (_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem.isStack(item)) {
                        parentItem = item;
                        addIdx = 0;
                    }
                }
                location.parentItem = parentItem;
                location.index = addIdx;
                return location;
            }
        }
    }
    /** Loads the specified component ResolvedItemConfig as root.
     * This can be used to display a Component all by itself.  The layout cannot be changed other than having another new layout loaded.
     * Note that, if this layout is saved and reloaded, it will reload with the Component as a child of a Stack.
    */
    loadComponentAsRoot(itemConfig) {
        if (this._groundItem === undefined) {
            throw new Error('Cannot add item before init');
        }
        else {
            this._groundItem.loadComponentAsRoot(itemConfig);
        }
    }
    /** @deprecated Use {@link (LayoutManager:class).setSize} */
    updateSize(width, height) {
        this.setSize(width, height);
    }
    /**
     * Updates the layout managers size
     *
     * @param width - Width in pixels
     * @param height - Height in pixels
     */
    setSize(width, height) {
        this._width = width;
        this._height = height;
        if (this._isInitialised === true) {
            if (this._groundItem === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMUS18881');
            }
            else {
                this._groundItem.setSize(this._width, this._height);
                if (this._maximisedStack) {
                    const { width, height } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_12__.getElementWidthAndHeight)(this._containerElement);
                    (0,_utils_utils__WEBPACK_IMPORTED_MODULE_12__.setElementWidth)(this._maximisedStack.element, width);
                    (0,_utils_utils__WEBPACK_IMPORTED_MODULE_12__.setElementHeight)(this._maximisedStack.element, height);
                    this._maximisedStack.updateSize();
                }
                this.adjustColumnsResponsive();
            }
        }
    }
    /** @internal */
    updateSizeFromContainer() {
        const { width, height } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_12__.getElementWidthAndHeight)(this._containerElement);
        this.setSize(width, height);
    }
    /**
     * Update the size of the root ContentItem.  This will update the size of all contentItems in the tree
     */
    updateRootSize() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMURS28881');
        }
        else {
            this._groundItem.updateSize();
        }
    }
    /** @public */
    createAndInitContentItem(config, parent) {
        const newItem = this.createContentItem(config, parent);
        newItem.init();
        return newItem;
    }
    /**
     * Recursively creates new item tree structures based on a provided
     * ItemConfiguration object
     *
     * @param config - ResolvedItemConfig
     * @param parent - The item the newly created item should be a child of
     * @internal
     */
    createContentItem(config, parent) {
        if (typeof config.type !== 'string') {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_13__.ConfigurationError('Missing parameter \'type\'', JSON.stringify(config));
        }
        /**
         * We add an additional stack around every component that's not within a stack anyways.
         */
        if (
        // If this is a component
        _config_resolved_config__WEBPACK_IMPORTED_MODULE_2__.ResolvedItemConfig.isComponentItem(config) &&
            // and it's not already within a stack
            !(parent instanceof _items_stack__WEBPACK_IMPORTED_MODULE_14__.Stack) &&
            // and we have a parent
            !!parent &&
            // and it's not the topmost item in a new window
            !(this.isSubWindow === true && parent instanceof _items_ground_item__WEBPACK_IMPORTED_MODULE_7__.GroundItem)) {
            const stackConfig = {
                type: _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.stack,
                content: [config],
                width: config.width,
                minWidth: config.minWidth,
                height: config.height,
                minHeight: config.minHeight,
                id: config.id,
                maximised: config.maximised,
                isClosable: config.isClosable,
                activeItemIndex: 0,
                header: undefined,
            };
            config = stackConfig;
        }
        const contentItem = this.createContentItemFromConfig(config, parent);
        return contentItem;
    }
    findFirstComponentItemById(id) {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMFFCIBI82446');
        }
        else {
            return this.findFirstContentItemTypeByIdRecursive(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.component, id, this._groundItem);
        }
    }
    /**
     * Creates a popout window with the specified content at the specified position
     *
     * @param itemConfigOrContentItem - The content of the popout window's layout manager derived from either
     * a {@link (ContentItem:class)} or {@link (ItemConfig:interface)} or ResolvedItemConfig content (array of {@link (ItemConfig:interface)})
     * @param positionAndSize - The width, height, left and top of Popout window
     * @param parentId -The id of the element this item will be appended to when popIn is called
     * @param indexInParent - The position of this item within its parent element
     */
    createPopout(itemConfigOrContentItem, positionAndSize, parentId, indexInParent) {
        if (itemConfigOrContentItem instanceof _items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem) {
            return this.createPopoutFromContentItem(itemConfigOrContentItem, positionAndSize, parentId, indexInParent);
        }
        else {
            return this.createPopoutFromItemConfig(itemConfigOrContentItem, positionAndSize, parentId, indexInParent);
        }
    }
    /** @internal */
    createPopoutFromContentItem(item, window, parentId, indexInParent) {
        /**
         * If the item is the only component within a stack or for some
         * other reason the only child of its parent the parent will be destroyed
         * when the child is removed.
         *
         * In order to support this we move up the tree until we find something
         * that will remain after the item is being popped out
         */
        let parent = item.parent;
        let child = item;
        while (parent !== null && parent.contentItems.length === 1 && !parent.isGround) {
            child = parent;
            parent = parent.parent;
        }
        if (parent === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedNullError('LMCPFCI00834');
        }
        else {
            if (indexInParent === undefined) {
                indexInParent = parent.contentItems.indexOf(child);
            }
            if (parentId !== null) {
                parent.addPopInParentId(parentId);
            }
            if (window === undefined) {
                const windowLeft = globalThis.screenX || globalThis.screenLeft;
                const windowTop = globalThis.screenY || globalThis.screenTop;
                const offsetLeft = item.element.offsetLeft;
                const offsetTop = item.element.offsetTop;
                // const { left: offsetLeft, top: offsetTop } = getJQueryLeftAndTop(item.element);
                const { width, height } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_12__.getElementWidthAndHeight)(item.element);
                window = {
                    left: windowLeft + offsetLeft,
                    top: windowTop + offsetTop,
                    width,
                    height,
                };
            }
            const itemConfig = item.toConfig();
            item.remove();
            if (!_config_resolved_config__WEBPACK_IMPORTED_MODULE_2__.ResolvedRootItemConfig.isRootItemConfig(itemConfig)) {
                throw new Error(`${_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_3__.i18nStrings[0]}`);
            }
            else {
                return this.createPopoutFromItemConfig(itemConfig, window, parentId, indexInParent);
            }
        }
    }
    /** @internal */
    beginVirtualSizedContainerAdding() {
        if (++this._virtualSizedContainerAddingBeginCount === 0) {
            this._virtualSizedContainers.length = 0;
        }
    }
    /** @internal */
    addVirtualSizedContainer(container) {
        this._virtualSizedContainers.push(container);
    }
    /** @internal */
    endVirtualSizedContainerAdding() {
        if (--this._virtualSizedContainerAddingBeginCount === 0) {
            const count = this._virtualSizedContainers.length;
            if (count > 0) {
                this.fireBeforeVirtualRectingEvent(count);
                for (let i = 0; i < count; i++) {
                    const container = this._virtualSizedContainers[i];
                    container.notifyVirtualRectingRequired();
                }
                this.fireAfterVirtualRectingEvent();
                this._virtualSizedContainers.length = 0;
            }
        }
    }
    /** @internal */
    fireBeforeVirtualRectingEvent(count) {
        if (this.beforeVirtualRectingEvent !== undefined) {
            this.beforeVirtualRectingEvent(count);
        }
    }
    /** @internal */
    fireAfterVirtualRectingEvent() {
        if (this.afterVirtualRectingEvent !== undefined) {
            this.afterVirtualRectingEvent();
        }
    }
    /** @internal */
    createPopoutFromItemConfig(rootItemConfig, window, parentId, indexInParent) {
        const layoutConfig = this.toConfig();
        const popoutLayoutConfig = {
            root: rootItemConfig,
            openPopouts: [],
            settings: layoutConfig.settings,
            dimensions: layoutConfig.dimensions,
            header: layoutConfig.header,
            window,
            parentId,
            indexInParent,
            resolved: true,
        };
        return this.createPopoutFromPopoutLayoutConfig(popoutLayoutConfig);
    }
    /** @internal */
    createPopoutFromPopoutLayoutConfig(config) {
        var _a, _b, _c, _d;
        const configWindow = config.window;
        const initialWindow = {
            left: (_a = configWindow.left) !== null && _a !== void 0 ? _a : (globalThis.screenX || globalThis.screenLeft + 20),
            top: (_b = configWindow.top) !== null && _b !== void 0 ? _b : (globalThis.screenY || globalThis.screenTop + 20),
            width: (_c = configWindow.width) !== null && _c !== void 0 ? _c : 500,
            height: (_d = configWindow.height) !== null && _d !== void 0 ? _d : 309,
        };
        const browserPopout = new _controls_browser_popout__WEBPACK_IMPORTED_MODULE_15__.BrowserPopout(config, initialWindow, this);
        browserPopout.on('initialised', () => this.emit('windowOpened', browserPopout));
        browserPopout.on('closed', () => this.reconcilePopoutWindows());
        this._openPopouts.push(browserPopout);
        return browserPopout;
    }
    /**
     * Attaches DragListener to any given DOM element
     * and turns it into a way of creating new ComponentItems
     * by 'dragging' the DOM element into the layout
     *
     * @param element -
     * @param componentTypeOrFtn - Type of component to be created, or a function which will provide both component type and state
     * @param componentState - Optional initial state of component.  This will be ignored if componentTypeOrFtn is a function
     *
     * @returns an opaque object that identifies the DOM element
     *          and the attached itemConfig. This can be used in
     *          removeDragSource() later to get rid of the drag listeners.
     */
    newDragSource(element, componentTypeOrFtn, componentState, title) {
        const dragSource = new _controls_drag_source__WEBPACK_IMPORTED_MODULE_16__.DragSource(this, element, [], componentTypeOrFtn, componentState, title);
        this._dragSources.push(dragSource);
        return dragSource;
    }
    /**
     * Removes a DragListener added by createDragSource() so the corresponding
     * DOM element is not a drag source any more.
     */
    removeDragSource(dragSource) {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_12__.removeFromArray)(dragSource, this._dragSources);
        dragSource.destroy();
    }
    /** @internal */
    startComponentDrag(x, y, dragListener, componentItem, stack) {
        new _controls_drag_proxy__WEBPACK_IMPORTED_MODULE_17__.DragProxy(x, y, dragListener, this, componentItem, stack);
    }
    /**
     * Programmatically focuses an item. This focuses the specified component item
     * and the item emits a focus event
     *
     * @param item - The component item to be focused
     * @param suppressEvent - Whether to emit focus event
     */
    focusComponent(item, suppressEvent = false) {
        item.focus(suppressEvent);
    }
    /**
     * Programmatically blurs (defocuses) the currently focused component.
     * If a component item is focused, then it is blurred and and the item emits a blur event
     *
     * @param item - The component item to be blurred
     * @param suppressEvent - Whether to emit blur event
     */
    clearComponentFocus(suppressEvent = false) {
        this.setFocusedComponentItem(undefined, suppressEvent);
    }
    /**
     * Programmatically focuses a component item or removes focus (blurs) from an existing focused component item.
     *
     * @param item - If defined, specifies the component item to be given focus.  If undefined, clear component focus.
     * @param suppressEvents - Whether to emit focus and blur events
     * @internal
     */
    setFocusedComponentItem(item, suppressEvents = false) {
        if (item !== this._focusedComponentItem) {
            let newFocusedParentItem;
            if (item === undefined) {
                newFocusedParentItem === undefined;
            }
            else {
                newFocusedParentItem = item.parentItem;
            }
            if (this._focusedComponentItem !== undefined) {
                const oldFocusedItem = this._focusedComponentItem;
                this._focusedComponentItem = undefined;
                oldFocusedItem.setBlurred(suppressEvents);
                const oldFocusedParentItem = oldFocusedItem.parentItem;
                if (newFocusedParentItem === oldFocusedParentItem) {
                    newFocusedParentItem = undefined;
                }
                else {
                    oldFocusedParentItem.setFocusedValue(false);
                }
            }
            if (item !== undefined) {
                this._focusedComponentItem = item;
                item.setFocused(suppressEvents);
                if (newFocusedParentItem !== undefined) {
                    newFocusedParentItem.setFocusedValue(true);
                }
            }
        }
    }
    /** @internal */
    createContentItemFromConfig(config, parent) {
        switch (config.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.ground: throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.AssertError('LMCCIFC68871');
            case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.row: return new _items_row_or_column__WEBPACK_IMPORTED_MODULE_18__.RowOrColumn(false, this, config, parent);
            case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.column: return new _items_row_or_column__WEBPACK_IMPORTED_MODULE_18__.RowOrColumn(true, this, config, parent);
            case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.stack: return new _items_stack__WEBPACK_IMPORTED_MODULE_14__.Stack(this, config, parent);
            case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.component:
                return new _items_component_item__WEBPACK_IMPORTED_MODULE_19__.ComponentItem(this, config, parent);
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnreachableCaseError('CCC913564', config.type, 'Invalid Config Item type specified');
        }
    }
    /**
     * This should only be called from stack component.
     * Stack will look after docking processing associated with maximise/minimise
     * @internal
     **/
    setMaximisedStack(stack) {
        if (stack === undefined) {
            if (this._maximisedStack !== undefined) {
                this.processMinimiseMaximisedStack();
            }
        }
        else {
            if (stack !== this._maximisedStack) {
                if (this._maximisedStack !== undefined) {
                    this.processMinimiseMaximisedStack();
                }
                this.processMaximiseStack(stack);
            }
        }
    }
    checkMinimiseMaximisedStack() {
        if (this._maximisedStack !== undefined) {
            this._maximisedStack.minimise();
        }
    }
    // showAllActiveContentItems() was called from ContentItem.show().  Not sure what its purpose was so have commented out
    // Everything seems to work ok without this.  Have left commented code just in case there was a reason for it becomes
    // apparent
    // /** @internal */
    // showAllActiveContentItems(): void {
    //     const allStacks = this.getAllStacks();
    //     for (let i = 0; i < allStacks.length; i++) {
    //         const stack = allStacks[i];
    //         const activeContentItem = stack.getActiveComponentItem();
    //         if (activeContentItem !== undefined) {
    //             if (!(activeContentItem instanceof ComponentItem)) {
    //                 throw new AssertError('LMSAACIS22298');
    //             } else {
    //                 activeContentItem.container.show();
    //             }
    //         }
    //     }
    // }
    // hideAllActiveContentItems() was called from ContentItem.hide().  Not sure what its purpose was so have commented out
    // Everything seems to work ok without this.  Have left commented code just in case there was a reason for it becomes
    // apparent
    // /** @internal */
    // hideAllActiveContentItems(): void {
    //     const allStacks = this.getAllStacks();
    //     for (let i = 0; i < allStacks.length; i++) {
    //         const stack = allStacks[i];
    //         const activeContentItem = stack.getActiveComponentItem();
    //         if (activeContentItem !== undefined) {
    //             if (!(activeContentItem instanceof ComponentItem)) {
    //                 throw new AssertError('LMSAACIH22298');
    //             } else {
    //                 activeContentItem.container.hide();
    //             }
    //         }
    //     }
    // }
    /** @internal */
    cleanupBeforeMaximisedStackDestroyed(event) {
        if (this._maximisedStack !== null && this._maximisedStack === event.target) {
            this._maximisedStack.off('beforeItemDestroyed', this._maximisedStackBeforeDestroyedListener);
            this._maximisedStack = undefined;
        }
    }
    /**
     * This method is used to get around sandboxed iframe restrictions.
     * If 'allow-top-navigation' is not specified in the iframe's 'sandbox' attribute
     * (as is the case with codepens) the parent window is forbidden from calling certain
     * methods on the child, such as window.close() or setting document.location.href.
     *
     * This prevented GoldenLayout popouts from popping in in codepens. The fix is to call
     * _$closeWindow on the child window's gl instance which (after a timeout to disconnect
     * the invoking method from the close call) closes itself.
     *
     * @internal
     */
    closeWindow() {
        globalThis.setTimeout(() => globalThis.close(), 1);
    }
    /** @internal */
    getArea(x, y) {
        let matchingArea = null;
        let smallestSurface = Infinity;
        for (let i = 0; i < this._itemAreas.length; i++) {
            const area = this._itemAreas[i];
            if (x > area.x1 &&
                x < area.x2 &&
                y > area.y1 &&
                y < area.y2 &&
                smallestSurface > area.surface) {
                smallestSurface = area.surface;
                matchingArea = area;
            }
        }
        return matchingArea;
    }
    /** @internal */
    calculateItemAreas() {
        const allContentItems = this.getAllContentItems();
        /**
         * If the last item is dragged out, highlight the entire container size to
         * allow to re-drop it. this.ground.contentiItems.length === 0 at this point
         *
         * Don't include ground into the possible drop areas though otherwise since it
         * will used for every gap in the layout, e.g. splitters
         */
        const groundItem = this._groundItem;
        if (groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMCIAR44365');
        }
        else {
            if (allContentItems.length === 1) {
                // No root ContentItem (just Ground ContentItem)
                const groundArea = groundItem.getElementArea();
                if (groundArea === null) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedNullError('LMCIARA44365');
                }
                else {
                    this._itemAreas = [groundArea];
                }
                return;
            }
            else {
                if (groundItem.contentItems[0].isStack) {
                    // if root is Stack, then split stack and sides of Layout are same, so skip sides
                    this._itemAreas = [];
                }
                else {
                    // sides of layout
                    this._itemAreas = groundItem.createSideAreas();
                }
                for (let i = 0; i < allContentItems.length; i++) {
                    const stack = allContentItems[i];
                    if (_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem.isStack(stack)) {
                        const area = stack.getArea();
                        if (area === null) {
                            continue;
                        }
                        else {
                            this._itemAreas.push(area);
                            const stackContentAreaDimensions = stack.contentAreaDimensions;
                            if (stackContentAreaDimensions === undefined) {
                                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMCIASC45599');
                            }
                            else {
                                const highlightArea = stackContentAreaDimensions.header.highlightArea;
                                const surface = (highlightArea.x2 - highlightArea.x1) * (highlightArea.y2 - highlightArea.y1);
                                const header = {
                                    x1: highlightArea.x1,
                                    x2: highlightArea.x2,
                                    y1: highlightArea.y1,
                                    y2: highlightArea.y2,
                                    contentItem: stack,
                                    surface,
                                };
                                this._itemAreas.push(header);
                            }
                        }
                    }
                }
            }
        }
    }
    /**
     * Called as part of loading a new layout (including initial init()).
     * Checks to see layout has a maximised item. If so, it maximises that item.
     * @internal
     */
    checkLoadedLayoutMaximiseItem() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMCLLMI43432');
        }
        else {
            const configMaximisedItems = this._groundItem.getConfigMaximisedItems();
            if (configMaximisedItems.length > 0) {
                let item = configMaximisedItems[0];
                if (_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem.isComponentItem(item)) {
                    const stack = item.parent;
                    if (stack === null) {
                        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedNullError('LMXLLMI69999');
                    }
                    else {
                        item = stack;
                    }
                }
                if (!_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem.isStack(item)) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.AssertError('LMCLLMI19993');
                }
                else {
                    item.maximise();
                }
            }
        }
    }
    /** @internal */
    processMaximiseStack(stack) {
        this._maximisedStack = stack;
        stack.on('beforeItemDestroyed', this._maximisedStackBeforeDestroyedListener);
        stack.element.classList.add("lm_maximised" /* Maximised */);
        stack.element.insertAdjacentElement('afterend', this._maximisePlaceholder);
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMMXI19993');
        }
        else {
            this._groundItem.element.prepend(stack.element);
            const { width, height } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_12__.getElementWidthAndHeight)(this._containerElement);
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_12__.setElementWidth)(stack.element, width);
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_12__.setElementHeight)(stack.element, height);
            stack.updateSize();
            stack.focusActiveContentItem();
            this._maximisedStack.emit('maximised');
            this.emit('stateChanged');
        }
    }
    /** @internal */
    processMinimiseMaximisedStack() {
        if (this._maximisedStack === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.AssertError('LMMMS74422');
        }
        else {
            const stack = this._maximisedStack;
            if (stack.parent === null) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedNullError('LMMI13668');
            }
            else {
                stack.element.classList.remove("lm_maximised" /* Maximised */);
                this._maximisePlaceholder.insertAdjacentElement('afterend', stack.element);
                this._maximisePlaceholder.remove();
                stack.parent.updateSize();
                this._maximisedStack = undefined;
                stack.off('beforeItemDestroyed', this._maximisedStackBeforeDestroyedListener);
                stack.emit('minimised');
                this.emit('stateChanged');
            }
        }
    }
    /**
     * Iterates through the array of open popout windows and removes the ones
     * that are effectively closed. This is necessary due to the lack of reliably
     * listening for window.close / unload events in a cross browser compatible fashion.
     * @internal
     */
    reconcilePopoutWindows() {
        const openPopouts = [];
        for (let i = 0; i < this._openPopouts.length; i++) {
            if (this._openPopouts[i].getWindow().closed === false) {
                openPopouts.push(this._openPopouts[i]);
            }
            else {
                this.emit('windowClosed', this._openPopouts[i]);
            }
        }
        if (this._openPopouts.length !== openPopouts.length) {
            this._openPopouts = openPopouts;
            this.emit('stateChanged');
        }
    }
    /**
     * Returns a flattened array of all content items,
     * regardles of level or type
     * @internal
     */
    getAllContentItems() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMGACI13130');
        }
        else {
            return this._groundItem.getAllContentItems();
        }
    }
    /**
     * Binds to DOM/BOM events on init
     * @internal
     */
    bindEvents() {
        if (this._isFullPage) {
            globalThis.addEventListener('resize', this._windowResizeListener, { passive: true });
        }
        globalThis.addEventListener('unload', this._windowUnloadListener, { passive: true });
        globalThis.addEventListener('beforeunload', this._windowUnloadListener, { passive: true });
    }
    /**
     * Debounces resize events
     * @internal
     */
    processResizeWithDebounce() {
        if (this._resizeTimeoutId !== undefined) {
            clearTimeout(this._resizeTimeoutId);
        }
        this._resizeTimeoutId = setTimeout(() => this.updateSizeFromContainer(), 100);
    }
    /**
     * Determines what element the layout will be created in
     * @internal
     */
    setContainer() {
        var _a;
        const bodyElement = document.body;
        const containerElement = (_a = this._containerElement) !== null && _a !== void 0 ? _a : bodyElement;
        if (containerElement === bodyElement) {
            this._isFullPage = true;
            const documentElement = document.documentElement;
            documentElement.style.height = '100%';
            documentElement.style.margin = '0';
            documentElement.style.padding = '0';
            documentElement.style.overflow = 'hidden';
            bodyElement.style.height = '100%';
            bodyElement.style.margin = '0';
            bodyElement.style.padding = '0';
            bodyElement.style.overflow = 'hidden';
        }
        this._containerElement = containerElement;
    }
    /**
     * Called when the window is closed or the user navigates away
     * from the page
     * @internal
     */
    onUnload() {
        this.destroy();
    }
    /**
     * Adjusts the number of columns to be lower to fit the screen and still maintain minItemWidth.
     * @internal
     */
    adjustColumnsResponsive() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMACR20883');
        }
        else {
            this._firstLoad = false;
            // If there is no min width set, or not content items, do nothing.
            if (this.useResponsiveLayout() &&
                !this._updatingColumnsResponsive &&
                this._groundItem.contentItems.length > 0 &&
                this._groundItem.contentItems[0].isRow) {
                if (this._groundItem === undefined || this._width === null) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMACR77412');
                }
                else {
                    // If there is only one column, do nothing.
                    const columnCount = this._groundItem.contentItems[0].contentItems.length;
                    if (columnCount <= 1) {
                        return;
                    }
                    else {
                        // If they all still fit, do nothing.
                        const minItemWidth = this.layoutConfig.dimensions.minItemWidth;
                        const totalMinWidth = columnCount * minItemWidth;
                        if (totalMinWidth <= this._width) {
                            return;
                        }
                        else {
                            // Prevent updates while it is already happening.
                            this._updatingColumnsResponsive = true;
                            // Figure out how many columns to stack, and put them all in the first stack container.
                            const finalColumnCount = Math.max(Math.floor(this._width / minItemWidth), 1);
                            const stackColumnCount = columnCount - finalColumnCount;
                            const rootContentItem = this._groundItem.contentItems[0];
                            const allStacks = this.getAllStacks();
                            if (allStacks.length === 0) {
                                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.AssertError('LMACRS77413');
                            }
                            else {
                                const firstStackContainer = allStacks[0];
                                for (let i = 0; i < stackColumnCount; i++) {
                                    // Stack from right.
                                    const column = rootContentItem.contentItems[rootContentItem.contentItems.length - 1];
                                    this.addChildContentItemsToContainer(firstStackContainer, column);
                                }
                                this._updatingColumnsResponsive = false;
                            }
                        }
                    }
                }
            }
        }
    }
    /**
     * Determines if responsive layout should be used.
     *
     * @returns True if responsive layout should be used; otherwise false.
     * @internal
     */
    useResponsiveLayout() {
        const settings = this.layoutConfig.settings;
        const alwaysResponsiveMode = settings.responsiveMode === _utils_types__WEBPACK_IMPORTED_MODULE_11__.ResponsiveMode.always;
        const onLoadResponsiveModeAndFirst = settings.responsiveMode === _utils_types__WEBPACK_IMPORTED_MODULE_11__.ResponsiveMode.onload && this._firstLoad;
        return alwaysResponsiveMode || onLoadResponsiveModeAndFirst;
    }
    /**
     * Adds all children of a node to another container recursively.
     * @param container - Container to add child content items to.
     * @param node - Node to search for content items.
     * @internal
     */
    addChildContentItemsToContainer(container, node) {
        const contentItems = node.contentItems;
        if (node instanceof _items_stack__WEBPACK_IMPORTED_MODULE_14__.Stack) {
            for (let i = 0; i < contentItems.length; i++) {
                const item = contentItems[i];
                node.removeChild(item, true);
                container.addChild(item);
            }
        }
        else {
            for (let i = 0; i < contentItems.length; i++) {
                const item = contentItems[i];
                this.addChildContentItemsToContainer(container, item);
            }
        }
    }
    /**
     * Finds all the stacks.
     * @returns The found stack containers.
     * @internal
     */
    getAllStacks() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMFASC52778');
        }
        else {
            const stacks = [];
            this.findAllStacksRecursive(stacks, this._groundItem);
            return stacks;
        }
    }
    /** @internal */
    findFirstContentItemType(type) {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMFFCIT82446');
        }
        else {
            return this.findFirstContentItemTypeRecursive(type, this._groundItem);
        }
    }
    /** @internal */
    findFirstContentItemTypeRecursive(type, node) {
        const contentItems = node.contentItems;
        const contentItemCount = contentItems.length;
        if (contentItemCount === 0) {
            return undefined;
        }
        else {
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                if (contentItem.type === type) {
                    return contentItem;
                }
            }
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                const foundContentItem = this.findFirstContentItemTypeRecursive(type, contentItem);
                if (foundContentItem !== undefined) {
                    return foundContentItem;
                }
            }
            return undefined;
        }
    }
    /** @internal */
    findFirstContentItemTypeByIdRecursive(type, id, node) {
        const contentItems = node.contentItems;
        const contentItemCount = contentItems.length;
        if (contentItemCount === 0) {
            return undefined;
        }
        else {
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                if (contentItem.type === type && contentItem.id === id) {
                    return contentItem;
                }
            }
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                const foundContentItem = this.findFirstContentItemTypeByIdRecursive(type, id, contentItem);
                if (foundContentItem !== undefined) {
                    return foundContentItem;
                }
            }
            return undefined;
        }
    }
    /**
     * Finds all the stack containers.
     *
     * @param stacks - Set of containers to populate.
     * @param node - Current node to process.
     * @internal
     */
    findAllStacksRecursive(stacks, node) {
        const contentItems = node.contentItems;
        for (let i = 0; i < contentItems.length; i++) {
            const item = contentItems[i];
            if (item instanceof _items_stack__WEBPACK_IMPORTED_MODULE_14__.Stack) {
                stacks.push(item);
            }
            else {
                if (!item.isComponent) {
                    this.findAllStacksRecursive(stacks, item);
                }
            }
        }
    }
    /** @internal */
    findFirstLocation(selectors) {
        const count = selectors.length;
        for (let i = 0; i < count; i++) {
            const selector = selectors[i];
            const location = this.findLocation(selector);
            if (location !== undefined) {
                return location;
            }
        }
        return undefined;
    }
    /** @internal */
    findLocation(selector) {
        const selectorIndex = selector.index;
        switch (selector.typeId) {
            case 0 /* FocusedItem */: {
                if (this._focusedComponentItem === undefined) {
                    return undefined;
                }
                else {
                    const parentItem = this._focusedComponentItem.parentItem;
                    const parentContentItems = parentItem.contentItems;
                    const parentContentItemCount = parentContentItems.length;
                    if (selectorIndex === undefined) {
                        return { parentItem, index: parentContentItemCount };
                    }
                    else {
                        const focusedIndex = parentContentItems.indexOf(this._focusedComponentItem);
                        const index = focusedIndex + selectorIndex;
                        if (index < 0 || index > parentContentItemCount) {
                            return undefined;
                        }
                        else {
                            return { parentItem, index };
                        }
                    }
                }
            }
            case 1 /* FocusedStack */: {
                if (this._focusedComponentItem === undefined) {
                    return undefined;
                }
                else {
                    const parentItem = this._focusedComponentItem.parentItem;
                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                }
            }
            case 2 /* FirstStack */: {
                const parentItem = this.findFirstContentItemType(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.stack);
                if (parentItem === undefined) {
                    return undefined;
                }
                else {
                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                }
            }
            case 3 /* FirstRowOrColumn */: {
                let parentItem = this.findFirstContentItemType(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.row);
                if (parentItem !== undefined) {
                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                }
                else {
                    parentItem = this.findFirstContentItemType(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.column);
                    if (parentItem !== undefined) {
                        return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                    }
                    else {
                        return undefined;
                    }
                }
            }
            case 4 /* FirstRow */: {
                const parentItem = this.findFirstContentItemType(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.row);
                if (parentItem === undefined) {
                    return undefined;
                }
                else {
                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                }
            }
            case 5 /* FirstColumn */: {
                const parentItem = this.findFirstContentItemType(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.column);
                if (parentItem === undefined) {
                    return undefined;
                }
                else {
                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                }
            }
            case 6 /* Empty */: {
                if (this._groundItem === undefined) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMFLRIF18244');
                }
                else {
                    if (this.rootItem !== undefined) {
                        return undefined;
                    }
                    else {
                        if (selectorIndex === undefined || selectorIndex === 0)
                            return { parentItem: this._groundItem, index: 0 };
                        else {
                            return undefined;
                        }
                    }
                }
            }
            case 7 /* Root */: {
                if (this._groundItem === undefined) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_8__.UnexpectedUndefinedError('LMFLF18244');
                }
                else {
                    const groundContentItems = this._groundItem.contentItems;
                    if (groundContentItems.length === 0) {
                        if (selectorIndex === undefined || selectorIndex === 0)
                            return { parentItem: this._groundItem, index: 0 };
                        else {
                            return undefined;
                        }
                    }
                    else {
                        const parentItem = groundContentItems[0];
                        return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                    }
                }
            }
        }
    }
    /** @internal */
    tryCreateLocationFromParentItem(parentItem, selectorIndex) {
        const parentContentItems = parentItem.contentItems;
        const parentContentItemCount = parentContentItems.length;
        if (selectorIndex === undefined) {
            return { parentItem, index: parentContentItemCount };
        }
        else {
            if (selectorIndex < 0 || selectorIndex > parentContentItemCount) {
                return undefined;
            }
            else {
                return { parentItem, index: selectorIndex };
            }
        }
    }
}
/** @public */
(function (LayoutManager) {
    /** @internal */
    function createMaximisePlaceElement(document) {
        const element = document.createElement('div');
        element.classList.add("lm_maximise_place" /* MaximisePlace */);
        return element;
    }
    LayoutManager.createMaximisePlaceElement = createMaximisePlaceElement;
    /** @internal */
    function createTabDropPlaceholderElement(document) {
        const element = document.createElement('div');
        element.classList.add("lm_drop_tab_placeholder" /* DropTabPlaceholder */);
        return element;
    }
    LayoutManager.createTabDropPlaceholderElement = createTabDropPlaceholderElement;
    /**
     * Default LocationSelectors array used if none is specified.  Will always find a location.
     * @public
     */
    LayoutManager.defaultLocationSelectors = [
        { typeId: 1 /* FocusedStack */, index: undefined },
        { typeId: 2 /* FirstStack */, index: undefined },
        { typeId: 3 /* FirstRowOrColumn */, index: undefined },
        { typeId: 7 /* Root */, index: undefined },
    ];
    /**
     * LocationSelectors to try to get location next to existing focused item
     * @public
     */
    LayoutManager.afterFocusedItemIfPossibleLocationSelectors = [
        { typeId: 0 /* FocusedItem */, index: 1 },
        { typeId: 2 /* FirstStack */, index: undefined },
        { typeId: 3 /* FirstRowOrColumn */, index: undefined },
        { typeId: 7 /* Root */, index: undefined },
    ];
})(LayoutManager || (LayoutManager = {}));


/***/ }),

/***/ "./src/ts/utils/config-minifier.ts":
/*!*****************************************!*\
  !*** ./src/ts/utils/config-minifier.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConfigMinifier": () => (/* binding */ ConfigMinifier)
/* harmony export */ });
/**
 * Minifies and unminifies configs by replacing frequent keys
 * and values with one letter substitutes. Config options must
 * retain array position/index, add new options at the end.
 * @internal
*/
var ConfigMinifier;
(function (ConfigMinifier) {
    const keys = [
        'settings',
        'hasHeaders',
        'constrainDragToContainer',
        'selectionEnabled',
        'dimensions',
        'borderWidth',
        'minItemHeight',
        'minItemWidth',
        'headerHeight',
        'dragProxyWidth',
        'dragProxyHeight',
        'labels',
        'close',
        'maximise',
        'minimise',
        'popout',
        'content',
        'componentType',
        'componentState',
        'id',
        'width',
        'type',
        'height',
        'isClosable',
        'title',
        'popoutWholeStack',
        'openPopouts',
        'parentId',
        'activeItemIndex',
        'reorderEnabled',
        'borderGrabWidth',
        //Maximum 36 entries, do not cross this line!
    ];
    const values = [
        true,
        false,
        'row',
        'column',
        'stack',
        'component',
        'close',
        'maximise',
        'minimise',
        'open in new window'
    ];
    function checkInitialise() {
        if (keys.length > 36) {
            throw new Error('Too many keys in config minifier map');
        }
    }
    ConfigMinifier.checkInitialise = checkInitialise;
    function translateObject(from, minify) {
        const to = {};
        for (const key in from) {
            if (from.hasOwnProperty(key)) { // In case something has extended Object prototypes
                let translatedKey;
                if (minify) {
                    translatedKey = minifyKey(key);
                }
                else {
                    translatedKey = unminifyKey(key);
                }
                const fromValue = from[key];
                to[translatedKey] = translateValue(fromValue, minify);
            }
        }
        return to;
    }
    ConfigMinifier.translateObject = translateObject;
    function translateArray(from, minify) {
        const length = from.length;
        const to = new Array(length);
        for (let i = 0; i < length; i++) {
            // In original code, array indices were numbers and not translated
            const fromValue = from[i];
            to[i] = translateValue(fromValue, minify);
        }
        return to;
    }
    function translateValue(from, minify) {
        if (typeof from === 'object') {
            if (from === null) {
                return null;
            }
            else {
                if (Array.isArray(from)) {
                    return translateArray(from, minify);
                }
                else {
                    return translateObject(from, minify);
                }
            }
        }
        else {
            if (minify) {
                return minifyValue(from);
            }
            else {
                return unminifyValue(from);
            }
        }
    }
    function minifyKey(value) {
        /**
         * If a value actually is a single character, prefix it
         * with ___ to avoid mistaking it for a minification code
         */
        if (typeof value === 'string' && value.length === 1) {
            return '___' + value;
        }
        const index = indexOfKey(value);
        /**
         * value not found in the dictionary, return it unmodified
         */
        if (index === -1) {
            return value;
            /**
             * value found in dictionary, return its base36 counterpart
             */
        }
        else {
            return index.toString(36);
        }
    }
    function unminifyKey(key) {
        /**
         * value is a single character. Assume that it's a translation
         * and return the original value from the dictionary
         */
        if (key.length === 1) {
            return keys[parseInt(key, 36)];
        }
        /**
         * value originally was a single character and was prefixed with ___
         * to avoid mistaking it for a translation. Remove the prefix
         * and return the original character
         */
        if (key.substr(0, 3) === '___') {
            return key[3];
        }
        /**
         * value was not minified
         */
        return key;
    }
    function minifyValue(value) {
        /**
         * If a value actually is a single character, prefix it
         * with ___ to avoid mistaking it for a minification code
         */
        if (typeof value === 'string' && value.length === 1) {
            return '___' + value;
        }
        const index = indexOfValue(value);
        /**
         * value not found in the dictionary, return it unmodified
         */
        if (index === -1) {
            return value;
            /**
             * value found in dictionary, return its base36 counterpart
             */
        }
        else {
            return index.toString(36);
        }
    }
    function unminifyValue(value) {
        /**
         * value is a single character. Assume that it's a translation
         * and return the original value from the dictionary
         */
        if (typeof value === 'string' && value.length === 1) {
            return values[parseInt(value, 36)];
        }
        /**
         * value originally was a single character and was prefixed with ___
         * to avoid mistaking it for a translation. Remove the prefix
         * and return the original character
         */
        if (typeof value === 'string' && value.substr(0, 3) === '___') {
            return value[3];
        }
        /**
         * value was not minified
         */
        return value;
    }
    function indexOfKey(key) {
        for (let i = 0; i < keys.length; i++) {
            if (keys[i] === key) {
                return i;
            }
        }
        return -1;
    }
    function indexOfValue(value) {
        for (let i = 0; i < values.length; i++) {
            if (values[i] === value) {
                return i;
            }
        }
        return -1;
    }
})(ConfigMinifier || (ConfigMinifier = {}));


/***/ }),

/***/ "./src/ts/utils/drag-listener.ts":
/*!***************************************!*\
  !*** ./src/ts/utils/drag-listener.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DragListener": () => (/* binding */ DragListener)
/* harmony export */ });
/* harmony import */ var _event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-emitter */ "./src/ts/utils/event-emitter.ts");

/** @internal */
class DragListener extends _event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    constructor(_eElement, extraAllowableChildTargets) {
        super();
        this._eElement = _eElement;
        this._pointerTracking = false;
        this._pointerDownEventListener = (ev) => this.onPointerDown(ev);
        this._pointerMoveEventListener = (ev) => this.onPointerMove(ev);
        this._pointerUpEventListener = (ev) => this.onPointerUp(ev);
        this._timeout = undefined;
        this._allowableTargets = [_eElement, ...extraAllowableChildTargets];
        this._oDocument = document;
        this._eBody = document.body;
        /**
         * The delay after which to start the drag in milliseconds
         * Do NOT make too short (previous value of 200 was not long enough for my touchpad)
         * Should generally rely on the mouse move to start drag.  Not this delay.
         */
        this._nDelay = 1800;
        /**
         * The distance the mouse needs to be moved to qualify as a drag
         * Previous comment: works better with delay only
         * ???
         * Probably somehow needs tuning for different devices
         */
        this._nDistance = 10;
        this._nX = 0;
        this._nY = 0;
        this._nOriginalX = 0;
        this._nOriginalY = 0;
        this._dragging = false;
        this._eElement.addEventListener('pointerdown', this._pointerDownEventListener, { passive: true });
    }
    destroy() {
        this.checkRemovePointerTrackingEventListeners();
        this._eElement.removeEventListener('pointerdown', this._pointerDownEventListener);
    }
    cancelDrag() {
        this.processDragStop(undefined);
    }
    onPointerDown(oEvent) {
        if (this._allowableTargets.includes(oEvent.target) && oEvent.isPrimary) {
            const coordinates = this.getPointerCoordinates(oEvent);
            this.processPointerDown(coordinates);
        }
    }
    processPointerDown(coordinates) {
        this._nOriginalX = coordinates.x;
        this._nOriginalY = coordinates.y;
        this._oDocument.addEventListener('pointermove', this._pointerMoveEventListener);
        this._oDocument.addEventListener('pointerup', this._pointerUpEventListener, { passive: true });
        this._pointerTracking = true;
        this._timeout = setTimeout(() => {
            try {
                this.startDrag();
            }
            catch (err) {
                console.error(err);
                throw err;
            }
        }, this._nDelay);
    }
    onPointerMove(oEvent) {
        if (this._pointerTracking) {
            this.processDragMove(oEvent);
            oEvent.preventDefault();
        }
    }
    processDragMove(dragEvent) {
        this._nX = dragEvent.pageX - this._nOriginalX;
        this._nY = dragEvent.pageY - this._nOriginalY;
        if (this._dragging === false) {
            if (Math.abs(this._nX) > this._nDistance ||
                Math.abs(this._nY) > this._nDistance) {
                this.startDrag();
            }
        }
        if (this._dragging) {
            this.emit('drag', this._nX, this._nY, dragEvent);
        }
    }
    onPointerUp(oEvent) {
        this.processDragStop(oEvent);
    }
    processDragStop(dragEvent) {
        var _a;
        if (this._timeout !== undefined) {
            clearTimeout(this._timeout);
            this._timeout = undefined;
        }
        this.checkRemovePointerTrackingEventListeners();
        if (this._dragging === true) {
            this._eBody.classList.remove("lm_dragging" /* Dragging */);
            this._eElement.classList.remove("lm_dragging" /* Dragging */);
            (_a = this._oDocument.querySelector('iframe')) === null || _a === void 0 ? void 0 : _a.style.setProperty('pointer-events', '');
            this._dragging = false;
            this.emit('dragStop', dragEvent);
        }
    }
    checkRemovePointerTrackingEventListeners() {
        if (this._pointerTracking) {
            this._oDocument.removeEventListener('pointermove', this._pointerMoveEventListener);
            this._oDocument.removeEventListener('pointerup', this._pointerUpEventListener);
            this._pointerTracking = false;
        }
    }
    startDrag() {
        var _a;
        if (this._timeout !== undefined) {
            clearTimeout(this._timeout);
            this._timeout = undefined;
        }
        this._dragging = true;
        this._eBody.classList.add("lm_dragging" /* Dragging */);
        this._eElement.classList.add("lm_dragging" /* Dragging */);
        (_a = this._oDocument.querySelector('iframe')) === null || _a === void 0 ? void 0 : _a.style.setProperty('pointer-events', 'none');
        this.emit('dragStart', this._nOriginalX, this._nOriginalY);
    }
    getPointerCoordinates(event) {
        const result = {
            x: event.pageX,
            y: event.pageY
        };
        return result;
    }
}


/***/ }),

/***/ "./src/ts/utils/event-emitter.ts":
/*!***************************************!*\
  !*** ./src/ts/utils/event-emitter.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventEmitter": () => (/* binding */ EventEmitter)
/* harmony export */ });
/**
 * A generic and very fast EventEmitter implementation. On top of emitting the actual event it emits an
 * {@link (EventEmitter:namespace).ALL_EVENT} event for every event triggered. This allows to hook into it and proxy events forwards
 * @public
 */
class EventEmitter {
    constructor() {
        /** @internal */
        this._allEventSubscriptions = [];
        /** @internal */
        this._subscriptionsMap = new Map();
        /**
         * Alias for off
         */
        this.unbind = this.removeEventListener;
        /**
         * Alias for emit
         */
        this.trigger = this.emit;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    tryBubbleEvent(name, args) {
        // overridden by ContentItem
    }
    /**
     * Emit an event and notify listeners
     *
     * @param eventName - The name of the event
     * @param args - Additional arguments that will be passed to the listener
     */
    emit(eventName, ...args) {
        let subcriptions = this._subscriptionsMap.get(eventName);
        if (subcriptions !== undefined) {
            subcriptions = subcriptions.slice();
            for (let i = 0; i < subcriptions.length; i++) {
                const subscription = subcriptions[i];
                subscription(...args);
            }
        }
        this.emitAllEvent(eventName, args);
        this.tryBubbleEvent(eventName, args);
    }
    /** @internal */
    emitUnknown(eventName, ...args) {
        let subs = this._subscriptionsMap.get(eventName);
        if (subs !== undefined) {
            subs = subs.slice();
            for (let i = 0; i < subs.length; i++) {
                subs[i](...args);
            }
        }
        this.emitAllEvent(eventName, args);
        this.tryBubbleEvent(eventName, args);
    }
    /* @internal **/
    emitBaseBubblingEvent(eventName) {
        const event = new EventEmitter.BubblingEvent(eventName, this);
        this.emitUnknown(eventName, event);
    }
    /** @internal */
    emitUnknownBubblingEvent(eventName) {
        const event = new EventEmitter.BubblingEvent(eventName, this);
        this.emitUnknown(eventName, event);
    }
    /**
     * Removes a listener for an event.
     * @param eventName - The name of the event
     * @param callback - The previously registered callback method (optional)
     */
    removeEventListener(eventName, callback) {
        const unknownCallback = callback;
        this.removeUnknownEventListener(eventName, unknownCallback);
    }
    off(eventName, callback) {
        this.removeEventListener(eventName, callback);
    }
    /**
     * Listen for events
     *
     * @param eventName - The name of the event to listen to
     * @param callback - The callback to execute when the event occurs
     */
    addEventListener(eventName, callback) {
        const unknownCallback = callback;
        this.addUnknownEventListener(eventName, unknownCallback);
    }
    on(eventName, callback) {
        this.addEventListener(eventName, callback);
    }
    /** @internal */
    addUnknownEventListener(eventName, callback) {
        if (eventName === EventEmitter.ALL_EVENT) {
            this._allEventSubscriptions.push(callback);
        }
        else {
            let subscriptions = this._subscriptionsMap.get(eventName);
            if (subscriptions !== undefined) {
                subscriptions.push(callback);
            }
            else {
                subscriptions = [callback];
                this._subscriptionsMap.set(eventName, subscriptions);
            }
        }
    }
    /** @internal */
    removeUnknownEventListener(eventName, callback) {
        if (eventName === EventEmitter.ALL_EVENT) {
            this.removeSubscription(eventName, this._allEventSubscriptions, callback);
        }
        else {
            const subscriptions = this._subscriptionsMap.get(eventName);
            if (subscriptions === undefined) {
                throw new Error('No subscribtions to unsubscribe for event ' + eventName);
            }
            else {
                this.removeSubscription(eventName, subscriptions, callback);
            }
        }
    }
    /** @internal */
    removeSubscription(eventName, subscriptions, callback) {
        const idx = subscriptions.indexOf(callback);
        if (idx < 0) {
            throw new Error('Nothing to unbind for ' + eventName);
        }
        else {
            subscriptions.splice(idx, 1);
        }
    }
    /** @internal */
    emitAllEvent(eventName, args) {
        const allEventSubscriptionsCount = this._allEventSubscriptions.length;
        if (allEventSubscriptionsCount > 0) {
            const unknownArgs = args.slice();
            unknownArgs.unshift(eventName);
            const allEventSubcriptions = this._allEventSubscriptions.slice();
            for (let i = 0; i < allEventSubscriptionsCount; i++) {
                allEventSubcriptions[i](...unknownArgs);
            }
        }
    }
}
/** @public */
(function (EventEmitter) {
    /**
     * The name of the event that's triggered for every event
     */
    EventEmitter.ALL_EVENT = '__all';
    EventEmitter.headerClickEventName = 'stackHeaderClick';
    EventEmitter.headerTouchStartEventName = 'stackHeaderTouchStart';
    class BubblingEvent {
        /** @internal */
        constructor(
        /** @internal */
        _name, 
        /** @internal */
        _target) {
            this._name = _name;
            this._target = _target;
            /** @internal */
            this._isPropagationStopped = false;
        }
        get name() { return this._name; }
        get target() { return this._target; }
        /** @deprecated Use {@link (EventEmitter:namespace).(BubblingEvent:class).target} instead */
        get origin() { return this._target; }
        get isPropagationStopped() { return this._isPropagationStopped; }
        stopPropagation() {
            this._isPropagationStopped = true;
        }
    }
    EventEmitter.BubblingEvent = BubblingEvent;
    class ClickBubblingEvent extends BubblingEvent {
        /** @internal */
        constructor(name, target, 
        /** @internal */
        _mouseEvent) {
            super(name, target);
            this._mouseEvent = _mouseEvent;
        }
        get mouseEvent() { return this._mouseEvent; }
    }
    EventEmitter.ClickBubblingEvent = ClickBubblingEvent;
    class TouchStartBubblingEvent extends BubblingEvent {
        /** @internal */
        constructor(name, target, 
        /** @internal */
        _touchEvent) {
            super(name, target);
            this._touchEvent = _touchEvent;
        }
        get touchEvent() { return this._touchEvent; }
    }
    EventEmitter.TouchStartBubblingEvent = TouchStartBubblingEvent;
})(EventEmitter || (EventEmitter = {}));


/***/ }),

/***/ "./src/ts/utils/event-hub.ts":
/*!***********************************!*\
  !*** ./src/ts/utils/event-hub.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventHub": () => (/* binding */ EventHub)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-emitter */ "./src/ts/utils/event-emitter.ts");


/**
 * An EventEmitter singleton that propagates events
 * across multiple windows. This is a little bit trickier since
 * windows are allowed to open childWindows in their own right.
 *
 * This means that we deal with a tree of windows. Therefore, we do the event propagation in two phases:
 *
 * - Propagate events from this layout to the parent layout
 *   - Repeat until the event arrived at the root layout
 * - Propagate events to this layout and to all children
 *   - Repeat until all layouts got the event
 *
 * **WARNING**: Only userBroadcast events are propagated between windows.
 * This means the you have to take care of propagating state changes between windows yourself.
 *
 * @public
 */
class EventHub extends _event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /**
     * Creates a new EventHub instance
     * @param _layoutManager - the layout manager to synchronize between the windows
     * @internal
     */
    constructor(
    /** @internal */
    _layoutManager) {
        super();
        this._layoutManager = _layoutManager;
        /** @internal */
        this._childEventListener = (childEvent) => this.onEventFromChild(childEvent);
        globalThis.addEventListener(EventHub.ChildEventName, this._childEventListener, { passive: true });
    }
    /**
     * Emit an event and notify listeners
     *
     * @param eventName - The name of the event
     * @param args - Additional arguments that will be passed to the listener
     * @public
     */
    emit(eventName, ...args) {
        if (eventName === 'userBroadcast') {
            // Explicitly redirect the user broadcast to our overridden method.
            this.emitUserBroadcast(...args);
        }
        else {
            super.emit(eventName, ...args);
        }
    }
    /**
     * Broadcasts a message to all other currently opened windows.
     * @public
     */
    emitUserBroadcast(...args) {
        // Step 1: Bubble up the event
        this.handleUserBroadcastEvent('userBroadcast', args);
    }
    /**
     * Destroys the EventHub
     * @internal
     */
    destroy() {
        globalThis.removeEventListener(EventHub.ChildEventName, this._childEventListener);
    }
    /**
     * Internal processor to process local events.
     * @internal
     */
    handleUserBroadcastEvent(eventName, args) {
        if (this._layoutManager.isSubWindow) {
            // We are a sub window and received an event from one of our children.
            // So propagate it to the Root.
            this.propagateToParent(eventName, args);
        }
        else {
            // We are the root window, propagate it to the subtree below us.
            this.propagateToThisAndSubtree(eventName, args);
        }
    }
    /**
     * Callback for child events raised on the window
     * @internal
     */
    onEventFromChild(event) {
        const detail = event.detail;
        this.handleUserBroadcastEvent(detail.eventName, detail.args);
    }
    /**
     * Propagates the event to the parent by emitting
     * it on the parent's DOM window
     * @internal
     */
    propagateToParent(eventName, args) {
        const detail = {
            layoutManager: this._layoutManager,
            eventName,
            args: args,
        };
        const eventInit = {
            bubbles: true,
            cancelable: true,
            detail,
        };
        const event = new CustomEvent(EventHub.ChildEventName, eventInit);
        const opener = globalThis.opener;
        if (opener === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('EHPTP15778');
        }
        opener.dispatchEvent(event);
    }
    /**
     * Propagate events to the whole subtree under this event hub.
     * @internal
     */
    propagateToThisAndSubtree(eventName, args) {
        this.emitUnknown(eventName, ...args);
        for (let i = 0; i < this._layoutManager.openPopouts.length; i++) {
            const childGl = this._layoutManager.openPopouts[i].getGlInstance();
            if (childGl) {
                childGl.eventHub.propagateToThisAndSubtree(eventName, args);
            }
        }
    }
}
/** @public */
(function (EventHub) {
    /** @internal */
    EventHub.ChildEventName = 'gl_child_event';
})(EventHub || (EventHub = {}));


/***/ }),

/***/ "./src/ts/utils/i18n-strings.ts":
/*!**************************************!*\
  !*** ./src/ts/utils/i18n-strings.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nStrings": () => (/* binding */ I18nStrings),
/* harmony export */   "i18nStrings": () => (/* binding */ i18nStrings)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");

/** @public */
var I18nStrings;
(function (I18nStrings) {
    /** @internal */
    let initialised = false;
    /** @internal */
    const infosObject = {
        PopoutCannotBeCreatedWithGroundItemConfig: {
            id: 0 /* PopoutCannotBeCreatedWithGroundItemConfig */,
            default: 'Popout cannot be created with ground ItemConfig'
        },
        PleaseRegisterAConstructorFunction: {
            id: 1 /* PleaseRegisterAConstructorFunction */,
            default: 'Please register a constructor function'
        },
        ComponentTypeNotRegisteredAndBindComponentEventHandlerNotAssigned: {
            id: 2 /* ComponentTypeNotRegisteredAndBindComponentEventHandlerNotAssigned */,
            default: 'Component type not registered and BindComponentEvent handler not assigned',
        },
        ComponentIsAlreadyRegistered: {
            id: 3 /* ComponentIsAlreadyRegistered */,
            default: 'Component is already registered',
        },
        ComponentIsNotVirtuable: {
            id: 4 /* ComponentIsNotVirtuable */,
            default: 'Component is not virtuable. Requires rootHtmlElement field/getter',
        },
        VirtualComponentDoesNotHaveRootHtmlElement: {
            id: 5 /* VirtualComponentDoesNotHaveRootHtmlElement */,
            default: 'Virtual component does not have getter "rootHtmlElement"',
        },
        ItemConfigIsNotTypeComponent: {
            id: 6 /* ItemConfigIsNotTypeComponent */,
            default: 'ItemConfig is not of type component',
        },
    };
    I18nStrings.idCount = Object.keys(infosObject).length;
    /** @internal */
    const infos = Object.values(infosObject);
    function checkInitialise() {
        if (!initialised) {
            for (let i = 0; i < I18nStrings.idCount; i++) {
                const info = infos[i];
                if (info.id !== i) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_0__.AssertError('INSI00110', `${i}: ${info.id}`);
                }
                else {
                    i18nStrings[i] = info.default;
                }
            }
        }
        initialised = true;
    }
    I18nStrings.checkInitialise = checkInitialise;
})(I18nStrings || (I18nStrings = {}));
/** @public */
const i18nStrings = new Array(I18nStrings.idCount);


/***/ }),

/***/ "./src/ts/utils/jquery-legacy.ts":
/*!***************************************!*\
  !*** ./src/ts/utils/jquery-legacy.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getJQueryOffset": () => (/* binding */ getJQueryOffset),
/* harmony export */   "getJQueryLeftAndTop": () => (/* binding */ getJQueryLeftAndTop)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/ts/utils/utils.ts");

/** @internal */
function getJQueryOffset(element) {
    const rect = element.getBoundingClientRect();
    return {
        top: rect.top + document.body.scrollTop,
        left: rect.left + document.body.scrollLeft,
    };
}
/** @internal */
function getJQueryLeftAndTop(element) {
    const style = getComputedStyle(element, null);
    const leftAndTop = {
        left: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.pixelsToNumber)(style.left),
        top: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.pixelsToNumber)(style.top),
    };
    return leftAndTop;
}


/***/ }),

/***/ "./src/ts/utils/style-constants.ts":
/*!*****************************************!*\
  !*** ./src/ts/utils/style-constants.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleConstants": () => (/* binding */ StyleConstants)
/* harmony export */ });
/** @public */
var StyleConstants;
(function (StyleConstants) {
    StyleConstants.defaultComponentBaseZIndex = 'auto';
    StyleConstants.defaultComponentDragZIndex = '32';
    StyleConstants.defaultComponentStackMaximisedZIndex = '41';
})(StyleConstants || (StyleConstants = {}));


/***/ }),

/***/ "./src/ts/utils/types.ts":
/*!*******************************!*\
  !*** ./src/ts/utils/types.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WidthOrHeightPropertyName": () => (/* binding */ WidthOrHeightPropertyName),
/* harmony export */   "Side": () => (/* binding */ Side),
/* harmony export */   "LogicalZIndex": () => (/* binding */ LogicalZIndex),
/* harmony export */   "JsonValue": () => (/* binding */ JsonValue),
/* harmony export */   "ItemType": () => (/* binding */ ItemType),
/* harmony export */   "ResponsiveMode": () => (/* binding */ ResponsiveMode)
/* harmony export */ });
/** @internal */
var WidthOrHeightPropertyName;
(function (WidthOrHeightPropertyName) {
    WidthOrHeightPropertyName.width = 'width';
    WidthOrHeightPropertyName.height = 'height';
})(WidthOrHeightPropertyName || (WidthOrHeightPropertyName = {}));
/** @public */
var Side;
(function (Side) {
    Side.top = 'top';
    Side.left = 'left';
    Side.right = 'right';
    Side.bottom = 'bottom';
})(Side || (Side = {}));
/** @public */
var LogicalZIndex;
(function (LogicalZIndex) {
    LogicalZIndex.base = 'base';
    LogicalZIndex.drag = 'drag';
    LogicalZIndex.stackMaximised = 'stackMaximised';
})(LogicalZIndex || (LogicalZIndex = {}));
/** @public */
var JsonValue;
(function (JsonValue) {
    function isJson(value) {
        return isJsonObject(value);
    }
    JsonValue.isJson = isJson;
    // eslint-disable-next-line @typescript-eslint/ban-types
    function isJsonObject(value) {
        return !Array.isArray(value) && value !== null && typeof value === 'object';
    }
    JsonValue.isJsonObject = isJsonObject;
})(JsonValue || (JsonValue = {}));
/** @public */
var ItemType;
(function (ItemType) {
    ItemType.ground = 'ground';
    ItemType.row = 'row';
    ItemType.column = 'column';
    ItemType.stack = 'stack';
    ItemType.component = 'component';
})(ItemType || (ItemType = {}));
/** @public */
var ResponsiveMode;
(function (ResponsiveMode) {
    ResponsiveMode.none = 'none';
    ResponsiveMode.always = 'always';
    ResponsiveMode.onload = 'onload';
})(ResponsiveMode || (ResponsiveMode = {}));


/***/ }),

/***/ "./src/ts/utils/utils.ts":
/*!*******************************!*\
  !*** ./src/ts/utils/utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "numberToPixels": () => (/* binding */ numberToPixels),
/* harmony export */   "pixelsToNumber": () => (/* binding */ pixelsToNumber),
/* harmony export */   "getElementWidth": () => (/* binding */ getElementWidth),
/* harmony export */   "setElementWidth": () => (/* binding */ setElementWidth),
/* harmony export */   "getElementHeight": () => (/* binding */ getElementHeight),
/* harmony export */   "setElementHeight": () => (/* binding */ setElementHeight),
/* harmony export */   "getElementWidthAndHeight": () => (/* binding */ getElementWidthAndHeight),
/* harmony export */   "setElementDisplayVisibility": () => (/* binding */ setElementDisplayVisibility),
/* harmony export */   "ensureElementPositionAbsolute": () => (/* binding */ ensureElementPositionAbsolute),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "deepExtend": () => (/* binding */ deepExtend),
/* harmony export */   "deepExtendValue": () => (/* binding */ deepExtendValue),
/* harmony export */   "removeFromArray": () => (/* binding */ removeFromArray),
/* harmony export */   "getUniqueId": () => (/* binding */ getUniqueId)
/* harmony export */ });
/** @internal */
function numberToPixels(value) {
    return value.toString(10) + 'px';
}
/** @internal */
function pixelsToNumber(value) {
    const numberStr = value.replace("px", "");
    return parseFloat(numberStr);
}
/** @internal */
function getElementWidth(element) {
    return element.offsetWidth;
}
/** @internal */
function setElementWidth(element, width) {
    const widthAsPixels = numberToPixels(width);
    element.style.width = widthAsPixels;
}
/** @internal */
function getElementHeight(element) {
    return element.offsetHeight;
}
/** @internal */
function setElementHeight(element, height) {
    const heightAsPixels = numberToPixels(height);
    element.style.height = heightAsPixels;
}
/** @internal */
function getElementWidthAndHeight(element) {
    return {
        width: element.offsetWidth,
        height: element.offsetHeight,
    };
}
/** @internal */
function setElementDisplayVisibility(element, visible) {
    if (visible) {
        element.style.display = '';
    }
    else {
        element.style.display = 'none';
    }
}
/** @internal */
function ensureElementPositionAbsolute(element) {
    const absolutePosition = 'absolute';
    if (element.style.position !== absolutePosition) {
        element.style.position = absolutePosition;
    }
}
/**
 * Replacement for JQuery $.extend(target, obj)
 * @internal
*/
function extend(target, obj) {
    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            target[key] = obj[key];
        }
    }
    return target;
}
/**
 * Replacement for JQuery $.extend(true, target, obj)
 * @internal
*/
function deepExtend(target, obj) {
    if (obj !== undefined) {
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                const value = obj[key];
                const existingTarget = target[key];
                target[key] = deepExtendValue(existingTarget, value);
            }
        }
    }
    return target;
}
/** @internal */
function deepExtendValue(existingTarget, value) {
    if (typeof value !== 'object') {
        return value;
    }
    else {
        if (Array.isArray(value)) {
            const length = value.length;
            const targetArray = new Array(length);
            for (let i = 0; i < length; i++) {
                const element = value[i];
                targetArray[i] = deepExtendValue({}, element);
            }
            return targetArray;
        }
        else {
            if (value === null) {
                return null;
            }
            else {
                const valueObj = value;
                if (existingTarget === undefined) {
                    return deepExtend({}, valueObj); // overwrite
                }
                else {
                    if (typeof existingTarget !== "object") {
                        return deepExtend({}, valueObj); // overwrite
                    }
                    else {
                        if (Array.isArray(existingTarget)) {
                            return deepExtend({}, valueObj); // overwrite
                        }
                        else {
                            if (existingTarget === null) {
                                return deepExtend({}, valueObj); // overwrite
                            }
                            else {
                                const existingTargetObj = existingTarget;
                                return deepExtend(existingTargetObj, valueObj); // merge
                            }
                        }
                    }
                }
            }
        }
    }
}
/** @internal */
function removeFromArray(item, array) {
    const index = array.indexOf(item);
    if (index === -1) {
        throw new Error('Can\'t remove item from array. Item is not in the array');
    }
    array.splice(index, 1);
}
/** @internal */
function getUniqueId() {
    return (Math.random() * 1000000000000000)
        .toString(36)
        .replace('.', '');
}


/***/ }),

/***/ "./src/ts/virtual-layout.ts":
/*!**********************************!*\
  !*** ./src/ts/virtual-layout.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VirtualLayout": () => (/* binding */ VirtualLayout)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _errors_external_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _layout_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout-manager */ "./src/ts/layout-manager.ts");
/* harmony import */ var _utils_i18n_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/i18n-strings */ "./src/ts/utils/i18n-strings.ts");






/** @public */
class VirtualLayout extends _layout_manager__WEBPACK_IMPORTED_MODULE_0__.LayoutManager {
    /** @internal */
    constructor(configOrOptionalContainer, containerOrBindComponentEventHandler, unbindComponentEventHandler) {
        super(VirtualLayout.createLayoutManagerConstructorParameters(configOrOptionalContainer, containerOrBindComponentEventHandler));
        /** @internal */
        this._subWindowsCreated = false;
        /** @internal */
        this._creationTimeoutPassed = false;
        // More work needed to get popouts working with virtual.
        if (containerOrBindComponentEventHandler !== undefined) {
            if (typeof containerOrBindComponentEventHandler === 'function') {
                this.bindComponentEvent = containerOrBindComponentEventHandler;
                if (unbindComponentEventHandler !== undefined) {
                    this.unbindComponentEvent = unbindComponentEventHandler;
                }
            }
        }
        if (this.isSubWindow) {
            document.body.style.visibility = 'hidden';
        }
        if (this.layoutConfig.root === undefined || this.isSubWindow) {
            this.init();
        }
    }
    destroy() {
        this.bindComponentEvent = undefined;
        this.unbindComponentEvent = undefined;
        super.destroy();
    }
    /**
     * Creates the actual layout. Must be called after all initial components
     * are registered. Recurses through the configuration and sets up
     * the item tree.
     *
     * If called before the document is ready it adds itself as a listener
     * to the document.ready event
     * @deprecated LayoutConfig should not be loaded in {@link (LayoutManager:class)} constructor, but rather in a
     * {@link (LayoutManager:class).loadLayout} call.  If LayoutConfig is not specified in {@link (LayoutManager:class)} constructor,
     * then init() will be automatically called internally and should not be called externally.
     */
    init() {
        /**
         * Create the popout windows straight away. If popouts are blocked
         * an error is thrown on the same 'thread' rather than a timeout and can
         * be caught. This also prevents any further initilisation from taking place.
         */
        if (this._subWindowsCreated === false) {
            this.createSubWindows();
            this._subWindowsCreated = true;
        }
        /**
         * If the document isn't ready yet, wait for it.
         */
        if (document.readyState === 'loading' || document.body === null) {
            document.addEventListener('DOMContentLoaded', () => this.init(), { passive: true });
            return;
        }
        /**
         * If this is a subwindow, wait a few milliseconds for the original
         * page's js calls to be executed, then replace the bodies content
         * with GoldenLayout
         */
        if (this.isSubWindow === true && this._creationTimeoutPassed === false) {
            setTimeout(() => this.init(), 7);
            this._creationTimeoutPassed = true;
            return;
        }
        if (this.isSubWindow === true) {
            this.adjustToWindowMode();
        }
        super.init();
    }
    /** @internal */
    bindComponent(container, itemConfig) {
        if (this.bindComponentEvent !== undefined) {
            const bindableComponent = this.bindComponentEvent(container, itemConfig);
            return bindableComponent;
        }
        else {
            if (this.getComponentEvent !== undefined) {
                return {
                    virtual: false,
                    component: this.getComponentEvent(container, itemConfig),
                };
            }
            else {
                // There is no component registered for this type, and we don't have a getComponentEvent defined.
                // This might happen when the user pops out a dialog and the component types are not registered upfront.
                const text = _utils_i18n_strings__WEBPACK_IMPORTED_MODULE_1__.i18nStrings[2];
                const message = `${text}: ${JSON.stringify(itemConfig)}`;
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_2__.BindError(message);
            }
        }
    }
    /** @internal */
    unbindComponent(container, virtual, component) {
        if (virtual) {
            if (this.unbindComponentEvent !== undefined) {
                this.unbindComponentEvent(container);
            }
        }
        else {
            if (this.releaseComponentEvent !== undefined) {
                if (component === undefined) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_3__.UnexpectedUndefinedError('VCUCRCU333998');
                }
                else {
                    this.releaseComponentEvent(container, component);
                }
            }
        }
    }
    /**
     * Creates Subwindows (if there are any). Throws an error
     * if popouts are blocked.
     * @internal
     */
    createSubWindows() {
        for (let i = 0; i < this.layoutConfig.openPopouts.length; i++) {
            const popoutConfig = this.layoutConfig.openPopouts[i];
            this.createPopoutFromPopoutLayoutConfig(popoutConfig);
        }
    }
    /**
     * This is executed when GoldenLayout detects that it is run
     * within a previously opened popout window.
     * @internal
     */
    adjustToWindowMode() {
        const headElement = document.head;
        const appendNodeLists = new Array(4);
        appendNodeLists[0] = document.querySelectorAll('body link');
        appendNodeLists[1] = document.querySelectorAll('body style');
        appendNodeLists[2] = document.querySelectorAll('template');
        appendNodeLists[3] = document.querySelectorAll('.gl_keep');
        for (let listIdx = 0; listIdx < appendNodeLists.length; listIdx++) {
            const appendNodeList = appendNodeLists[listIdx];
            for (let nodeIdx = 0; nodeIdx < appendNodeList.length; nodeIdx++) {
                const node = appendNodeList[nodeIdx];
                headElement.appendChild(node);
            }
        }
        const bodyElement = document.body;
        bodyElement.innerHTML = '';
        bodyElement.style.visibility = 'visible';
        if (!this.layoutConfig.settings.popInOnClose) {
            const popInButtonElement = document.createElement('div');
            popInButtonElement.classList.add("lm_popin" /* Popin */);
            popInButtonElement.setAttribute('title', this.layoutConfig.header.dock);
            const iconElement = document.createElement('div');
            iconElement.classList.add("lm_icon" /* Icon */);
            const bgElement = document.createElement('div');
            bgElement.classList.add("lm_bg" /* Bg */);
            popInButtonElement.appendChild(iconElement);
            popInButtonElement.appendChild(bgElement);
            popInButtonElement.addEventListener('click', () => this.emit('popIn'));
            bodyElement.appendChild(popInButtonElement);
        }
        /*
        * This seems a bit pointless, but actually causes a reflow/re-evaluation getting around
        * slickgrid's "Cannot find stylesheet." bug in chrome
        */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const x = document.body.offsetHeight;
        /*
        * Expose this instance on the window object
        * to allow the opening window to interact with
        * it
        */
        window.__glInstance = this;
    }
}
/** @public */
(function (VirtualLayout) {
    /** @internal
     * Veriable to hold the state whether we already checked if we are running in a sub window.
     * Fixes popout and creation of nested golden-layouts.
     */
    let subWindowChecked = false;
    /** @internal */
    function createLayoutManagerConstructorParameters(configOrOptionalContainer, containerOrBindComponentEventHandler) {
        const windowConfigKey = subWindowChecked ? null : new URL(document.location.href).searchParams.get('gl-window');
        subWindowChecked = true;
        const isSubWindow = windowConfigKey !== null;
        let containerElement;
        let config;
        if (windowConfigKey !== null) {
            const windowConfigStr = localStorage.getItem(windowConfigKey);
            if (windowConfigStr === null) {
                throw new Error('Null gl-window Config');
            }
            localStorage.removeItem(windowConfigKey);
            const minifiedWindowConfig = JSON.parse(windowConfigStr);
            config = _config_resolved_config__WEBPACK_IMPORTED_MODULE_4__.ResolvedLayoutConfig.unminifyConfig(minifiedWindowConfig);
        }
        else {
            if (configOrOptionalContainer === undefined) {
                config = undefined;
            }
            else {
                if (configOrOptionalContainer instanceof HTMLElement) {
                    config = undefined;
                    containerElement = configOrOptionalContainer;
                }
                else {
                    if (_config_config__WEBPACK_IMPORTED_MODULE_5__.LayoutConfig.isResolved(configOrOptionalContainer)) {
                        config = configOrOptionalContainer;
                    }
                    else {
                        config = _config_config__WEBPACK_IMPORTED_MODULE_5__.LayoutConfig.resolve(configOrOptionalContainer);
                    }
                }
            }
            if (containerElement === undefined) {
                if (containerOrBindComponentEventHandler instanceof HTMLElement) {
                    containerElement = containerOrBindComponentEventHandler;
                }
            }
        }
        return {
            layoutConfig: config,
            isSubWindow,
            containerElement,
        };
    }
    VirtualLayout.createLayoutManagerConstructorParameters = createLayoutManagerConstructorParameters;
})(VirtualLayout || (VirtualLayout = {}));


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.ComponentItemConfig),
/* harmony export */   "HeaderedItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.HeaderedItemConfig),
/* harmony export */   "ItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.ItemConfig),
/* harmony export */   "LayoutConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.LayoutConfig),
/* harmony export */   "PopoutLayoutConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.PopoutLayoutConfig),
/* harmony export */   "RootItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.RootItemConfig),
/* harmony export */   "RowOrColumnItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.RowOrColumnItemConfig),
/* harmony export */   "StackItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.StackItemConfig),
/* harmony export */   "ResolvedComponentItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedComponentItemConfig),
/* harmony export */   "ResolvedGroundItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedGroundItemConfig),
/* harmony export */   "ResolvedHeaderedItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedHeaderedItemConfig),
/* harmony export */   "ResolvedItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedItemConfig),
/* harmony export */   "ResolvedLayoutConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedLayoutConfig),
/* harmony export */   "ResolvedPopoutLayoutConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedPopoutLayoutConfig),
/* harmony export */   "ResolvedRootItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedRootItemConfig),
/* harmony export */   "ResolvedRowOrColumnItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedRowOrColumnItemConfig),
/* harmony export */   "ResolvedStackItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedStackItemConfig),
/* harmony export */   "ComponentContainer": () => (/* reexport safe */ _ts_container_component_container__WEBPACK_IMPORTED_MODULE_2__.ComponentContainer),
/* harmony export */   "BrowserPopout": () => (/* reexport safe */ _ts_controls_browser_popout__WEBPACK_IMPORTED_MODULE_3__.BrowserPopout),
/* harmony export */   "DragSource": () => (/* reexport safe */ _ts_controls_drag_source__WEBPACK_IMPORTED_MODULE_4__.DragSource),
/* harmony export */   "Header": () => (/* reexport safe */ _ts_controls_header__WEBPACK_IMPORTED_MODULE_5__.Header),
/* harmony export */   "Tab": () => (/* reexport safe */ _ts_controls_tab__WEBPACK_IMPORTED_MODULE_6__.Tab),
/* harmony export */   "ApiError": () => (/* reexport safe */ _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__.ApiError),
/* harmony export */   "BindError": () => (/* reexport safe */ _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__.BindError),
/* harmony export */   "ConfigurationError": () => (/* reexport safe */ _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__.ConfigurationError),
/* harmony export */   "ExternalError": () => (/* reexport safe */ _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__.ExternalError),
/* harmony export */   "PopoutBlockedError": () => (/* reexport safe */ _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__.PopoutBlockedError),
/* harmony export */   "GoldenLayout": () => (/* reexport safe */ _ts_golden_layout__WEBPACK_IMPORTED_MODULE_8__.GoldenLayout),
/* harmony export */   "ComponentItem": () => (/* reexport safe */ _ts_items_component_item__WEBPACK_IMPORTED_MODULE_9__.ComponentItem),
/* harmony export */   "ContentItem": () => (/* reexport safe */ _ts_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem),
/* harmony export */   "RowOrColumn": () => (/* reexport safe */ _ts_items_row_or_column__WEBPACK_IMPORTED_MODULE_11__.RowOrColumn),
/* harmony export */   "Stack": () => (/* reexport safe */ _ts_items_stack__WEBPACK_IMPORTED_MODULE_12__.Stack),
/* harmony export */   "LayoutManager": () => (/* reexport safe */ _ts_layout_manager__WEBPACK_IMPORTED_MODULE_13__.LayoutManager),
/* harmony export */   "EventEmitter": () => (/* reexport safe */ _ts_utils_event_emitter__WEBPACK_IMPORTED_MODULE_14__.EventEmitter),
/* harmony export */   "EventHub": () => (/* reexport safe */ _ts_utils_event_hub__WEBPACK_IMPORTED_MODULE_15__.EventHub),
/* harmony export */   "I18nStrings": () => (/* reexport safe */ _ts_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_16__.I18nStrings),
/* harmony export */   "i18nStrings": () => (/* reexport safe */ _ts_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_16__.i18nStrings),
/* harmony export */   "StyleConstants": () => (/* reexport safe */ _ts_utils_style_constants__WEBPACK_IMPORTED_MODULE_17__.StyleConstants),
/* harmony export */   "ItemType": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.ItemType),
/* harmony export */   "JsonValue": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.JsonValue),
/* harmony export */   "LogicalZIndex": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.LogicalZIndex),
/* harmony export */   "ResponsiveMode": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.ResponsiveMode),
/* harmony export */   "Side": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.Side),
/* harmony export */   "WidthOrHeightPropertyName": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.WidthOrHeightPropertyName),
/* harmony export */   "VirtualLayout": () => (/* reexport safe */ _ts_virtual_layout__WEBPACK_IMPORTED_MODULE_19__.VirtualLayout)
/* harmony export */ });
/* harmony import */ var _ts_config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ts/config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ts/config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _ts_container_component_container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ts/container/component-container */ "./src/ts/container/component-container.ts");
/* harmony import */ var _ts_controls_browser_popout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ts/controls/browser-popout */ "./src/ts/controls/browser-popout.ts");
/* harmony import */ var _ts_controls_drag_source__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ts/controls/drag-source */ "./src/ts/controls/drag-source.ts");
/* harmony import */ var _ts_controls_header__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ts/controls/header */ "./src/ts/controls/header.ts");
/* harmony import */ var _ts_controls_tab__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ts/controls/tab */ "./src/ts/controls/tab.ts");
/* harmony import */ var _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ts/errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _ts_golden_layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ts/golden-layout */ "./src/ts/golden-layout.ts");
/* harmony import */ var _ts_items_component_item__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ts/items/component-item */ "./src/ts/items/component-item.ts");
/* harmony import */ var _ts_items_content_item__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ts/items/content-item */ "./src/ts/items/content-item.ts");
/* harmony import */ var _ts_items_row_or_column__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ts/items/row-or-column */ "./src/ts/items/row-or-column.ts");
/* harmony import */ var _ts_items_stack__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ts/items/stack */ "./src/ts/items/stack.ts");
/* harmony import */ var _ts_layout_manager__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ts/layout-manager */ "./src/ts/layout-manager.ts");
/* harmony import */ var _ts_utils_event_emitter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ts/utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _ts_utils_event_hub__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ts/utils/event-hub */ "./src/ts/utils/event-hub.ts");
/* harmony import */ var _ts_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ts/utils/i18n-strings */ "./src/ts/utils/i18n-strings.ts");
/* harmony import */ var _ts_utils_style_constants__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ts/utils/style-constants */ "./src/ts/utils/style-constants.ts");
/* harmony import */ var _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ts/utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _ts_virtual_layout__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ts/virtual-layout */ "./src/ts/virtual-layout.ts");





















})();

var __webpack_exports__ApiError = __webpack_exports__.ApiError;
var __webpack_exports__BindError = __webpack_exports__.BindError;
var __webpack_exports__BrowserPopout = __webpack_exports__.BrowserPopout;
var __webpack_exports__ComponentContainer = __webpack_exports__.ComponentContainer;
var __webpack_exports__ComponentItem = __webpack_exports__.ComponentItem;
var __webpack_exports__ComponentItemConfig = __webpack_exports__.ComponentItemConfig;
var __webpack_exports__ConfigurationError = __webpack_exports__.ConfigurationError;
var __webpack_exports__ContentItem = __webpack_exports__.ContentItem;
var __webpack_exports__DragSource = __webpack_exports__.DragSource;
var __webpack_exports__EventEmitter = __webpack_exports__.EventEmitter;
var __webpack_exports__EventHub = __webpack_exports__.EventHub;
var __webpack_exports__ExternalError = __webpack_exports__.ExternalError;
var __webpack_exports__GoldenLayout = __webpack_exports__.GoldenLayout;
var __webpack_exports__Header = __webpack_exports__.Header;
var __webpack_exports__HeaderedItemConfig = __webpack_exports__.HeaderedItemConfig;
var __webpack_exports__I18nStrings = __webpack_exports__.I18nStrings;
var __webpack_exports__ItemConfig = __webpack_exports__.ItemConfig;
var __webpack_exports__ItemType = __webpack_exports__.ItemType;
var __webpack_exports__JsonValue = __webpack_exports__.JsonValue;
var __webpack_exports__LayoutConfig = __webpack_exports__.LayoutConfig;
var __webpack_exports__LayoutManager = __webpack_exports__.LayoutManager;
var __webpack_exports__LogicalZIndex = __webpack_exports__.LogicalZIndex;
var __webpack_exports__PopoutBlockedError = __webpack_exports__.PopoutBlockedError;
var __webpack_exports__PopoutLayoutConfig = __webpack_exports__.PopoutLayoutConfig;
var __webpack_exports__ResolvedComponentItemConfig = __webpack_exports__.ResolvedComponentItemConfig;
var __webpack_exports__ResolvedGroundItemConfig = __webpack_exports__.ResolvedGroundItemConfig;
var __webpack_exports__ResolvedHeaderedItemConfig = __webpack_exports__.ResolvedHeaderedItemConfig;
var __webpack_exports__ResolvedItemConfig = __webpack_exports__.ResolvedItemConfig;
var __webpack_exports__ResolvedLayoutConfig = __webpack_exports__.ResolvedLayoutConfig;
var __webpack_exports__ResolvedPopoutLayoutConfig = __webpack_exports__.ResolvedPopoutLayoutConfig;
var __webpack_exports__ResolvedRootItemConfig = __webpack_exports__.ResolvedRootItemConfig;
var __webpack_exports__ResolvedRowOrColumnItemConfig = __webpack_exports__.ResolvedRowOrColumnItemConfig;
var __webpack_exports__ResolvedStackItemConfig = __webpack_exports__.ResolvedStackItemConfig;
var __webpack_exports__ResponsiveMode = __webpack_exports__.ResponsiveMode;
var __webpack_exports__RootItemConfig = __webpack_exports__.RootItemConfig;
var __webpack_exports__RowOrColumn = __webpack_exports__.RowOrColumn;
var __webpack_exports__RowOrColumnItemConfig = __webpack_exports__.RowOrColumnItemConfig;
var __webpack_exports__Side = __webpack_exports__.Side;
var __webpack_exports__Stack = __webpack_exports__.Stack;
var __webpack_exports__StackItemConfig = __webpack_exports__.StackItemConfig;
var __webpack_exports__StyleConstants = __webpack_exports__.StyleConstants;
var __webpack_exports__Tab = __webpack_exports__.Tab;
var __webpack_exports__VirtualLayout = __webpack_exports__.VirtualLayout;
var __webpack_exports__WidthOrHeightPropertyName = __webpack_exports__.WidthOrHeightPropertyName;
var __webpack_exports__i18nStrings = __webpack_exports__.i18nStrings;
export { __webpack_exports__ApiError as ApiError, __webpack_exports__BindError as BindError, __webpack_exports__BrowserPopout as BrowserPopout, __webpack_exports__ComponentContainer as ComponentContainer, __webpack_exports__ComponentItem as ComponentItem, __webpack_exports__ComponentItemConfig as ComponentItemConfig, __webpack_exports__ConfigurationError as ConfigurationError, __webpack_exports__ContentItem as ContentItem, __webpack_exports__DragSource as DragSource, __webpack_exports__EventEmitter as EventEmitter, __webpack_exports__EventHub as EventHub, __webpack_exports__ExternalError as ExternalError, __webpack_exports__GoldenLayout as GoldenLayout, __webpack_exports__Header as Header, __webpack_exports__HeaderedItemConfig as HeaderedItemConfig, __webpack_exports__I18nStrings as I18nStrings, __webpack_exports__ItemConfig as ItemConfig, __webpack_exports__ItemType as ItemType, __webpack_exports__JsonValue as JsonValue, __webpack_exports__LayoutConfig as LayoutConfig, __webpack_exports__LayoutManager as LayoutManager, __webpack_exports__LogicalZIndex as LogicalZIndex, __webpack_exports__PopoutBlockedError as PopoutBlockedError, __webpack_exports__PopoutLayoutConfig as PopoutLayoutConfig, __webpack_exports__ResolvedComponentItemConfig as ResolvedComponentItemConfig, __webpack_exports__ResolvedGroundItemConfig as ResolvedGroundItemConfig, __webpack_exports__ResolvedHeaderedItemConfig as ResolvedHeaderedItemConfig, __webpack_exports__ResolvedItemConfig as ResolvedItemConfig, __webpack_exports__ResolvedLayoutConfig as ResolvedLayoutConfig, __webpack_exports__ResolvedPopoutLayoutConfig as ResolvedPopoutLayoutConfig, __webpack_exports__ResolvedRootItemConfig as ResolvedRootItemConfig, __webpack_exports__ResolvedRowOrColumnItemConfig as ResolvedRowOrColumnItemConfig, __webpack_exports__ResolvedStackItemConfig as ResolvedStackItemConfig, __webpack_exports__ResponsiveMode as ResponsiveMode, __webpack_exports__RootItemConfig as RootItemConfig, __webpack_exports__RowOrColumn as RowOrColumn, __webpack_exports__RowOrColumnItemConfig as RowOrColumnItemConfig, __webpack_exports__Side as Side, __webpack_exports__Stack as Stack, __webpack_exports__StackItemConfig as StackItemConfig, __webpack_exports__StyleConstants as StyleConstants, __webpack_exports__Tab as Tab, __webpack_exports__VirtualLayout as VirtualLayout, __webpack_exports__WidthOrHeightPropertyName as WidthOrHeightPropertyName, __webpack_exports__i18nStrings as i18nStrings };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29uZmlnL2NvbmZpZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29uZmlnL3Jlc29sdmVkLWNvbmZpZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29udGFpbmVyL2NvbXBvbmVudC1jb250YWluZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbnRyb2xzL2Jyb3dzZXItcG9wb3V0LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy9kcmFnLXByb3h5LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy9kcmFnLXNvdXJjZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29udHJvbHMvZHJvcC10YXJnZXQtaW5kaWNhdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy9oZWFkZXItYnV0dG9uLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy9oZWFkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbnRyb2xzL3NwbGl0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy90YWIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbnRyb2xzL3RhYnMtY29udGFpbmVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy90cmFuc2l0aW9uLWluZGljYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvZXJyb3JzL2V4dGVybmFsLWVycm9yLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9lcnJvcnMvaW50ZXJuYWwtZXJyb3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2dvbGRlbi1sYXlvdXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2l0ZW1zL2NvbXBvbmVudC1pdGVtLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9pdGVtcy9jb21wb25lbnQtcGFyZW50YWJsZS1pdGVtLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9pdGVtcy9jb250ZW50LWl0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2l0ZW1zL2dyb3VuZC1pdGVtLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9pdGVtcy9yb3ctb3ItY29sdW1uLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9pdGVtcy9zdGFjay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvbGF5b3V0LW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3V0aWxzL2NvbmZpZy1taW5pZmllci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdXRpbHMvZHJhZy1saXN0ZW5lci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdXRpbHMvZXZlbnQtZW1pdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdXRpbHMvZXZlbnQtaHViLnRzIiwid2VicGFjazovLy8uL3NyYy90cy91dGlscy9pMThuLXN0cmluZ3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3V0aWxzL2pxdWVyeS1sZWdhY3kudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3V0aWxzL3N0eWxlLWNvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdXRpbHMvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3V0aWxzL3V0aWxzLnRzIiwid2VicGFjazovLy8uL3NyYy90cy92aXJ0dWFsLWxheW91dC50cyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQThEO0FBQ2U7QUFDRjtBQVVoRDtBQXlEM0IsY0FBYztBQUNQLElBQVUsVUFBVSxDQWlFMUI7QUFqRUQsV0FBaUIsVUFBVTtJQUN2QixTQUFnQixPQUFPLENBQUMsVUFBc0I7UUFDMUMsUUFBUSxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQ3JCLEtBQUsseURBQWU7Z0JBQ2hCLE1BQU0sSUFBSSxzRUFBa0IsQ0FBQyx1Q0FBdUMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDdEcsS0FBSyxzREFBWSxDQUFDO1lBQ2xCLEtBQUsseURBQWU7Z0JBQ2hCLE9BQU8scUJBQXFCLENBQUMsT0FBTyxDQUFDLFVBQW1DLENBQUMsQ0FBQztZQUU5RSxLQUFLLHdEQUFjO2dCQUNmLE9BQU8sZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUE2QixDQUFDLENBQUM7WUFFbEUsS0FBSyw0REFBa0I7Z0JBQ25CLE9BQU8sbUJBQW1CLENBQUMsT0FBTyxDQUFDLFVBQWlDLENBQUMsQ0FBQztZQUUxRTtnQkFDSSxNQUFNLElBQUksd0VBQW9CLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0RTtJQUNMLENBQUM7SUFqQmUsa0JBQU8sVUFpQnRCO0lBRUQsU0FBZ0IsY0FBYyxDQUFDLE9BQWlDO1FBQzVELElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN2QixPQUFPLEVBQUUsQ0FBQztTQUNiO2FBQU07WUFDSCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1lBQzdCLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxDQUFxQixLQUFLLENBQUMsQ0FBQztZQUNwRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM5QztZQUNELE9BQU8sTUFBTSxDQUFDO1NBQ2pCO0lBQ0wsQ0FBQztJQVhlLHlCQUFjLGlCQVc3QjtJQUVELFNBQWdCLFNBQVMsQ0FBQyxFQUFpQztRQUN2RCxJQUFJLEVBQUUsS0FBSyxTQUFTLEVBQUU7WUFDbEIsT0FBTyw0RUFBOEIsQ0FBQztTQUN6QzthQUFNO1lBQ0gsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUNuQixJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO29CQUNqQixPQUFPLDRFQUE4QixDQUFDO2lCQUN6QztxQkFBTTtvQkFDSCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDaEI7YUFDSjtpQkFBTTtnQkFDSCxPQUFPLEVBQUUsQ0FBQzthQUNiO1NBQ0o7SUFFTCxDQUFDO0lBZmUsb0JBQVMsWUFleEI7SUFFRCxTQUFnQixRQUFRLENBQUMsTUFBa0I7UUFDdkMsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLHlEQUFlLENBQUM7SUFDM0MsQ0FBQztJQUZlLG1CQUFRLFdBRXZCO0lBQ0QsU0FBZ0IsS0FBSyxDQUFDLE1BQWtCO1FBQ3BDLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxzREFBWSxDQUFDO0lBQ3hDLENBQUM7SUFGZSxnQkFBSyxRQUVwQjtJQUNELFNBQWdCLFFBQVEsQ0FBQyxNQUFrQjtRQUN2QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUsseURBQWUsQ0FBQztJQUMzQyxDQUFDO0lBRmUsbUJBQVEsV0FFdkI7SUFDRCxTQUFnQixPQUFPLENBQUMsTUFBa0I7UUFDdEMsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLHdEQUFjLENBQUM7SUFDMUMsQ0FBQztJQUZlLGtCQUFPLFVBRXRCO0lBQ0QsU0FBZ0IsV0FBVyxDQUFDLE1BQWtCO1FBQzFDLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyw0REFBa0IsQ0FBQztJQUM5QyxDQUFDO0lBRmUsc0JBQVcsY0FFMUI7QUFDTCxDQUFDLEVBakVnQixVQUFVLEtBQVYsVUFBVSxRQWlFMUI7QUFXRCxjQUFjO0FBQ1AsSUFBVSxrQkFBa0IsQ0FnRWxDO0FBaEVELFdBQWlCLGtCQUFrQjtJQUMvQixNQUFNLGlCQUFpQixHQUFHLGVBQWUsQ0FBQztJQVkxQyxJQUFpQixNQUFNLENBZ0J0QjtJQWhCRCxXQUFpQixNQUFNO1FBQ25CLFNBQWdCLE9BQU8sQ0FBQyxNQUEwQixFQUFFLFVBQStCOztZQUMvRSxJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtnQkFDbEQsT0FBTyxTQUFTLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0gsTUFBTSxNQUFNLEdBQXNDO29CQUM5QyxJQUFJLEVBQUUsWUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLElBQUksbUNBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsdUZBQXlDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztvQkFDN0gsTUFBTSxFQUFFLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxNQUFNO29CQUN0QixRQUFRLEVBQUUsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFFBQVE7b0JBQzFCLEtBQUssRUFBRSxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsS0FBSztvQkFDcEIsUUFBUSxFQUFFLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxRQUFRO29CQUMxQixXQUFXLEVBQUUsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFdBQVc7aUJBQ25DO2dCQUNELE9BQU8sTUFBTSxDQUFDO2FBQ2pCO1FBQ0wsQ0FBQztRQWRlLGNBQU8sVUFjdEI7SUFDTCxDQUFDLEVBaEJnQixNQUFNLEdBQU4seUJBQU0sS0FBTix5QkFBTSxRQWdCdEI7SUFFRCxTQUFnQixxQkFBcUIsQ0FBQyxNQUEwQjtRQUM1RCxJQUFJLEVBQVUsQ0FBQztRQUNmLHdIQUF3SDtRQUN4SCxJQUFJLFFBQVEsR0FBa0MsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUN4RCxJQUFJLGVBQWUsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQ3hCLEVBQUUsR0FBRyw0RUFBOEIsQ0FBQztTQUN2QzthQUFNO1lBQ0gsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUN6QixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssaUJBQWlCLENBQUM7Z0JBQ2hFLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRTtvQkFDVCxlQUFlLEdBQUcsSUFBSSxDQUFDO29CQUN2QixRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ3RDO2dCQUNELElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ3JCLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3BCO3FCQUFNO29CQUNILEVBQUUsR0FBRyw0RUFBOEIsQ0FBQztpQkFDdkM7YUFDSjtpQkFBTTtnQkFDSCxFQUFFLEdBQUcsUUFBUSxDQUFDO2FBQ2pCO1NBQ0o7UUFFRCxJQUFJLFNBQWtCLENBQUM7UUFDdkIsSUFBSSxNQUFNLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtZQUNoQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztTQUNoQzthQUFNO1lBQ0gsU0FBUyxHQUFHLGVBQWUsQ0FBQztTQUMvQjtRQUVELE9BQU8sRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFO0lBQzVCLENBQUM7SUFoQ2Usd0NBQXFCLHdCQWdDcEM7QUFDTCxDQUFDLEVBaEVnQixrQkFBa0IsS0FBbEIsa0JBQWtCLFFBZ0VsQztBQVVELGNBQWM7QUFDUCxJQUFVLGVBQWUsQ0FxQy9CO0FBckNELFdBQWlCLGVBQWU7SUFDNUIsU0FBZ0IsT0FBTyxDQUFDLFVBQTJCOztRQUMvQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxHQUFHLGtCQUFrQixDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9FLE1BQU0sTUFBTSxHQUE0QjtZQUNwQyxJQUFJLEVBQUUsd0RBQWM7WUFDcEIsT0FBTyxFQUFFLGNBQWMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO1lBQzNDLEtBQUssRUFBRSxnQkFBVSxDQUFDLEtBQUssbUNBQUksK0VBQWlDO1lBQzVELFFBQVEsRUFBRSxnQkFBVSxDQUFDLFFBQVEsbUNBQUksa0ZBQW9DO1lBQ3JFLE1BQU0sRUFBRSxnQkFBVSxDQUFDLE1BQU0sbUNBQUksZ0ZBQWtDO1lBQy9ELFNBQVMsRUFBRSxnQkFBVSxDQUFDLFNBQVMsbUNBQUksbUZBQXFDO1lBQ3hFLEVBQUU7WUFDRixTQUFTO1lBQ1QsVUFBVSxFQUFFLGdCQUFVLENBQUMsVUFBVSxtQ0FBSSxvRkFBc0M7WUFDM0UsZUFBZSxFQUFFLGdCQUFVLENBQUMsZUFBZSxtQ0FBSSw0RkFBOEM7WUFDN0YsTUFBTSxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsVUFBVSxDQUFDO1NBQ3RGLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBaEJlLHVCQUFPLFVBZ0J0QjtJQUVELFNBQWdCLGNBQWMsQ0FBQyxPQUEwQztRQUNyRSxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDdkIsT0FBTyxFQUFFLENBQUM7U0FDYjthQUFNO1lBQ0gsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUM3QixNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBOEIsS0FBSyxDQUFDLENBQUM7WUFDN0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDNUIsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuQyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLENBQUMsZ0ZBQWtDLENBQUMsVUFBVSxDQUFDLEVBQUU7b0JBQ2pELE1BQU0sSUFBSSwrREFBVyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7aUJBQ3RFO3FCQUFNO29CQUNILE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7aUJBQzFCO2FBQ0o7WUFDRCxPQUFPLE1BQU0sQ0FBQztTQUNqQjtJQUNMLENBQUM7SUFqQmUsOEJBQWMsaUJBaUI3QjtBQUNMLENBQUMsRUFyQ2dCLGVBQWUsS0FBZixlQUFlLFFBcUMvQjtBQWlDRCxjQUFjO0FBQ1AsSUFBVSxtQkFBbUIsQ0E2Q25DO0FBN0NELFdBQWlCLG1CQUFtQjtJQUNoQyxTQUFnQixPQUFPLENBQUMsVUFBK0I7O1FBQ25ELElBQUksYUFBYSxHQUEwQixVQUFVLENBQUMsYUFBYSxDQUFDO1FBQ3BFLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUM3QixhQUFhLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztTQUM1QztRQUNELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7U0FDckU7YUFBTTtZQUNILE1BQU0sRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEdBQUcsa0JBQWtCLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDL0UsSUFBSSxLQUFhLENBQUM7WUFDbEIsSUFBSSxVQUFVLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxVQUFVLENBQUMsS0FBSyxLQUFLLEVBQUUsRUFBRTtnQkFDM0QsS0FBSyxHQUFHLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ25FO2lCQUFNO2dCQUNILEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO2FBQzVCO1lBQ0QsTUFBTSxNQUFNLEdBQWdDO2dCQUN4QyxJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUk7Z0JBQ3JCLE9BQU8sRUFBRSxFQUFFO2dCQUNYLEtBQUssRUFBRSxnQkFBVSxDQUFDLEtBQUssbUNBQUksK0VBQWlDO2dCQUM1RCxRQUFRLEVBQUUsZ0JBQVUsQ0FBQyxRQUFRLG1DQUFJLGtGQUFvQztnQkFDckUsTUFBTSxFQUFFLGdCQUFVLENBQUMsTUFBTSxtQ0FBSSxnRkFBa0M7Z0JBQy9ELFNBQVMsRUFBRSxnQkFBVSxDQUFDLFNBQVMsbUNBQUksbUZBQXFDO2dCQUN4RSxFQUFFO2dCQUNGLFNBQVM7Z0JBQ1QsVUFBVSxFQUFFLGdCQUFVLENBQUMsVUFBVSxtQ0FBSSxvRkFBc0M7Z0JBQzNFLGNBQWMsRUFBRSxnQkFBVSxDQUFDLGNBQWMsbUNBQUksK0ZBQWlEO2dCQUM5RixLQUFLO2dCQUNMLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLFVBQVUsQ0FBQztnQkFDbkYsYUFBYTtnQkFDYixjQUFjLEVBQUUsZ0JBQVUsQ0FBQyxjQUFjLG1DQUFJLEVBQUU7YUFDbEQsQ0FBQztZQUNGLE9BQU8sTUFBTSxDQUFDO1NBQ2pCO0lBQ0wsQ0FBQztJQWpDZSwyQkFBTyxVQWlDdEI7SUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxhQUF3QjtRQUN6RCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sYUFBYSxDQUFDO1FBQy9DLFFBQVEsaUJBQWlCLEVBQUU7WUFDdkIsS0FBSyxRQUFRLENBQUMsQ0FBQyxPQUFPLGFBQXVCLENBQUM7WUFDOUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxPQUFRLGFBQXdCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDM0QsS0FBSyxTQUFTLENBQUMsQ0FBQyxPQUFRLGFBQXlCLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDN0QsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDdEI7SUFDTCxDQUFDO0lBUmUsd0NBQW9CLHVCQVFuQztBQUNMLENBQUMsRUE3Q2dCLG1CQUFtQixLQUFuQixtQkFBbUIsUUE2Q25DO0FBU0QsY0FBYztBQUNQLElBQVUscUJBQXFCLENBb0RyQztBQXBERCxXQUFpQixxQkFBcUI7SUFHbEMsU0FBZ0IsaUJBQWlCLENBQUMsVUFBc0I7UUFDcEQsUUFBUSxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQ3JCLEtBQUssc0RBQVksQ0FBQztZQUNsQixLQUFLLHlEQUFlLENBQUM7WUFDckIsS0FBSyx3REFBYyxDQUFDO1lBQ3BCLEtBQUssNERBQWtCO2dCQUNuQixPQUFPLElBQUksQ0FBQztZQUNoQixLQUFLLHlEQUFlO2dCQUNoQixPQUFPLEtBQUssQ0FBQztZQUNqQjtnQkFDSSxNQUFNLElBQUksd0VBQW9CLENBQUMsbUJBQW1CLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVFO0lBQ0wsQ0FBQztJQVplLHVDQUFpQixvQkFZaEM7SUFFRCxTQUFnQixPQUFPLENBQUMsVUFBaUM7O1FBQ3JELE1BQU0sTUFBTSxHQUFrQztZQUMxQyxJQUFJLEVBQUUsVUFBVSxDQUFDLElBQUk7WUFDckIsT0FBTyxFQUFFLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO1lBQ2pFLEtBQUssRUFBRSxnQkFBVSxDQUFDLEtBQUssbUNBQUksK0VBQWlDO1lBQzVELFFBQVEsRUFBRSxnQkFBVSxDQUFDLEtBQUssbUNBQUksa0ZBQW9DO1lBQ2xFLE1BQU0sRUFBRSxnQkFBVSxDQUFDLE1BQU0sbUNBQUksZ0ZBQWtDO1lBQy9ELFNBQVMsRUFBRSxnQkFBVSxDQUFDLE1BQU0sbUNBQUksbUZBQXFDO1lBQ3JFLEVBQUUsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDdkMsVUFBVSxFQUFFLGdCQUFVLENBQUMsVUFBVSxtQ0FBSSxvRkFBc0M7U0FDOUU7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBWmUsNkJBQU8sVUFZdEI7SUFDRCxTQUFnQixjQUFjLENBQUMsT0FBc0M7UUFDakUsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLE9BQU8sRUFBRSxDQUFDO1NBQ2I7YUFBTTtZQUNILE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDN0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQWdELEtBQUssQ0FBQyxDQUFDO1lBQy9FLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzVCLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxFQUFFO29CQUMzRCxNQUFNLElBQUksc0VBQWtCLENBQUMsd0NBQXdDLEVBQUUsZUFBZSxDQUFDLENBQUM7aUJBQzNGO3FCQUFNO29CQUNILE1BQU0sdUJBQXVCLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztvQkFDcEUsSUFBSSxDQUFDLDZGQUErQyxDQUFDLHVCQUF1QixDQUFDLEVBQUU7d0JBQzNFLE1BQU0sSUFBSSwrREFBVyxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO3FCQUNwRjt5QkFBTTt3QkFDSCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsdUJBQXVCLENBQUM7cUJBQ3ZDO2lCQUNKO2FBQ0o7WUFDRCxPQUFPLE1BQU0sQ0FBQztTQUNqQjtJQUNMLENBQUM7SUFyQmUsb0NBQWMsaUJBcUI3QjtBQUNMLENBQUMsRUFwRGdCLHFCQUFxQixLQUFyQixxQkFBcUIsUUFvRHJDO0FBS0QsY0FBYztBQUNQLElBQVUsY0FBYyxDQTJCOUI7QUEzQkQsV0FBaUIsY0FBYztJQUMzQixTQUFnQixnQkFBZ0IsQ0FBQyxVQUFzQjtRQUNuRCxRQUFRLFVBQVUsQ0FBQyxJQUFJLEVBQUU7WUFDckIsS0FBSyxzREFBWSxDQUFDO1lBQ2xCLEtBQUsseURBQWUsQ0FBQztZQUNyQixLQUFLLHdEQUFjLENBQUM7WUFDcEIsS0FBSyw0REFBa0I7Z0JBQ25CLE9BQU8sSUFBSSxDQUFDO1lBQ2hCLEtBQUsseURBQWU7Z0JBQ2hCLE9BQU8sS0FBSyxDQUFDO1lBQ2pCO2dCQUNJLE1BQU0sSUFBSSx3RUFBb0IsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3RFO0lBQ0wsQ0FBQztJQVplLCtCQUFnQixtQkFZL0I7SUFFRCxTQUFnQixPQUFPLENBQUMsVUFBc0M7UUFDMUQsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQzFCLE9BQU8sU0FBUyxDQUFDO1NBQ3BCO2FBQU07WUFDSCxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxxRkFBdUMsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDbEQsTUFBTSxJQUFJLHNFQUFrQixDQUFDLHdDQUF3QyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzthQUN0RztpQkFBTTtnQkFDSCxPQUFPLE1BQU0sQ0FBQzthQUNqQjtTQUNKO0lBQ0wsQ0FBQztJQVhlLHNCQUFPLFVBV3RCO0FBQ0wsQ0FBQyxFQTNCZ0IsY0FBYyxLQUFkLGNBQWMsUUEyQjlCO0FBZUQ7Ozs7R0FJRztBQUNJLElBQVUsWUFBWSxDQXlVNUI7QUF6VUQsV0FBaUIsWUFBWTtJQTJGekIsSUFBaUIsUUFBUSxDQWdCeEI7SUFoQkQsV0FBaUIsUUFBUTtRQUNyQixTQUFnQixPQUFPLENBQUMsUUFBOEI7O1lBQ2xELE1BQU0sTUFBTSxHQUFrQztnQkFDMUMsd0JBQXdCLEVBQUUsY0FBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLHdCQUF3QixtQ0FBSSw2R0FBK0Q7Z0JBQy9ILGNBQWMsRUFBRSxjQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUsY0FBYyxtQ0FBSSxtR0FBcUQ7Z0JBQ2pHLGdCQUFnQixFQUFFLGNBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxnQkFBZ0IsbUNBQUkscUdBQXVEO2dCQUN2Ryx3QkFBd0IsRUFBRSxjQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUsd0JBQXdCLG1DQUFJLDZHQUErRDtnQkFDL0gsb0JBQW9CLEVBQUUsY0FBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLG9CQUFvQixtQ0FBSSx5R0FBMkQ7Z0JBQ25ILGNBQWMsRUFBRSxjQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUsY0FBYyxtQ0FBSSxtR0FBcUQ7Z0JBQ2pHLG1CQUFtQixFQUFFLGNBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxtQkFBbUIsbUNBQUksd0dBQTBEO2dCQUNoSCxxQkFBcUIsRUFBRSxjQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUscUJBQXFCLG1DQUFJLDBHQUE0RDtnQkFDdEgsZ0JBQWdCLEVBQUUsY0FBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLGdCQUFnQixtQ0FBSSxxR0FBdUQ7Z0JBQ3ZHLFlBQVksRUFBRSxjQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUsWUFBWSxtQ0FBSSxpR0FBbUQ7YUFDOUY7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDO1FBZGUsZ0JBQU8sVUFjdEI7SUFDTCxDQUFDLEVBaEJnQixRQUFRLEdBQVIscUJBQVEsS0FBUixxQkFBUSxRQWdCeEI7SUErQ0QsSUFBaUIsVUFBVSxDQWExQjtJQWJELFdBQWlCLFVBQVU7UUFDdkIsU0FBZ0IsT0FBTyxDQUFDLFVBQWtDOztZQUN0RCxNQUFNLE1BQU0sR0FBb0M7Z0JBQzVDLFdBQVcsRUFBRSxnQkFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLFdBQVcsbUNBQUksa0dBQW9EO2dCQUM1RixlQUFlLEVBQUUsZ0JBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxlQUFlLG1DQUFJLHNHQUF3RDtnQkFDeEcsYUFBYSxFQUFFLGdCQUFVLGFBQVYsVUFBVSx1QkFBVixVQUFVLENBQUUsYUFBYSxtQ0FBSSxvR0FBc0Q7Z0JBQ2xHLFlBQVksRUFBRSxnQkFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLFlBQVksbUNBQUksbUdBQXFEO2dCQUMvRixZQUFZLEVBQUUsZ0JBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxZQUFZLG1DQUFJLG1HQUFxRDtnQkFDL0YsY0FBYyxFQUFFLGdCQUFVLGFBQVYsVUFBVSx1QkFBVixVQUFVLENBQUUsY0FBYyxtQ0FBSSxxR0FBdUQ7Z0JBQ3JHLGVBQWUsRUFBRSxnQkFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLGVBQWUsbUNBQUksc0dBQXdEO2FBQzNHO1lBQ0QsT0FBTyxNQUFNLENBQUM7UUFDbEIsQ0FBQztRQVhlLGtCQUFPLFVBV3RCO0lBQ0wsQ0FBQyxFQWJnQixVQUFVLEdBQVYsdUJBQVUsS0FBVix1QkFBVSxRQWExQjtJQXlFRCxJQUFpQixNQUFNLENBNEJ0QjtJQTVCRCxXQUFpQixNQUFNO1FBQ25CLFNBQWdCLE9BQU8sQ0FBQyxNQUEwQixFQUM5QyxRQUEyQyxFQUFFLE1BQXVDOztZQUVwRixJQUFJLElBQWtCLENBQUM7WUFDdkIsSUFBSSxPQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsSUFBSSxNQUFLLFNBQVMsRUFBRTtnQkFDNUIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7YUFDdEI7aUJBQU07Z0JBQ0gsSUFBSSxRQUFRLEtBQUssU0FBUyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO29CQUM3RCxJQUFJLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsdUZBQXlDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztpQkFDbEY7cUJBQU07b0JBQ0gsSUFBSSxHQUFHLHVGQUF5QyxDQUFDO2lCQUNwRDthQUNKO1lBQ0QsTUFBTSxNQUFNLEdBQWdDO2dCQUN4QyxJQUFJO2dCQUNKLE1BQU0sRUFBRSxrQkFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLE1BQU0sbUNBQUksTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLE1BQU0sbUNBQ3BDLENBQUMsU0FBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLGNBQWMsTUFBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMseUZBQTJDLENBQUM7Z0JBQzlGLElBQUksRUFBRSxrQkFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLEtBQUssbUNBQUksTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLEtBQUssbUNBQUksdUZBQXlDO2dCQUNqRixRQUFRLEVBQUUsa0JBQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxRQUFRLG1DQUFJLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxRQUFRLG1DQUMxQyxDQUFDLFNBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxnQkFBZ0IsTUFBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsMkZBQTZDLENBQUM7Z0JBQ2xHLEtBQUssRUFBRSxrQkFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLEtBQUssbUNBQUksTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLEtBQUssbUNBQ2pDLENBQUMsU0FBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLGFBQWEsTUFBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsd0ZBQTBDLENBQUM7Z0JBQzVGLFFBQVEsRUFBRSxrQkFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFFBQVEsbUNBQUksTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLFFBQVEsbUNBQUksMkZBQTZDO2dCQUMvRixXQUFXLEVBQUUsa0JBQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxXQUFXLG1DQUFJLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxXQUFXLG1DQUFJLDhGQUFnRDthQUM5RztZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2xCLENBQUM7UUExQmUsY0FBTyxVQTBCdEI7SUFDTCxDQUFDLEVBNUJnQixNQUFNLEdBQU4sbUJBQU0sS0FBTixtQkFBTSxRQTRCdEI7SUFFRCxTQUFnQixRQUFRLENBQUMsTUFBb0I7UUFDekMsT0FBTyxVQUFVLElBQUksTUFBTSxJQUFJLGVBQWUsSUFBSSxNQUFNLElBQUksUUFBUSxJQUFJLE1BQU0sQ0FBQztJQUNuRixDQUFDO0lBRmUscUJBQVEsV0FFdkI7SUFFRCxTQUFnQixPQUFPLENBQUMsWUFBMEI7UUFDOUMsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDeEIsT0FBTyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDbkQ7YUFBTTtZQUNILElBQUksSUFBZ0MsQ0FBQztZQUNyQyxJQUFJLFlBQVksQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO2dCQUNqQyxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQzthQUM1QjtpQkFBTTtnQkFDSCxJQUFJLFlBQVksQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDdkUsSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2xDO3FCQUFNO29CQUNILElBQUksR0FBRyxTQUFTLENBQUM7aUJBQ3BCO2FBQ0o7WUFDRCxNQUFNLE1BQU0sR0FBeUI7Z0JBQ2pDLFFBQVEsRUFBRSxJQUFJO2dCQUNkLElBQUksRUFBRSxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztnQkFDbEMsV0FBVyxFQUFFLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO2dCQUN0RSxVQUFVLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztnQkFDcEUsUUFBUSxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7Z0JBQzlELE1BQU0sRUFBRSxZQUFZLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQzthQUN2RztZQUNELE9BQU8sTUFBTSxDQUFDO1NBQ2pCO0lBQ0wsQ0FBQztJQXhCZSxvQkFBTyxVQXdCdEI7SUFFRCxTQUFnQixZQUFZLENBQUMsTUFBNEI7UUFDckQsTUFBTSxZQUFZLEdBQUcsNkVBQStCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0QsTUFBTSxNQUFNLEdBQWlCO1lBQ3pCLElBQUksRUFBRSxZQUFZLENBQUMsSUFBc0I7WUFDekMsV0FBVyxFQUFFLFlBQVksQ0FBQyxXQUE4QztZQUN4RSxVQUFVLEVBQUUsWUFBWSxDQUFDLFVBQVU7WUFDbkMsUUFBUSxFQUFFLFlBQVksQ0FBQyxRQUFRO1lBQy9CLE1BQU0sRUFBRSxZQUFZLENBQUMsTUFBTTtTQUM5QixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQVZlLHlCQUFZLGVBVTNCO0lBRUQsU0FBZ0IsVUFBVSxDQUFDLHNCQUEyRDtRQUNsRixNQUFNLE1BQU0sR0FBRyxzQkFBOEMsQ0FBQztRQUM5RCxPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBSGUsdUJBQVUsYUFHekI7SUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxhQUErQztRQUM5RSxJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDN0IsT0FBTyxFQUFFLENBQUM7U0FDYjthQUFNO1lBQ0gsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztZQUNuQyxNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBNkIsS0FBSyxDQUFDLENBQUM7WUFDNUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDNUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1RDtZQUNELE9BQU8sTUFBTSxDQUFDO1NBQ2pCO0lBQ0wsQ0FBQztJQVhlLCtCQUFrQixxQkFXakM7QUFDTCxDQUFDLEVBelVnQixZQUFZLEtBQVosWUFBWSxRQXlVNUI7QUFpQkQsY0FBYztBQUNQLElBQVUsa0JBQWtCLENBdUVsQztBQXZFRCxXQUFpQixrQkFBa0I7SUFxQi9CLElBQWlCLE1BQU0sQ0F1QnRCO0lBdkJELFdBQWlCLE1BQU07UUFDbkIsU0FBZ0IsT0FBTyxDQUFDLE1BQTBCLEVBQzlDLFVBQWtDOztZQUVsQyxJQUFJLE1BQXlDLENBQUM7WUFDOUMsTUFBTSxRQUFRLEdBQUcsd0ZBQTBDLENBQUM7WUFDNUQsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUN0QixNQUFNLEdBQUc7b0JBQ0wsS0FBSyxFQUFFLFlBQU0sQ0FBQyxLQUFLLG1DQUFJLFFBQVEsQ0FBQyxLQUFLO29CQUNyQyxNQUFNLEVBQUUsWUFBTSxDQUFDLE1BQU0sbUNBQUksUUFBUSxDQUFDLE1BQU07b0JBQ3hDLElBQUksRUFBRSxZQUFNLENBQUMsSUFBSSxtQ0FBSSxRQUFRLENBQUMsSUFBSTtvQkFDbEMsR0FBRyxFQUFFLFlBQU0sQ0FBQyxHQUFHLG1DQUFJLFFBQVEsQ0FBQyxHQUFHO2lCQUNsQzthQUNKO2lCQUFNO2dCQUNILE1BQU0sR0FBRztvQkFDTCxLQUFLLEVBQUUsZ0JBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxLQUFLLG1DQUFJLFFBQVEsQ0FBQyxLQUFLO29CQUMxQyxNQUFNLEVBQUUsZ0JBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxNQUFNLG1DQUFJLFFBQVEsQ0FBQyxNQUFNO29CQUM3QyxJQUFJLEVBQUUsZ0JBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxJQUFJLG1DQUFJLFFBQVEsQ0FBQyxJQUFJO29CQUN2QyxHQUFHLEVBQUUsZ0JBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxHQUFHLG1DQUFJLFFBQVEsQ0FBQyxHQUFHO2lCQUN2QzthQUNKO1lBQ0QsT0FBTyxNQUFNLENBQUM7UUFDbEIsQ0FBQztRQXJCZSxjQUFPLFVBcUJ0QjtJQUNMLENBQUMsRUF2QmdCLE1BQU0sR0FBTix5QkFBTSxLQUFOLHlCQUFNLFFBdUJ0QjtJQUVELFNBQWdCLE9BQU8sQ0FBQyxZQUFnQzs7UUFDcEQsSUFBSSxJQUFnQyxDQUFDO1FBQ3JDLElBQUksWUFBWSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDakMsSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUM7U0FDNUI7YUFBTTtZQUNILElBQUksWUFBWSxDQUFDLE9BQU8sS0FBSyxTQUFTLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2RSxJQUFJLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNsQztpQkFBTTtnQkFDSCxJQUFJLEdBQUcsU0FBUyxDQUFDO2FBQ3BCO1NBQ0o7UUFFRCxNQUFNLE1BQU0sR0FBK0I7WUFDdkMsSUFBSSxFQUFFLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ2xDLFdBQVcsRUFBRSxZQUFZLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQztZQUN0RSxRQUFRLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztZQUM5RCxVQUFVLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztZQUNwRSxNQUFNLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUM7WUFDcEcsUUFBUSxFQUFFLGtCQUFZLENBQUMsUUFBUSxtQ0FBSSxJQUFJO1lBQ3ZDLGFBQWEsRUFBRSxrQkFBWSxDQUFDLGFBQWEsbUNBQUksSUFBSTtZQUNqRCxNQUFNLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxVQUFVLENBQUM7WUFDdkYsUUFBUSxFQUFFLElBQUk7U0FDakI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBeEJlLDBCQUFPLFVBd0J0QjtBQUNMLENBQUMsRUF2RWdCLGtCQUFrQixLQUFsQixrQkFBa0IsUUF1RWxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2MkI0RTtBQUNuQjtBQUNpQjtBQUMxQjtBQWdCakQsY0FBYztBQUNQLElBQVUsa0JBQWtCLENBK0RsQztBQS9ERCxXQUFpQixrQkFBa0I7SUFDbEIsMkJBQVEsR0FBdUI7UUFDeEMsSUFBSSxFQUFFLHlEQUFlO1FBQ3JCLE9BQU8sRUFBRSxFQUFFO1FBQ1gsS0FBSyxFQUFFLEVBQUU7UUFDVCxRQUFRLEVBQUUsQ0FBQztRQUNYLE1BQU0sRUFBRSxFQUFFO1FBQ1YsU0FBUyxFQUFFLENBQUM7UUFDWixFQUFFLEVBQUUsRUFBRTtRQUNOLFVBQVUsRUFBRSxJQUFJO0tBQ1YsQ0FBQztJQUVYLGtHQUFrRztJQUNsRyxTQUFnQixVQUFVLENBQUMsUUFBNEIsRUFBRSxPQUE4QjtRQUNuRixRQUFRLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDbkIsS0FBSyx5REFBZSxDQUFDO1lBQ3JCLEtBQUssc0RBQVksQ0FBQztZQUNsQixLQUFLLHlEQUFlO2dCQUNoQixPQUFPLDZCQUE2QixDQUFDLFVBQVUsQ0FBQyxRQUF5QyxFQUNyRixPQUEwRCxDQUFDLENBQUM7WUFFcEUsS0FBSyx3REFBYztnQkFDZixPQUFPLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxRQUFtQyxFQUFFLE9BQXdDLENBQUMsQ0FBQztZQUU3SCxLQUFLLDREQUFrQjtnQkFDbkIsT0FBTywyQkFBMkIsQ0FBQyxVQUFVLENBQUMsUUFBdUMsQ0FBQyxDQUFDO1lBRTNGO2dCQUNJLE1BQU0sSUFBSSx3RUFBb0IsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLElBQUksRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3hHO0lBQ0wsQ0FBQztJQWpCZSw2QkFBVSxhQWlCekI7SUFFRCxTQUFnQixhQUFhLENBQUMsSUFBYztRQUN4QyxRQUFRLElBQUksRUFBRTtZQUNWLEtBQUsseURBQWU7Z0JBQ2hCLE1BQU0sSUFBSSwrREFBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMscUNBQXFDO1lBQy9FLEtBQUssc0RBQVksQ0FBQztZQUNsQixLQUFLLHlEQUFlO2dCQUNoQixPQUFPLDZCQUE2QixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU3RCxLQUFLLHdEQUFjO2dCQUNmLE9BQU8sdUJBQXVCLENBQUMsYUFBYSxFQUFFLENBQUM7WUFFbkQsS0FBSyw0REFBa0I7Z0JBQ25CLE9BQU8sMkJBQTJCLENBQUMsYUFBYSxFQUFFLENBQUM7WUFFdkQ7Z0JBQ0ksTUFBTSxJQUFJLHdFQUFvQixDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsb0NBQW9DLENBQUMsQ0FBQztTQUNqRztJQUNMLENBQUM7SUFqQmUsZ0NBQWEsZ0JBaUI1QjtJQUVELFNBQWdCLGVBQWUsQ0FBQyxVQUE4QjtRQUMxRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLEtBQUssNERBQWtCLENBQUM7SUFDbEQsQ0FBQztJQUZlLGtDQUFlLGtCQUU5QjtJQUVELFNBQWdCLFdBQVcsQ0FBQyxVQUE4QjtRQUN0RCxPQUFPLFVBQVUsQ0FBQyxJQUFJLEtBQUssd0RBQWMsQ0FBQztJQUM5QyxDQUFDO0lBRmUsOEJBQVcsY0FFMUI7SUFFRCxnQkFBZ0I7SUFDaEIsU0FBZ0IsWUFBWSxDQUFDLFVBQThCO1FBQ3ZELE9BQU8sVUFBVSxDQUFDLElBQUksS0FBSyx5REFBZSxDQUFDO0lBQy9DLENBQUM7SUFGZSwrQkFBWSxlQUUzQjtBQUNMLENBQUMsRUEvRGdCLGtCQUFrQixLQUFsQixrQkFBa0IsUUErRGxDO0FBU0QsY0FBYztBQUNQLElBQVUsMEJBQTBCLENBNkIxQztBQTdCRCxXQUFpQiwwQkFBMEI7SUFDMUIsMkNBQWdCLEdBQUcsS0FBSyxDQUFDO0lBWXRDLElBQWlCLE1BQU0sQ0FldEI7SUFmRCxXQUFpQixNQUFNO1FBQ25CLFNBQWdCLFVBQVUsQ0FBQyxRQUE0QixFQUFFLElBQW1CO1lBQ3hFLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDeEIsT0FBTyxTQUFTLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0gsT0FBTztvQkFDSCxJQUFJLEVBQUUsSUFBSSxhQUFKLElBQUksY0FBSixJQUFJLEdBQUksUUFBUSxDQUFDLElBQUk7b0JBQzNCLE1BQU0sRUFBRSxRQUFRLENBQUMsTUFBTTtvQkFDdkIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLO29CQUNyQixRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVE7b0JBQzNCLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUTtvQkFDM0IsV0FBVyxFQUFFLFFBQVEsQ0FBQyxXQUFXO2lCQUNwQzthQUNKO1FBQ0wsQ0FBQztRQWJlLGlCQUFVLGFBYXpCO0lBQ0wsQ0FBQyxFQWZnQixNQUFNLEdBQU4saUNBQU0sS0FBTixpQ0FBTSxRQWV0QjtBQUNMLENBQUMsRUE3QmdCLDBCQUEwQixLQUExQiwwQkFBMEIsUUE2QjFDO0FBVUQsY0FBYztBQUNQLElBQVUsdUJBQXVCLENBNkN2QztBQTdDRCxXQUFpQix1QkFBdUI7SUFDdkIsOENBQXNCLEdBQUcsQ0FBQyxDQUFDO0lBRXhDLFNBQWdCLFVBQVUsQ0FBQyxRQUFpQyxFQUFFLE9BQXVDO1FBQ2pHLE1BQU0sTUFBTSxHQUE0QjtZQUNwQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7WUFDbkIsT0FBTyxFQUFFLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFDckYsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLO1lBQ3JCLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUTtZQUMzQixNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU07WUFDdkIsU0FBUyxFQUFFLFFBQVEsQ0FBQyxTQUFTO1lBQzdCLEVBQUUsRUFBRSxRQUFRLENBQUMsRUFBRTtZQUNmLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUztZQUM3QixVQUFVLEVBQUUsUUFBUSxDQUFDLFVBQVU7WUFDL0IsZUFBZSxFQUFFLFFBQVEsQ0FBQyxlQUFlO1lBQ3pDLE1BQU0sRUFBRSwwQkFBMEIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7U0FDeEU7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBZmUsa0NBQVUsYUFlekI7SUFFRCxTQUFnQixXQUFXLENBQUMsUUFBdUM7UUFDL0QsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUM5QixNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBOEIsS0FBSyxDQUFDLENBQUM7UUFDN0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBZ0MsQ0FBQztTQUN6RjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFQZSxtQ0FBVyxjQU8xQjtJQUVELFNBQWdCLGFBQWE7UUFDekIsTUFBTSxNQUFNLEdBQTRCO1lBQ3BDLElBQUksRUFBRSx3REFBYztZQUNwQixPQUFPLEVBQUUsRUFBRTtZQUNYLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsS0FBSztZQUN4QyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFFBQVE7WUFDOUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxNQUFNO1lBQzFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsU0FBUztZQUNoRCxFQUFFLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDbEMsU0FBUyxFQUFFLDBCQUEwQixDQUFDLGdCQUFnQjtZQUN0RCxVQUFVLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFVBQVU7WUFDbEQsZUFBZSxFQUFFLDhDQUFzQjtZQUN2QyxNQUFNLEVBQUUsU0FBUztTQUNwQjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFmZSxxQ0FBYSxnQkFlNUI7QUFDTCxDQUFDLEVBN0NnQix1QkFBdUIsS0FBdkIsdUJBQXVCLFFBNkN2QztBQWdCRCxjQUFjO0FBQ1AsSUFBVSwyQkFBMkIsQ0F1RDNDO0FBdkRELFdBQWlCLDJCQUEyQjtJQUMzQixpREFBcUIsR0FBRyxJQUFJLENBQUM7SUFFMUMsU0FBZ0Isd0JBQXdCLENBQUMsVUFBdUM7UUFDNUUsTUFBTSxhQUFhLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUMvQyxJQUFJLE9BQU8sYUFBYSxLQUFLLFFBQVEsRUFBRTtZQUNuQyxPQUFPLGFBQWEsQ0FBQztTQUN4QjthQUFNO1lBQ0gsT0FBTyxTQUFTLENBQUM7U0FDcEI7SUFDTCxDQUFDO0lBUGUsb0RBQXdCLDJCQU92QztJQUVELFNBQWdCLFVBQVUsQ0FBQyxRQUFxQztRQUM1RCxNQUFNLE1BQU0sR0FBZ0M7WUFDeEMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJO1lBQ25CLE9BQU8sRUFBRSxFQUFFO1lBQ1gsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLO1lBQ3JCLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUTtZQUMzQixNQUFNLEVBQUUsUUFBUSxDQUFDLE1BQU07WUFDdkIsU0FBUyxFQUFFLFFBQVEsQ0FBQyxTQUFTO1lBQzdCLEVBQUUsRUFBRSxRQUFRLENBQUMsRUFBRTtZQUNmLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUztZQUM3QixVQUFVLEVBQUUsUUFBUSxDQUFDLFVBQVU7WUFDL0IsY0FBYyxFQUFFLFFBQVEsQ0FBQyxjQUFjO1lBQ3ZDLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSztZQUNyQixNQUFNLEVBQUUsMEJBQTBCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ3JFLGFBQWEsRUFBRSxRQUFRLENBQUMsYUFBYTtZQUNyQyxjQUFjLEVBQUUsNkRBQWUsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBYztTQUNuRjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFsQmUsc0NBQVUsYUFrQnpCO0lBRUQsU0FBZ0IsYUFBYSxDQUFDLGdCQUEyQixFQUFFLEVBQUUsY0FBMEIsRUFBRSxLQUFLLEdBQUcsRUFBRTtRQUMvRixNQUFNLE1BQU0sR0FBZ0M7WUFDeEMsSUFBSSxFQUFFLDREQUFrQjtZQUN4QixPQUFPLEVBQUUsRUFBRTtZQUNYLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsS0FBSztZQUN4QyxRQUFRLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFFBQVE7WUFDOUMsTUFBTSxFQUFFLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxNQUFNO1lBQzFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsU0FBUztZQUNoRCxFQUFFLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDbEMsU0FBUyxFQUFFLDBCQUEwQixDQUFDLGdCQUFnQjtZQUN0RCxVQUFVLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFVBQVU7WUFDbEQsY0FBYyxFQUFFLDJCQUEyQixDQUFDLHFCQUFxQjtZQUNqRSxLQUFLO1lBQ0wsTUFBTSxFQUFFLFNBQVM7WUFDakIsYUFBYTtZQUNiLGNBQWM7U0FDakI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBbEJlLHlDQUFhLGdCQWtCNUI7SUFFRCxTQUFnQixpQkFBaUIsQ0FBQyxhQUF3QjtRQUN0RCxPQUFPLDZEQUFlLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBYztJQUMxRCxDQUFDO0lBRmUsNkNBQWlCLG9CQUVoQztBQUNMLENBQUMsRUF2RGdCLDJCQUEyQixLQUEzQiwyQkFBMkIsUUF1RDNDO0FBYUQsY0FBYztBQUNQLElBQVUsNkJBQTZCLENBcUQ3QztBQXJERCxXQUFpQiw2QkFBNkI7SUFHMUMsU0FBZ0IsaUJBQWlCLENBQUMsVUFBOEI7UUFDNUQsUUFBUSxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQ3JCLEtBQUssc0RBQVksQ0FBQztZQUNsQixLQUFLLHlEQUFlLENBQUM7WUFDckIsS0FBSyx3REFBYyxDQUFDO1lBQ3BCLEtBQUssNERBQWtCO2dCQUNuQixPQUFPLElBQUksQ0FBQztZQUNoQixLQUFLLHlEQUFlO2dCQUNoQixPQUFPLEtBQUssQ0FBQztZQUNqQjtnQkFDSSxNQUFNLElBQUksd0VBQW9CLENBQUMsbUJBQW1CLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVFO0lBQ0wsQ0FBQztJQVplLCtDQUFpQixvQkFZaEM7SUFFRCxTQUFnQixVQUFVLENBQUMsUUFBdUMsRUFBRSxPQUEyQjtRQUMzRixNQUFNLE1BQU0sR0FBa0M7WUFDMUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJO1lBQ25CLE9BQU8sRUFBRSxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQ3JGLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSztZQUNyQixRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVE7WUFDM0IsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNO1lBQ3ZCLFNBQVMsRUFBRSxRQUFRLENBQUMsU0FBUztZQUM3QixFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUU7WUFDZixVQUFVLEVBQUUsUUFBUSxDQUFDLFVBQVU7U0FDbEM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBWmUsd0NBQVUsYUFZekI7SUFFRCxTQUFnQixXQUFXLENBQUMsUUFBb0M7UUFDNUQsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUM5QixNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBa0IsS0FBSyxDQUFDLENBQUM7UUFDakQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBb0IsQ0FBQztTQUM3RTtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFQZSx5Q0FBVyxjQU8xQjtJQUVELFNBQWdCLGFBQWEsQ0FBQyxJQUFzQjtRQUNoRCxNQUFNLE1BQU0sR0FBa0M7WUFDMUMsSUFBSTtZQUNKLE9BQU8sRUFBRSxFQUFFO1lBQ1gsS0FBSyxFQUFFLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxLQUFLO1lBQ3hDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsUUFBUTtZQUM5QyxNQUFNLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLE1BQU07WUFDMUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxTQUFTO1lBQ2hELEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNsQyxVQUFVLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDLFVBQVU7U0FDckQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBWmUsMkNBQWEsZ0JBWTVCO0FBQ0wsQ0FBQyxFQXJEZ0IsNkJBQTZCLEtBQTdCLDZCQUE2QixRQXFEN0M7QUFXRCxjQUFjO0FBQ1AsSUFBVSxzQkFBc0IsQ0FrQnRDO0FBbEJELFdBQWlCLHNCQUFzQjtJQUNuQyxTQUFnQixVQUFVLENBQUMsTUFBOEI7UUFDckQsT0FBTyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUEyQixDQUFDO0lBQzNFLENBQUM7SUFGZSxpQ0FBVSxhQUV6QjtJQUVELFNBQWdCLGdCQUFnQixDQUFDLFVBQThCO1FBQzNELFFBQVEsVUFBVSxDQUFDLElBQUksRUFBRTtZQUNyQixLQUFLLHNEQUFZLENBQUM7WUFDbEIsS0FBSyx5REFBZSxDQUFDO1lBQ3JCLEtBQUssd0RBQWMsQ0FBQztZQUNwQixLQUFLLDREQUFrQjtnQkFDbkIsT0FBTyxJQUFJLENBQUM7WUFDaEIsS0FBSyx5REFBZTtnQkFDaEIsT0FBTyxLQUFLLENBQUM7WUFDakI7Z0JBQ0ksTUFBTSxJQUFJLHdFQUFvQixDQUFDLG1CQUFtQixFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1RTtJQUNMLENBQUM7SUFaZSx1Q0FBZ0IsbUJBWS9CO0FBQ0wsQ0FBQyxFQWxCZ0Isc0JBQXNCLEtBQXRCLHNCQUFzQixRQWtCdEM7QUFlRCxnQkFBZ0I7QUFDVCxJQUFVLHdCQUF3QixDQWdCeEM7QUFoQkQsV0FBaUIsd0JBQXdCO0lBQ3JDLFNBQWdCLE1BQU0sQ0FBQyxjQUFrRDtRQUNyRSxNQUFNLE9BQU8sR0FBRyxjQUFjLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckUsT0FBTztZQUNILElBQUksRUFBRSx5REFBZTtZQUNyQixPQUFPO1lBQ1AsS0FBSyxFQUFFLEdBQUc7WUFDVixRQUFRLEVBQUUsQ0FBQztZQUNYLE1BQU0sRUFBRSxHQUFHO1lBQ1gsU0FBUyxFQUFFLENBQUM7WUFDWixFQUFFLEVBQUUsRUFBRTtZQUNOLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLEtBQUssRUFBRSxFQUFFO1lBQ1QsY0FBYyxFQUFFLEtBQUs7U0FDeEI7SUFDTCxDQUFDO0lBZGUsK0JBQU0sU0FjckI7QUFDTCxDQUFDLEVBaEJnQix3QkFBd0IsS0FBeEIsd0JBQXdCLFFBZ0J4QztBQVlELGNBQWM7QUFDUCxJQUFVLG9CQUFvQixDQTJLcEM7QUEzS0QsV0FBaUIsb0JBQW9CO0lBZWpDLElBQWlCLFFBQVEsQ0E0QnhCO0lBNUJELFdBQWlCLFFBQVE7UUFDUixpQkFBUSxHQUFrQztZQUNuRCx3QkFBd0IsRUFBRSxJQUFJO1lBQzlCLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLGdCQUFnQixFQUFFLEtBQUs7WUFDdkIsd0JBQXdCLEVBQUUsSUFBSTtZQUM5QixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLGNBQWMsRUFBRSw2REFBbUI7WUFDbkMsbUJBQW1CLEVBQUUsQ0FBQztZQUN0QixxQkFBcUIsRUFBRSxJQUFJO1lBQzNCLGdCQUFnQixFQUFFLEVBQUU7WUFDcEIsWUFBWSxFQUFFLEtBQUs7U0FDYixDQUFDO1FBRVgsU0FBZ0IsVUFBVSxDQUFDLFFBQWtCO1lBQ3pDLE9BQU87Z0JBQ0gsd0JBQXdCLEVBQUUsUUFBUSxDQUFDLHdCQUF3QjtnQkFDM0QsY0FBYyxFQUFFLFFBQVEsQ0FBQyxjQUFjO2dCQUN2QyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsZ0JBQWdCO2dCQUMzQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsd0JBQXdCO2dCQUMzRCxvQkFBb0IsRUFBRSxRQUFRLENBQUMsb0JBQW9CO2dCQUNuRCxjQUFjLEVBQUUsUUFBUSxDQUFDLGNBQWM7Z0JBQ3ZDLG1CQUFtQixFQUFFLFFBQVEsQ0FBQyxtQkFBbUI7Z0JBQ2pELHFCQUFxQixFQUFFLFFBQVEsQ0FBQyxxQkFBcUI7Z0JBQ3JELGdCQUFnQixFQUFFLFFBQVEsQ0FBQyxnQkFBZ0I7Z0JBQzNDLFlBQVksRUFBRSxRQUFRLENBQUMsWUFBWTthQUN0QztRQUNMLENBQUM7UUFiZSxtQkFBVSxhQWF6QjtJQUNMLENBQUMsRUE1QmdCLFFBQVEsR0FBUiw2QkFBUSxLQUFSLDZCQUFRLFFBNEJ4QjtJQWFELElBQWlCLFVBQVUsQ0FzQjFCO0lBdEJELFdBQWlCLFVBQVU7UUFDdkIsU0FBZ0IsVUFBVSxDQUFDLFFBQW9CO1lBQzNDLE9BQU87Z0JBQ0gsV0FBVyxFQUFFLFFBQVEsQ0FBQyxXQUFXO2dCQUNqQyxlQUFlLEVBQUUsUUFBUSxDQUFDLGVBQWU7Z0JBQ3pDLGFBQWEsRUFBRSxRQUFRLENBQUMsYUFBYTtnQkFDckMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxZQUFZO2dCQUNuQyxZQUFZLEVBQUUsUUFBUSxDQUFDLFlBQVk7Z0JBQ25DLGNBQWMsRUFBRSxRQUFRLENBQUMsY0FBYztnQkFDdkMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxlQUFlO2FBQzVDO1FBQ0wsQ0FBQztRQVZlLHFCQUFVLGFBVXpCO1FBRVksbUJBQVEsR0FBb0M7WUFDckQsV0FBVyxFQUFFLENBQUM7WUFDZCxlQUFlLEVBQUUsQ0FBQztZQUNsQixhQUFhLEVBQUUsRUFBRTtZQUNqQixZQUFZLEVBQUUsRUFBRTtZQUNoQixZQUFZLEVBQUUsRUFBRTtZQUNoQixjQUFjLEVBQUUsR0FBRztZQUNuQixlQUFlLEVBQUUsR0FBRztTQUNkLENBQUM7SUFDZixDQUFDLEVBdEJnQixVQUFVLEdBQVYsK0JBQVUsS0FBViwrQkFBVSxRQXNCMUI7SUFZRCxJQUFpQixNQUFNLENBc0J0QjtJQXRCRCxXQUFpQixNQUFNO1FBQ25CLFNBQWdCLFVBQVUsQ0FBQyxRQUFnQjtZQUN2QyxPQUFPO2dCQUNILElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtnQkFDbkIsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNO2dCQUN2QixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7Z0JBQ25CLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSztnQkFDckIsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRO2dCQUMzQixRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVE7Z0JBQzNCLFdBQVcsRUFBRSxRQUFRLENBQUMsV0FBVzthQUNwQztRQUNMLENBQUM7UUFWZSxpQkFBVSxhQVV6QjtRQUVZLGVBQVEsR0FBZ0M7WUFDakQsSUFBSSxFQUFFLGtEQUFRO1lBQ2QsTUFBTSxFQUFFLG9CQUFvQjtZQUM1QixJQUFJLEVBQUUsTUFBTTtZQUNaLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLEtBQUssRUFBRSxPQUFPO1lBQ2QsV0FBVyxFQUFFLGlCQUFpQjtTQUN4QixDQUFDO0lBQ2YsQ0FBQyxFQXRCZ0IsTUFBTSxHQUFOLDJCQUFNLEtBQU4sMkJBQU0sUUFzQnRCO0lBRUQsU0FBZ0IsUUFBUSxDQUFDLE1BQTRCO1FBQ2pELE9BQU8sVUFBVSxJQUFJLE1BQU0sQ0FBQztJQUNoQyxDQUFDO0lBRmUsNkJBQVEsV0FFdkI7SUFFRCxTQUFnQixhQUFhO1FBQ3pCLE1BQU0sTUFBTSxHQUF5QjtZQUNqQyxJQUFJLEVBQUUsU0FBUztZQUNmLFdBQVcsRUFBRSxFQUFFO1lBQ2YsVUFBVSxFQUFFLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxRQUFRO1lBQ3BELFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsUUFBUTtZQUNoRCxNQUFNLEVBQUUsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFFBQVE7WUFDNUMsUUFBUSxFQUFFLElBQUk7U0FDakI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBVmUsa0NBQWEsZ0JBVTVCO0lBRUQsU0FBZ0IsVUFBVSxDQUFDLE1BQTRCO1FBQ25ELElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ2xCLE9BQU8sMEJBQTBCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3hEO2FBQU07WUFDSCxNQUFNLE1BQU0sR0FBeUI7Z0JBQ2pDLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztnQkFDNUYsV0FBVyxFQUFFLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO2dCQUNyRSxRQUFRLEVBQUUsb0JBQW9CLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO2dCQUNuRSxVQUFVLEVBQUUsb0JBQW9CLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO2dCQUN6RSxNQUFNLEVBQUUsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUM3RCxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7YUFDNUI7WUFDRCxPQUFPLE1BQU0sQ0FBQztTQUNqQjtJQUNMLENBQUM7SUFkZSwrQkFBVSxhQWN6QjtJQUVELFNBQWdCLGVBQWUsQ0FBQyxRQUFzQztRQUNsRSxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxDQUE2QixLQUFLLENBQUMsQ0FBQztRQUM1RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRywwQkFBMEIsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEU7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBUGUsb0NBQWUsa0JBTzlCO0lBRUQ7Ozs7T0FJRztJQUNILFNBQWdCLFlBQVksQ0FBQyxZQUFrQztRQUMzRCxPQUFPLGtGQUE4QixDQUFDLFlBQVksRUFBRSxJQUFJLENBQXlCLENBQUM7SUFDdEYsQ0FBQztJQUZlLGlDQUFZLGVBRTNCO0lBRUQ7OztPQUdHO0lBQ0gsU0FBZ0IsY0FBYyxDQUFDLGNBQW9DO1FBQy9ELE9BQU8sa0ZBQThCLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBeUIsQ0FBQztJQUN6RixDQUFDO0lBRmUsbUNBQWMsaUJBRTdCO0FBQ0wsQ0FBQyxFQTNLZ0Isb0JBQW9CLEtBQXBCLG9CQUFvQixRQTJLcEM7QUFTRCxjQUFjO0FBQ1AsSUFBVSwwQkFBMEIsQ0F3QzFDO0FBeENELFdBQWlCLDBCQUEwQjtJQVF2QyxJQUFpQixNQUFNLENBZ0J0QjtJQWhCRCxXQUFpQixNQUFNO1FBQ25CLFNBQWdCLFVBQVUsQ0FBQyxRQUFnQjtZQUN2QyxPQUFPO2dCQUNILEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSztnQkFDckIsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNO2dCQUN2QixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7Z0JBQ25CLEdBQUcsRUFBRSxRQUFRLENBQUMsR0FBRzthQUNwQjtRQUNMLENBQUM7UUFQZSxpQkFBVSxhQU96QjtRQUVZLGVBQVEsR0FBc0M7WUFDdkQsS0FBSyxFQUFFLElBQUk7WUFDWCxNQUFNLEVBQUUsSUFBSTtZQUNaLElBQUksRUFBRSxJQUFJO1lBQ1YsR0FBRyxFQUFFLElBQUk7U0FDSCxDQUFDO0lBQ2YsQ0FBQyxFQWhCZ0IsTUFBTSxHQUFOLGlDQUFNLEtBQU4saUNBQU0sUUFnQnRCO0lBRUQsU0FBZ0IsVUFBVSxDQUFDLFFBQW9DO1FBQzNELE1BQU0sTUFBTSxHQUErQjtZQUN2QyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDaEcsV0FBVyxFQUFFLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO1lBQ3ZFLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7WUFDckUsVUFBVSxFQUFFLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUMzRSxNQUFNLEVBQUUsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQy9ELFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUTtZQUMzQixhQUFhLEVBQUUsUUFBUSxDQUFDLGFBQWE7WUFDckMsTUFBTSxFQUFFLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUNyRSxRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVE7U0FDOUI7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBYmUscUNBQVUsYUFhekI7QUFDTCxDQUFDLEVBeENnQiwwQkFBMEIsS0FBMUIsMEJBQTBCLFFBd0MxQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcm1Ca0U7QUFHUztBQUl0QjtBQUNJO0FBQ0E7QUFDcUI7QUFFL0UsY0FBYztBQUNQLE1BQU0sa0JBQW1CLFNBQVEsOERBQVk7SUFnRGhELGdCQUFnQjtJQUNoQjtJQUNJLGdCQUFnQjtJQUNDLE9BQW9DO0lBQ3JELGdCQUFnQjtJQUNDLE9BQXNCO0lBQ3ZDLGdCQUFnQjtJQUNDLGNBQTZCO0lBQzlDLGdCQUFnQjtJQUNDLFFBQXFCO0lBQ3RDLGdCQUFnQjtJQUNDLHNCQUF1RTtJQUN4RixnQkFBZ0I7SUFDQyxVQUErQztJQUNoRSxnQkFBZ0I7SUFDQyxVQUErQztJQUNoRSxnQkFBZ0I7SUFDQyxXQUFpRDtJQUNsRSxnQkFBZ0I7SUFDQyxVQUErQztRQUVoRSxLQUFLLEVBQUUsQ0FBQztRQWxCUyxZQUFPLEdBQVAsT0FBTyxDQUE2QjtRQUVwQyxZQUFPLEdBQVAsT0FBTyxDQUFlO1FBRXRCLG1CQUFjLEdBQWQsY0FBYyxDQUFlO1FBRTdCLGFBQVEsR0FBUixRQUFRLENBQWE7UUFFckIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFpRDtRQUV2RSxlQUFVLEdBQVYsVUFBVSxDQUFxQztRQUUvQyxlQUFVLEdBQVYsVUFBVSxDQUFxQztRQUUvQyxnQkFBVyxHQUFYLFdBQVcsQ0FBc0M7UUFFakQsZUFBVSxHQUFWLFVBQVUsQ0FBcUM7UUE5Q3BFLGdCQUFnQjtRQUNSLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBaUQ1QixJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsMEJBQTBCLEdBQUcsSUFBSSxDQUFDO1FBRXZDLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUM1QyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDO1FBQzVDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUVqQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV2RSxJQUFJLENBQUMsK0NBQStDLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0lBdkRELElBQUksS0FBSyxLQUFhLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDM0MsSUFBSSxNQUFNLEtBQWEsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM3QyxJQUFJLE1BQU0sS0FBb0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNwRCxpRkFBaUY7SUFDakYsSUFBSSxhQUFhLEtBQWdCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDOUQsSUFBSSxhQUFhLEtBQWdCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDOUQsSUFBSSxPQUFPLEtBQWMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDL0QsSUFBSSxTQUFTLEtBQW1DLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLElBQUksR0FBRyxLQUFVLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEMsSUFBSSxLQUFLLEtBQWEsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbEQsSUFBSSxhQUFhLEtBQW9CLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDbEUsSUFBSSxRQUFRLEtBQWMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ2xELElBQUksT0FBTyxLQUFjLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDaEQsSUFBSSxLQUFLLEtBQTRCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDMUQseUNBQXlDO0lBQ3pDLElBQUksWUFBWSxLQUE0QixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLGlGQUFpRjtJQUNqRixJQUFJLE9BQU8sS0FBa0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQXdDcEQsZ0JBQWdCO0lBQ2hCLE9BQU87UUFDSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELGtFQUFrRTtJQUNsRSxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJO1FBQ0EsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJO1FBQ0EsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxhQUFhLEdBQUcsS0FBSztRQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSztRQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7OztPQWFHO0lBQ0gsT0FBTyxDQUFDLEtBQWEsRUFBRSxNQUFjO1FBQ2pDLElBQUksWUFBWSxHQUF1QixJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3BELElBQUksWUFBWSxDQUFDLFFBQVEsSUFBSSxZQUFZLENBQUMsS0FBSyxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQzdFLE1BQU0sSUFBSSwrREFBVyxDQUFDLFNBQVMsRUFBRSxpREFBaUQsQ0FBQyxDQUFDO1NBQ3ZGO2FBQU07WUFDSCxJQUFJLGlCQUE4QixDQUFDO1lBQ25DLEdBQUc7Z0JBQ0MsaUJBQWlCLEdBQUcsWUFBWSxDQUFDO2dCQUNqQyxZQUFZLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQzthQUN0QyxRQUFRLFlBQVksS0FBSyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRTtZQUVqRixJQUFJLFlBQVksS0FBSyxJQUFJLEVBQUU7Z0JBQ3ZCLHlCQUF5QjtnQkFDekIsT0FBTyxLQUFLLENBQUM7YUFDaEI7aUJBQU07Z0JBQ0gsZ0NBQWdDO2dCQUNoQyxNQUFNLFNBQVMsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztnQkFDN0QsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLFdBQVcsS0FBSyxJQUFJLEVBQUU7b0JBQ3RCLE1BQU0sSUFBSSx1RUFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztpQkFDaEQ7cUJBQU07b0JBQ0gsTUFBTSxPQUFPLEdBQUcsU0FBUyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBRXhELE1BQU0sVUFBVSxHQUFHLFdBQVcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQzVFLE1BQU0sVUFBVSxHQUFHLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztvQkFDaEQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUVuRyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7d0JBQ3ZELElBQUksWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxpQkFBaUIsRUFBRTs0QkFDcEQsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxVQUFVLENBQUM7eUJBQ3hEOzZCQUFNOzRCQUNILFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxDQUFDO3lCQUNwRDtxQkFDSjtvQkFFRCxZQUFZLENBQUMsVUFBVSxFQUFFLENBQUM7b0JBRTFCLE9BQU8sSUFBSSxDQUFDO2lCQUNmO2FBQ0o7U0FDSjtJQUNMLENBQUM7SUFHRDs7OztPQUlHO0lBQ0gsS0FBSztRQUNELElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNsQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBRUQsa0RBQWtEO0lBQ2xELGdCQUFnQixDQUFDLFVBQStCO1FBQzVDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxrRUFBc0IsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLG9EQUFvRCxDQUFDO1NBQ3hFO2FBQU07WUFDSCxNQUFNLE1BQU0sR0FBRyx1RUFBMkIsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN2RCxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7WUFDM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztZQUUzQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFcEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdEUsSUFBSSxDQUFDLCtDQUErQyxFQUFFLENBQUM7WUFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUM3QjtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsUUFBUTtRQUNKLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsV0FBVyxDQUFDLEtBQThCO1FBQ3RDLE1BQU0sYUFBYSxHQUFHLHdEQUFVLENBQUMsSUFBSSxDQUFDLE1BQWlDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUEwQixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVEsQ0FBQyxLQUFnQjtRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVEsQ0FBQyxLQUFhO1FBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsTUFBTSxDQUFDLEdBQVE7UUFDWCxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7SUFDekIsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixhQUFhLENBQUMsS0FBYztRQUN4QixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFO1lBQzlCLElBQUksSUFBSSxDQUFDLG9DQUFvQyxLQUFLLFNBQVMsRUFBRTtnQkFDekQsSUFBSSxDQUFDLG9DQUFvQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQzthQUMxRDtTQUNKO1FBRUQsSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ3JCLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ3pDLElBQUksQ0FBQywwQkFBMEIsR0FBRyxJQUFJLENBQUM7aUJBQzFDO3FCQUFNO29CQUNILElBQUksQ0FBQywwQkFBMEIsR0FBRyxLQUFLLENBQUM7b0JBQ3hDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ3hELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztpQkFDbkI7YUFDSjtpQkFBTTtnQkFDSCxJQUFJLElBQUksQ0FBQywwQkFBMEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQzlFLElBQUksQ0FBQywwQkFBMEIsR0FBRyxLQUFLLENBQUM7b0JBQ3hDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ3hELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztpQkFDbkI7YUFDSjtTQUNKO2FBQU07WUFDSCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLElBQUksQ0FBQywwQkFBMEIsR0FBRyxLQUFLLENBQUM7Z0JBQ3hDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUNuQjtTQUNKO0lBQ0wsQ0FBQztJQUlEOzs7O09BSUc7SUFDSCxhQUFhLENBQUMsS0FBYSxFQUFFLE1BQWM7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsNkRBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLDhEQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFeEMsSUFBSSxJQUFJLENBQUMsZ0NBQWdDLEtBQUssU0FBUyxFQUFFO1lBQ3JELElBQUksQ0FBQyxnQ0FBZ0MsQ0FBQyxJQUFJLEVBQUUsNERBQWtCLEVBQUUsNkZBQXlDLENBQUMsQ0FBQztTQUM5RztRQUVELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLFlBQVk7UUFDUixJQUFJLElBQUksQ0FBQyxnQ0FBZ0MsS0FBSyxTQUFTLEVBQUU7WUFDckQsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLElBQUksRUFBRSw0REFBa0IsRUFBRSw2RkFBeUMsQ0FBQyxDQUFDO1NBQzlHO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixtQkFBbUI7UUFDZixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLElBQUksQ0FBQyxnQ0FBZ0MsS0FBSyxTQUFTLEVBQUU7WUFDckQsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLElBQUksRUFBRSxzRUFBNEIsRUFBRSx1R0FBbUQsQ0FBQyxDQUFDO1NBQ2xJO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixrQkFBa0I7UUFDZCxJQUFJLElBQUksQ0FBQyxnQ0FBZ0MsS0FBSyxTQUFTLEVBQUU7WUFDckQsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLElBQUksRUFBRSw0REFBa0IsRUFBRSw2RkFBeUMsQ0FBQyxDQUFDO1NBQzlHO1FBQ0QsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixJQUFJO1FBQ0EsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRTtZQUM5QixJQUFJLElBQUksQ0FBQywyQkFBMkIsS0FBSyxTQUFTLEVBQUU7Z0JBQ2hELElBQUksQ0FBQyxjQUFjLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELElBQUk7b0JBQ0EsSUFBSSxDQUFDLDJCQUEyQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDckU7d0JBQVM7b0JBQ04sSUFBSSxDQUFDLGNBQWMsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO2lCQUN0RDthQUNKO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxpQkFBaUIsQ0FBQyxLQUFhLEVBQUUsTUFBYyxFQUFFLEtBQWM7UUFDM0QsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sSUFBSSxNQUFNLEtBQUssSUFBSSxDQUFDLE9BQU8sSUFBSSxLQUFLLEVBQUU7WUFDM0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFDdEIsNkRBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLDhEQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFeEMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRTtnQkFDOUIsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLENBQUM7YUFDbEQ7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7YUFDdkM7U0FDSjtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsNEJBQTRCO1FBQ3hCLElBQUksSUFBSSxDQUFDLDJCQUEyQixLQUFLLFNBQVMsRUFBRTtZQUNoRCxJQUFJLENBQUMsMkJBQTJCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDcEIsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7U0FDdkM7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsK0NBQStDO1FBQ25ELElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUMzQzthQUFNO1lBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLGlDQUFpQztTQUN2RTtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDUix1Q0FBdUM7UUFDM0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO1FBQ3ZELElBQUk7WUFDQSxJQUFJLENBQUMsY0FBYyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3REO2dCQUFTO1lBQ04sSUFBSSxDQUFDLGNBQWMsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDO1NBQ3hEO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLDRCQUE0QjtRQUNoQyxJQUFJLElBQUksQ0FBQywwQkFBMEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDOUUsSUFBSSxDQUFDLDBCQUEwQixHQUFHLEtBQUssQ0FBQztZQUN4QyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDbkI7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsUUFBUTtRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsUUFBUTtRQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELGdCQUFnQjtJQUNSLGdCQUFnQjtRQUNwQixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDN0I7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0csQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzFiNEY7QUFDL0I7QUFDMkI7QUFHbkM7QUFFRztBQUV6RDs7Ozs7Ozs7OztHQVVHO0FBRUksTUFBTSxhQUFjLFNBQVEsOERBQVk7SUFRM0M7Ozs7T0FJRztJQUNIO0lBQ0ksZ0JBQWdCO0lBQ1IsT0FBbUM7SUFDM0MsZ0JBQWdCO0lBQ1Isa0JBQXdCO0lBQ2hDLGdCQUFnQjtJQUNSLGNBQTZCO1FBRXJDLEtBQUssRUFBRSxDQUFDO1FBTkEsWUFBTyxHQUFQLE9BQU8sQ0FBNEI7UUFFbkMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFNO1FBRXhCLG1CQUFjLEdBQWQsY0FBYyxDQUFlO1FBSXJDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsUUFBUTs7UUFDSixJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssS0FBSyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUN2RTtRQUVELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QyxNQUFNLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUVqRCxJQUFJLElBQW1CLENBQUM7UUFDeEIsSUFBSSxHQUFrQixDQUFDO1FBQ3ZCLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLEVBQUU7WUFDN0IsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNaLEdBQUcsR0FBRyxJQUFJLENBQUM7U0FDZDthQUFNO1lBQ0gsSUFBSSxHQUFHLFVBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxtQ0FBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztZQUNuRSxHQUFHLEdBQUcsVUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLG1DQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO1NBQ3BFO1FBRUQsTUFBTSxNQUFNLEdBQXNDO1lBQzlDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsS0FBSztZQUNqQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLE1BQU07WUFDbkMsSUFBSTtZQUNKLEdBQUc7U0FDTixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQStCO1lBQ3ZDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJO1lBQzNCLFdBQVcsRUFBRSxnQkFBZ0IsQ0FBQyxXQUFXO1lBQ3pDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxRQUFRO1lBQ25DLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVO1lBQ3ZDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNO1lBQy9CLE1BQU07WUFDTixRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRO1lBQy9CLGFBQWEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7WUFDekMsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQztRQUVGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxhQUFhO1FBQ1QsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLElBQUksRUFBRTtZQUM3QixNQUFNLElBQUksdUVBQW1CLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDL0M7UUFDRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQzNDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsU0FBUztRQUNMLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLEVBQUU7WUFDN0IsTUFBTSxJQUFJLHVFQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzlCLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3RDO2FBQU07WUFDSCxJQUFJO2dCQUNBLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUM1QjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNSLEVBQUU7YUFDTDtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUs7UUFDRCxJQUFJLFVBQXVCLENBQUM7UUFDNUIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFFdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO1lBQ3hCLE9BQU87U0FDVjtRQUVEOzs7Ozs7OztVQVFFO1FBQ0YsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDakUsTUFBTSw0QkFBNEIsR0FBRyx3REFBVSxDQUFDLEVBQUUsRUFBRSxzQkFBc0IsQ0FBeUIsQ0FBQztRQUNwRyxNQUFNLFVBQVUsR0FBRyw0QkFBNEIsQ0FBQyxJQUFJLENBQUM7UUFDckQsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQzFCLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNwRDtRQUNELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDO1FBQ2xELElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUMxQixNQUFNLElBQUksNEVBQXdCLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDcEQ7UUFDRCxVQUFVLEdBQUcsVUFBVSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFMUU7OztVQUdFO1FBQ0YsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNiLElBQUksVUFBVSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNwQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQztpQkFBTTtnQkFDSCxVQUFVLEdBQUcsVUFBVSxDQUFDO2FBQzNCO1lBQ0QsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUNiO1FBRUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFNUYsVUFBVSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0MsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFO1lBQ3hELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNuQjthQUFNO1lBQ0gsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxZQUFZO1FBQ2hCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUU3Qjs7OztXQUlHO1FBQ0gsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWhFOztXQUVHO1FBQ0gsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDO1lBQzFDLEtBQUssRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSztZQUNwQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU07WUFDdEMsVUFBVSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLO1lBQ3pDLFdBQVcsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTTtZQUMzQyxPQUFPLEVBQUUsSUFBSTtZQUNiLE9BQU8sRUFBRSxJQUFJO1lBQ2IsUUFBUSxFQUFFLElBQUk7WUFDZCxXQUFXLEVBQUUsSUFBSTtZQUNqQixTQUFTLEVBQUUsS0FBSztZQUNoQixVQUFVLEVBQUUsSUFBSTtZQUNoQixNQUFNLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRTVELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3JCLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLHdCQUF3QixLQUFLLElBQUksRUFBRTtnQkFDN0UsTUFBTSxLQUFLLEdBQUcsSUFBSSxzRUFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN2RCxNQUFNLEtBQUssQ0FBQzthQUNmO2lCQUFNO2dCQUNILE9BQU87YUFDVjtTQUNKO1FBRUQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQzNGLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtZQUNyRCxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUU7Z0JBQ3hELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNoQjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDbkI7UUFDTCxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFFckI7Ozs7O1dBS0c7UUFDSCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsVUFBVTtRQUNkLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLEVBQUU7WUFDN0IsTUFBTSxJQUFJLHVFQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzlDO2FBQU07WUFDSCxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRTtnQkFDbEYsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUNyQixJQUFJLElBQUksQ0FBQyxtQkFBbUIsS0FBSyxTQUFTLEVBQUU7b0JBQ3hDLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztvQkFDeEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLFNBQVMsQ0FBQztpQkFDeEM7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSyx1QkFBdUIsQ0FBQyxhQUE4QztRQUMxRSxNQUFNLG1CQUFtQixHQUFhLEVBQUUsQ0FBQztRQUV6QyxLQUFLLE1BQU0sR0FBRyxJQUFJLGFBQWEsRUFBRTtZQUM3QixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUN2RTtRQUVELE9BQU8sbUJBQW1CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSyxTQUFTO1FBQ2IsTUFBTSxVQUFVLEdBQUcsbUJBQW1CLEdBQUcseURBQVcsRUFBRSxDQUFDO1FBQ3ZELE1BQU0sTUFBTSxHQUFHLHNGQUFpQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvRCxJQUFJO1lBQ0EsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQzVEO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQzFFO1FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5QyxPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGNBQWM7UUFDbEIsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLElBQUksRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQUM7U0FDdEU7YUFBTTtZQUNILElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JGLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDOUI7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGFBQWE7UUFDakIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssUUFBUTtRQUNaLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcFU4RDtBQUd4QjtBQUllO0FBQ0c7QUFDbkI7QUFJZDtBQUV4Qjs7Ozs7R0FLRztBQUNJLE1BQU0sU0FBVSxTQUFRLDhEQUFZO0lBY3ZDOzs7O09BSUc7SUFDSCxZQUFZLENBQVMsRUFBRSxDQUFTLEVBQ1gsYUFBMkIsRUFDM0IsY0FBNkIsRUFDN0IsY0FBNkIsRUFDN0IsZUFBNEI7UUFFN0MsS0FBSyxFQUFFLENBQUM7UUFMUyxrQkFBYSxHQUFiLGFBQWEsQ0FBYztRQUMzQixtQkFBYyxHQUFkLGNBQWMsQ0FBZTtRQUM3QixtQkFBYyxHQUFkLGNBQWMsQ0FBZTtRQUM3QixvQkFBZSxHQUFmLGVBQWUsQ0FBYTtRQXRCekMsVUFBSyxHQUE0QixJQUFJLENBQUM7UUFDdEMsbUJBQWMsR0FBNEIsSUFBSSxDQUFDO1FBeUJuRCxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDakcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBRXZELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFbkMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFDckMscUdBQXFHO1lBQ3JHLE1BQU0sSUFBSSx1RUFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQztRQUN6RCxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUM1QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzlCO1FBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFbEUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRXJCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRTtZQUNwRSxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekQsQ0FBQyxHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQztZQUMxQixDQUFDLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1NBQzdCO1FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUE1Q0QsSUFBSSxPQUFPLEtBQWtCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUE4Q3BELG1FQUFtRTtJQUMzRCx1QkFBdUIsQ0FBQyxRQUFnQixFQUFFLFFBQWdCO1FBQzlELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLGdDQUFrQyxDQUFDO1FBQzlELE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEQsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLDBCQUErQixDQUFDO1FBQzNELE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLHNCQUE2QixDQUFDO1FBQ3ZELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLG9CQUE0QixDQUFDO1FBQ3JELE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLHdCQUE4QixDQUFDO1FBQ3pELFVBQVUsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDckMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxhQUFhLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXZDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsR0FBRyw0QkFBZ0MsQ0FBQztRQUUxRSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUV2RCxJQUFJLElBQUksQ0FBQyxlQUFlLFlBQVksK0NBQUssSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRTtZQUMxRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQUM7WUFDeEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3JFLElBQUksQ0FBQyxvREFBVSxFQUFFLHFEQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3pFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDaEY7U0FDSjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyw0REFBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyw0REFBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25ELFVBQVUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsWUFBWSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRU8saUJBQWlCO1FBQ3JCLE1BQU0sTUFBTSxHQUFHLHFFQUFlLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3hCLE1BQU0sRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxzRUFBd0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25ILElBQUksQ0FBQyxLQUFLLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFlLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM5QyxDQUFDO0lBRU8saUJBQWlCLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDMUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNqQixDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO2FBQU0sSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN4QixDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNqQixDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO2FBQU0sSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN4QixDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsT0FBTyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0ssTUFBTSxDQUFDLE9BQWUsRUFBRSxPQUFlLEVBQUUsS0FBbUI7UUFFaEUsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN0QixNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBRXRCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsd0JBQXdCLEVBQUU7WUFDckUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDOUI7YUFBTTtZQUNILE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDL0YsSUFBSSxpQkFBaUIsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDOUI7U0FDSjtRQUVELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSyxlQUFlLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLDREQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLDREQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFL0MsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksRUFBRTtZQUNyQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDOUQ7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLE1BQU07UUFDVixNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUM7UUFDcEUsSUFBSSxtQkFBbUIsS0FBSyxJQUFJLEVBQUU7WUFDOUIsTUFBTSxJQUFJLHVFQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzlDO2FBQU07WUFDSCxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFbkM7O1dBRUc7UUFDSCxJQUFJLG9CQUErQyxDQUFDO1FBQ3BELElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDckIsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUMzQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRWhFOzs7ZUFHRztTQUNOO2FBQU0sSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksRUFBRTtZQUNyQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1lBQzNDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUM7WUFDN0Qsb0JBQW9CLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUV2RTs7OztlQUlHO1NBQ047YUFBTSxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDN0Isb0JBQW9CLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUMzQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBRXBEOzs7O2VBSUc7U0FDTjthQUFNO1lBQ0gsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGlEQUFpRDtTQUNuRjtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUU3RCxJQUFJLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxvQkFBb0IsS0FBSyxTQUFTLEVBQUU7WUFDbEUsb0JBQW9CLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDaEM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssYUFBYTtRQUNqQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUM7UUFDL0QsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztTQUNwRTtRQUVELElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUM7UUFDdEMsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLGVBQWUsQ0FBQztRQUN4QyxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUM3QyxNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7U0FDN0U7UUFFRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDO1FBQzFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyw0REFBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyw0REFBYyxDQUFDLE1BQU0sQ0FBQztRQUNuRCxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyw0REFBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLDREQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL1FzRDtBQUNRO0FBQ1A7QUFDTjtBQUVJO0FBRWI7QUFDaUM7QUFFMUU7Ozs7R0FJRztBQUNJLE1BQU0sVUFBVTtJQVFuQixnQkFBZ0I7SUFDaEI7SUFDSSxnQkFBZ0I7SUFDUixjQUE2QjtJQUNyQyxnQkFBZ0I7SUFDQyxRQUFxQjtJQUN0QyxnQkFBZ0I7SUFDQywyQkFBMEM7SUFDM0QsZ0JBQWdCO0lBQ1IsbUJBQXVFO0lBQy9FLGdCQUFnQjtJQUNSLGVBQXNDO0lBQzlDLGdCQUFnQjtJQUNSLE1BQTBCO1FBVjFCLG1CQUFjLEdBQWQsY0FBYyxDQUFlO1FBRXBCLGFBQVEsR0FBUixRQUFRLENBQWE7UUFFckIsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUFlO1FBRW5ELHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBb0Q7UUFFdkUsb0JBQWUsR0FBZixlQUFlLENBQXVCO1FBRXRDLFdBQU0sR0FBTixNQUFNLENBQW9CO1FBRWxDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBRTFCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTNELE1BQU0sbUJBQW1CLEdBQUcsZ0dBQTJDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksMERBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLG1CQUFtQixFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBRXBILElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFSjs7O09BR0c7SUFDSCxPQUFPO1FBQ04sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7T0FHRztJQUNLLGtCQUFrQjtRQUN0QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUUxQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksOERBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSyxXQUFXLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDcEMsSUFBSSxhQUF3QixDQUFDO1FBQzdCLElBQUksY0FBcUMsQ0FBQztRQUMxQyxJQUFJLEtBQXlCLENBQUM7UUFDOUIsSUFBSSxPQUFPLElBQUksQ0FBQyxtQkFBbUIsS0FBSyxVQUFVLEVBQUU7WUFDaEQsTUFBTSxvQkFBb0IsR0FBbUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7WUFDeEYsYUFBYSxHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQztZQUMxQyxjQUFjLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxDQUFDO1lBQzVDLEtBQUssR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUM7U0FDdEM7YUFBTTtZQUNILGFBQWEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDekMsY0FBYyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDdEMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDdkI7UUFFRCxvREFBb0Q7UUFDcEQsa0dBQWtHO1FBQ2xHLG9JQUFvSTtRQUNwSSxxRUFBcUU7UUFFckUsTUFBTSxVQUFVLEdBQXdCO1lBQ3BDLElBQUksRUFBRSxXQUFXO1lBQ2pCLGFBQWE7WUFDYixjQUFjO1lBQ2QsS0FBSztTQUNSO1FBQ0QsTUFBTSxrQkFBa0IsR0FBRyx1RUFBMkIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVuRSxNQUFNLGFBQWEsR0FBRyxJQUFJLGdFQUFhLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUM7UUFDOUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFOUQsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLElBQUksRUFBRTtZQUM3QixNQUFNLElBQUksdUVBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDaEQ7YUFBTTtZQUNILE1BQU0sU0FBUyxHQUFHLElBQUksa0RBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxhQUFhLEVBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFFN0gsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDO1lBQ3BFLElBQUksbUJBQW1CLEtBQUssSUFBSSxFQUFFO2dCQUM5QixNQUFNLElBQUksdUVBQW1CLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDaEQ7aUJBQU07Z0JBQ0gsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDNUU7U0FDSjtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixVQUFVO1FBQ2Qsb0RBQW9EO1FBQ3BELDJEQUEyRDtRQUMzRCxXQUFXO1FBQ1gsNkNBQTZDO1FBQzdDLGdEQUFnRDtRQUNoRCxJQUFJO1FBQ0osSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7T0FHQTtJQUNLLGtCQUFrQjtRQUN6QixJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSSxFQUFHO1lBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7U0FDbkM7SUFDRixDQUFDO0NBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzSTRFO0FBRTdFLGdCQUFnQjtBQUNULE1BQU0sbUJBQW1CO0lBRzVCO1FBQ0ksZ0RBQWdEO1FBQ2hELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLG9EQUE0QyxDQUFDO1FBQ3hFLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLHdCQUE4QixDQUFDO1FBQ3pELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXhDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsT0FBTztRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELGFBQWEsQ0FBQyxJQUFvQjtRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsNERBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLDREQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyw0REFBYyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyw0REFBYyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDMUMsQ0FBQztJQUVELElBQUk7UUFDQSx5RUFBMkIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDSjs7Ozs7Ozs7Ozs7Ozs7O0FDaENELGdCQUFnQjtBQUNULE1BQU0sWUFBWTtJQU9yQixZQUFvQixPQUFlLEVBQUUsS0FBYSxFQUFFLFFBQWdCLEVBQVUsVUFBa0M7UUFBNUYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUEyQyxlQUFVLEdBQVYsVUFBVSxDQUF3QjtRQUx4Ryx3QkFBbUIsR0FBRyxDQUFDLEVBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzRCw2QkFBd0IsR0FBRyxDQUFDLEVBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUt6RSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFWRCxJQUFJLE9BQU8sS0FBa0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQVlwRCxPQUFPOztRQUNILElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQy9FLFVBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSwwQ0FBRSxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTyxPQUFPLENBQUMsRUFBYztRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFTyxZQUFZLENBQUMsRUFBYztRQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Q0FDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDakNtRTtBQU9kO0FBQ2hCO0FBQ3VDO0FBQzlCO0FBRUU7QUFFakQ7OztHQUdHO0FBQ0ksTUFBTSxNQUFPLFNBQVEsOERBQVk7SUF5RnBDLGdCQUFnQjtJQUNoQjtJQUNJLGdCQUFnQjtJQUNSLGNBQTZCO0lBQ3JDLGdCQUFnQjtJQUNSLE9BQWMsRUFDdEIsUUFBeUI7SUFDekIsZ0JBQWdCO0lBQ0MsZUFBd0I7SUFDekMsZ0JBQWdCO0lBQ1IsNEJBQWdFLEVBQ3hFLFVBQTZCO0lBQzdCLGdCQUFnQjtJQUNSLFlBQTRDO0lBQ3BELGdCQUFnQjtJQUNSLG9CQUE0RDtJQUNwRSxnQkFBZ0I7SUFDUixXQUEwQztJQUNsRCxnQkFBZ0I7SUFDUixnQkFBb0Q7SUFDNUQsZ0JBQWdCO0lBQ1IscUJBQThEO0lBQ3RFLGdCQUFnQjtJQUNSLG9CQUE0RDtJQUNwRSxnQkFBZ0I7SUFDUix3QkFBb0U7UUFFNUUsS0FBSyxFQUFFLENBQUM7UUF4QkEsbUJBQWMsR0FBZCxjQUFjLENBQWU7UUFFN0IsWUFBTyxHQUFQLE9BQU8sQ0FBTztRQUdMLG9CQUFlLEdBQWYsZUFBZSxDQUFTO1FBRWpDLGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBb0M7UUFHaEUsaUJBQVksR0FBWixZQUFZLENBQWdDO1FBRTVDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBd0M7UUFFNUQsZ0JBQVcsR0FBWCxXQUFXLENBQStCO1FBRTFDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBb0M7UUFFcEQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF5QztRQUU5RCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdDO1FBRTVELDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBNEM7UUFoRmhGLGdCQUFnQjtRQUNDLG1CQUFjLEdBQUcsQ0FBQyxFQUFjLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkUsZ0JBQWdCO1FBQ0Msd0JBQW1CLEdBQUcsQ0FBQyxFQUFjLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFJakYsZ0JBQWdCO1FBQ1IsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO1FBT2xDLGdCQUFnQjtRQUNDLGlCQUFZLEdBQXdCLElBQUksQ0FBQztRQUMxRCxnQkFBZ0I7UUFDQyxrQkFBYSxHQUF3QixJQUFJLENBQUM7UUFrRXZELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSwwREFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQ3ZELENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0NBQXNDLENBQUMsSUFBSSxDQUFDLEVBQzNELENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMscUNBQXFDLENBQUMsSUFBSSxDQUFDLEVBQzFELENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLEVBQzdGLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQywrQkFBK0IsRUFBRSxDQUMvQyxDQUFDO1FBRUYsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUM3QyxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDekMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUM7UUFDakQsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO1FBQzdDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDO1FBQ2pELElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUM3QyxJQUFJLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFDM0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUM7UUFDdkQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1QixJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUVoRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRywwQkFBK0IsQ0FBQztRQUMzRCxJQUFJLENBQUMseUJBQXlCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMseUJBQXlCLENBQUMsU0FBUyxDQUFDLEdBQUcsOEJBQWlDLENBQUM7UUFDOUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRS9ELElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUUxRixJQUFJLENBQUMsd0JBQXdCLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQywwQkFBMEIsRUFBRTtRQUN0RixVQUFVLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUVsRyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDO1FBRXBGLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzFCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLHdEQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsc0NBQ25FLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsMEJBQTBCLEVBQUUsQ0FDekQsQ0FBQztTQUNMO1FBRUQsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSx3REFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSw0QkFBaUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUMsQ0FBQztTQUN2STtRQUVEOztXQUVHO1FBQ0gsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLHdEQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxjQUFjLGdDQUM3RCxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLEVBQUUsQ0FBQyxDQUNuRCxDQUFDO1NBQ0w7UUFFRDs7V0FFRztRQUNILElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksd0RBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsMEJBQWdDLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDbEg7UUFFRCxJQUFJLENBQUMsK0JBQStCLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBOUhELG1CQUFtQjtJQUNuQixpR0FBaUc7SUFFakcsZ0JBQWdCO0lBQ2hCLElBQUksSUFBSSxLQUFjLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUMsZ0JBQWdCO0lBQ2hCLElBQUksSUFBSSxLQUFXLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkMsZ0JBQWdCO0lBQ2hCLElBQUksY0FBYyxLQUFjLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFFOUQsSUFBSSxhQUFhLEtBQW9CLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDbEUsSUFBSSxNQUFNLEtBQVksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM1QyxJQUFJLElBQUksS0FBWSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0RCxJQUFJLG1CQUFtQixLQUFhLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDckY7c0VBQ2tFO0lBQ2xFLElBQUksaUJBQWlCO1FBQ2pCLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7UUFDaEUsSUFBSSxtQkFBbUIsS0FBSyxTQUFTLEVBQUU7WUFDbkMsT0FBTyxJQUFJLENBQUM7U0FDZjthQUFNO1lBQ0gsT0FBTyxtQkFBbUIsQ0FBQztTQUM5QjtJQUNMLENBQUM7SUFDRCxJQUFJLE9BQU8sS0FBa0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNwRCxrRUFBa0U7SUFDbEUsSUFBSSxhQUFhLEtBQWtCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLElBQUksb0JBQW9CLEtBQWtCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQy9FLElBQUksd0JBQXdCLEtBQWtCLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQztJQUN0RixzRUFBc0U7SUFDdEUsSUFBSSxpQkFBaUIsS0FBa0IsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDO0lBa0cvRTs7O09BR0c7SUFDSCxPQUFPO1FBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVyQixJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztRQUM5QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsU0FBUyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDO1FBQzdCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7UUFDbEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLFNBQVMsQ0FBQztRQUN2QyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsU0FBUyxDQUFDO1FBQ3RDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxTQUFTLENBQUM7UUFFMUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUU5QixVQUFVLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUNsRixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsU0FBUyxDQUFDLGFBQTRCLEVBQUUsS0FBYTtRQUNqRCxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxTQUFTLENBQUMsYUFBNEI7UUFDbEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELGdCQUFnQjtJQUNoQiw2QkFBNkIsQ0FBQyxzQkFBcUM7UUFDL0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyw2QkFBNkIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQzFFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLE9BQU8sQ0FBQyxLQUFXO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLG9EQUFVLEVBQUUsbURBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsb0JBQW9CLENBQUMsS0FBYztRQUMvQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGlCQUFpQjtRQUNiLElBQUksVUFBbUIsQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN2QixVQUFVLEdBQUcsS0FBSyxDQUFDO1NBQ3RCO2FBQU07WUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFO2dCQUMxQixVQUFVLEdBQUcsS0FBSyxDQUFDO2FBQ3RCO2lCQUFNO2dCQUNILFVBQVUsR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO2dCQUM3QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDeEMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztvQkFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7d0JBQ2xCLFVBQVUsR0FBRyxLQUFLLENBQUM7d0JBQ25CLE1BQU07cUJBQ1Q7aUJBQ0o7YUFDSjtTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLElBQUksRUFBRTtZQUM1Qix5RUFBMkIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztTQUN0RTtRQUNELElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLEVBQUU7WUFDN0IseUVBQTJCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDdkU7UUFFRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsVUFBVSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLGlCQUFpQixDQUFDLEtBQWM7UUFDNUIsSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLDRCQUFnQyxDQUFDO1NBQy9EO2FBQU07WUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLDRCQUFnQyxDQUFDO1NBQ2xFO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixnQkFBZ0I7UUFDWixJQUFJLElBQUksQ0FBQyxlQUFlLEtBQUssU0FBUyxFQUFFO1lBQ3BDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0gsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDM0U7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtRQUNaLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxTQUFTLEVBQUU7WUFDcEMsTUFBTSxJQUFJLDRFQUF3QixDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDSCxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUMzRTtJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSCxjQUFjO1FBQ1YsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUU7WUFDbEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRS9GLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLDREQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDNUQ7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLDREQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDN0Q7WUFDRCxJQUFJLGNBQXNCLENBQUM7WUFDM0IsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUN0QixjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7YUFDdEg7aUJBQU07Z0JBQ0gsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO2FBQ3BIO1lBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLENBQUM7U0FDM0Y7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1Isc0NBQXNDLENBQUMsYUFBNEI7UUFDdkUsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDMUIsSUFBSSxJQUFJLENBQUMscUJBQXFCLEtBQUssU0FBUyxFQUFFO2dCQUMxQyxNQUFNLElBQUksNEVBQXdCLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDcEQ7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQzdDO1NBQ0o7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IscUNBQXFDLENBQUMsYUFBNEI7UUFDdEUsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEtBQUssU0FBUyxFQUFFO1lBQ3pDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0gsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzVDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLGdDQUFnQyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsWUFBMEIsRUFBRSxhQUE0QjtRQUNuSCxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzNCLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUM3QjthQUFNO1lBQ0gsSUFBSSxJQUFJLENBQUMsd0JBQXdCLEtBQUssU0FBUyxFQUFFO2dCQUM3QyxNQUFNLElBQUksNEVBQXdCLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDckQ7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2FBQ3BFO1NBQ0o7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsK0JBQStCO1FBQ25DLElBQUksSUFBSSxDQUFDLGtCQUFrQixLQUFLLFNBQVMsRUFBRTtZQUN2Qyx5RUFBMkIsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDcEc7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsdUJBQXVCO1FBQzNCLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFFO1lBQzVELElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7Z0JBQ2pDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUNyRDtpQkFBTTtnQkFDSCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDdkI7U0FDSjthQUFNO1lBQ0gsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztZQUNoRSxJQUFJLG1CQUFtQixFQUFFO2dCQUNyQixtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNoQztZQUNELG9GQUFvRjtTQUN2RjtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsNkRBQTZEO0lBQ3JELCtCQUErQixDQUFDLEVBQVM7UUFDN0MsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEtBQUssU0FBUyxFQUFFO1lBQ3pDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNyRDthQUFNO1lBQ0gsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7U0FDL0I7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssT0FBTyxDQUFDLEtBQWlCO1FBQzdCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssWUFBWSxDQUFDLEtBQWlCO1FBQ2xDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoQztJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixXQUFXLENBQUMsRUFBYztRQUM5QixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNuRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUN4QjtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixnQkFBZ0IsQ0FBQyxFQUFjO1FBQ25DLElBQUksSUFBSSxDQUFDLGdCQUFnQixLQUFLLFNBQVMsRUFBRTtZQUNyQyxNQUFNLElBQUksNEVBQXdCLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDcEQ7YUFBTTtZQUNILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM3QjtJQUNMLENBQUM7Q0FDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxY3FEO0FBRU47QUFFaEQsZ0JBQWdCO0FBQ1QsTUFBTSxRQUFRO0lBUWpCLFlBQW9CLFdBQW9CLEVBQVUsS0FBYSxFQUFFLFFBQWdCO1FBQTdELGdCQUFXLEdBQVgsV0FBVyxDQUFTO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUMzRCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFFL0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsOEJBQWlDLENBQUM7UUFDN0QsTUFBTSxpQkFBaUIsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hELGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLG1DQUFtQyxDQUFDO1FBRW5FLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3JELE1BQU0sZUFBZSxHQUFHLGdCQUFnQixHQUFHLENBQUMsQ0FBQztRQUU3QyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbEIsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyw0REFBYyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDL0QsaUJBQWlCLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyw0REFBYyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQztZQUMvRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLDhCQUFpQyxDQUFDO1lBQzdELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyw0REFBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzRDthQUFNO1lBQ0gsaUJBQWlCLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyw0REFBYyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDaEUsaUJBQWlCLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyw0REFBYyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQztZQUM5RSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLGtDQUFtQyxDQUFDO1lBQy9ELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyw0REFBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxRDtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLDhEQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBNUJELElBQUksT0FBTyxLQUFxQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBOEJ2RCxPQUFPO1FBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsRUFBRSxDQUE4QyxTQUFZLEVBQUUsUUFBa0M7UUFDNUYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUksU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Q0FDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNqRG1FO0FBSWQ7QUFFdEQ7OztHQUdHO0FBQ0ksTUFBTSxHQUFHO0lBaURaLGdCQUFnQjtJQUNoQjtJQUNJLGdCQUFnQjtJQUNDLGNBQTZCO0lBQzlDLGdCQUFnQjtJQUNSLGNBQTZCO0lBQ3JDLGdCQUFnQjtJQUNSLFdBQXVDO0lBQy9DLGdCQUFnQjtJQUNSLFdBQXVDO0lBQy9DLGdCQUFnQjtJQUNSLGVBQStDOztRQVJ0QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZTtRQUV0QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZTtRQUU3QixnQkFBVyxHQUFYLFdBQVcsQ0FBNEI7UUFFdkMsZ0JBQVcsR0FBWCxXQUFXLENBQTRCO1FBRXZDLG9CQUFlLEdBQWYsZUFBZSxDQUFnQztRQWxEM0QsZ0JBQWdCO1FBQ1IsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUUxQixnQkFBZ0I7UUFDQyxzQkFBaUIsR0FBRyxDQUFDLEVBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNqRixnQkFBZ0I7UUFDQywyQkFBc0IsR0FBRyxDQUFDLEVBQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN2RixnQkFBZ0I7UUFDQyx3QkFBbUIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDakUsZ0JBQWdCO1FBQ0MsNkJBQXdCLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDM0UsbUJBQW1CO1FBQ25CLDRFQUE0RTtRQUM1RSxnQkFBZ0I7UUFDQyx1QkFBa0IsR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZGLGdCQUFnQjtRQUNDLGdDQUEyQixHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQ2pGLGdCQUFnQjtRQUNDLDZCQUF3QixHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztRQWtDL0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsb0JBQTRCLENBQUM7UUFDeEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsd0JBQThCLENBQUM7UUFDL0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsK0JBQWlDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUU5QyxJQUFJLGNBQWMsQ0FBQyxVQUFVLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztTQUN6QzthQUFNO1lBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztTQUM3QztRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUV0RSxNQUFNLGNBQWMsR0FBRyxvQkFBYyxDQUFDLGNBQWMsbUNBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztRQUVqSCxJQUFJLGNBQWMsRUFBRTtZQUNoQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDeEI7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRixJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUU3RixJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQzFGLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3BHLHFHQUFxRztTQUN4RzthQUFNO1lBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQztTQUNsQztRQUVELElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBdEVELElBQUksUUFBUSxLQUFjLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDbEQsZ0RBQWdEO0lBQ2hELElBQUksYUFBYSxLQUFvQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLHdEQUF3RDtJQUN4RCxJQUFJLFdBQVcsS0FBb0IsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNoRSxJQUFJLE9BQU8sS0FBa0IsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNwRCxJQUFJLFlBQVksS0FBa0IsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUM5RCxJQUFJLFlBQVksS0FBOEIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUMxRSxJQUFJLGNBQWMsS0FBYyxPQUFPLElBQUksQ0FBQyxhQUFhLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztJQUMxRSxJQUFJLGNBQWMsQ0FBQyxLQUFjO1FBQzdCLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDL0IsSUFBSSxLQUFLLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQ3hCO2lCQUFNO2dCQUNILElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQzthQUN6QjtTQUNKO0lBQ0wsQ0FBQztJQXVERDs7OztPQUlHO0lBQ0gsUUFBUSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsU0FBUyxDQUFDLFFBQWlCO1FBQ3ZCLElBQUksUUFBUSxLQUFLLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDN0IsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFFMUIsSUFBSSxRQUFRLEVBQUU7WUFDVixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLDBCQUErQixDQUFDO1NBQzlEO2FBQU07WUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLDBCQUErQixDQUFDO1NBQ2pFO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU87O1FBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDN0UsVUFBSSxDQUFDLGFBQWEsMENBQUUsbUJBQW1CLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNFLFVBQUksQ0FBQyxhQUFhLDBDQUFFLG1CQUFtQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUNyRixzRkFBc0Y7UUFDdEYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNyQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDekI7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsVUFBVTtRQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sNEJBQWdDLENBQUM7UUFDL0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSw0QkFBZ0MsQ0FBQztJQUN4RSxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLFVBQVU7UUFDTixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLDRCQUFnQyxDQUFDO1FBQzVELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsNEJBQWdDLENBQUM7SUFDckUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ssV0FBVyxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ3BDLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDbEMsTUFBTSxJQUFJLDRFQUF3QixDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ3REO2FBQU07WUFDSCxJQUFJLElBQUksQ0FBQyxlQUFlLEtBQUssU0FBUyxFQUFFO2dCQUNwQyxNQUFNLElBQUksNEVBQXdCLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbkQ7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ3RFO1NBQ0o7SUFFTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1Isb0JBQW9CO1FBQ3hCLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUM3QixJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQztTQUNsQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSyxjQUFjLENBQUMsS0FBaUI7UUFDcEMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUM1QixJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsUUFBUSxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQzNELG9CQUFvQjtZQUNwQixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNwQiwyQkFBMkI7Z0JBQzNCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFFbkIsc0JBQXNCO2FBQ3pCO2lCQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUU7Z0JBQzdELDJCQUEyQjtnQkFDM0IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ3RCO1NBQ0o7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsZUFBZSxDQUFDLEtBQWlCO1FBQ3JDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN0QjtJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSyxZQUFZO1FBQ2hCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsaUJBQWlCO1FBQ3JCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHFDQUFxQztJQUNyQyxrQ0FBa0M7SUFDbEMsSUFBSTtJQUVKLGdCQUFnQjtJQUNSLFdBQVc7UUFDZixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNsRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDekM7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsV0FBVztRQUNmLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDaEMsTUFBTSxJQUFJLDRFQUF3QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2xEO2FBQU07WUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUN6QztJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixhQUFhO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSw4REFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixjQUFjO1FBQ2xCLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDbEMsTUFBTSxJQUFJLDRFQUF3QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2xEO2FBQU07WUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQzdELElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO1NBQ2xDO0lBQ0wsQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxUnNEO0FBS1M7QUFDcEM7QUFFNUIsZ0JBQWdCO0FBQ1QsTUFBTSxhQUFhO0lBaUJ0QixZQUFvQixjQUE2QixFQUNyQyxxQkFBNkQsRUFDN0Qsb0JBQTJELEVBQzNELHdCQUFtRSxFQUNuRSwyQkFBcUU7UUFKN0QsbUJBQWMsR0FBZCxjQUFjLENBQWU7UUFDckMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF3QztRQUM3RCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXVDO1FBQzNELDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMkM7UUFDbkUsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUEwQztRQXBCakYseUZBQXlGO1FBQ3hFLFVBQUssR0FBVSxFQUFFLENBQUM7UUFJM0IseUJBQW9CLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUIsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFnQjVCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLHNCQUE2QixDQUFDO1FBRXpELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsR0FBRyw2Q0FBd0MsQ0FBQztRQUM1RSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDakQsQ0FBQztJQXBCRCxJQUFJLElBQUksS0FBWSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLElBQUksUUFBUSxLQUFhLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3BELElBQUksbUJBQW1CLEtBQWEsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0lBRXZFLElBQUksT0FBTyxLQUFrQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3BELElBQUksZUFBZSxLQUFrQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDcEUsSUFBSSxjQUFjLEtBQWMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQWdCOUQsT0FBTztRQUNILEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzNCO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILFNBQVMsQ0FBQyxhQUE0QixFQUFFLEtBQWE7UUFDakQsMENBQTBDO1FBQzFDLGlDQUFpQztRQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsS0FBSyxhQUFhLEVBQUU7Z0JBQy9DLE9BQU87YUFDVjtTQUNKO1FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxxQ0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQ25DLGFBQWEsRUFDYixDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUN4QyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUN4QyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFMUYsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzFDO2FBQU07WUFDSCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7Z0JBQ3JCLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQzthQUM3QjtZQUVELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtnQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNoRjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzNFO1lBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNwQztJQUNMLENBQUM7SUFFRCxTQUFTLENBQUMsYUFBNEI7UUFDbEMsOENBQThDO1FBQzlDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxLQUFLLGFBQWEsRUFBRTtnQkFDL0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUIsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEIsT0FBTzthQUNWO1NBQ0o7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELDZCQUE2QixDQUFDLHNCQUFxQztRQUMvRCxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLEtBQUssc0JBQXNCLENBQUM7WUFDeEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEMsSUFBSSxRQUFRLEVBQUU7Z0JBQ1YsV0FBVyxHQUFHLENBQUMsQ0FBQzthQUNuQjtTQUNKO1FBRUQsSUFBSSxXQUFXLEdBQUcsQ0FBQyxFQUFFO1lBQ2pCLE1BQU0sSUFBSSwrREFBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07WUFDSCxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRTtnQkFDakU7OzttQkFHRztnQkFDSCxJQUFJLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxDQUFDLENBQUMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFO29CQUM3RSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3FCQUNyQztvQkFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztvQkFFMUIsc0ZBQXNGO2lCQUN6RjthQUNKO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxjQUFjLENBQUMsY0FBc0IsRUFBRSxtQkFBOEM7UUFDakYsSUFBSSxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzNCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLEVBQUUsY0FBYyxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDNUYsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNWLGNBQWMsR0FBRyxJQUFJLENBQUM7WUFDdEIsMkJBQTJCO1lBQzNCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLEVBQUUsY0FBYyxFQUFFLG1CQUFtQixDQUFDO1NBQzlFO1FBRUQsSUFBSSxjQUFjLEtBQUssSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QyxJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztZQUN0QyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztTQUN0QztJQUNMLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxjQUF1QixFQUFFLGNBQXNCLEVBQUUsbUJBQThDO1FBQzdHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLElBQUksbUJBQW1CLEtBQUssU0FBUyxFQUFFO2dCQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7YUFDckU7WUFFRCxJQUFJLGtCQUFrQixHQUFHLENBQUMsQ0FBQztZQUMzQixJQUFJLDJCQUEyQixHQUFHLEtBQUssQ0FBQztZQUN4QyxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQztZQUMxRixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUUvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3hDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUV6QyxrRUFBa0U7Z0JBQ2xFLElBQUksVUFBVSxDQUFDLGFBQWEsS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFO29CQUM1QyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDekM7Z0JBQ0QsTUFBTSxvQkFBb0IsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDO2dCQUM3RSxNQUFNLGNBQWMsR0FBRyw0REFBYyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBQzVELE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxXQUFXLEdBQUcsY0FBYyxDQUFDO2dCQUV6RCxrQkFBa0IsSUFBSSxRQUFRLENBQUM7Z0JBRS9CLG9EQUFvRDtnQkFDcEQsd0RBQXdEO2dCQUN4RCxJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUM7Z0JBQ3hCLElBQUksV0FBVyxJQUFJLENBQUMsRUFBRTtvQkFDbEIsZUFBZSxHQUFHLGtCQUFrQixDQUFDO2lCQUN4QztxQkFBTTtvQkFDSCxNQUFNLDBCQUEwQixHQUFHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUM7b0JBQ25GLE1BQU0sb0JBQW9CLEdBQUcsNERBQWMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO29CQUN4RSxlQUFlLEdBQUcsa0JBQWtCLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsb0JBQW9CLENBQUM7aUJBQy9GO2dCQUVELHNEQUFzRDtnQkFDdEQsSUFBSSxlQUFlLEdBQUcsY0FBYyxFQUFFO29CQUVsQyw0REFBNEQ7b0JBQzVELElBQUksQ0FBQywyQkFBMkIsRUFBRTt3QkFFOUIsd0NBQXdDO3dCQUN4QyxrREFBa0Q7d0JBQ2xELElBQUksT0FBZSxDQUFDO3dCQUNwQixJQUFJLFdBQVcsR0FBRyxDQUFDLElBQUksV0FBVyxJQUFJLENBQUMsRUFBRTs0QkFDckMsT0FBTyxHQUFHLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3lCQUMxRDs2QkFBTTs0QkFDSCxPQUFPLEdBQUcsQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3lCQUNwRDt3QkFFRCxrQ0FBa0M7d0JBQ2xDLElBQUksT0FBTyxHQUFHLG1CQUFtQixFQUFFOzRCQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dDQUN6QixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsS0FBSyxXQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsNERBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dDQUN2RixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLDREQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dDQUMzRCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQzs2QkFDdkQ7NEJBQ0QsSUFBSSxDQUFDLG9CQUFvQixHQUFHLENBQUMsQ0FBQzs0QkFDOUIsSUFBSSxVQUFVLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0NBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDOzZCQUN6Qzt5QkFDSjs2QkFBTTs0QkFDSCwyQkFBMkIsR0FBRyxJQUFJLENBQUM7eUJBQ3RDO3FCQUVKO3lCQUFNLElBQUksQ0FBQyxLQUFLLFdBQVcsRUFBRTt3QkFDMUIsb0VBQW9FO3dCQUNwRSxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7d0JBQ2pDLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQzt3QkFDakMsSUFBSSxVQUFVLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7NEJBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO3lCQUN6QztxQkFDSjtvQkFFRCxJQUFJLDJCQUEyQixJQUFJLENBQUMsS0FBSyxXQUFXLEVBQUU7d0JBQ2xELElBQUksY0FBYyxFQUFFOzRCQUNoQiwrQ0FBK0M7NEJBQy9DLFVBQVUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs0QkFDakMsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDOzRCQUVqQyxJQUFJLFVBQVUsQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLGdCQUFnQixFQUFFO2dDQUNwRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDOzZCQUNqRDt5QkFDSjs2QkFBTTs0QkFDSCwrRUFBK0U7NEJBQy9FLE9BQU8sS0FBSyxDQUFDO3lCQUNoQjtxQkFDSjtpQkFFSjtxQkFBTTtvQkFDSCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDO29CQUM5QixVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7b0JBQ2pDLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztvQkFDakMsSUFBSSxVQUFVLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUU7d0JBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO3FCQUN6QztpQkFDSjthQUNKO1NBQ0o7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7O09BRUc7SUFDSCwwQkFBMEI7UUFDdEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQzdDLENBQUM7SUFFRDs7T0FFRztJQUNILDBCQUEwQjtRQUN0QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDakQsQ0FBQztJQUVPLG1CQUFtQixDQUFDLGFBQTRCO1FBQ3BELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRU8sbUJBQW1CLENBQUMsYUFBNEI7UUFDcEQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFFLFlBQTBCLEVBQUUsYUFBNEI7UUFDMUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Q0FFSjs7Ozs7Ozs7Ozs7Ozs7O0FDbFJELDBDQUEwQztBQUNuQyxNQUFNLG1CQUFtQjtJQU81QjtRQUNJLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLHFEQUE0QyxDQUFDO1FBQ3hFLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsdUJBQXVCLEdBQUcsR0FBRyxDQUFDO1FBQ25DLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7SUFDcEMsQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCw2REFBNkQ7SUFDN0Qsa0JBQWtCLENBQUMsV0FBd0IsRUFBRSxTQUFzQjtRQUMvRDs7V0FFRztRQUNILE9BQU87UUFDUCwrQkFBK0I7UUFDL0Isb0NBQW9DO1FBQ3BDLHFEQUFxRDtRQUNyRCxzQ0FBc0M7UUFDdEMsa0RBQWtEO1FBQ2xELHFEQUFxRDtJQUN6RCxDQUFDO0lBRU8sa0JBQWtCO1FBQ3RCLHdHQUF3RztRQUN4RyxxREFBcUQ7UUFDckQsV0FBVztRQUNYLDBEQUEwRDtRQUMxRCxtR0FBbUc7UUFDbkcscUNBQXFDO1FBQ3JDLHlCQUF5QjtRQUV6QixvQ0FBb0M7UUFDcEMsZ0RBQWdEO1FBQ2hELGtCQUFrQjtRQUNsQixRQUFRO1FBRVIsZ0NBQWdDO1FBRWhDLHdEQUF3RDtRQUN4RCxnRkFBZ0Y7UUFDaEYsZ0ZBQWdGO1FBQ2hGLGlDQUFpQztRQUNqQyxRQUFRO1FBRVIsNkNBQTZDO1FBQzdDLHlEQUF5RDtRQUN6RCxJQUFJO0lBQ1IsQ0FBQztJQUVPLE9BQU8sQ0FBQyxPQUFvQjtRQUNoQyxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUU3QyxPQUFPO1lBQ0gsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2IsS0FBSyxFQUFFLE9BQU8sQ0FBQyxXQUFXO1lBQzFCLE1BQU0sRUFBRSxPQUFPLENBQUMsWUFBWTtTQUMvQixDQUFDO0lBQ04sQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0VELGNBQWM7QUFDUCxNQUFlLGFBQWMsU0FBUSxLQUFLO0lBQzdDLGdCQUFnQjtJQUNoQixZQUE0QixJQUFZLEVBQUUsT0FBZTtRQUNyRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFEUyxTQUFJLEdBQUosSUFBSSxDQUFRO0lBRXhDLENBQUM7Q0FDSjtBQUVELGNBQWM7QUFDUCxNQUFNLGtCQUFtQixTQUFRLGFBQWE7SUFDakQsZ0JBQWdCO0lBQ2hCLFlBQVksT0FBZSxFQUFrQixJQUFhO1FBQ3RELEtBQUssQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEUyxTQUFJLEdBQUosSUFBSSxDQUFTO0lBRTFELENBQUM7Q0FDSjtBQUVELGNBQWM7QUFDUCxNQUFNLGtCQUFtQixTQUFRLGFBQWE7SUFDakQsZ0JBQWdCO0lBQ2hCLFlBQVksT0FBZTtRQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDSjtBQUVELGNBQWM7QUFDUCxNQUFNLFFBQVMsU0FBUSxhQUFhO0lBQ3ZDLGdCQUFnQjtJQUNoQixZQUFZLE9BQWU7UUFDdkIsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQixDQUFDO0NBQ0o7QUFFRCxjQUFjO0FBQ1AsTUFBTSxTQUFVLFNBQVEsYUFBYTtJQUN4QyxnQkFBZ0I7SUFDaEIsWUFBWSxPQUFlO1FBQ3ZCLEtBQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN0Q0QsZ0JBQWdCO0FBQ2hCLE1BQWUsYUFBYyxTQUFRLEtBQUs7SUFDdEMsWUFBWSxJQUFZLEVBQUUsSUFBWSxFQUFFLE9BQWdCO1FBQ3BELEtBQUssQ0FBQyxHQUFHLElBQUksS0FBSyxJQUFJLEdBQUcsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsT0FBTyxFQUFFLENBQUM7SUFDM0UsQ0FBQztDQUNKO0FBRUQsZ0JBQWdCO0FBQ1QsTUFBTSxXQUFZLFNBQVEsYUFBYTtJQUMxQyxZQUFZLElBQVksRUFBRSxPQUFnQjtRQUN0QyxLQUFLLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUM7SUFDbEMsQ0FBQztDQUNKO0FBRUQsZ0JBQWdCO0FBQ1QsTUFBTSxvQkFBcUIsU0FBUSxhQUFhO0lBQ25ELFlBQVksSUFBWSxFQUFFLGFBQW9CLEVBQUUsT0FBZ0I7UUFDNUQsS0FBSyxDQUFDLGlCQUFpQixFQUFFLElBQUksRUFBRSxHQUFHLGFBQWEsR0FBRyxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxPQUFPLEVBQUUsQ0FBQztJQUNwRyxDQUFDO0NBQ0o7QUFFRCxnQkFBZ0I7QUFDVCxNQUFNLG1CQUFvQixTQUFRLGFBQWE7SUFDbEQsWUFBWSxJQUFZLEVBQUUsT0FBZ0I7UUFDdEMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLElBQUksRUFBRSxPQUFPLENBQUM7SUFDMUMsQ0FBQztDQUNKO0FBRUQsZ0JBQWdCO0FBQ1QsTUFBTSx3QkFBeUIsU0FBUSxhQUFhO0lBQ3ZELFlBQVksSUFBWSxFQUFFLE9BQWdCO1FBQ3RDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDO0lBQy9DLENBQUM7Q0FDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDakNzRTtBQUVUO0FBQ2tCO0FBQ2Y7QUFFOEY7QUFDOUc7QUFFakQsY0FBYztBQUNQLE1BQU0sWUFBYSxTQUFRLDBEQUFhO0lBQS9DOztRQUNJLGdCQUFnQjtRQUNSLHVCQUFrQixHQUFHLElBQUksR0FBRyxFQUE4QyxDQUFDO1FBSW5GLGdCQUFnQjtRQUNSLDJCQUFzQixHQUFHLElBQUksR0FBRyxFQUF1RCxDQUFDO1FBSWhHLGdCQUFnQjtRQUNSLGtEQUE2QyxHQUNqRCxDQUFDLFNBQTZCLEVBQUUsS0FBYSxFQUFFLE1BQWMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLDBDQUEwQyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDaEosZ0JBQWdCO1FBQ1IsMkRBQXNELEdBQzFELENBQUMsU0FBNkIsRUFBRSxPQUFnQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsbURBQW1ELENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3RJLGdCQUFnQjtRQUNSLHVEQUFrRCxHQUN0RCxDQUFDLFNBQTZCLEVBQUUsYUFBNEIsRUFBRSxhQUFxQixFQUFFLEVBQUUsQ0FDbkYsSUFBSSxDQUFDLCtDQUErQyxDQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7SUEwUjFHLENBQUM7SUF4Ukc7Ozs7OztPQU1HO0lBQ0gsaUJBQWlCLENBQUMsSUFBWSxFQUMxQixnQ0FBMkcsRUFDM0csT0FBTyxHQUFHLEtBQUs7UUFFZixJQUFJLE9BQU8sZ0NBQWdDLEtBQUssVUFBVSxFQUFFO1lBQ3hELE1BQU0sSUFBSSw0REFBUSxDQUFDLGtGQUFrRixDQUFDO1NBQ3pHO2FBQU07WUFDSCxJQUFJLGdDQUFnQyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsRUFBRTtnQkFDOUQsTUFBTSxvQkFBb0IsR0FBRyxnQ0FBcUUsQ0FBQztnQkFDbkcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLElBQUksRUFBRSxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUMxRTtpQkFBTTtnQkFDSCxNQUFNLG1CQUFtQixHQUFHLGdDQUF5RSxDQUFDO2dCQUN0RyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzdFO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCw0QkFBNEIsQ0FBQyxRQUFnQixFQUFFLG9CQUF1RCxFQUFFLE9BQU8sR0FBRyxLQUFLO1FBQ25ILElBQUksT0FBTyxvQkFBb0IsS0FBSyxVQUFVLEVBQUU7WUFDNUMsTUFBTSxJQUFJLEtBQUssQ0FBQywrREFBNEQsQ0FBQyxDQUFDO1NBQ2pGO1FBRUQsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXBFLElBQUkscUJBQXFCLEtBQUssU0FBUyxFQUFFO1lBQ3JDLE1BQU0sSUFBSSw2REFBUyxDQUFDLEdBQUcsK0RBQXNELEtBQUssUUFBUSxFQUFFLENBQUMsQ0FBQztTQUNqRztRQUVELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQzlCLFdBQVcsRUFBRSxvQkFBb0I7WUFDakMsZUFBZSxFQUFFLFNBQVM7WUFDMUIsT0FBTztTQUNWLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRDs7T0FFRztJQUNILGdDQUFnQyxDQUFDLFFBQWdCLEVBQUUsd0JBQStELEVBQUUsT0FBTyxHQUFHLEtBQUs7UUFDL0gsSUFBSSxPQUFPLHdCQUF3QixLQUFLLFVBQVUsRUFBRTtZQUNoRCxNQUFNLElBQUksNkRBQVMsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXBFLElBQUkscUJBQXFCLEtBQUssU0FBUyxFQUFFO1lBQ3JDLE1BQU0sSUFBSSw2REFBUyxDQUFDLEdBQUcsK0RBQXNELEtBQUssUUFBUSxFQUFFLENBQUMsQ0FBQztTQUNqRztRQUVELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQzlCLFdBQVcsRUFBRSxTQUFTO1lBQ3RCLGVBQWUsRUFBRSx3QkFBd0I7WUFDekMsT0FBTztTQUNWLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gseUJBQXlCLENBQUMsUUFBc0Q7UUFDNUUsSUFBSSxDQUFDLHVDQUF1QyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCx1Q0FBdUMsQ0FBQyxRQUFzRDtRQUMxRixJQUFJLE9BQU8sUUFBUSxLQUFLLFVBQVUsRUFBRTtZQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7U0FDMUQ7UUFFRCxJQUFJLElBQUksQ0FBQywyQkFBMkIsS0FBSyxTQUFTLEVBQUU7WUFDaEQsT0FBTyxDQUFDLElBQUksQ0FBQyxzR0FBc0csQ0FBQztTQUN2SDtRQUVELElBQUksQ0FBQywyQkFBMkIsR0FBRyxRQUFRLENBQUM7SUFDaEQsQ0FBQztJQUVELCtCQUErQjtRQUMzQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCx3QkFBd0IsQ0FBQyxNQUFtQztRQUN4RCxJQUFJLFlBQTRELENBQUM7UUFFakUsTUFBTSxRQUFRLEdBQUcseUdBQW9ELENBQUMsTUFBTSxDQUFDO1FBQzdFLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUN4QixZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN4RDtRQUNELElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUM1QixJQUFJLElBQUksQ0FBQywyQkFBMkIsS0FBSyxTQUFTLEVBQUU7Z0JBQ2hELFlBQVksR0FBRztvQkFDWCxXQUFXLEVBQUUsSUFBSSxDQUFDLDJCQUEyQixDQUFDLE1BQU0sQ0FBQztvQkFDckQsZUFBZSxFQUFFLFNBQVM7b0JBQzFCLE9BQU8sRUFBRSxLQUFLO2lCQUNqQjthQUNKO1NBQ0o7UUFFRCxPQUFPLFlBQVksQ0FBQztJQUN4QixDQUFDO0lBRUQsZ0JBQWdCO0lBQ1AsYUFBYSxDQUFDLFNBQTZCLEVBQUUsVUFBdUM7UUFDekYsSUFBSSxZQUE0RCxDQUFDO1FBRWpFLE1BQU0sUUFBUSxHQUFHLHlHQUFvRCxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xGLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUN4QixZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN4RDtRQUNELElBQUksWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUM1QixJQUFJLElBQUksQ0FBQywyQkFBMkIsS0FBSyxTQUFTLEVBQUU7Z0JBQ2hELFlBQVksR0FBRztvQkFDWCxXQUFXLEVBQUUsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFVBQVUsQ0FBQztvQkFDekQsZUFBZSxFQUFFLFNBQVM7b0JBQzFCLE9BQU8sRUFBRSxLQUFLO2lCQUNqQjthQUNKO1NBQ0o7UUFFRCxJQUFJLE1BQTRDLENBQUM7UUFDakQsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQzVCLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUM7WUFDckMsb0ZBQW9GO1lBQ3BGLElBQUksY0FBcUMsQ0FBQztZQUMxQyxJQUFJLFVBQVUsQ0FBQyxjQUFjLEtBQUssU0FBUyxFQUFFO2dCQUN6QyxjQUFjLEdBQUcsU0FBUyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNILFlBQVk7Z0JBQ1osY0FBYyxHQUFHLDZEQUFlLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxjQUFjLENBQWMsQ0FBQzthQUNoRjtZQUVELElBQUksU0FBbUQsQ0FBQztZQUN4RCxNQUFNLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUM7WUFDdEQsSUFBSSxvQkFBb0IsS0FBSyxTQUFTLEVBQUU7Z0JBQ3BDLFNBQVMsR0FBRyxJQUFJLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDNUU7aUJBQU07Z0JBQ0gsTUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLGVBQWUsQ0FBQztnQkFDckQsSUFBSSxlQUFlLEtBQUssU0FBUyxFQUFFO29CQUMvQixTQUFTLEdBQUcsZUFBZSxDQUFDLFNBQVMsRUFBRSxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQ25FO3FCQUFNO29CQUNILE1BQU0sSUFBSSwrREFBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2lCQUN6QzthQUNKO1lBRUQsSUFBSSxPQUFPLEVBQUU7Z0JBQ1QsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO29CQUN6QixNQUFNLElBQUksNEVBQXdCLENBQUMsZUFBZSxDQUFDLENBQUM7aUJBQ3ZEO3FCQUFNO29CQUNILE1BQU0sa0JBQWtCLEdBQUcsU0FBNEMsQ0FBQztvQkFDeEUsTUFBTSxvQkFBb0IsR0FBRyxrQkFBa0IsQ0FBQyxlQUFlLENBQUM7b0JBQ2hFLElBQUksb0JBQW9CLEtBQUssU0FBUyxFQUFFO3dCQUNwQyxNQUFNLElBQUksNkRBQVMsQ0FBQyxHQUFHLCtEQUFvRSxLQUFLLFFBQVEsRUFBRSxDQUFDLENBQUM7cUJBQy9HO3lCQUFNO3dCQUNILDJFQUE2QixDQUFDLG9CQUFvQixDQUFDLENBQUM7d0JBQ3BELElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLENBQUM7d0JBQ2pELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLENBQUM7d0JBQy9ELFNBQVMsQ0FBQywyQkFBMkIsR0FBRyxJQUFJLENBQUMsNkNBQTZDLENBQUM7d0JBQzNGLFNBQVMsQ0FBQyxvQ0FBb0MsR0FBRyxJQUFJLENBQUMsc0RBQXNELENBQUM7d0JBQzdHLFNBQVMsQ0FBQyxnQ0FBZ0MsR0FBRyxJQUFJLENBQUMsa0RBQWtELENBQUM7cUJBQ3hHO2lCQUNKO2FBQ0o7WUFFRCxNQUFNLEdBQUc7Z0JBQ0wsT0FBTyxFQUFFLFlBQVksQ0FBQyxPQUFPO2dCQUM3QixTQUFTO2FBQ1osQ0FBQztTQUVMO2FBQU07WUFDSCx3QkFBd0I7WUFDeEIsTUFBTSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ3ZEO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELGdCQUFnQjtJQUNQLGVBQWUsQ0FBQyxTQUE2QixFQUFFLE9BQWdCLEVBQUUsU0FBbUQ7UUFDekgsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RFLElBQUksa0JBQWtCLEtBQUssU0FBUyxFQUFFO1lBQ2xDLEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUM7U0FDdkQ7YUFBTTtZQUNILE1BQU0sb0JBQW9CLEdBQUcsa0JBQWtCLENBQUMsZUFBZSxDQUFDO1lBQ2hFLElBQUksb0JBQW9CLEtBQUssU0FBUyxFQUFFO2dCQUNwQyxNQUFNLElBQUksK0RBQVcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3ZEO2lCQUFNO2dCQUNILElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBQ2pELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDakQ7U0FDSjtJQUNMLENBQUM7SUFFUSw2QkFBNkIsQ0FBQyxLQUFhO1FBQ2hELElBQUksQ0FBQywrQkFBK0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDOUUsS0FBSyxDQUFDLDZCQUE2QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFHRCxnQkFBZ0I7SUFDUiwwQ0FBMEMsQ0FBQyxTQUE2QixFQUFFLEtBQWEsRUFBRSxNQUFjO1FBQzNHLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0RSxJQUFJLGtCQUFrQixLQUFLLFNBQVMsRUFBRTtZQUNsQyxNQUFNLElBQUksNEVBQXdCLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDdEQ7YUFBTTtZQUNILE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLGVBQWUsQ0FBQztZQUN2RCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7Z0JBQzNCLE1BQU0sSUFBSSw2REFBUyxDQUFDLCtEQUFpRCxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbEc7aUJBQU07Z0JBQ0gsTUFBTSwyQkFBMkIsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLENBQUM7Z0JBQzlFLE1BQU0sSUFBSSxHQUFHLDJCQUEyQixDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsK0JBQStCLENBQUMsSUFBSSxDQUFDO2dCQUMxRixXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyw0REFBYyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM5QyxNQUFNLEdBQUcsR0FBRywyQkFBMkIsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLCtCQUErQixDQUFDLEdBQUcsQ0FBQztnQkFDdkYsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsNERBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDNUMsNkRBQWUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ3BDLDhEQUFnQixDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUN6QztTQUNKO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLG1EQUFtRCxDQUFDLFNBQTZCLEVBQUUsT0FBZ0I7UUFDdkcsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RFLElBQUksa0JBQWtCLEtBQUssU0FBUyxFQUFFO1lBQ2xDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ3hEO2FBQU07WUFDSCxNQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxlQUFlLENBQUM7WUFDdkQsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO2dCQUMzQixNQUFNLElBQUksNkRBQVMsQ0FBQywrREFBaUQsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ2xHO2lCQUFNO2dCQUNILHlFQUEyQixDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUNyRDtTQUNKO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLCtDQUErQyxDQUFDLFNBQTZCLEVBQUUsYUFBNEIsRUFBRSxhQUFxQjtRQUN0SSxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEUsSUFBSSxrQkFBa0IsS0FBSyxTQUFTLEVBQUU7WUFDbEMsTUFBTSxJQUFJLDRFQUF3QixDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDekQ7YUFBTTtZQUNILE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLGVBQWUsQ0FBQztZQUN2RCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7Z0JBQzNCLE1BQU0sSUFBSSw2REFBUyxDQUFDLCtEQUFpRCxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbEc7aUJBQU07Z0JBQ0gsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDO2FBQzVDO1NBQ0o7SUFDTCxDQUFDO0NBQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hUbUc7QUFDOUI7QUFFUDtBQUdWO0FBQ3dDO0FBRWhEO0FBRTdDLGNBQWM7QUFDUCxNQUFNLGFBQWMsU0FBUSxzREFBVztJQStCMUMsZ0JBQWdCO0lBQ2hCLFlBQ0ksYUFBNEIsRUFDNUIsTUFBbUM7SUFDbkMsZ0JBQWdCO0lBQ1IsV0FBb0M7UUFFNUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUZqRSxnQkFBVyxHQUFYLFdBQVcsQ0FBeUI7UUF2QmhELGdCQUFnQjtRQUNSLGFBQVEsR0FBRyxLQUFLLENBQUM7UUEwQnJCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBRXhCLElBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQztRQUU3QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFFN0MsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZELGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxHQUFHLDRCQUFnQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLDhFQUFrQixDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUNsRixDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFVBQVUsQ0FBQyxFQUM1RCxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQ2pCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFDakIsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQzVDLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUM5QyxDQUFDO0lBQ04sQ0FBQztJQTFDRCw0RUFBNEU7SUFDNUUsSUFBSSxhQUFhLEtBQWdCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLElBQUksYUFBYSxLQUFnQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUN4RSxJQUFJLGNBQWMsS0FBYyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBQzlELGdCQUFnQjtJQUNoQixJQUFJLG1CQUFtQixLQUFjLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztJQUN4RSxJQUFJLFNBQVMsS0FBK0MsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDL0YsSUFBSSxTQUFTLEtBQXlCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDL0QsSUFBSSxVQUFVLEtBQThCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFFdEUsSUFBSSxZQUFZLEtBQW9ELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDaEcsSUFBSSxLQUFLLEtBQWEsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMzQyxJQUFJLEdBQUcsS0FBVSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLElBQUksT0FBTyxLQUFjLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUErQmhELGdCQUFnQjtJQUNQLE9BQU87UUFDWixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtRQUN6QixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELG9CQUFvQixDQUFDLE1BQW1DO1FBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUN2QyxDQUFDO0lBRUQsUUFBUTtRQUNKLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQztRQUM1RCxNQUFNLEtBQUssR0FBRyxpQkFBaUIsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRTVGLE1BQU0sTUFBTSxHQUFnQztZQUN4QyxJQUFJLEVBQUUsNERBQWtCO1lBQ3hCLE9BQU8sRUFBRSxFQUFFO1lBQ1gsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNYLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixjQUFjLEVBQUUsSUFBSSxDQUFDLGVBQWU7WUFDcEMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2xCLE1BQU0sRUFBRSxpR0FBNEMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQ3hFLGFBQWEsRUFBRSxrR0FBNkMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQ2hGLGNBQWMsRUFBRSxLQUFLO1NBQ3hCO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ3RCLE1BQU0sSUFBSSx1RUFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztJQUVELHFCQUFxQjtJQUNyQixnQkFBZ0I7SUFDaEIsYUFBYSxDQUFDLEtBQWEsRUFBRSxNQUFjO1FBQ3ZDLDZEQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQyw4REFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLFlBQVk7UUFDUixJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsbUJBQW1CO1FBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsa0JBQWtCO1FBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxxQkFBcUI7SUFDckIsZ0JBQWdCO0lBQ2hCLElBQUk7UUFDQSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxnQkFBZ0I7SUFDUCxVQUFVO1FBQ2YsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFRCxnQkFBZ0I7SUFDUCxJQUFJO1FBQ1QsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXRCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUVILFFBQVEsQ0FBQyxLQUFhO1FBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFRO1FBQ1gsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxnQkFBZ0I7SUFDUCxJQUFJO1FBQ1QsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELGdCQUFnQjtJQUNQLElBQUk7UUFDVCxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsYUFBYSxHQUFHLEtBQUs7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsVUFBVSxDQUFDLGFBQXNCO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNoQixJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdkM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUs7UUFDdEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDeEU7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLFVBQVUsQ0FBQyxhQUFzQjtRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDaEIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNHLFNBQVMsQ0FBQyxNQUFtQjtRQUM1QyxJQUFJLENBQUMsV0FBVyxHQUFHLE1BQWlDLENBQUM7UUFDckQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsMkJBQTJCLENBQUMsVUFBdUM7UUFDdkUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixjQUFjO1FBQ2xCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTtZQUN2QyxzRUFBc0U7WUFFdEUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxzRUFBd0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzNEO0lBQ0wsQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7Ozs7O0FDbFA0QztBQUV0QyxNQUFlLHVCQUF3QixTQUFRLHNEQUFXO0lBQWpFOztRQUNJLGdCQUFnQjtRQUNSLGFBQVEsR0FBRyxLQUFLLENBQUM7SUFVN0IsQ0FBQztJQVJHLElBQUksT0FBTyxLQUFjLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFFaEQsZ0JBQWdCO0lBQ2hCLGVBQWUsQ0FBQyxLQUFjO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7Q0FHSjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2IwRTtBQUV0QjtBQUNHO0FBRWlCO0FBS3pFOzs7Ozs7R0FNRztBQUVJLE1BQWUsV0FBWSxTQUFRLDhEQUFZO0lBdURsRCxnQkFBZ0I7SUFDaEIsWUFBNEIsYUFBNEIsRUFDcEQsTUFBMEI7SUFDMUIsZ0JBQWdCO0lBQ1IsT0FBMkI7SUFDbkMsZ0JBQWdCO0lBQ0MsUUFBcUI7UUFFdEMsS0FBSyxFQUFFLENBQUM7UUFQZ0Isa0JBQWEsR0FBYixhQUFhLENBQWU7UUFHNUMsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFFbEIsYUFBUSxHQUFSLFFBQVEsQ0FBYTtRQXhEMUMsZ0JBQWdCO1FBQ1Isb0JBQWUsR0FBYSxFQUFFLENBQUM7UUEyRG5DLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFFckIsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFekIsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO1FBRWxDLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUVyQyxJQUFJLENBQUMseUJBQXlCLEdBQUcsRUFBRSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBckRELElBQUksSUFBSSxLQUFlLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDM0MsSUFBSSxFQUFFLEtBQWEsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyQyxnQkFBZ0I7SUFDaEIsSUFBSSxjQUFjLEtBQWUsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUMvRCxJQUFJLE1BQU0sS0FBeUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6RCxJQUFJLFlBQVksS0FBb0IsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUNoRSxJQUFJLFVBQVUsS0FBYyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3RELElBQUksT0FBTyxLQUFrQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3BELElBQUksYUFBYSxLQUFjLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFFNUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFpQjtRQUM1QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBaUI7UUFDcEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7SUFFRCxNQUFNLENBQUMseUJBQXlCLENBQUMsSUFBaUI7UUFDOUMsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekMsQ0FBQztJQXlDRDs7OztPQUlHO0lBQ0gsV0FBVyxDQUFDLFdBQXdCLEVBQUUsU0FBUyxHQUFHLEtBQUs7UUFDbkQ7O1dBRUc7UUFDSCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUV0RDs7V0FFRztRQUNILElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQ7OztXQUdIO1FBQ0csSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzlCO1FBRUQ7O1dBRUc7UUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFcEM7O1dBRUc7UUFDSCxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7YUFBTTtZQUNIOztlQUVHO1lBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLEVBQUU7Z0JBQzdDLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7b0JBQ3ZCLE1BQU0sSUFBSSx1RUFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDOUM7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2xDO2FBQ0o7U0FDSjtJQUNMLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILDZEQUE2RDtJQUM3RCxRQUFRLENBQUMsV0FBd0IsRUFBRSxLQUFxQixFQUFFLGFBQXVCO1FBQzdFLEtBQUssYUFBTCxLQUFLLGNBQUwsS0FBSyxJQUFMLEtBQUssR0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBQztRQUVwQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFNUIsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksSUFBSSxXQUFXLENBQUMsY0FBYyxLQUFLLEtBQUssRUFBRTtZQUN0RSxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDdEI7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxZQUFZLENBQUMsUUFBcUIsRUFBRSxRQUFxQixFQUFFLGVBQWUsR0FBRyxLQUFLO1FBQzlFLHNEQUFzRDtRQUN0RCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztRQUVoRCxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNkLE1BQU0sSUFBSSwrREFBVyxDQUFDLFlBQVksRUFBRSxxREFBcUQsQ0FBQyxDQUFDO1NBQzlGO1FBRUQsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFO1lBQ3JCLE1BQU0sSUFBSSx1RUFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvQzthQUFNO1lBQ0gsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUU5RDs7Y0FFRTtZQUNGLElBQUksZUFBZSxLQUFLLElBQUksRUFBRTtnQkFDMUIsUUFBUSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ3hCLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGlEQUFpRDthQUN4RTtZQUVEOztjQUVFO1lBQ0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUM7WUFDckMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixrREFBa0Q7WUFDbEQsUUFBUSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ2xDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUVoQyw4RkFBOEY7WUFDOUYsSUFBSSxRQUFRLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtnQkFDM0IsTUFBTSxJQUFJLHVFQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ2hEO2lCQUFNO2dCQUNILElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEtBQUssSUFBSSxJQUFJLFFBQVEsQ0FBQyxjQUFjLEtBQUssS0FBSyxFQUFFO29CQUMvRSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7aUJBQ25CO2dCQUVELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNyQjtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU07UUFDRixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ3ZCLE1BQU0sSUFBSSx1RUFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTTtRQUNGLE1BQU0sUUFBUSxHQUFHLHlEQUFXLEVBQUUsQ0FBQztRQUMvQixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLDJCQUEyQixDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzNHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMzQyxPQUFPLGFBQWEsQ0FBQztJQUN6QixDQUFDO0lBSUQsZ0JBQWdCO0lBQ2hCLHNCQUFzQjtRQUNsQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ3hDLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDbEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQXFCLEtBQUssQ0FBQyxDQUFDO1FBQ3BELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDL0I7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLGlCQUFpQixDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsSUFBb0I7UUFDeEQsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDO1FBQ25FLElBQUksbUJBQW1CLEtBQUssSUFBSSxFQUFFO1lBQzlCLE1BQU0sSUFBSSx1RUFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvQzthQUFNO1lBQ0gsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzNDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNoQiw2REFBNkQ7SUFDN0QsTUFBTSxDQUFDLFdBQXdCLEVBQUUsSUFBc0I7UUFDbkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLElBQUk7UUFDQSx3SEFBd0g7UUFDeEgsc0RBQXNEO1FBQ3RELGtEQUFrRDtRQUNsRCx5RUFBMkIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxhQUFhLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUU3QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDaEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNoQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSCxPQUFPO1FBQ0gsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hELElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDbkM7UUFDRCxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMscUJBQXFCLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsY0FBYyxDQUFDLE9BQXFCO1FBQ2hDLE9BQU8sR0FBRyxPQUFPLGFBQVAsT0FBTyxjQUFQLE9BQU8sR0FBSSxJQUFJLENBQUMsUUFBUSxDQUFDO1FBRW5DLE1BQU0sTUFBTSxHQUFHLHFFQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUNsQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO1FBQ3BDLDJEQUEyRDtRQUUzRCxPQUFPO1lBQ0gsRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQztZQUNuQixFQUFFLEVBQUUsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2xCLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxHQUFHLEtBQUssR0FBRyxDQUFDO1lBQzNCLEVBQUUsRUFBRSxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sR0FBRyxDQUFDO1lBQzNCLE9BQU8sRUFBRSxLQUFLLEdBQUcsTUFBTTtZQUN2QixXQUFXLEVBQUUsSUFBSTtTQUNwQixDQUFDO0lBQ04sQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxJQUFJO1FBQ0EsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxnQkFBZ0I7SUFDTixTQUFTLENBQUMsTUFBbUI7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDMUIsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixnQkFBZ0IsQ0FBQyxFQUFVO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNuQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNoQztJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDTixnQkFBZ0I7UUFDdEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hELElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDaEM7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ04sSUFBSTtRQUNWLHlFQUEyQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFFRCxnQkFBZ0I7SUFDTixzQkFBc0I7UUFDNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hELElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDdEM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGtCQUFrQixDQUFDLE9BQXNDO1FBQzdELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDN0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQWMsS0FBSyxDQUFDLENBQUM7UUFDN0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDckMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSyxjQUFjLENBQUMsSUFBWSxFQUFFLElBQWU7UUFDaEQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNuQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsSUFBSSxLQUFLLFlBQVksNEVBQTBCO2dCQUMzQyxLQUFLLENBQUMsb0JBQW9CLEtBQUssS0FBSztnQkFDcEMsSUFBSSxDQUFDLGNBQWMsS0FBSyxJQUFJLEVBQUU7Z0JBRTlCOzs7OzttQkFLRztnQkFDSCxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDekM7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLHVDQUF1QyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDN0Q7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVRLGNBQWMsQ0FBQyxJQUFZLEVBQUUsSUFBZTtRQUNqRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ25CLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QixJQUFJLEtBQUssWUFBWSw0RUFBMEI7Z0JBQzNDLEtBQUssQ0FBQyxvQkFBb0IsS0FBSyxLQUFLO2dCQUNwQyxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksRUFDOUI7Z0JBQ0U7Ozs7O21CQUtHO2dCQUNILElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUN6QztxQkFBTTtvQkFDSCxJQUFJLENBQUMsdUNBQXVDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUM3RDthQUNKO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNLLHVDQUF1QyxDQUFDLElBQVksRUFBRSxLQUFpQztRQUMzRixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDNUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQy9DO2FBQU07WUFDSCxJQUFJLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUU7Z0JBQy9DLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7Z0JBQzVDLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDM0Y7U0FDSjtJQUVMLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNLLDZCQUE2QixDQUFDLElBQVksRUFBRSxLQUFpQztRQUNqRixJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoRCxDQUFDO0NBQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xlMEc7QUFDd0Y7QUFDdkg7QUFHbEI7QUFDbUM7QUFDNUM7QUFDcUI7QUFDekI7QUFDQztBQUU5Qzs7Ozs7R0FLRztBQUNJLE1BQU0sVUFBVyxTQUFRLCtFQUF1QjtJQUluRCxZQUFZLGFBQTRCLEVBQUUsY0FBa0QsRUFBRSxnQkFBNkI7UUFFdkgsS0FBSyxDQUFDLGFBQWEsRUFBRSxvRkFBK0IsQ0FBQyxjQUFjLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRWhILElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzNDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQztRQUMxQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRVEsSUFBSTtRQUNULElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJO1lBQUUsT0FBTztRQUV4QyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFdEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN6RTtRQUVELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUViLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRLENBQUMsY0FBa0Q7UUFDdkQsb0NBQW9DO1FBQ3BDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVqQixJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7WUFDOUIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDMUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDckM7SUFDTCxDQUFDO0lBRUQsU0FBUztRQUNMLG9DQUFvQztRQUNwQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLFFBQVEsWUFBWSxDQUFDLE1BQU0sRUFBRTtZQUN6QixLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNKLE9BQU87YUFDVjtZQUNELEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ0osTUFBTSx1QkFBdUIsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELHVCQUF1QixDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNqQyxPQUFPO2FBQ1Y7WUFDRCxPQUFPLENBQUMsQ0FBQztnQkFDTCxNQUFNLElBQUksK0RBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUN0QztTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxPQUFPLENBQUMsVUFBeUUsRUFDN0UsS0FBYztRQUVkLElBQUksQ0FBQyxhQUFhLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztRQUVqRCxNQUFNLGtCQUFrQixHQUFHLDhEQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFELElBQUksTUFBbUIsQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM5QixNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQzthQUFNO1lBQ0gsTUFBTSxHQUFHLElBQUksQ0FBQztTQUNqQjtRQUNELElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7U0FDaEU7YUFBTTtZQUNILE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsd0JBQXdCLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDNUYsS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzVDLE9BQU8sQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDekM7SUFDTCxDQUFDO0lBRUQsbUJBQW1CLENBQUMsVUFBK0I7UUFDL0Msb0NBQW9DO1FBQ3BDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVqQixNQUFNLGtCQUFrQixHQUFHLDhEQUFrQixDQUFDLFVBQVUsQ0FBZ0MsQ0FBQztRQUV6RixJQUFJLGtCQUFrQixDQUFDLFNBQVMsRUFBRTtZQUM5QixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7U0FDekQ7YUFBTTtZQUNILE1BQU0sZUFBZSxHQUFHLElBQUksMERBQWEsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3hGLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNyQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDTSxRQUFRLENBQUMsV0FBd0IsRUFBRSxLQUFjO1FBQ3RELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztTQUMvRDthQUFNO1lBQ0gsOEVBQThFO1lBQzlFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzdELEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUUzQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRTNDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNQLHNCQUFzQjtRQUMzQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDbEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQXlCLEtBQUssQ0FBQyxDQUFDO1FBQ3hELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNuQyxJQUFJLDRGQUF1QyxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNyRCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO2FBQzFCO2lCQUFNO2dCQUNILE1BQU0sSUFBSSwrREFBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3RDO1NBQ0o7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLE9BQU8sQ0FBQyxLQUFhLEVBQUUsTUFBYztRQUNqQyxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUM3QyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyw0Q0FBNEM7U0FDbEU7YUFBTTtZQUNILDZEQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNyQyw4REFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRXZDLDBCQUEwQjtZQUMxQixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDOUIsNkRBQWUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDckQsOERBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDMUQ7WUFFRCxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztTQUNqQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDTSxVQUFVO1FBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO1FBQ3RELElBQUk7WUFDQSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDakM7Z0JBQVM7WUFDTixJQUFJLENBQUMsYUFBYSxDQUFDLDhCQUE4QixFQUFFLENBQUM7U0FDdkQ7SUFDTCxDQUFDO0lBRUQsZUFBZTtRQUNYLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUVwQixNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNwRCxNQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssQ0FBa0IsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3RSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFFWixLQUFLLE1BQU0sR0FBRyxJQUFJLGFBQWEsRUFBRTtZQUM3QixNQUFNLElBQUksR0FBRyxHQUFrQyxDQUFDO1lBQ2hELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLEVBQXFCLENBQUM7WUFDdEQsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUNmLE1BQU0sSUFBSSx1RUFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUM5QztpQkFBTTtnQkFDSCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDakIsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRztvQkFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUM7O29CQUVsRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztnQkFDdEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3pELE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQzthQUN4QjtTQUNKO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVRLGlCQUFpQixDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsSUFBb0I7UUFDakUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMvQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRVEsTUFBTSxDQUFDLFdBQXdCLEVBQUUsSUFBcUI7UUFFM0QsSUFBSSxXQUFXLENBQUMsV0FBVyxFQUFFO1lBQ3pCLE1BQU0sVUFBVSxHQUFHLDBGQUFxQyxFQUFFLENBQUM7WUFDM0QseUZBQXlGO1lBQ3pGLE1BQU0sU0FBUyxHQUFHLFdBQTRCLENBQUM7WUFDL0MsVUFBVSxDQUFDLE1BQU0sR0FBRyxpR0FBNEMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDekYsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM1QixXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQ3ZCO1FBRUQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUM5QjthQUFNO1lBQ0g7Ozs7ZUFJRztZQUNILElBQUcsV0FBVyxDQUFDLElBQUksS0FBSyxzREFBWSxJQUFJLFdBQVcsQ0FBQyxJQUFJLEtBQUsseURBQWUsRUFBQztnQkFDekUsTUFBTSxVQUFVLEdBQUcsMEZBQXFDLEVBQUUsQ0FBQztnQkFDM0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3JFLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO2dCQUMzQixXQUFXLEdBQUcsS0FBSzthQUN0QjtZQUVELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxzREFBWSxDQUFDLENBQUMsQ0FBQyx5REFBZSxDQUFDO1lBQ2xFLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUMzRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQztZQUN6QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLElBQUksQ0FBQyxDQUFDLE1BQU0sWUFBWSx1REFBVyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQzFELE1BQU0sVUFBVSxHQUFHLHFGQUFnQyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMxRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDM0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7Z0JBQ3ZDLFdBQVcsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ3RFLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ2pFLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ3ZCLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQzVCLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUM1QjtpQkFBTTtnQkFDSCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7Z0JBQ3RGLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQ2pFLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLENBQUM7Z0JBQzFCLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQzVDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUN2QjtTQUNKO0lBQ0wsQ0FBQztJQUVELCtHQUErRztJQUMvRyx1SEFBdUg7SUFDdkgsa0JBQWtCO0lBQ2xCLElBQUk7UUFDQSxNQUFNLElBQUksK0RBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsK0dBQStHO0lBQy9HLGtJQUFrSTtJQUNsSSxrQkFBa0I7SUFDbEIsZUFBZTtRQUNYLE1BQU0sSUFBSSwrREFBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxrQkFBa0I7UUFDZCxNQUFNLE1BQU0sR0FBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2RCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsdUJBQXVCO1FBQ25CLE1BQU0sTUFBTSxHQUFrQixFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDNUQsSUFBSSw4REFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7Z0JBQ3ZELE9BQU8sSUFBSSxDQUFDO2FBQ2Y7aUJBQU07Z0JBQ0gsSUFBSSxzRUFBMkIsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7b0JBQy9ELE9BQU8sSUFBSSxDQUFDO2lCQUNmO3FCQUFNO29CQUNILE9BQU8sS0FBSyxDQUFDO2lCQUNoQjthQUNKO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsdUJBQXVCLENBQUMsYUFBcUI7UUFDekMsTUFBTSxNQUFNLEdBQWtCLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDOUcsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELFFBQVE7UUFDSixNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELDZEQUE2RDtJQUM3RCxzQkFBc0IsQ0FBQyxJQUFtQixFQUFFLEtBQWMsRUFBRSxrQkFBMkI7UUFDbkYsd0VBQXdFO0lBQzVFLENBQUM7SUFFTyxjQUFjO1FBQ2xCLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsc0VBQXdCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFM0UsNkRBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLDhEQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdkM7O1dBRUc7UUFDSCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM5Qiw2REFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3JELDhEQUFnQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQzFEO0lBQ0wsQ0FBQztJQUVPLHNCQUFzQixDQUFDLE9BQStCLEVBQUUsTUFBcUI7UUFDakYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDckMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDakU7SUFDTCxDQUFDO0lBRU8sc0JBQXNCLENBQUMsT0FBK0IsRUFBRSxNQUFxQixFQUNqRixjQUE0RDtRQUU1RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0IsSUFBSSxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDNUI7WUFDRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUM7U0FDakY7SUFDTCxDQUFDO0NBRUo7QUFFRCxnQkFBZ0I7QUFDaEIsV0FBaUIsVUFBVTtJQUt2QixJQUFpQixJQUFJLENBZ0JwQjtJQWhCRCxXQUFpQixJQUFJO1FBVUosa0JBQWEsR0FBVTtZQUNoQyxFQUFFLEVBQUUsSUFBSTtZQUNSLEVBQUUsRUFBRSxJQUFJO1lBQ1IsRUFBRSxFQUFFLElBQUk7WUFDUixFQUFFLEVBQUUsSUFBSTtTQUNYLENBQUM7SUFDTixDQUFDLEVBaEJnQixJQUFJLEdBQUosZUFBSSxLQUFKLGVBQUksUUFnQnBCO0lBRUQsU0FBZ0IsYUFBYSxDQUFDLFFBQWtCO1FBQzVDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLHNDQUFxQyxDQUFDO1FBQzNELE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxzQkFBNkIsQ0FBQztRQUNuRCxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsc0JBQTZCLENBQUM7UUFDbkQsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQU5lLHdCQUFhLGdCQU01QjtBQUNMLENBQUMsRUE5QmdCLFVBQVUsS0FBVixVQUFVLFFBOEIxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcFl5RztBQUUzRDtBQUM0QjtBQUdJO0FBU3hEO0FBRXFCO0FBRTVDLGNBQWM7QUFDUCxNQUFNLFdBQVksU0FBUSxzREFBVztJQXNCeEMsZ0JBQWdCO0lBQ2hCLFlBQVksUUFBaUIsRUFBRSxhQUE0QixFQUFFLE1BQXFDO0lBQzlGLGdCQUFnQjtJQUNSLGtCQUErQjtRQUV2QyxLQUFLLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxXQUFXLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBRnhGLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBYTtRQVozQyxnQkFBZ0I7UUFDQyxjQUFTLEdBQWUsRUFBRSxDQUFDO1FBZXhDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFFekIsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUM7UUFDdkUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQztRQUMvRSxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDaEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztRQUM5QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUM7UUFFakMsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ2pCLEtBQUssc0RBQVksQ0FBQztZQUNsQixLQUFLLHlEQUFlO2dCQUNoQixJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQy9CLE1BQU07WUFDVjtnQkFDSSxNQUFNLElBQUksK0RBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7SUFFRCxZQUFZLENBQUMsYUFBd0IsRUFBRSxjQUEwQixFQUFFLEtBQWMsRUFBRSxLQUFjO1FBQzdGLE1BQU0sVUFBVSxHQUF3QjtZQUNwQyxJQUFJLEVBQUUsV0FBVztZQUNqQixhQUFhO1lBQ2IsY0FBYztZQUNkLEtBQUs7U0FDUixDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQWtCLENBQUM7SUFDNUQsQ0FBQztJQUVELFlBQVksQ0FBQyxhQUF3QixFQUFFLGNBQTBCLEVBQUUsS0FBYyxFQUFFLEtBQWM7UUFDN0YsTUFBTSxVQUFVLEdBQXdCO1lBQ3BDLElBQUksRUFBRSxXQUFXO1lBQ2pCLGFBQWE7WUFDYixjQUFjO1lBQ2QsS0FBSztTQUNSLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxPQUFPLENBQUMsVUFBeUUsRUFBRyxLQUFjO1FBQzlGLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTdDLElBQUksOERBQW1CLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxrRUFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQzFFLHVGQUF1RjtZQUN2RixPQUFPLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNILE9BQU8sV0FBVyxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUVELE9BQU8sQ0FBQyxVQUF5RSxFQUM3RSxLQUFjO1FBRWQsSUFBSSxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1FBQ2pELE1BQU0sa0JBQWtCLEdBQUcsOERBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxRixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7O09BV0c7SUFDTSxRQUFRLENBQUMsV0FBd0IsRUFBRSxLQUFjLEVBQUUsYUFBdUI7UUFFL0UsOEVBQThFO1FBRTlFLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUNyQixLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7U0FDcEM7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM5QixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUU1RSxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRSxlQUFlLENBQUMsQ0FBQztnQkFDeEYsZUFBZSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDMUU7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO2dCQUNuRixlQUFlLENBQUMscUJBQXFCLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM3RTtTQUNKO2FBQU07WUFDSCxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNoRTtRQUVELEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRW5DLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBRXpELElBQUksYUFBYSxLQUFLLElBQUksRUFBRTtZQUN4QixJQUFJLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDM0MsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVcsRUFBRTtnQkFDdEMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxXQUFXLENBQUM7YUFDOUM7aUJBQU07Z0JBQ0gsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNwRixJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxRQUFRLENBQUM7YUFDcEQ7U0FDSjtRQUVELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFM0MsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNNLFdBQVcsQ0FBQyxXQUF3QixFQUFFLFNBQWtCO1FBQzdELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUU3QyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMscUVBQXFFLENBQUMsQ0FBQztTQUMxRjtRQUVEOzs7V0FHRztRQUNILElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUMzQztRQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRTFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxFQUFFO1lBQzVELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUMvRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUM5QztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNNLFlBQVksQ0FBQyxRQUFxQixFQUFFLFFBQXFCO1FBQzlELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkMsS0FBSyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdkMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDakMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7O09BRUc7SUFDTSxVQUFVO1FBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQ0FBZ0MsRUFBRSxDQUFDO1FBQ3RELElBQUk7WUFDQSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDakM7Z0JBQVM7WUFDTixJQUFJLENBQUMsYUFBYSxDQUFDLDhCQUE4QixFQUFFLENBQUM7U0FDdkQ7SUFDTCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDTSxJQUFJO1FBQ1QsSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLElBQUk7WUFBRSxPQUFPO1FBRXhDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV0QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNuRCxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNsRztRQUVELElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxRQUFRO1FBQ0osTUFBTSxNQUFNLEdBQWtDO1lBQzFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBd0I7WUFDbkMsT0FBTyxFQUFFLElBQUksQ0FBQyxzQkFBc0IsRUFBaUU7WUFDckcsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNYLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtTQUM5QjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxnQkFBZ0I7SUFDRyxTQUFTLENBQUMsTUFBbUI7UUFDNUMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLE1BQU0sQ0FBQztRQUNqQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixjQUFjO1FBQ2xCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBQzlCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNLLGdCQUFnQjtRQUNwQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUUvQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxRQUFRLENBQUMsZUFBZSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2xDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzthQUMzQjtZQUVELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDaEIsNkRBQWUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ25FLDhEQUFnQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN6RTtpQkFBTTtnQkFDSCw2REFBZSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckUsOERBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3hFO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLHNCQUFzQjtRQUMxQixNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM5RSxJQUFJLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsc0VBQXdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXhGLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQixXQUFXLElBQUksaUJBQWlCLENBQUM7U0FDcEM7YUFBTTtZQUNILFVBQVUsSUFBSSxpQkFBaUIsQ0FBQztTQUNuQztRQUVELElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQztRQUN0QixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFFckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLElBQUksUUFBZ0IsQ0FBQztZQUNyQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2hCLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDNUU7aUJBQU07Z0JBQ0gsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMxRTtZQUVELGFBQWEsSUFBSSxRQUFRLENBQUM7WUFDMUIsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM1QjtRQUVELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxDQUFDO1FBRWhHLE9BQU87WUFDSCxTQUFTLEVBQUUsU0FBUztZQUNwQixlQUFlLEVBQUUsZUFBZTtZQUNoQyxVQUFVLEVBQUUsVUFBVTtZQUN0QixXQUFXLEVBQUUsV0FBVztTQUMzQixDQUFDO0lBQ04sQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BbUJHO0lBQ0ssc0JBQXNCO1FBRTFCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLE1BQU0sd0JBQXdCLEdBQWtCLEVBQUUsQ0FBQztRQUVuRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ3JELEtBQUssSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNsRDtpQkFBTTtnQkFDSCx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3ZEO1NBQ0o7UUFFRDs7V0FFRztRQUNILElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7WUFDM0IsT0FBTztTQUNWO1FBRUQ7O1dBRUc7UUFDSCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLHdCQUF3QixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDaEUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdEQsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLHdCQUF3QixDQUFDLE1BQU0sQ0FBQzthQUNsRztZQUNELElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBQzNCLE9BQU87U0FDVjtRQUVEOzs7OztXQUtHO1FBQ0gsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsRUFBRTtZQUN6QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsd0JBQXdCLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN0RCx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUNsRCxLQUFLLElBQUksRUFBRSxDQUFDO2FBQ2Y7U0FDSjtRQUVEOztXQUVHO1FBQ0gsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ2pHO1FBRUQsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7T0FHRztJQUNLLG1CQUFtQjtRQUt2QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDO1FBQzdFLElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztRQUNyQixJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUM7UUFDdEIsTUFBTSxjQUFjLEdBQVksRUFBRSxDQUFDO1FBQ25DLE1BQU0sVUFBVSxHQUFZLEVBQUUsQ0FBQztRQUUvQixJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ2xFLE9BQU87U0FDVjtRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBRS9DOztXQUVHO1FBQ0gsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2hELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFdkMsSUFBSSxLQUFZLENBQUM7WUFDakIsSUFBSSxRQUFRLEdBQUcsWUFBWSxFQUFFO2dCQUN6QixhQUFhLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQztnQkFDekMsS0FBSyxHQUFHO29CQUNKLEtBQUssRUFBRSxZQUFZO2lCQUN0QixDQUFDO2FBRUw7aUJBQU07Z0JBQ0gsWUFBWSxJQUFJLFFBQVEsR0FBRyxZQUFZLENBQUM7Z0JBQ3hDLEtBQUssR0FBRztvQkFDSixLQUFLLEVBQUUsUUFBUTtpQkFDbEIsQ0FBQztnQkFDRixjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzlCO1lBRUQsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQjtRQUVEOztXQUVHO1FBQ0gsSUFBSSxhQUFhLEtBQUssQ0FBQyxJQUFJLGFBQWEsR0FBRyxZQUFZLEVBQUU7WUFDckQsT0FBTztTQUNWO1FBRUQ7O1dBRUc7UUFDSCxNQUFNLGFBQWEsR0FBRyxhQUFhLEdBQUcsWUFBWSxDQUFDO1FBQ25ELElBQUksY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QyxNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUM7WUFDOUUsY0FBYyxJQUFJLFlBQVksQ0FBQztZQUMvQixLQUFLLENBQUMsS0FBSyxJQUFJLFlBQVksQ0FBQztTQUMvQjtRQUVEOztXQUVHO1FBQ0gsSUFBSSxjQUFjLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxjQUFjLENBQUM7U0FDN0Q7UUFFRDs7V0FFRztRQUNILEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUNsRjtJQUNMLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0ssY0FBYyxDQUFDLEtBQWE7UUFDaEMsTUFBTSxRQUFRLEdBQUcsSUFBSSx3REFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMxRixRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzNGLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLFFBQVEsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDMUMsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ssbUJBQW1CLENBQUMsUUFBa0I7UUFDMUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFL0MsT0FBTztZQUNILE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztZQUNoQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ3RDLENBQUM7SUFDTixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssb0JBQW9CLENBQUMsR0FBMkI7O1FBQ3BELElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFFbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDakMsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsbUNBQUksQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3BELFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLG1DQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUMxRDtRQUVELE9BQU87WUFDSCxVQUFVLEVBQUUsUUFBUTtZQUNwQixRQUFRLEVBQUUsU0FBUztTQUN0QixDQUFDO0lBQ04sQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxtQkFBbUIsQ0FBQyxRQUFrQjtRQUMxQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFOUcsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUUsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztRQUV2RixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4RSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDO1FBRXBGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLG9CQUFvQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsNERBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQztRQUM1SCxJQUFJLENBQUMsb0JBQW9CLEdBQUcsNERBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksT0FBTyxDQUFDLENBQUM7SUFDdkgsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ssY0FBYyxDQUFDLFFBQWtCLEVBQUUsT0FBZSxFQUFFLE9BQWU7UUFDdkUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFFaEQsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLEVBQUU7WUFDMUUsTUFBTSxJQUFJLHVFQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUVyRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDO1FBQ2hDLE1BQU0sWUFBWSxHQUFHLDREQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxZQUFZLENBQUM7U0FDN0M7YUFBTTtZQUNILFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7U0FDOUM7SUFDTCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSyxrQkFBa0IsQ0FBQyxRQUFrQjtRQUN6QyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsS0FBSyxJQUFJLEVBQUU7WUFDakMsTUFBTSxJQUFJLHVFQUFtQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ2pEO2FBQU07WUFDSCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDakQsTUFBTSxVQUFVLEdBQUcsNERBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDL0UsTUFBTSxTQUFTLEdBQUcsNERBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDN0UsTUFBTSx1QkFBdUIsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUMsQ0FBQztZQUNqRyxNQUFNLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXZGLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLHVCQUF1QixHQUFHLGlCQUFpQixDQUFDO1lBQzVFLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLHVCQUF1QixDQUFDLEdBQUcsaUJBQWlCLENBQUM7WUFFakYsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLDREQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLDREQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFaEQsVUFBVSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQzdEO0lBQ0wsQ0FBQztDQUNKO0FBRUQsY0FBYztBQUNkLFdBQWlCLFdBQVc7SUFDeEIsZ0JBQWdCO0lBQ2hCLFNBQWdCLHVCQUF1QixDQUFDLE9BQW9CLEVBQUUsU0FBb0M7UUFDOUYsSUFBSSxTQUFTLEtBQUssT0FBTyxFQUFFO1lBQ3ZCLE9BQU8sNkRBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNuQzthQUFNO1lBQ0gsT0FBTyw4REFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNwQztJQUNMLENBQUM7SUFOZSxtQ0FBdUIsMEJBTXRDO0lBRUQsZ0JBQWdCO0lBQ2hCLFNBQWdCLHVCQUF1QixDQUFDLE9BQW9CLEVBQUUsU0FBb0MsRUFBRSxLQUFhO1FBQzdHLElBQUksU0FBUyxLQUFLLE9BQU8sRUFBRTtZQUN2QixPQUFPLDZEQUFlLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzFDO2FBQU07WUFDSCxPQUFPLDhEQUFnQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzQztJQUNMLENBQUM7SUFOZSxtQ0FBdUIsMEJBTXRDO0lBRUQsZ0JBQWdCO0lBQ2hCLFNBQWdCLGFBQWEsQ0FBQyxRQUFrQixFQUFFLFFBQWlCO1FBQy9ELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLHNCQUE2QixDQUFDO1FBQ25ELElBQUksUUFBUSxFQUFFO1lBQ1YsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLDBCQUErQixDQUFDO1NBQ3hEO2FBQU07WUFDSCxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsb0JBQTRCLENBQUM7U0FDckQ7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBVGUseUJBQWEsZ0JBUzVCO0FBQ0wsQ0FBQyxFQTlCZ0IsV0FBVyxLQUFYLFdBQVcsUUE4QjNCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pwQmtFO0FBQzhFO0FBQ3JHO0FBQzBEO0FBSWhEO0FBQ0c7QUFDNkQ7QUFPOUY7QUFDeUI7QUFDcUI7QUFDekI7QUFFN0MsY0FBYztBQUNQLE1BQU0sS0FBTSxTQUFRLCtFQUF1QjtJQStDOUMsZ0JBQWdCO0lBQ2hCLFlBQVksYUFBNEIsRUFBRSxNQUErQixFQUFFLE1BQW1COztRQUMxRixLQUFLLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBaEN4RSxnQkFBZ0I7UUFDUix1QkFBa0IsR0FBRyxLQUFLLENBQUM7UUFNbkMsZ0JBQWdCO1FBQ1Isb0JBQWUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEQsZ0JBQWdCO1FBQ1IsdUJBQWtCLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzFELGdCQUFnQjtRQUNSLHVCQUFrQixHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQXNCdEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ25DLE1BQU0sa0JBQWtCLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDN0QsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNyQyxtRkFBbUY7UUFDbkYsSUFBSSxxQkFBb0UsQ0FBQztRQUN6RSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzVCLHFCQUFxQixHQUFHLFNBQVMsQ0FBQztTQUNyQzthQUFNO1lBQ0gsTUFBTSxvQkFBb0IsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUMscUJBQXFCLEdBQUksb0JBQW1ELENBQUMsTUFBTSxDQUFDLENBQUMseURBQXlEO1NBQ2pKO1FBRUQsSUFBSSxDQUFDLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDN0MsSUFBSSxDQUFDLHVCQUF1QixHQUFHLFlBQU0sQ0FBQyxlQUFlLG1DQUFJLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjtRQUVoRix5R0FBeUc7UUFDekcsTUFBTSxJQUFJLEdBQUcsc0JBQUksQ0FBQyxhQUFhLDBDQUFFLElBQUksbUNBQUkscUJBQXFCLGFBQXJCLHFCQUFxQix1QkFBckIscUJBQXFCLENBQUUsSUFBSSxtQ0FBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUM7UUFDaEcsTUFBTSxNQUFNLEdBQUcsc0JBQUksQ0FBQyxhQUFhLDBDQUFFLE1BQU0sbUNBQUkscUJBQXFCLGFBQXJCLHFCQUFxQix1QkFBckIscUJBQXFCLENBQUUsTUFBTSxtQ0FBSSxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7UUFDeEcsTUFBTSxRQUFRLEdBQUcsc0JBQUksQ0FBQyxhQUFhLDBDQUFFLFFBQVEsbUNBQUkscUJBQXFCLGFBQXJCLHFCQUFxQix1QkFBckIscUJBQXFCLENBQUUsUUFBUSxtQ0FBSSxrQkFBa0IsQ0FBQyxRQUFRLENBQUM7UUFDaEgsTUFBTSxLQUFLLEdBQUcsc0JBQUksQ0FBQyxhQUFhLDBDQUFFLEtBQUssbUNBQUkscUJBQXFCLGFBQXJCLHFCQUFxQix1QkFBckIscUJBQXFCLENBQUUsS0FBSyxtQ0FBSSxrQkFBa0IsQ0FBQyxLQUFLLENBQUM7UUFDcEcsTUFBTSxRQUFRLEdBQUcsc0JBQUksQ0FBQyxhQUFhLDBDQUFFLFFBQVEsbUNBQUkscUJBQXFCLGFBQXJCLHFCQUFxQix1QkFBckIscUJBQXFCLENBQUUsUUFBUSxtQ0FBSSxrQkFBa0IsQ0FBQyxRQUFRLENBQUM7UUFDaEgsTUFBTSxXQUFXLEdBQUcsc0JBQUksQ0FBQyxhQUFhLDBDQUFFLFdBQVcsbUNBQUkscUJBQXFCLGFBQXJCLHFCQUFxQix1QkFBckIscUJBQXFCLENBQUUsV0FBVyxtQ0FBSSxrQkFBa0IsQ0FBQyxXQUFXLENBQUM7UUFDNUgsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFFBQVEsS0FBSyxLQUFLLENBQUM7UUFDNUMsTUFBTSxjQUFjLEdBQW9CO1lBQ3BDLElBQUksRUFBRSxJQUFJLEtBQUssS0FBSztZQUNwQixJQUFJLEVBQUUsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsa0RBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUN0QyxhQUFhLEVBQUUsTUFBTSxLQUFLLEtBQUs7WUFDL0IsV0FBVyxFQUFFLE1BQU0sS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTTtZQUMzQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtZQUN2QyxhQUFhLEVBQUUsUUFBUSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRO1lBQ2pELFlBQVksRUFBRSxLQUFLLEtBQUssS0FBSztZQUM3QixVQUFVLEVBQUUsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLO1lBQ3hDLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLGFBQWEsRUFBRSxRQUFRO1lBQ3ZCLGtCQUFrQixFQUFFLFdBQVcsS0FBSyxLQUFLO1lBQ3pDLGdCQUFnQixFQUFFLFdBQVcsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVztTQUM3RCxDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLG9EQUFNLENBQUMsYUFBYSxFQUNuQyxJQUFJLEVBQUUsY0FBYyxFQUNwQixNQUFNLENBQUMsVUFBVSxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQ3BDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxFQUNuQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQ25CLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUM5QixHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQzNCLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsRUFBRSxDQUFDLEVBQ3ZDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsRUFBRSxDQUFDLEVBQzVDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLEVBQ3JELENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsSUFBSSxDQUFDLEVBQ3BELENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQ25HLENBQUM7UUFFRix3QkFBd0I7UUFFeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFFcEIsSUFBSSxDQUFDLHNCQUFzQixHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxHQUFHLHdCQUE4QixDQUFDO1FBRXhFLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN4QyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN4QixJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUNqRDtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUExRkQsSUFBSSxxQkFBcUIsS0FBa0IsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLElBQUksVUFBVSxLQUFjLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELElBQUksVUFBVSxLQUFXLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BELElBQUksb0JBQW9CLEtBQWMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsZ0JBQWdCO0lBQ2hCLElBQUkscUJBQXFCLEtBQThDLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztJQUM1RyxnQkFBZ0I7SUFDaEIsSUFBSSxtQkFBbUIsS0FBYyxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUM7SUFDeEUsSUFBSSxXQUFXLEtBQWMsT0FBTyxJQUFJLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLElBQUksV0FBVztRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1NBQ3hEO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUE4RUQsZ0JBQWdCO0lBQ1AsVUFBVTtRQUNmLElBQUksQ0FBQyxhQUFhLENBQUMsZ0NBQWdDLEVBQUUsQ0FBQztRQUN0RCxJQUFJO1lBQ0EsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQ2pDO2dCQUFTO1lBQ04sSUFBSSxDQUFDLGFBQWEsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDO1NBQ3ZEO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNQLElBQUk7UUFDVCxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSTtZQUFFLE9BQU87UUFFeEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRXRCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDekU7UUFFRCxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFYixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUM3QyxJQUFJLGdCQUFnQixHQUFHLENBQUMsRUFBRSxFQUFFLDBDQUEwQztZQUNsRSxJQUFJLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLHVCQUF1QixJQUFJLGdCQUFnQixFQUFFO2dCQUN0RixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxJQUFJLENBQUMsdUJBQXVCLFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDbkc7aUJBQU07Z0JBQ0gsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGdCQUFnQixFQUFFLENBQUMsRUFBRSxFQUFFO29CQUN2QyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3BDLElBQUksQ0FBQyxDQUFDLFdBQVcsWUFBWSwwREFBYSxDQUFDLEVBQUU7d0JBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQW9ELENBQUMsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztxQkFDM0Y7eUJBQU07d0JBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO3dCQUN2QyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7cUJBQ3RCO2lCQUNKO2dCQUVELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFrQixFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUVoRyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO2FBQ2pDO1NBQ0o7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELG1FQUFtRTtJQUNuRSxvQkFBb0IsQ0FBQyxJQUFpQjtRQUNsQyxJQUFJLENBQUMsc0VBQTJCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO1NBQzlFO2FBQU07WUFDSCxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzVDO0lBQ0wsQ0FBQztJQUVELHNCQUFzQixDQUFDLGFBQTRCLEVBQUUsS0FBYyxFQUFFLGtCQUFrQixHQUFHLEtBQUs7UUFDM0YsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEtBQUssYUFBYSxFQUFFO1lBQzdDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ2pELE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQzthQUNqRTtpQkFBTTtnQkFDSCxJQUFJLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxTQUFTLEVBQUU7b0JBQ3pDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztpQkFDcEM7Z0JBQ0QsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGFBQWEsQ0FBQztnQkFDMUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDMUQsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUNyRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDbkUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7YUFDaEM7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxLQUFLLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztTQUNqRjtJQUNMLENBQUM7SUFFRCxtRUFBbUU7SUFDbkUsb0JBQW9COztRQUNoQixPQUFPLFVBQUksQ0FBQyxzQkFBc0IsRUFBRSxtQ0FBSSxJQUFJLENBQUM7SUFDakQsQ0FBQztJQUVELHNCQUFzQjtRQUNsQixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUNyQyxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLHNCQUFzQjs7UUFDbEIsVUFBSSxDQUFDLG9CQUFvQiwwQ0FBRSxLQUFLLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1AsZUFBZSxDQUFDLEtBQWM7UUFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QyxLQUFLLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsb0JBQW9CLENBQUMsS0FBYztRQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxZQUFZLENBQUMsYUFBd0IsRUFBRSxjQUEwQixFQUFFLEtBQWMsRUFBRSxLQUFjO1FBQzdGLE1BQU0sVUFBVSxHQUF3QjtZQUNwQyxJQUFJLEVBQUUsV0FBVztZQUNqQixhQUFhO1lBQ2IsY0FBYztZQUNkLEtBQUs7U0FDUixDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQWtCLENBQUM7SUFDNUQsQ0FBQztJQUVELFlBQVksQ0FBQyxhQUF3QixFQUFFLGNBQTBCLEVBQUUsS0FBYyxFQUFFLEtBQWM7UUFDN0YsTUFBTSxVQUFVLEdBQXdCO1lBQ3BDLElBQUksRUFBRSxXQUFXO1lBQ2pCLGFBQWE7WUFDYixjQUFjO1lBQ2QsS0FBSztTQUNSLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxPQUFPLENBQUMsVUFBK0IsRUFBRyxLQUFjO1FBQ3BELEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELE9BQU8sQ0FBQyxVQUErQixFQUFFLEtBQWM7UUFDbkQsSUFBSSxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1FBRWpELE1BQU0sa0JBQWtCLEdBQUcsOERBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxRixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFUSxRQUFRLENBQUMsV0FBd0IsRUFBRSxLQUFjLEVBQUUsS0FBSyxHQUFHLEtBQUs7UUFDckUsSUFBRyxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBQztZQUN2RCxLQUFLLElBQUksQ0FBQyxDQUFDO1lBQ1gsTUFBTSxJQUFJLCtEQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxvRUFBb0U7U0FDMUc7UUFFRCxJQUFJLENBQUMsQ0FBQyxXQUFXLFlBQVksMERBQWEsQ0FBQyxFQUFFO1lBQ3pDLE1BQU0sSUFBSSwrREFBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsMENBQTBDO1NBQ2pGO2FBQU07WUFDSCxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzNDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUM5QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1lBQzdCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0lBQ0wsQ0FBQztJQUVRLFdBQVcsQ0FBQyxXQUF3QixFQUFFLFNBQWtCO1FBQzdELE1BQU0sYUFBYSxHQUFHLFdBQTRCLENBQUM7UUFDbkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdkQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7UUFFMUQsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEtBQUssYUFBYSxFQUFFO1lBQzdDLElBQUksYUFBYSxDQUFDLE9BQU8sRUFBRTtnQkFDdkIsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3hCO1lBQ0QsSUFBSSxDQUFDLGtCQUFrQixFQUFFO2dCQUNyQixrRkFBa0Y7Z0JBQ2xGLDBFQUEwRTtnQkFDMUUsa0ZBQWtGO2dCQUNsRixNQUFNLHFCQUFxQixHQUFHLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDMUQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDakc7U0FDSjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXRDLEtBQUssQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRTVDLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDcEM7UUFFRCxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxjQUFjO1FBQ1YsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNuQjthQUFNO1lBQ0gsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ25CO0lBQ0wsQ0FBQztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDdkMsTUFBTSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1lBQzdDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdkMsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLFdBQVcsWUFBWSwwREFBYSxFQUFFO29CQUN0QyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztpQkFDckM7cUJBQU07b0JBQ0gsTUFBTSxJQUFJLCtEQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQ3ZDO2FBQ0o7WUFDRCxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztTQUNoQztJQUNMLENBQUM7SUFFRCxRQUFRO1FBQ0osSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDaEQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUN2QyxNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7WUFDN0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGdCQUFnQixFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN2QyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLElBQUksV0FBVyxZQUFZLDBEQUFhLEVBQUU7b0JBQ3RDLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2lCQUNwQztxQkFBTTtvQkFDSCxNQUFNLElBQUksK0RBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztpQkFDdkM7YUFDSjtZQUNELElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNQLE9BQU87O1FBQ1osSUFBSSxVQUFJLENBQUMsb0JBQW9CLDBDQUFFLE9BQU8sRUFBRTtZQUNwQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDcEM7UUFDRCxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3pDLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksZUFBbUMsQ0FBQztRQUN4QyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtZQUMzQixlQUFlLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDdkUsSUFBSSxlQUFlLEdBQUcsQ0FBQyxFQUFFO2dCQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7YUFDL0Q7U0FDSjtRQUNELElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLGVBQWUsS0FBSyxTQUFTLEVBQUU7WUFDL0QsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsQ0FBQyxDQUFDO1NBQ2hGO2FBQU07WUFDSCxNQUFNLE1BQU0sR0FBNEI7Z0JBQ3BDLElBQUksRUFBRSxPQUFPO2dCQUNiLE9BQU8sRUFBRSxJQUFJLENBQUMsc0JBQXNCLEVBQW1DO2dCQUN2RSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ2pCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO2dCQUNuQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7Z0JBQ3pCLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtnQkFDWCxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7Z0JBQzNCLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVztnQkFDM0IsTUFBTSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtnQkFDakMsZUFBZTthQUNsQjtZQUNELE9BQU8sTUFBTSxDQUFDO1NBQ2pCO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FrQkc7SUFDSCw2REFBNkQ7SUFDcEQsTUFBTSxDQUFDLFdBQXdCLEVBQUUsSUFBc0I7UUFDNUQ7OztXQUdHO1FBQ0gsSUFBSSxJQUFJLENBQUMsWUFBWSwwQkFBeUIsRUFBRTtZQUM1QyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUMzQixJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO2dCQUMvQixNQUFNLElBQUksNEVBQXdCLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDcEQ7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUM1QyxPQUFPO2FBQ1Y7U0FDSjtRQUVEOztXQUVHO1FBQ0gsSUFBSSxJQUFJLENBQUMsWUFBWSxzQkFBdUIsRUFBRTtZQUMxQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDcEMsT0FBTztTQUNWO1FBRUQ7OztXQUdHO1FBQ0gsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksb0JBQXNCLElBQUksSUFBSSxDQUFDLFlBQVksMEJBQXlCLENBQUM7UUFDekcsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksc0JBQXVCLElBQUksSUFBSSxDQUFDLFlBQVksd0JBQXdCLENBQUM7UUFDM0csTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksb0JBQXNCLElBQUksSUFBSSxDQUFDLFlBQVksc0JBQXVCLENBQUM7UUFDekcsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0csTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUVsRDs7V0FFRztRQUNILElBQUksV0FBVyxDQUFDLFdBQVcsRUFBRTtZQUN6QixNQUFNLFVBQVUsR0FBRywwRkFBcUMsRUFBRSxDQUFDO1lBQzNELFVBQVUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDOUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM1QixXQUFXLEdBQUcsS0FBSyxDQUFDO1NBQ3ZCO1FBR0Q7Ozs7V0FJRztRQUNILElBQUcsV0FBVyxDQUFDLElBQUksS0FBSyxzREFBWSxJQUFJLFdBQVcsQ0FBQyxJQUFJLEtBQUsseURBQWUsRUFBQztZQUN6RSxNQUFNLFVBQVUsR0FBRywwRkFBcUMsRUFBRSxDQUFDO1lBQzNELFVBQVUsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDOUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7WUFDM0IsV0FBVyxHQUFHLEtBQUs7U0FDdEI7UUFFRDs7O1dBR0c7UUFDSCxJQUFJLGdCQUFnQixFQUFFO1lBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDL0UsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsQ0FBQztZQUN2QixXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3pDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDOUI7OztlQUdHO1NBQ047YUFBTTtZQUNILE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMseURBQWUsQ0FBQyxDQUFDLENBQUMsc0RBQVksQ0FBQztZQUN6RCxNQUFNLFVBQVUsR0FBRyxxRkFBZ0MsQ0FBQyxJQUFJLENBQXVCLENBQUM7WUFDaEYsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDM0UsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBRWpELFdBQVcsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdEUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUUvRCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3JCLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDNUIsV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDTSxpQkFBaUIsQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUMzQyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMzQyxNQUFNLE9BQU8sR0FBRyxHQUFvQixDQUFDO1lBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFFNUQsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFFMUQsSUFBSSxPQUFPLDBCQUF5QixFQUFFO29CQUNsQyxJQUFJLENBQUMsWUFBWSx3QkFBdUIsQ0FBQztvQkFDekMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNyRTtxQkFBTTtvQkFDSCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztvQkFDM0IsSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUN2QztnQkFFRCxPQUFPO2FBQ1Y7U0FDSjtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsT0FBTztRQUNILElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU0sRUFBRTtZQUN2QyxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDdEUsSUFBSSxVQUFVLEtBQUssSUFBSSxJQUFJLFdBQVcsS0FBSyxJQUFJLEVBQUU7WUFDN0MsTUFBTSxJQUFJLHVFQUFtQixDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUMsRUFBRSxDQUFDO1FBQ3JELE1BQU0sYUFBYSxHQUFHLFdBQVcsQ0FBQyxFQUFFLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQztRQUV0RCxJQUFJLENBQUMsc0JBQXNCLEdBQUc7WUFDMUIsTUFBTSxFQUFFO2dCQUNKLFNBQVMsRUFBRTtvQkFDUCxFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQUU7b0JBQ2pCLEVBQUUsRUFBRSxVQUFVLENBQUMsRUFBRTtvQkFDakIsRUFBRSxFQUFFLFVBQVUsQ0FBQyxFQUFFO29CQUNqQixFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQUU7aUJBQ3BCO2dCQUNELGFBQWEsRUFBRTtvQkFDWCxFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQUU7b0JBQ2pCLEVBQUUsRUFBRSxVQUFVLENBQUMsRUFBRTtvQkFDakIsRUFBRSxFQUFFLFVBQVUsQ0FBQyxFQUFFO29CQUNqQixFQUFFLEVBQUUsVUFBVSxDQUFDLEVBQUU7aUJBQ3BCO2FBQ0o7U0FDSixDQUFDO1FBRUY7O1dBRUc7UUFDSCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUVoQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxHQUFHO2dCQUMvQixTQUFTLEVBQUU7b0JBQ1AsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFO29CQUNsQixFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUU7b0JBQ2xCLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDbEIsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFO2lCQUNyQjtnQkFDRCxhQUFhLEVBQUU7b0JBQ1gsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFO29CQUNsQixFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUU7b0JBQ2xCLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDbEIsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFO2lCQUNyQjthQUNKLENBQUM7WUFFRixPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzdDO2FBQU07WUFDSCxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxHQUFHO2dCQUMvQixTQUFTLEVBQUU7b0JBQ1AsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFO29CQUNsQixFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUU7b0JBQ2xCLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRSxHQUFHLFlBQVksR0FBRyxJQUFJO29CQUN4QyxFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUU7aUJBQ3JCO2dCQUNELGFBQWEsRUFBRTtvQkFDWCxFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUU7b0JBQ2xCLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDbEIsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFLEdBQUcsWUFBWSxHQUFHLEdBQUc7b0JBQ3ZDLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtpQkFDckI7YUFDSixDQUFDO1lBRUYsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsR0FBRztnQkFDOUIsU0FBUyxFQUFFO29CQUNQLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRSxHQUFHLFlBQVksR0FBRyxJQUFJO29CQUN4QyxFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUU7b0JBQ2xCLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRSxHQUFHLFlBQVksR0FBRyxJQUFJO29CQUN4QyxFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUUsR0FBRyxhQUFhLEdBQUcsR0FBRztpQkFDM0M7Z0JBQ0QsYUFBYSxFQUFFO29CQUNYLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDbEIsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFO29CQUNsQixFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUU7b0JBQ2xCLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRSxHQUFHLGFBQWEsR0FBRyxHQUFHO2lCQUMzQzthQUNKLENBQUM7WUFFRixJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxHQUFHO2dCQUNoQyxTQUFTLEVBQUU7b0JBQ1AsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFLEdBQUcsWUFBWSxHQUFHLElBQUk7b0JBQ3hDLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDbEIsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFO29CQUNsQixFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUU7aUJBQ3JCO2dCQUNELGFBQWEsRUFBRTtvQkFDWCxFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUUsR0FBRyxZQUFZLEdBQUcsR0FBRztvQkFDdkMsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFO29CQUNsQixFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUU7b0JBQ2xCLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtpQkFDckI7YUFDSixDQUFDO1lBRUYsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sR0FBRztnQkFDakMsU0FBUyxFQUFFO29CQUNQLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRSxHQUFHLFlBQVksR0FBRyxJQUFJO29CQUN4QyxFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUUsR0FBRyxhQUFhLEdBQUcsR0FBRztvQkFDeEMsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFLEdBQUcsWUFBWSxHQUFHLElBQUk7b0JBQ3hDLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtpQkFDckI7Z0JBQ0QsYUFBYSxFQUFFO29CQUNYLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDbEIsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFLEdBQUcsYUFBYSxHQUFHLEdBQUc7b0JBQ3hDLEVBQUUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDbEIsRUFBRSxFQUFFLFdBQVcsQ0FBQyxFQUFFO2lCQUNyQjthQUNKLENBQUM7WUFFRixPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzdDO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxjQUFjLENBQUMsUUFBYztRQUN6QixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNoQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1lBQy9CLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQzlCO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLGNBQWM7UUFDbEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssTUFBTSxFQUFFO1lBQ3ZDLE1BQU0sT0FBTyxHQUFtQixzRUFBd0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFdkUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtnQkFDbkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLHlFQUErQixDQUFDLENBQUMsQ0FBQywwRUFBZ0MsQ0FBQztnQkFDbkgsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUM7YUFDakY7WUFDRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyw0REFBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4RSxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyw0REFBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQy9DLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsNERBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3pFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsNERBQWMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDOUU7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLHVCQUF1QixDQUFDLENBQVM7UUFDckMsa0NBQWtDO1FBQ2xDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO1FBRXhELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztRQUNuRSxJQUFJLG1CQUFtQixLQUFLLElBQUksRUFBRTtZQUM5QixNQUFNLElBQUksdUVBQW1CLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDbEQ7UUFFRCxJQUFJLElBQW9CLENBQUM7UUFFekIsY0FBYztRQUNkLElBQUksVUFBVSxLQUFLLENBQUMsRUFBRTtZQUNsQixNQUFNLFlBQVksR0FBRyxxRUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFM0QsTUFBTSxhQUFhLEdBQUcsOERBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3RCxJQUFJLEdBQUc7Z0JBQ0gsRUFBRSxFQUFFLFlBQVksQ0FBQyxJQUFJO2dCQUNyQixFQUFFLEVBQUUsWUFBWSxDQUFDLElBQUksR0FBRyxHQUFHO2dCQUMzQixFQUFFLEVBQUUsWUFBWSxDQUFDLEdBQUcsR0FBRyxhQUFhLEdBQUcsRUFBRTtnQkFDekMsRUFBRSxFQUFFLFlBQVksQ0FBQyxHQUFHLEdBQUcsYUFBYTthQUN2QyxDQUFDO1NBQ0w7YUFBTTtZQUNILElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztZQUNqQiwwREFBMEQ7WUFDMUQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3ZCLElBQUksTUFBYyxDQUFDO1lBQ25CLElBQUksT0FBZSxDQUFDO1lBQ3BCLElBQUksUUFBZ0IsQ0FBQztZQUNyQixJQUFJLFVBQXVCLENBQUM7WUFDNUIsR0FBRztnQkFDQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUNqRCxNQUFNLE1BQU0sR0FBRyxxRUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFO29CQUM3QixPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztvQkFDckIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQ3JCLFFBQVEsR0FBRyw4REFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDM0M7cUJBQU07b0JBQ0gsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7b0JBQ3RCLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO29CQUNwQixRQUFRLEdBQUcsNkRBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDMUM7Z0JBRUQsSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsR0FBRyxPQUFPLEdBQUcsUUFBUSxFQUFFO29CQUN4QyxVQUFVLEdBQUcsSUFBSSxDQUFDO2lCQUNyQjtxQkFBTTtvQkFDSCxRQUFRLEVBQUUsQ0FBQztpQkFDZDthQUNKLFFBQVEsUUFBUSxHQUFHLFVBQVUsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUUvQyw4RkFBOEY7WUFDOUYsSUFBSSxVQUFVLEtBQUssS0FBSyxJQUFJLENBQUMsR0FBRyxPQUFPLEVBQUU7Z0JBQ3JDLE9BQU87YUFDVjtZQUVELE1BQU0sS0FBSyxHQUFHLE9BQU8sR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1lBRXJDLElBQUksQ0FBQyxHQUFHLEtBQUssRUFBRTtnQkFDWCxJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztnQkFDM0IsVUFBVSxDQUFDLHFCQUFxQixDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLENBQUM7YUFDMUY7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQ3JELFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ3ZGO1lBRUQsTUFBTSx3QkFBd0IsR0FBRyxxRUFBZSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUN4RixNQUFNLHVCQUF1QixHQUFHLDZEQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztZQUN0RixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFO2dCQUM3QixNQUFNLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQyxHQUFHLENBQUM7Z0JBQ3BELElBQUksR0FBRztvQkFDSCxFQUFFLEVBQUUsTUFBTTtvQkFDVixFQUFFLEVBQUUsTUFBTSxHQUFHLFVBQVUsQ0FBQyxZQUFZO29CQUNwQyxFQUFFLEVBQUUsY0FBYztvQkFDbEIsRUFBRSxFQUFFLGNBQWMsR0FBRyx1QkFBdUI7aUJBQy9DLENBQUM7YUFDTDtpQkFBTTtnQkFDSCxNQUFNLGVBQWUsR0FBRyx3QkFBd0IsQ0FBQyxJQUFJLENBQUM7Z0JBRXRELElBQUksR0FBRztvQkFDSCxFQUFFLEVBQUUsZUFBZTtvQkFDbkIsRUFBRSxFQUFFLGVBQWUsR0FBRyx1QkFBdUI7b0JBQzdDLEVBQUUsRUFBRSxNQUFNO29CQUNWLEVBQUUsRUFBRSxNQUFNLEdBQUcsVUFBVSxDQUFDLFlBQVk7aUJBQ3ZDLENBQUM7YUFDTDtTQUNKO1FBRUQsbUJBQW1CLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLE9BQU87SUFDWCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsbUJBQW1CO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbkQsQ0FBQztJQUVELGdCQUFnQjtJQUNSLG1CQUFtQjtRQUN2Qix5RUFBMkIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sd0VBQTBGLENBQUM7UUFDeEgsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRTtZQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekQ7UUFFRCw4REFBOEQ7UUFDOUQsNENBQTRDO1FBQzVDLHFEQUFxRDtRQUNyRCxHQUFHO1FBQ0gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixxQkFBcUIsQ0FBQyxPQUFzQjtRQUNoRCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsS0FBSyxTQUFTLEVBQUU7WUFDM0MsTUFBTSxJQUFJLDRFQUF3QixDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3JEO2FBQU07WUFDSCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUMsYUFBYSxDQUFDO1lBQ3pFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztZQUNuRSxJQUFJLG1CQUFtQixLQUFLLElBQUksRUFBRTtnQkFDOUIsTUFBTSxJQUFJLHVFQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ2hEO2lCQUFNO2dCQUNILG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDakQsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUM7YUFDL0I7U0FDSjtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixZQUFZO1FBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFO0lBQ2pDLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixlQUFlO1FBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsZUFBZTtRQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVELGdCQUFnQjtJQUNSLGlCQUFpQjtRQUNyQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVELGdCQUFnQjtJQUNSLHNCQUFzQixDQUFDLEVBQWM7UUFDekMsTUFBTSxTQUFTLEdBQUcsb0ZBQWlDLENBQUM7UUFDcEQsTUFBTSxhQUFhLEdBQUcsSUFBSSxrRkFBK0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxnQkFBZ0I7SUFDUiwyQkFBMkIsQ0FBQyxFQUFjO1FBQzlDLE1BQU0sU0FBUyxHQUFHLHlGQUFzQyxDQUFDO1FBQ3pELE1BQU0sYUFBYSxHQUFHLElBQUksdUZBQW9DLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNwRixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsZ0NBQWdDLENBQUMsSUFBbUI7UUFDeEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELGdCQUFnQjtJQUNSLCtCQUErQixDQUFDLElBQW1CO1FBQ3ZELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELGdCQUFnQjtJQUNSLG1DQUFtQyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsWUFBMEIsRUFBRSxhQUE0QjtRQUN0SCxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssSUFBSSxFQUFFO1lBQzNCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN6QjtRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixrQkFBa0I7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMxQixPQUFPLGlHQUE0QyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUMzRTthQUFNO1lBQ0gsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFFM0QsSUFBSSxNQUFNLEdBQUcsaUdBQTRDLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwRixJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7Z0JBQ3RCLE1BQU0sR0FBRztvQkFDTCxJQUFJO29CQUNKLE1BQU0sRUFBRSxTQUFTO29CQUNqQixRQUFRLEVBQUUsU0FBUztvQkFDbkIsS0FBSyxFQUFFLFNBQVM7b0JBQ2hCLFFBQVEsRUFBRSxTQUFTO29CQUNuQixXQUFXLEVBQUUsU0FBUztpQkFDekIsQ0FBQzthQUNMO1lBQ0QsT0FBTyxNQUFNLENBQUM7U0FDakI7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IscUJBQXFCO1FBQ3pCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0o7QUFFRCxjQUFjO0FBQ2QsV0FBaUIsS0FBSztJQXNCbEIsZ0JBQWdCO0lBQ2hCLFNBQWdCLGFBQWEsQ0FBQyxRQUFrQjtRQUM1QyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxzQkFBNkIsQ0FBQztRQUNuRCxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsd0JBQThCLENBQUM7UUFDcEQsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUxlLG1CQUFhLGdCQUs1QjtBQUNMLENBQUMsRUE3QmdCLEtBQUssS0FBTCxLQUFLLFFBNkJyQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsN0J1SDtBQVN0RjtBQUV3QjtBQUNSO0FBQ0U7QUFDbUI7QUFDRDtBQUNUO0FBQzhEO0FBQ3BFO0FBRUo7QUFDRjtBQUNHO0FBQ2Q7QUFDbUI7QUFHSjtBQUNSO0FBQ2lDO0FBQ0o7QUFNbkQ7QUFTdkI7O0dBRUc7QUFFSCxjQUFjO0FBQ1AsTUFBZSxhQUFjLFNBQVEsOERBQVk7SUE4RnBEOzs7TUFHRTtJQUNGLFlBQVksVUFBK0M7UUFDdkQsS0FBSyxFQUFFLENBQUM7UUFoR1osZ0JBQWdCO1FBQ1IsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFDNUIsZ0JBQWdCO1FBQ1IsbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFDL0IsZ0JBQWdCO1FBQ1IsZ0JBQVcsR0FBMkIsU0FBUyxDQUFDO1FBQ3hELGdCQUFnQjtRQUNSLGlCQUFZLEdBQW9CLEVBQUUsQ0FBQztRQUMzQyxnQkFBZ0I7UUFDUix5QkFBb0IsR0FBK0IsSUFBSSxDQUFDO1FBQ2hFLGdCQUFnQjtRQUNSLHlCQUFvQixHQUErQixJQUFJLENBQUM7UUFHaEUsZ0JBQWdCO1FBQ1IsZUFBVSxHQUF1QixFQUFFLENBQUM7UUFHNUMsZ0JBQWdCO1FBQ1IseUJBQW9CLEdBQUcsYUFBYSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xGLGdCQUFnQjtRQUNSLHdCQUFtQixHQUFHLGFBQWEsQ0FBQywrQkFBK0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0RixnQkFBZ0I7UUFDUixpQkFBWSxHQUFpQixFQUFFLENBQUM7UUFDeEMsZ0JBQWdCO1FBQ1IsK0JBQTBCLEdBQUcsS0FBSyxDQUFDO1FBQzNDLGdCQUFnQjtRQUNSLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDMUIsZ0JBQWdCO1FBQ1IsY0FBUyxHQUFHLElBQUksc0RBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxnQkFBZ0I7UUFDUixXQUFNLEdBQWtCLElBQUksQ0FBQztRQUNyQyxnQkFBZ0I7UUFDUixZQUFPLEdBQWtCLElBQUksQ0FBQztRQUd0QyxnQkFBZ0I7UUFDUiw0QkFBdUIsR0FBeUIsRUFBRSxDQUFDO1FBQzNELGdCQUFnQjtRQUNSLDJDQUFzQyxHQUFHLENBQUMsQ0FBQztRQUVuRCxnQkFBZ0I7UUFDUiwwQkFBcUIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztRQUN2RSxnQkFBZ0I7UUFDUiwwQkFBcUIsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdEQsZ0JBQWdCO1FBQ1IsMkNBQXNDLEdBQUcsQ0FBQyxFQUE4QixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0NBQW9DLENBQUMsRUFBRSxDQUFDLENBQUM7UUFvRC9ILElBQUksWUFBWSxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUM7UUFDM0MsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQzVCLFlBQVksR0FBRyx1RkFBa0MsRUFBRSxDQUFDO1NBQ3ZEO1FBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBRTFDLDRFQUEyQixFQUFFLENBQUM7UUFDOUIsa0ZBQThCLEVBQUUsQ0FBQztRQUVqQyxJQUFJLFVBQVUsQ0FBQyxnQkFBZ0IsS0FBSyxTQUFTLEVBQUU7WUFDM0MsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQztTQUN4RDtJQUNMLENBQUM7SUExREQsSUFBSSxTQUFTLEtBQWtCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUMvRCxJQUFJLGFBQWEsS0FBYyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQzVELGdCQUFnQjtJQUNoQixJQUFJLFVBQVUsS0FBNkIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNyRSxpRkFBaUY7SUFDakYsSUFBSSxJQUFJLEtBQTZCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDL0QsSUFBSSxXQUFXLEtBQXNCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDaEUsZ0JBQWdCO0lBQ2hCLElBQUksbUJBQW1CLEtBQWlDLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztJQUMzRiwwQ0FBMEM7SUFDMUMsSUFBSSxtQkFBbUIsS0FBaUMsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0lBQzNGLElBQUksS0FBSyxLQUFvQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2xELElBQUksTUFBTSxLQUFvQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3BEOzs7O09BSUc7SUFDSCxJQUFJLFFBQVEsS0FBZSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ25ELElBQUksUUFBUTtRQUNSLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3pEO2FBQU07WUFDSCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO1lBQ3pELElBQUksa0JBQWtCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDakMsT0FBTyxTQUFTLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0gsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMzQztTQUNKO0lBQ0wsQ0FBQztJQUNELElBQUksb0JBQW9CLEtBQWdDLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUM1RixnQkFBZ0I7SUFDaEIsSUFBSSxrQkFBa0IsS0FBa0IsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0lBQzFFLElBQUksY0FBYyxLQUF3QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBMEJ4RTs7O09BR0c7SUFDSCxPQUFPO1FBQ0gsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3JCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsb0JBQW9CLEtBQUssSUFBSSxFQUFFO2dCQUMxRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQy9DLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ2hDO2FBQ0o7WUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2xCLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7YUFDeEU7WUFDRCxVQUFVLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3JFLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDM0UsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUM5QjtZQUNELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNsQyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsS0FBSyxJQUFJLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUN2QztZQUNELElBQUksSUFBSSxDQUFDLG9CQUFvQixLQUFLLElBQUksRUFBRTtnQkFDcEMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3ZDO1lBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUV6QixLQUFLLE1BQU0sVUFBVSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3hDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUN4QjtZQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO1lBRXZCLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsWUFBWSxDQUFDLE1BQTRCO1FBQ3JDLE9BQU8sc0ZBQWlDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxjQUFjLENBQUMsTUFBNEI7UUFDdkMsT0FBTyx3RkFBbUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBT0Q7OztPQUdHO0lBQ0gsSUFBSTtRQUNBLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxnRkFBbUIsRUFBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLCtFQUFtQixFQUFFLENBQUM7UUFDdEQsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFFL0IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksMERBQVUsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNuRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO1FBRXJDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxVQUFVLENBQUMsWUFBMEI7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDckIsNkRBQTZEO1lBQzdELE1BQU0sSUFBSSxLQUFLLENBQUMsMkZBQTJGLENBQUM7U0FDL0c7YUFBTTtZQUNILElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7Z0JBQ2hDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUNuRDtpQkFBTTtnQkFDSCxJQUFJLENBQUMsWUFBWSxHQUFHLGdFQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNsRCxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztnQkFDckMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7YUFDbEM7U0FDSjtJQUNMLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILFVBQVU7UUFDTixJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssS0FBSyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUN2RTthQUFNO1lBRUgsOERBQThEO1lBQzlELHFEQUFxRDtZQUNyRCxJQUFJO1lBRUo7O2NBRUU7WUFDRixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO2dCQUNoQyxNQUFNLElBQUksNEVBQXdCLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbkQ7aUJBQU07Z0JBQ0gsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2dCQUVoRSxJQUFJLGNBQWtELENBQUM7Z0JBQ3ZELElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQzVCLGNBQWMsR0FBRyxTQUFTLENBQUM7aUJBQzlCO3FCQUFNO29CQUNILGNBQWMsR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3JDO2dCQUVEOztrQkFFRTtnQkFDRixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztnQkFDOUIsTUFBTSxXQUFXLEdBQWlDLEVBQUUsQ0FBQztnQkFDckQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMvQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztpQkFDckQ7Z0JBRUQsTUFBTSxNQUFNLEdBQXlCO29CQUNqQyxJQUFJLEVBQUUsY0FBYztvQkFDcEIsV0FBVztvQkFDWCxRQUFRLEVBQUcsNkZBQXdDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7b0JBQy9FLFVBQVUsRUFBRSwrRkFBMEMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztvQkFDcEYsTUFBTSxFQUFFLDJGQUFzQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO29CQUN4RSxRQUFRLEVBQUUsSUFBSTtpQkFDakI7Z0JBRUQsT0FBTyxNQUFNLENBQUM7YUFDakI7U0FDSjtJQUNMLENBQUM7SUFFRDs7T0FFRztJQUVGLEtBQUs7UUFDRixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNuRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNoQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsWUFBWSxDQUFDLGFBQXdCLEVBQUUsY0FBMEIsRUFBRSxLQUFjO1FBQzdFLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLEVBQUUsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hGLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUM3QixNQUFNLElBQUksK0RBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN0QzthQUFNO1lBQ0gsT0FBTyxhQUFhLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxzQkFBc0IsQ0FBQyxhQUF3QixFQUFFLGNBQTBCLEVBQUUsS0FBYyxFQUN2RixpQkFBb0Q7UUFFcEQsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7U0FDdkQ7YUFBTTtZQUNILE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3RHLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDeEIsT0FBTyxTQUFTLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0gsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyRSxJQUFJLENBQUMsNkVBQTJCLENBQUMsV0FBVyxDQUFDLEVBQUU7b0JBQzNDLE1BQU0sSUFBSSwrREFBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2lCQUMxQztxQkFBTTtvQkFDSCxPQUFPLFdBQVcsQ0FBQztpQkFDdEI7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILFlBQVksQ0FBQyxhQUF3QixFQUFFLGNBQTBCLEVBQUUsS0FBYztRQUM3RSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuRixJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDeEIsTUFBTSxJQUFJLCtEQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ25CO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsc0JBQXNCLENBQUMsYUFBd0IsRUFBRSxjQUEwQixFQUFFLEtBQWMsRUFDdkYsaUJBQTZEO1FBRTdELE1BQU0sVUFBVSxHQUF3QjtZQUNwQyxJQUFJLEVBQUUsV0FBVztZQUNqQixhQUFhO1lBQ2IsY0FBYztZQUNkLEtBQUs7U0FDUixDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOzs7OztNQUtFO0lBQ0YsT0FBTyxDQUFDLFVBQXlFO1FBQzdFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2RCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDM0IsTUFBTSxJQUFJLCtEQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNILE9BQU8sV0FBVyxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7bUdBTStGO0lBQy9GLGlCQUFpQixDQUFDLFVBQXlFLEVBQ3ZGLGlCQUE2RDtRQUU3RCxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztTQUN2RDthQUFNO1lBQ0gsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ3ZFLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDeEIsT0FBTyxTQUFTLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0gsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNyRSxPQUFPLFdBQVcsQ0FBQzthQUN0QjtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7O3VEQUltRDtJQUNuRCxPQUFPLENBQUMsVUFBeUU7UUFDN0UsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BELElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUN4QixNQUFNLElBQUksK0RBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN0QzthQUFNO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDbkI7SUFDTCxDQUFDO0lBRUQ7Ozs7OzsrR0FNMkc7SUFDM0csaUJBQWlCLENBQUMsVUFBeUUsRUFDdkYsaUJBQTZEO1FBRTdELElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1NBQ3ZEO2FBQU07WUFDSCxJQUFJLGlCQUFpQixLQUFLLFNBQVMsRUFBRTtnQkFDakMseURBQXlEO2dCQUN6RCxpQkFBaUIsR0FBRyxhQUFhLENBQUMsd0JBQXdCLENBQUM7YUFDOUQ7WUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUMzRCxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7Z0JBQ3hCLE9BQU8sU0FBUyxDQUFDO2FBQ3BCO2lCQUFNO2dCQUNILElBQUksVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7Z0JBQ3JDLElBQUksTUFBYyxDQUFDO2dCQUNuQixRQUFRLFVBQVUsQ0FBQyxJQUFJLEVBQUU7b0JBQ3JCLEtBQUssMERBQWUsQ0FBQyxDQUFDO3dCQUNsQixNQUFNLFVBQVUsR0FBRyxVQUF3QixDQUFDO3dCQUM1QyxNQUFNLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUN4RCxJQUFJLE1BQU0sSUFBSSxDQUFDLEVBQUU7NEJBQ2IsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCO3lCQUMxRTs2QkFBTTs0QkFDSCxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsZ0ZBQWdGO3lCQUMvRjt3QkFDRCxNQUFNO3FCQUNUO29CQUNELEtBQUssdURBQVksQ0FBQztvQkFDbEIsS0FBSywwREFBZSxDQUFDLENBQUM7d0JBQ2xCLE1BQU0sV0FBVyxHQUFHLFVBQXlCLENBQUM7d0JBQzlDLE1BQU0sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ3pELE1BQU07cUJBQ1Q7b0JBQ0QsS0FBSyx5REFBYyxDQUFDLENBQUM7d0JBQ2pCLElBQUksQ0FBQyxrRUFBc0IsQ0FBQyxVQUFVLENBQUMsRUFBRTs0QkFDckMsTUFBTSxLQUFLLENBQUMsK0RBQXNELENBQUMsQ0FBQzt5QkFDdkU7NkJBQU07NEJBQ0gsTUFBTSxLQUFLLEdBQUcsVUFBbUIsQ0FBQzs0QkFDbEMsTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzs0QkFDbkQsTUFBTTt5QkFDVDtxQkFDSjtvQkFDRCxLQUFLLDZEQUFrQixDQUFDLENBQUM7d0JBQ3JCLE1BQU0sSUFBSSwrREFBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7cUJBQzVDO29CQUNEO3dCQUNJLE1BQU0sSUFBSSx3RUFBb0IsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzFFO2dCQUVELElBQUksa0VBQXNCLENBQUMsVUFBVSxDQUFDLEVBQUU7b0JBQ3BDLDRCQUE0QjtvQkFDNUIsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDN0MsSUFBSSxxRUFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRTt3QkFDM0IsVUFBVSxHQUFHLElBQUksQ0FBQzt3QkFDbEIsTUFBTSxHQUFHLENBQUMsQ0FBQztxQkFDZDtpQkFDSjtnQkFFRCxRQUFRLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztnQkFDakMsUUFBUSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7Z0JBRXhCLE9BQU8sUUFBUSxDQUFDO2FBQ25CO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7OztNQUdFO0lBQ0YsbUJBQW1CLENBQUMsVUFBK0I7UUFDL0MsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDbEQ7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDcEQ7SUFDTCxDQUFDO0lBRUQsNERBQTREO0lBQzVELFVBQVUsQ0FBQyxLQUFhLEVBQUUsTUFBYztRQUNwQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxPQUFPLENBQUMsS0FBYSxFQUFFLE1BQWM7UUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFFdEIsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksRUFBRTtZQUM5QixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO2dCQUNoQyxNQUFNLElBQUksNEVBQXdCLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDbkQ7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBRXBELElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtvQkFDdEIsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyx1RUFBd0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDM0UsOERBQWUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztvQkFDckQsK0RBQWdCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQ3ZELElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLENBQUM7aUJBQ3JDO2dCQUVELElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO2FBQ2xDO1NBQ0o7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLHVCQUF1QjtRQUNuQixNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLHVFQUF3QixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7T0FFRztJQUNILGNBQWM7UUFDVixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNqQztJQUNMLENBQUM7SUFFRCxjQUFjO0lBQ2Qsd0JBQXdCLENBQUMsTUFBMEIsRUFBRSxNQUFtQjtRQUNwRSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNmLE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsaUJBQWlCLENBQUMsTUFBMEIsRUFBRSxNQUFtQjtRQUM3RCxJQUFJLE9BQU8sTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDakMsTUFBTSxJQUFJLHVFQUFrQixDQUFDLDRCQUE0QixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUN0RjtRQUVEOztXQUVHO1FBQ0g7UUFDSSx5QkFBeUI7UUFDekIsdUZBQWtDLENBQUMsTUFBTSxDQUFDO1lBRTFDLHNDQUFzQztZQUN0QyxDQUFDLENBQUMsTUFBTSxZQUFZLGdEQUFLLENBQUM7WUFFMUIsdUJBQXVCO1lBQ3ZCLENBQUMsQ0FBQyxNQUFNO1lBRVIsZ0RBQWdEO1lBQ2hELENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksSUFBSSxNQUFNLFlBQVksMERBQVUsQ0FBQyxFQUM5RDtZQUNFLE1BQU0sV0FBVyxHQUE0QjtnQkFDekMsSUFBSSxFQUFFLHlEQUFjO2dCQUNwQixPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUM7Z0JBQ2pCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSztnQkFDbkIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRO2dCQUN6QixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU07Z0JBQ3JCLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztnQkFDM0IsRUFBRSxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUNiLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztnQkFDM0IsVUFBVSxFQUFFLE1BQU0sQ0FBQyxVQUFVO2dCQUM3QixlQUFlLEVBQUUsQ0FBQztnQkFDbEIsTUFBTSxFQUFFLFNBQVM7YUFDcEIsQ0FBQztZQUVGLE1BQU0sR0FBRyxXQUFXLENBQUM7U0FDeEI7UUFFRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3JFLE9BQU8sV0FBVyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCwwQkFBMEIsQ0FBQyxFQUFVO1FBQ2pDLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDaEMsTUFBTSxJQUFJLDRFQUF3QixDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3ZEO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyw2REFBa0IsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBa0IsQ0FBQztTQUNoSDtJQUNMLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUVILFlBQVksQ0FBQyx1QkFBNkQsRUFDdEUsZUFBa0QsRUFDbEQsUUFBdUIsRUFDdkIsYUFBNEI7UUFFNUIsSUFBSSx1QkFBdUIsWUFBWSw2REFBVyxFQUFFO1lBQ2hELE9BQU8sSUFBSSxDQUFDLDJCQUEyQixDQUFDLHVCQUF1QixFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDOUc7YUFBTTtZQUNILE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLHVCQUF1QixFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDN0c7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLDJCQUEyQixDQUFDLElBQWlCLEVBQ3pDLE1BQXFELEVBQ3JELFFBQXVCLEVBQ3ZCLGFBQXdDO1FBRXhDOzs7Ozs7O1dBT0c7UUFDSCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztRQUNqQixPQUFPLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUM1RSxLQUFLLEdBQUcsTUFBTSxDQUFDO1lBQ2YsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7U0FDMUI7UUFFRCxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFDakIsTUFBTSxJQUFJLHVFQUFtQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQ2pEO2FBQU07WUFDSCxJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7Z0JBQzdCLGFBQWEsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0RDtZQUVELElBQUksUUFBUSxLQUFLLElBQUksRUFBRTtnQkFDbkIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3JDO1lBRUQsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUN0QixNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUM7Z0JBQy9ELE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxPQUFPLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQztnQkFDN0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7Z0JBQzNDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUztnQkFDeEMsa0ZBQWtGO2dCQUNsRixNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLHVFQUF3QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFakUsTUFBTSxHQUFHO29CQUNMLElBQUksRUFBRSxVQUFVLEdBQUcsVUFBVTtvQkFDN0IsR0FBRyxFQUFFLFNBQVMsR0FBRyxTQUFTO29CQUMxQixLQUFLO29CQUNMLE1BQU07aUJBQ1QsQ0FBQzthQUNMO1lBRUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUVkLElBQUksQ0FBQyw0RkFBdUMsQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDdEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLCtEQUFtRSxFQUFFLENBQUMsQ0FBQzthQUM3RjtpQkFBTTtnQkFDSCxPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQzthQUN2RjtTQUNKO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixnQ0FBZ0M7UUFDNUIsSUFBSSxFQUFFLElBQUksQ0FBQyxzQ0FBc0MsS0FBSyxDQUFDLEVBQUU7WUFDckQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDM0M7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLHdCQUF3QixDQUFDLFNBQTZCO1FBQ2xELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELGdCQUFnQjtJQUNoQiw4QkFBOEI7UUFDMUIsSUFBSSxFQUFFLElBQUksQ0FBQyxzQ0FBc0MsS0FBSyxDQUFDLEVBQUU7WUFDckQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQztZQUNsRCxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLDZCQUE2QixDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUM1QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2xELFNBQVMsQ0FBQyw0QkFBNEIsRUFBRSxDQUFDO2lCQUM1QztnQkFDRCxJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7YUFDM0M7U0FDSjtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsNkJBQTZCLENBQUMsS0FBYTtRQUN2QyxJQUFJLElBQUksQ0FBQyx5QkFBeUIsS0FBSyxTQUFTLEVBQUU7WUFDOUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNoQiw0QkFBNEI7UUFDeEIsSUFBSSxJQUFJLENBQUMsd0JBQXdCLEtBQUssU0FBUyxFQUFFO1lBQzdDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1NBQ25DO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLDBCQUEwQixDQUFDLGNBQXNDLEVBQ3JFLE1BQXlDLEVBQ3pDLFFBQXVCLEVBQ3ZCLGFBQTRCO1FBRTVCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVyQyxNQUFNLGtCQUFrQixHQUErQjtZQUNuRCxJQUFJLEVBQUUsY0FBYztZQUNwQixXQUFXLEVBQUUsRUFBRTtZQUNmLFFBQVEsRUFBRSxZQUFZLENBQUMsUUFBUTtZQUMvQixVQUFVLEVBQUUsWUFBWSxDQUFDLFVBQVU7WUFDbkMsTUFBTSxFQUFFLFlBQVksQ0FBQyxNQUFNO1lBQzNCLE1BQU07WUFDTixRQUFRO1lBQ1IsYUFBYTtZQUNiLFFBQVEsRUFBRSxJQUFJO1NBQ2pCO1FBRUQsT0FBTyxJQUFJLENBQUMsa0NBQWtDLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLGtDQUFrQyxDQUFDLE1BQWtDOztRQUNqRSxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ25DLE1BQU0sYUFBYSxHQUFTO1lBQ3hCLElBQUksRUFBRSxrQkFBWSxDQUFDLElBQUksbUNBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxJQUFJLFVBQVUsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQzdFLEdBQUcsRUFBRSxrQkFBWSxDQUFDLEdBQUcsbUNBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxJQUFJLFVBQVUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQzFFLEtBQUssRUFBRSxrQkFBWSxDQUFDLEtBQUssbUNBQUksR0FBRztZQUNoQyxNQUFNLEVBQUUsa0JBQVksQ0FBQyxNQUFNLG1DQUFJLEdBQUc7U0FDckMsQ0FBQztRQUdGLE1BQU0sYUFBYSxHQUFHLElBQUksb0VBQWEsQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXJFLGFBQWEsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDaEYsYUFBYSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQztRQUVoRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV0QyxPQUFPLGFBQWEsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7OztPQVlHO0lBQ0gsYUFBYSxDQUFDLE9BQW9CLEVBQzlCLGtCQUFzRSxFQUN0RSxjQUEwQixFQUMxQixLQUFjO1FBRWQsTUFBTSxVQUFVLEdBQUcsSUFBSSw4REFBVSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVuQyxPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdBO0lBQ0gsZ0JBQWdCLENBQUMsVUFBc0I7UUFDdEMsOERBQWUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBRSxDQUFDO1FBQ2hELFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLGtCQUFrQixDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsWUFBMEIsRUFBRSxhQUE0QixFQUFFLEtBQVk7UUFDM0csSUFBSSw0REFBUyxDQUNULENBQUMsRUFDRCxDQUFDLEVBQ0QsWUFBWSxFQUNaLElBQUksRUFDSixhQUFhLEVBQ2IsS0FBSyxDQUNSLENBQUM7SUFDTixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsY0FBYyxDQUFDLElBQW1CLEVBQUUsYUFBYSxHQUFHLEtBQUs7UUFDckQsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsbUJBQW1CLENBQUMsYUFBYSxHQUFHLEtBQUs7UUFDckMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsdUJBQXVCLENBQUMsSUFBK0IsRUFBRSxjQUFjLEdBQUcsS0FBSztRQUMzRSxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFFckMsSUFBSSxvQkFBeUQsQ0FBQztZQUM5RCxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ3BCLG9CQUFvQixLQUFLLFNBQVMsQ0FBQzthQUN0QztpQkFBTTtnQkFDSCxvQkFBb0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO2FBQzFDO1lBRUQsSUFBSSxJQUFJLENBQUMscUJBQXFCLEtBQUssU0FBUyxFQUFFO2dCQUMxQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUM7Z0JBQ2xELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxTQUFTLENBQUM7Z0JBQ3ZDLGNBQWMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQzFDLE1BQU0sb0JBQW9CLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQztnQkFDdkQsSUFBSSxvQkFBb0IsS0FBSyxvQkFBb0IsRUFBRTtvQkFDL0Msb0JBQW9CLEdBQUcsU0FBUyxDQUFDO2lCQUNwQztxQkFBTTtvQkFDSCxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQy9DO2FBQ0o7WUFFRCxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQ2hDLElBQUksb0JBQW9CLEtBQUssU0FBUyxFQUFFO29CQUNwQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzlDO2FBQ0o7U0FDSjtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDUiwyQkFBMkIsQ0FBQyxNQUEwQixFQUFFLE1BQW1CO1FBQy9FLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtZQUNqQixLQUFLLDBEQUFlLENBQUMsQ0FBQyxNQUFNLElBQUksK0RBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM1RCxLQUFLLHVEQUFZLENBQUMsQ0FBQyxPQUFPLElBQUksOERBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQXVDLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEcsS0FBSywwREFBZSxDQUFDLENBQUMsT0FBTyxJQUFJLDhEQUFXLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxNQUF1QyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzFHLEtBQUsseURBQWMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxnREFBSyxDQUFDLElBQUksRUFBRSxNQUFpQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZGLEtBQUssNkRBQWtCO2dCQUNuQixPQUFPLElBQUksaUVBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBcUMsRUFBRSxNQUFlLENBQUMsQ0FBQztZQUMzRjtnQkFDSSxNQUFNLElBQUksd0VBQW9CLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsb0NBQW9DLENBQUMsQ0FBQztTQUN0RztJQUNMLENBQUM7SUFFRDs7OztRQUlJO0lBQ0osaUJBQWlCLENBQUMsS0FBd0I7UUFDdEMsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQ3JCLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxTQUFTLEVBQUU7Z0JBQ3BDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO2FBQ3hDO1NBQ0o7YUFBTTtZQUNILElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ2hDLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxTQUFTLEVBQUU7b0JBQ3BDLElBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDO2lCQUN4QztnQkFFRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDcEM7U0FDSjtJQUNMLENBQUM7SUFFRCwyQkFBMkI7UUFDdkIsSUFBSSxJQUFJLENBQUMsZUFBZSxLQUFLLFNBQVMsRUFBRTtZQUNwQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ25DO0lBQ0wsQ0FBQztJQUVELHVIQUF1SDtJQUN2SCxxSEFBcUg7SUFDckgsV0FBVztJQUVYLG1CQUFtQjtJQUNuQixzQ0FBc0M7SUFDdEMsNkNBQTZDO0lBRTdDLG1EQUFtRDtJQUNuRCxzQ0FBc0M7SUFDdEMsb0VBQW9FO0lBRXBFLGlEQUFpRDtJQUNqRCxtRUFBbUU7SUFDbkUsMERBQTBEO0lBQzFELHVCQUF1QjtJQUN2QixzREFBc0Q7SUFDdEQsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixRQUFRO0lBQ1IsSUFBSTtJQUVKLHVIQUF1SDtJQUN2SCxxSEFBcUg7SUFDckgsV0FBVztJQUVYLG1CQUFtQjtJQUNuQixzQ0FBc0M7SUFDdEMsNkNBQTZDO0lBRTdDLG1EQUFtRDtJQUNuRCxzQ0FBc0M7SUFDdEMsb0VBQW9FO0lBRXBFLGlEQUFpRDtJQUNqRCxtRUFBbUU7SUFDbkUsMERBQTBEO0lBQzFELHVCQUF1QjtJQUN2QixzREFBc0Q7SUFDdEQsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixRQUFRO0lBQ1IsSUFBSTtJQUVKLGdCQUFnQjtJQUNSLG9DQUFvQyxDQUFDLEtBQWlDO1FBQ2hGLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQzNFLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1lBQzdGLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1NBQ2pDO0lBQ0MsQ0FBQztJQUVEOzs7Ozs7Ozs7OztPQVdHO0lBQ0gsV0FBVztRQUNQLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxnQkFBZ0I7SUFDaEIsT0FBTyxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ3hCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLGVBQWUsR0FBRyxRQUFRLENBQUM7UUFFL0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFaEMsSUFDSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFO2dCQUNYLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRTtnQkFDWCxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUU7Z0JBQ1gsZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQ2hDO2dCQUNFLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUMvQixZQUFZLEdBQUcsSUFBSSxDQUFDO2FBQ3ZCO1NBQ0o7UUFFRCxPQUFPLFlBQVksQ0FBQztJQUN4QixDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLGtCQUFrQjtRQUNkLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ2xEOzs7Ozs7V0FNRztRQUNILE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDcEMsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQzFCLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNyRDthQUFNO1lBQ0gsSUFBSSxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDOUIsZ0RBQWdEO2dCQUNoRCxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQy9DLElBQUksVUFBVSxLQUFLLElBQUksRUFBRTtvQkFDckIsTUFBTSxJQUFJLHVFQUFtQixDQUFDLGNBQWMsQ0FBQztpQkFDaEQ7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUNsQztnQkFDRCxPQUFPO2FBQ1Y7aUJBQU07Z0JBQ0gsSUFBSSxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRTtvQkFDcEMsaUZBQWlGO29CQUNqRixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztpQkFDeEI7cUJBQU07b0JBQ0gsa0JBQWtCO29CQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztpQkFDbEQ7Z0JBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQzdDLE1BQU0sS0FBSyxHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDakMsSUFBSSxxRUFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBRTt3QkFDNUIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO3dCQUU3QixJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7NEJBQ2YsU0FBUzt5QkFDWjs2QkFBTTs0QkFDSCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs0QkFDM0IsTUFBTSwwQkFBMEIsR0FBRyxLQUFLLENBQUMscUJBQXFCLENBQUM7NEJBQy9ELElBQUksMEJBQTBCLEtBQUssU0FBUyxFQUFFO2dDQUMxQyxNQUFNLElBQUksNEVBQXdCLENBQUMsY0FBYyxDQUFDLENBQUM7NkJBQ3REO2lDQUFNO2dDQUNILE1BQU0sYUFBYSxHQUFHLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxhQUFhO2dDQUNyRSxNQUFNLE9BQU8sR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7Z0NBRTlGLE1BQU0sTUFBTSxHQUFxQjtvQ0FDN0IsRUFBRSxFQUFFLGFBQWEsQ0FBQyxFQUFFO29DQUNwQixFQUFFLEVBQUUsYUFBYSxDQUFDLEVBQUU7b0NBQ3BCLEVBQUUsRUFBRSxhQUFhLENBQUMsRUFBRTtvQ0FDcEIsRUFBRSxFQUFFLGFBQWEsQ0FBQyxFQUFFO29DQUNwQixXQUFXLEVBQUUsS0FBSztvQ0FDbEIsT0FBTztpQ0FDVixDQUFDO2dDQUNGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDOzZCQUNoQzt5QkFDSjtxQkFDSjtpQkFDSjthQUNKO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLDZCQUE2QjtRQUNqQyxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUN0RDthQUFNO1lBQ0gsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLHVCQUF1QixFQUFFLENBQUM7WUFFeEUsSUFBSSxvQkFBb0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQyxJQUFJLElBQUksR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkMsSUFBSSw2RUFBMkIsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDbkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztvQkFDMUIsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO3dCQUNoQixNQUFNLElBQUksdUVBQW1CLENBQUMsY0FBYyxDQUFDLENBQUM7cUJBQ2pEO3lCQUFNO3dCQUNILElBQUksR0FBRyxLQUFLLENBQUM7cUJBQ2hCO2lCQUNKO2dCQUNELElBQUksQ0FBQyxxRUFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDNUIsTUFBTSxJQUFJLCtEQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7aUJBQ3pDO3FCQUFNO29CQUNILElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztpQkFDbkI7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLG9CQUFvQixDQUFDLEtBQVk7UUFDckMsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7UUFDN0IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUM3RSxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLGdDQUFrQyxDQUFDO1FBQzlELEtBQUssQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzNFLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDaEMsTUFBTSxJQUFJLDRFQUF3QixDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2hELE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsdUVBQXdCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDM0UsOERBQWUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLCtEQUFnQixDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEMsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ25CLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDN0I7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsNkJBQTZCO1FBQ2pDLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxTQUFTLEVBQUU7WUFDcEMsTUFBTSxJQUFJLCtEQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDdkM7YUFBTTtZQUNILE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDbkMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtnQkFDdkIsTUFBTSxJQUFJLHVFQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQzlDO2lCQUFNO2dCQUNILEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sZ0NBQWtDLENBQUM7Z0JBQ2pFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMzRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ25DLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQzFCLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO2dCQUNqQyxLQUFLLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO2dCQUM5RSxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2FBQzdCO1NBQ0o7SUFDTCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSyxzQkFBc0I7UUFDMUIsTUFBTSxXQUFXLEdBQW9CLEVBQUUsQ0FBQztRQUV4QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0MsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUU7Z0JBQ25ELFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzFDO2lCQUFNO2dCQUNILElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNuRDtTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sS0FBSyxXQUFXLENBQUMsTUFBTSxFQUFFO1lBQ2pELElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDN0I7SUFFTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGtCQUFrQjtRQUN0QixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNyRDthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDaEQ7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssVUFBVTtRQUNkLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNsQixVQUFVLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3hGO1FBQ0QsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMscUJBQXFCLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNyRixVQUFVLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9GLENBQUM7SUFFRDs7O09BR0c7SUFDSyx5QkFBeUI7UUFDN0IsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEtBQUssU0FBUyxFQUFFO1lBQ3JDLFlBQVksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUN2QztRQUNELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVEOzs7T0FHRztJQUNLLFlBQVk7O1FBQ2hCLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDbEMsTUFBTSxnQkFBZ0IsR0FBRyxVQUFJLENBQUMsaUJBQWlCLG1DQUFJLFdBQVcsQ0FBQztRQUUvRCxJQUFJLGdCQUFnQixLQUFLLFdBQVcsRUFBRTtZQUNsQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztZQUV4QixNQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDO1lBQ2pELGVBQWUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUN0QyxlQUFlLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDbkMsZUFBZSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1lBQ3BDLGVBQWUsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztZQUMxQyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDbEMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQy9CLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztZQUNoQyxXQUFXLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDekM7UUFFRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxRQUFRO1FBQ1osSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRDs7O09BR0c7SUFDSyx1QkFBdUI7UUFDM0IsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUNoQyxNQUFNLElBQUksNEVBQXdCLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDcEQ7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3hCLGtFQUFrRTtZQUNsRSxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtnQkFDMUIsQ0FBQyxJQUFJLENBQUMsMEJBQTBCO2dCQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUMxQztnQkFDSSxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO29CQUN4RCxNQUFNLElBQUksNEVBQXdCLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQ3BEO3FCQUFNO29CQUNILDJDQUEyQztvQkFDM0MsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztvQkFDekUsSUFBSSxXQUFXLElBQUksQ0FBQyxFQUFFO3dCQUNsQixPQUFPO3FCQUNWO3lCQUFNO3dCQUNILHFDQUFxQzt3QkFDckMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDO3dCQUMvRCxNQUFNLGFBQWEsR0FBRyxXQUFXLEdBQUcsWUFBWSxDQUFDO3dCQUNqRCxJQUFJLGFBQWEsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFOzRCQUM5QixPQUFPO3lCQUNWOzZCQUFNOzRCQUNILGlEQUFpRDs0QkFDakQsSUFBSSxDQUFDLDBCQUEwQixHQUFHLElBQUksQ0FBQzs0QkFFdkMsdUZBQXVGOzRCQUN2RixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOzRCQUM3RSxNQUFNLGdCQUFnQixHQUFHLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQzs0QkFFeEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQ3pELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQzs0QkFDdEMsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQ0FDeEIsTUFBTSxJQUFJLCtEQUFXLENBQUMsYUFBYSxDQUFDOzZCQUN2QztpQ0FBTTtnQ0FDSCxNQUFNLG1CQUFtQixHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQ0FDekMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGdCQUFnQixFQUFFLENBQUMsRUFBRSxFQUFFO29DQUN2QyxvQkFBb0I7b0NBQ3BCLE1BQU0sTUFBTSxHQUFHLGVBQWUsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0NBQ3JGLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLENBQUMsQ0FBQztpQ0FDckU7Z0NBRUQsSUFBSSxDQUFDLDBCQUEwQixHQUFHLEtBQUssQ0FBQzs2QkFDM0M7eUJBQ0o7cUJBQ0o7aUJBQ0o7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ssbUJBQW1CO1FBQ3ZCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1FBQzVDLE1BQU0sb0JBQW9CLEdBQUcsUUFBUSxDQUFDLGNBQWMsS0FBSyxnRUFBcUIsQ0FBQztRQUMvRSxNQUFNLDRCQUE0QixHQUFHLFFBQVEsQ0FBQyxjQUFjLEtBQUssZ0VBQXFCLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMxRyxPQUFPLG9CQUFvQixJQUFJLDRCQUE0QixDQUFDO0lBQ2hFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNLLCtCQUErQixDQUFDLFNBQXNCLEVBQUUsSUFBaUI7UUFDN0UsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUN2QyxJQUFJLElBQUksWUFBWSxnREFBSyxFQUFFO1lBQ3ZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUM3QixTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzVCO1NBQ0o7YUFBTTtZQUNILEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUMxQyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdCLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDekQ7U0FDSjtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssWUFBWTtRQUNoQixJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQ2hDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNyRDthQUFNO1lBQ0gsTUFBTSxNQUFNLEdBQVksRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRXRELE9BQU8sTUFBTSxDQUFDO1NBQ2pCO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLHdCQUF3QixDQUFDLElBQWM7UUFDM0MsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUNoQyxNQUFNLElBQUksNEVBQXdCLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDdEQ7YUFBTTtZQUNILE9BQU8sSUFBSSxDQUFDLGlDQUFpQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDekU7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsaUNBQWlDLENBQUMsSUFBYyxFQUFFLElBQWlCO1FBQ3ZFLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDdkMsTUFBTSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1FBQzdDLElBQUksZ0JBQWdCLEtBQUssQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sU0FBUyxDQUFDO1NBQ3BCO2FBQU07WUFDSCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZDLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEMsSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtvQkFDM0IsT0FBTyxXQUFXLENBQUM7aUJBQ3RCO2FBQ0o7WUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZDLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsaUNBQWlDLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO2dCQUNuRixJQUFJLGdCQUFnQixLQUFLLFNBQVMsRUFBRTtvQkFDaEMsT0FBTyxnQkFBZ0IsQ0FBQztpQkFDM0I7YUFDSjtZQUVELE9BQU8sU0FBUyxDQUFDO1NBQ3BCO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLHFDQUFxQyxDQUFDLElBQWMsRUFBRSxFQUFVLEVBQUUsSUFBaUI7UUFDdkYsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUN2QyxNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUM7UUFDN0MsSUFBSSxnQkFBZ0IsS0FBSyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxTQUFTLENBQUM7U0FDcEI7YUFBTTtZQUNILEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdkMsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLFdBQVcsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFO29CQUNwRCxPQUFPLFdBQVcsQ0FBQztpQkFDdEI7YUFDSjtZQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdkMsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxxQ0FBcUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO2dCQUMzRixJQUFJLGdCQUFnQixLQUFLLFNBQVMsRUFBRTtvQkFDaEMsT0FBTyxnQkFBZ0IsQ0FBQztpQkFDM0I7YUFDSjtZQUVELE9BQU8sU0FBUyxDQUFDO1NBQ3BCO0lBQ0wsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNLLHNCQUFzQixDQUFDLE1BQWUsRUFBRSxJQUFpQjtRQUM3RCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLElBQUksWUFBWSxnREFBSyxFQUFFO2dCQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3JCO2lCQUFNO2dCQUNILElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO29CQUNuQixJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO2lCQUM3QzthQUNKO1NBQ0o7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsaUJBQWlCLENBQUMsU0FBb0Q7UUFDMUUsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVCLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzdDLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDeEIsT0FBTyxRQUFRLENBQUM7YUFDbkI7U0FDSjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxnQkFBZ0I7SUFDUixZQUFZLENBQUMsUUFBd0M7UUFDekQsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUNyQyxRQUFRLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDckIsd0JBQXNELENBQUMsQ0FBQztnQkFDcEQsSUFBSSxJQUFJLENBQUMscUJBQXFCLEtBQUssU0FBUyxFQUFFO29CQUMxQyxPQUFPLFNBQVM7aUJBQ25CO3FCQUFNO29CQUNILE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUM7b0JBQ3pELE1BQU0sa0JBQWtCLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQztvQkFDbkQsTUFBTSxzQkFBc0IsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7b0JBQ3pELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTt3QkFDN0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQztxQkFDeEQ7eUJBQU07d0JBQ0gsTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO3dCQUM1RSxNQUFNLEtBQUssR0FBRyxZQUFZLEdBQUcsYUFBYSxDQUFDO3dCQUMzQyxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLHNCQUFzQixFQUFFOzRCQUM3QyxPQUFPLFNBQVMsQ0FBQzt5QkFDcEI7NkJBQU07NEJBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQzt5QkFDaEM7cUJBQ0o7aUJBQ0o7YUFDSjtZQUNELHlCQUF1RCxDQUFDLENBQUM7Z0JBQ3JELElBQUksSUFBSSxDQUFDLHFCQUFxQixLQUFLLFNBQVMsRUFBRTtvQkFDMUMsT0FBTyxTQUFTO2lCQUNuQjtxQkFBTTtvQkFDSCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxDQUFDO29CQUN6RCxPQUFPLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7aUJBQzFFO2FBQ0o7WUFDRCx1QkFBcUQsQ0FBQyxDQUFDO2dCQUNuRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMseURBQWMsQ0FBQyxDQUFDO2dCQUNqRSxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7b0JBQzFCLE9BQU8sU0FBUyxDQUFDO2lCQUNwQjtxQkFBTTtvQkFDSCxPQUFPLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7aUJBQzFFO2FBQ0o7WUFDRCw2QkFBMkQsQ0FBQyxDQUFDO2dCQUN6RCxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsdURBQVksQ0FBQyxDQUFDO2dCQUM3RCxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7b0JBQzFCLE9BQU8sSUFBSSxDQUFDLCtCQUErQixDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztpQkFDMUU7cUJBQU07b0JBQ0gsVUFBVSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQywwREFBZSxDQUFDLENBQUM7b0JBQzVELElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTt3QkFDMUIsT0FBTyxJQUFJLENBQUMsK0JBQStCLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO3FCQUMxRTt5QkFBTTt3QkFDSCxPQUFPLFNBQVMsQ0FBQztxQkFDcEI7aUJBQ0o7YUFDSjtZQUNELHFCQUFtRCxDQUFDLENBQUM7Z0JBQ2pELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1REFBWSxDQUFDLENBQUM7Z0JBQy9ELElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtvQkFDMUIsT0FBTyxTQUFTLENBQUM7aUJBQ3BCO3FCQUFNO29CQUNILE9BQU8sSUFBSSxDQUFDLCtCQUErQixDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztpQkFDMUU7YUFDSjtZQUNELHdCQUFzRCxDQUFDLENBQUM7Z0JBQ3BELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQywwREFBZSxDQUFDLENBQUM7Z0JBQ2xFLElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtvQkFDMUIsT0FBTyxTQUFTLENBQUM7aUJBQ3BCO3FCQUFNO29CQUNILE9BQU8sSUFBSSxDQUFDLCtCQUErQixDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztpQkFDMUU7YUFDSjtZQUNELGtCQUFnRCxDQUFDLENBQUM7Z0JBQzlDLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLEVBQUU7b0JBQ2hDLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztpQkFDdEQ7cUJBQU07b0JBQ0gsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTt3QkFDN0IsT0FBTyxTQUFTLENBQUM7cUJBQ3BCO3lCQUFNO3dCQUNILElBQUksYUFBYSxLQUFLLFNBQVMsSUFBSSxhQUFhLEtBQUssQ0FBQzs0QkFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQzs2QkFDakQ7NEJBQ0QsT0FBTyxTQUFTLENBQUM7eUJBQ3BCO3FCQUNKO2lCQUNKO2FBQ0o7WUFDRCxpQkFBK0MsQ0FBQyxDQUFDO2dCQUM3QyxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO29CQUNoQyxNQUFNLElBQUksNEVBQXdCLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQ3BEO3FCQUFNO29CQUNILE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUM7b0JBQ3pELElBQUksa0JBQWtCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTt3QkFDakMsSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLGFBQWEsS0FBSyxDQUFDOzRCQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDOzZCQUNqRDs0QkFDRCxPQUFPLFNBQVMsQ0FBQzt5QkFDcEI7cUJBQ0o7eUJBQU07d0JBQ0gsTUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3pDLE9BQU8sSUFBSSxDQUFDLCtCQUErQixDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztxQkFDMUU7aUJBQ0o7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVELGdCQUFnQjtJQUNSLCtCQUErQixDQUFDLFVBQXVCLEVBQzNELGFBQWlDO1FBRWpDLE1BQU0sa0JBQWtCLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQztRQUNuRCxNQUFNLHNCQUFzQixHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQztRQUN6RCxJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDN0IsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQztTQUN4RDthQUFNO1lBQ0gsSUFBSSxhQUFhLEdBQUcsQ0FBQyxJQUFJLGFBQWEsR0FBRyxzQkFBc0IsRUFBRTtnQkFDN0QsT0FBTyxTQUFTLENBQUM7YUFDcEI7aUJBQU07Z0JBQ0gsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUM7YUFDL0M7U0FDSjtJQUNMLENBQUM7Q0FDSjtBQUVELGNBQWM7QUFDZCxXQUFpQixhQUFhO0lBVzFCLGdCQUFnQjtJQUNoQixTQUFnQiwwQkFBMEIsQ0FBQyxRQUFrQjtRQUN6RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyx5Q0FBc0MsQ0FBQztRQUM1RCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBSmUsd0NBQTBCLDZCQUl6QztJQUVELGdCQUFnQjtJQUNoQixTQUFnQiwrQkFBK0IsQ0FBQyxRQUFrQjtRQUM5RCxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxvREFBMkMsQ0FBQztRQUNqRSxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBSmUsNkNBQStCLGtDQUk5QztJQTZDRDs7O09BR0c7SUFDVSxzQ0FBd0IsR0FBZ0M7UUFDakUsRUFBRSxNQUFNLHNCQUFzQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7UUFDbEUsRUFBRSxNQUFNLG9CQUFvQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7UUFDaEUsRUFBRSxNQUFNLDBCQUEwQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7UUFDdEUsRUFBRSxNQUFNLGNBQThCLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtLQUM3RCxDQUFDO0lBRUY7OztPQUdHO0lBQ1UseURBQTJDLEdBQWdDO1FBQ3BGLEVBQUUsTUFBTSxxQkFBcUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1FBQ3pELEVBQUUsTUFBTSxvQkFBb0MsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1FBQ2hFLEVBQUUsTUFBTSwwQkFBMEMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1FBQ3RFLEVBQUUsTUFBTSxjQUE4QixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7S0FDN0QsQ0FBQztBQUNOLENBQUMsRUF6RmdCLGFBQWEsS0FBYixhQUFhLFFBeUY3Qjs7Ozs7Ozs7Ozs7Ozs7O0FDaHNERDs7Ozs7RUFLRTtBQUVLLElBQVUsY0FBYyxDQW1POUI7QUFuT0QsV0FBaUIsY0FBYztJQU0zQixNQUFNLElBQUksR0FBc0I7UUFDNUIsVUFBVTtRQUNWLFlBQVk7UUFDWiwwQkFBMEI7UUFDMUIsa0JBQWtCO1FBQ2xCLFlBQVk7UUFDWixhQUFhO1FBQ2IsZUFBZTtRQUNmLGNBQWM7UUFDZCxjQUFjO1FBQ2QsZ0JBQWdCO1FBQ2hCLGlCQUFpQjtRQUNqQixRQUFRO1FBQ1IsT0FBTztRQUNQLFVBQVU7UUFDVixVQUFVO1FBQ1YsUUFBUTtRQUNSLFNBQVM7UUFDVCxlQUFlO1FBQ2YsZ0JBQWdCO1FBQ2hCLElBQUk7UUFDSixPQUFPO1FBQ1AsTUFBTTtRQUNOLFFBQVE7UUFDUixZQUFZO1FBQ1osT0FBTztRQUNQLGtCQUFrQjtRQUNsQixhQUFhO1FBQ2IsVUFBVTtRQUNWLGlCQUFpQjtRQUNqQixnQkFBZ0I7UUFDaEIsaUJBQWlCO1FBS2pCLDZDQUE2QztLQUNoRCxDQUFDO0lBRUYsTUFBTSxNQUFNLEdBQWtDO1FBQzFDLElBQUk7UUFDSixLQUFLO1FBQ0wsS0FBSztRQUNMLFFBQVE7UUFDUixPQUFPO1FBQ1AsV0FBVztRQUNYLE9BQU87UUFDUCxVQUFVO1FBQ1YsVUFBVTtRQUNWLG9CQUFvQjtLQUN2QixDQUFDO0lBRUYsU0FBZ0IsZUFBZTtRQUMzQixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUMzRDtJQUNMLENBQUM7SUFKZSw4QkFBZSxrQkFJOUI7SUFFRCxTQUFnQixlQUFlLENBQUMsSUFBNkIsRUFBRSxNQUFlO1FBQzFFLE1BQU0sRUFBRSxHQUE0QixFQUFFLENBQUM7UUFDdkMsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDcEIsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsbURBQW1EO2dCQUMvRSxJQUFJLGFBQXFCLENBQUM7Z0JBQzFCLElBQUksTUFBTSxFQUFFO29CQUNSLGFBQWEsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2xDO3FCQUFNO29CQUNILGFBQWEsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3BDO2dCQUVELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDNUIsRUFBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDekQ7U0FDSjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQWpCZSw4QkFBZSxrQkFpQjlCO0lBRUQsU0FBUyxjQUFjLENBQUMsSUFBZSxFQUFFLE1BQWU7UUFDcEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMzQixNQUFNLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBVSxNQUFNLENBQUMsQ0FBQztRQUN0QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdCLGtFQUFrRTtZQUNsRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDN0M7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxTQUFTLGNBQWMsQ0FBQyxJQUFhLEVBQUUsTUFBZTtRQUNsRCxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUMxQixJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ2YsT0FBTyxJQUFJLENBQUM7YUFDZjtpQkFBTTtnQkFDSCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ3JCLE9BQU8sY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDdkM7cUJBQU07b0JBQ0gsT0FBTyxlQUFlLENBQUMsSUFBK0IsRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDbkU7YUFDSjtTQUNKO2FBQU07WUFDSCxJQUFJLE1BQU0sRUFBRTtnQkFDUixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM1QjtpQkFBTTtnQkFDSCxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM5QjtTQUNKO0lBQ0wsQ0FBQztJQUVELFNBQVMsU0FBUyxDQUFDLEtBQWE7UUFDNUI7OztXQUdHO1FBQ0gsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDakQsT0FBTyxLQUFLLEdBQUcsS0FBSyxDQUFDO1NBQ3hCO1FBRUQsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWhDOztXQUVHO1FBQ0gsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDZCxPQUFPLEtBQUssQ0FBQztZQUViOztlQUVHO1NBQ047YUFBTTtZQUNILE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM3QjtJQUNMLENBQUM7SUFFRCxTQUFTLFdBQVcsQ0FBQyxHQUFXO1FBQzVCOzs7V0FHRztRQUNILElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2xDO1FBRUQ7Ozs7V0FJRztRQUNILElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO1lBQzVCLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBQ0Q7O1dBRUc7UUFDSCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTLFdBQVcsQ0FBQyxLQUFjO1FBQy9COzs7V0FHRztRQUNILElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2pELE9BQU8sS0FBSyxHQUFHLEtBQUssQ0FBQztTQUN4QjtRQUVELE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVsQzs7V0FFRztRQUNILElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ2QsT0FBTyxLQUFLLENBQUM7WUFFYjs7ZUFFRztTQUNOO2FBQU07WUFDSCxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDN0I7SUFDTCxDQUFDO0lBRUQsU0FBUyxhQUFhLENBQUMsS0FBYztRQUNqQzs7O1dBR0c7UUFDSCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNqRCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdEM7UUFFRDs7OztXQUlHO1FBQ0gsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxFQUFFO1lBQzNELE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBQ0Q7O1dBRUc7UUFDSCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQsU0FBUyxVQUFVLENBQUMsR0FBVztRQUMzQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7Z0JBQ2pCLE9BQU8sQ0FBQyxDQUFDO2FBQ1o7U0FDSjtRQUNELE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBUyxZQUFZLENBQUMsS0FBYztRQUNoQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQ3JCLE9BQU8sQ0FBQyxDQUFDO2FBQ1o7U0FDSjtRQUNELE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDZCxDQUFDO0FBQ0wsQ0FBQyxFQW5PZ0IsY0FBYyxLQUFkLGNBQWMsUUFtTzlCOzs7Ozs7Ozs7Ozs7Ozs7O0FDek84QztBQUUvQyxnQkFBZ0I7QUFDVCxNQUFNLFlBQWEsU0FBUSx3REFBWTtJQWtCMUMsWUFBb0IsU0FBc0IsRUFBRSwwQkFBeUM7UUFDakYsS0FBSyxFQUFFLENBQUM7UUFEUSxjQUFTLEdBQVQsU0FBUyxDQUFhO1FBTmxDLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQUV6Qiw4QkFBeUIsR0FBRyxDQUFDLEVBQWdCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekUsOEJBQXlCLEdBQUcsQ0FBQyxFQUFnQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pFLDRCQUF1QixHQUFHLENBQUMsRUFBZ0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUt6RSxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUUxQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxTQUFTLEVBQUUsR0FBRywwQkFBMEIsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUU1Qjs7OztXQUlHO1FBQ0gsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFFcEI7Ozs7O1dBS0c7UUFDSCxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUVyQixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBRWIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFFdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdEcsQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsd0NBQXdDLEVBQUUsQ0FBQztRQUVoRCxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsVUFBVTtRQUNOLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVPLGFBQWEsQ0FBQyxNQUFvQjtRQUN0QyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQXFCLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ25GLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN2RCxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDeEM7SUFDTCxDQUFDO0lBRU8sa0JBQWtCLENBQUMsV0FBNEM7UUFDbkUsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUVqQyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMvRixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBRTdCLElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUN0QixHQUFHLEVBQUU7WUFDRCxJQUFJO2dCQUNBLElBQUksQ0FBQyxTQUFTLEVBQUU7YUFDbkI7WUFDRCxPQUFPLEdBQUcsRUFBRTtnQkFDUixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixNQUFNLEdBQUcsQ0FBQzthQUNiO1FBQ0wsQ0FBQyxFQUNDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRU8sYUFBYSxDQUFDLE1BQW9CO1FBQ3RDLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3ZCLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQzNCO0lBQ0wsQ0FBQztJQUVPLGVBQWUsQ0FBQyxTQUF1QjtRQUMzQyxJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM5QyxJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUU5QyxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSyxFQUFFO1lBQzFCLElBQ0ksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVU7Z0JBQ3BDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQ3RDO2dCQUNFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNwQjtTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNwRDtJQUNMLENBQUM7SUFFTyxXQUFXLENBQUMsTUFBb0I7UUFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU8sZUFBZSxDQUFDLFNBQXdCOztRQUM1QyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQzdCLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7U0FDN0I7UUFFRCxJQUFJLENBQUMsd0NBQXdDLEVBQUUsQ0FBQztRQUVoRCxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sOEJBQWlDLENBQUM7WUFDOUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSw4QkFBaUMsQ0FBQztZQUNqRSxVQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsMENBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqRixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNwQztJQUNMLENBQUM7SUFFTyx3Q0FBd0M7UUFDNUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDbkYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFDL0UsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztTQUNqQztJQUNMLENBQUM7SUFFTyxTQUFTOztRQUNiLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDN0IsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztTQUM3QjtRQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsOEJBQWlDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyw4QkFBaUMsQ0FBQztRQUM5RCxVQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsMENBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNyRixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRU8scUJBQXFCLENBQUMsS0FBbUI7UUFDN0MsTUFBTSxNQUFNLEdBQW9DO1lBQzVDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSztZQUNkLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSztTQUNqQixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztDQUVKOzs7Ozs7Ozs7Ozs7Ozs7QUNyS0Q7Ozs7R0FJRztBQUNJLE1BQU0sWUFBWTtJQUF6QjtRQUNJLGdCQUFnQjtRQUNSLDJCQUFzQixHQUFtQyxFQUFFLENBQUM7UUFDcEUsZ0JBQWdCO1FBQ1Isc0JBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQTBDLENBQUM7UUFxRTlFOztXQUVHO1FBQ0gsV0FBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztRQUVsQzs7V0FFRztRQUNILFlBQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBc0V4QixDQUFDO0lBakpHLDZEQUE2RDtJQUM3RCxjQUFjLENBQUMsSUFBWSxFQUFFLElBQWU7UUFDeEMsNEJBQTRCO0lBQ2hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILElBQUksQ0FBOEMsU0FBWSxFQUFFLEdBQUcsSUFBb0M7UUFDbkcsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV6RCxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFDNUIsWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNwQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDMUMsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQzthQUN6QjtTQUNKO1FBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELGdCQUFnQjtJQUNoQixXQUFXLENBQUMsU0FBaUIsRUFBRSxHQUFHLElBQWdDO1FBQzlELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFakQsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3BCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO2FBQ3BCO1NBQ0o7UUFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLHFCQUFxQixDQUE4QyxTQUFZO1FBQzNFLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBWSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELGdCQUFnQjtJQUNoQix3QkFBd0IsQ0FBQyxTQUFpQjtRQUN0QyxNQUFNLEtBQUssR0FBRyxJQUFJLFlBQVksQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsbUJBQW1CLENBQThDLFNBQVksRUFBRSxRQUFrQztRQUM3RyxNQUFNLGVBQWUsR0FBRyxRQUF3QyxDQUFDO1FBQ2pFLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELEdBQUcsQ0FBOEMsU0FBWSxFQUFFLFFBQWtDO1FBQzdGLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQVlEOzs7OztPQUtHO0lBQ0gsZ0JBQWdCLENBQThDLFNBQVksRUFBRSxRQUFrQztRQUMxRyxNQUFNLGVBQWUsR0FBRyxRQUF3QyxDQUFDO1FBQ2pFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELEVBQUUsQ0FBOEMsU0FBWSxFQUFFLFFBQWtDO1FBQzVGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELGdCQUFnQjtJQUNSLHVCQUF1QixDQUFDLFNBQWlCLEVBQUUsUUFBc0M7UUFDckYsSUFBSSxTQUFTLEtBQUssWUFBWSxDQUFDLFNBQVMsRUFBRTtZQUN0QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzlDO2FBQU07WUFDSCxJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtnQkFDN0IsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNoQztpQkFBTTtnQkFDSCxhQUFhLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7YUFDeEQ7U0FDSjtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDUiwwQkFBMEIsQ0FBQyxTQUFpQixFQUFFLFFBQXNDO1FBQ3hGLElBQUksU0FBUyxLQUFLLFlBQVksQ0FBQyxTQUFTLEVBQUU7WUFDdEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDN0U7YUFBTTtZQUNILE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDNUQsSUFBSSxhQUFhLEtBQUssU0FBUyxFQUFFO2dCQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxHQUFHLFNBQVMsQ0FBQyxDQUFDO2FBQzdFO2lCQUFNO2dCQUNILElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQy9EO1NBQ0o7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1Isa0JBQWtCLENBQUMsU0FBaUIsRUFBRSxhQUE2QyxFQUFFLFFBQXNDO1FBQy9ILE1BQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsR0FBRyxTQUFTLENBQUMsQ0FBQztTQUN6RDthQUFNO1lBQ0gsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDaEM7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ1IsWUFBWSxDQUFDLFNBQWlCLEVBQUUsSUFBZTtRQUNuRCxNQUFNLDBCQUEwQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUM7UUFDdEUsSUFBSSwwQkFBMEIsR0FBRyxDQUFDLEVBQUU7WUFDaEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBZ0MsQ0FBQztZQUMvRCxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRS9CLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxDQUFDO1lBRWpFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRywwQkFBMEIsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDakQsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQzthQUMzQztTQUNKO0lBQ0wsQ0FBQztDQUNKO0FBRUQsY0FBYztBQUNkLFdBQWlCLFlBQVk7SUFDekI7O09BRUc7SUFDVSxzQkFBUyxHQUFHLE9BQU8sQ0FBQztJQUVwQixpQ0FBb0IsR0FBRyxrQkFBa0IsQ0FBQztJQUMxQyxzQ0FBeUIsR0FBRyx1QkFBdUIsQ0FBQztJQTBEakUsTUFBYSxhQUFhO1FBVXRCLGdCQUFnQjtRQUNoQjtRQUNJLGdCQUFnQjtRQUNDLEtBQWE7UUFDOUIsZ0JBQWdCO1FBQ0MsT0FBcUI7WUFGckIsVUFBSyxHQUFMLEtBQUssQ0FBUTtZQUViLFlBQU8sR0FBUCxPQUFPLENBQWM7WUFkMUMsZ0JBQWdCO1lBQ1IsMEJBQXFCLEdBQUcsS0FBSyxDQUFDO1FBY3RDLENBQUM7UUFaRCxJQUFJLElBQUksS0FBYSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksTUFBTSxLQUFtQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ25ELDRGQUE0RjtRQUM1RixJQUFJLE1BQU0sS0FBbUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLG9CQUFvQixLQUFjLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQVUxRSxlQUFlO1lBQ1gsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQztRQUN0QyxDQUFDO0tBQ0o7SUFyQlksMEJBQWEsZ0JBcUJ6QjtJQUVELE1BQWEsa0JBQW1CLFNBQVEsYUFBYTtRQUdqRCxnQkFBZ0I7UUFDaEIsWUFBWSxJQUFZLEVBQUUsTUFBb0I7UUFDMUMsZ0JBQWdCO1FBQ0MsV0FBdUI7WUFFeEMsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztZQUZILGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBRzVDLENBQUM7UUFSRCxJQUFJLFVBQVUsS0FBaUIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztLQVM1RDtJQVZZLCtCQUFrQixxQkFVOUI7SUFFRCxNQUFhLHVCQUF3QixTQUFRLGFBQWE7UUFHdEQsZ0JBQWdCO1FBQ2hCLFlBQVksSUFBWSxFQUFFLE1BQW9CO1FBQzFDLGdCQUFnQjtRQUNDLFdBQXVCO1lBRXhDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFGSCxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUc1QyxDQUFDO1FBUkQsSUFBSSxVQUFVLEtBQWlCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7S0FTNUQ7SUFWWSxvQ0FBdUIsMEJBVW5DO0FBQ0wsQ0FBQyxFQS9HZ0IsWUFBWSxLQUFaLFlBQVksUUErRzVCOzs7Ozs7Ozs7Ozs7Ozs7OztBQ2xSOEQ7QUFFaEI7QUFVL0M7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFDSSxNQUFNLFFBQVMsU0FBUSx3REFBWTtJQUt0Qzs7OztPQUlHO0lBQ0g7SUFDSSxnQkFBZ0I7SUFDUixjQUE2QjtRQUVyQyxLQUFLLEVBQUUsQ0FBQztRQUZBLG1CQUFjLEdBQWQsY0FBYyxDQUFlO1FBVnpDLGdCQUFnQjtRQUNSLHdCQUFtQixHQUFHLENBQUMsVUFBa0QsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBWXBILFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3RHLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDTSxJQUFJLENBQThDLFNBQVksRUFBRSxHQUFHLElBQW9DO1FBQzVHLElBQUksU0FBUyxLQUFLLGVBQWUsRUFBRTtZQUMvQixtRUFBbUU7WUFDbkUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDbkM7YUFBTTtZQUNILEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDbEM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsaUJBQWlCLENBQUMsR0FBRyxJQUFnQztRQUNqRCw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsT0FBTztRQUNILFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFFRDs7O09BR0c7SUFDSyx3QkFBd0IsQ0FBQyxTQUFpQixFQUFFLElBQWU7UUFDL0QsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRTtZQUNqQyxzRUFBc0U7WUFDdEUsK0JBQStCO1lBQy9CLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDM0M7YUFBTTtZQUNILGdFQUFnRTtZQUNoRSxJQUFJLENBQUMseUJBQXlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ25EO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNLLGdCQUFnQixDQUFDLEtBQTZDO1FBQ2xFLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDNUIsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssaUJBQWlCLENBQUMsU0FBaUIsRUFBRSxJQUFlO1FBQ3hELE1BQU0sTUFBTSxHQUE4QjtZQUN0QyxhQUFhLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbEMsU0FBUztZQUNULElBQUksRUFBRSxJQUFJO1NBQ2I7UUFFRCxNQUFNLFNBQVMsR0FBNEI7WUFDdkMsT0FBTyxFQUFFLElBQUk7WUFDYixVQUFVLEVBQUUsSUFBSTtZQUNoQixNQUFNO1NBQ1QsQ0FBQztRQUVGLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBVyxDQUE0QixRQUFRLENBQUMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzdGLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFDakMsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ2pCLE1BQU0sSUFBSSx1RUFBbUIsQ0FBQyxZQUFZLENBQUM7U0FDOUM7UUFFRCxNQUFNLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7O09BR0c7SUFDSyx5QkFBeUIsQ0FBQyxTQUFpQixFQUFFLElBQWU7UUFDaEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNyQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBRW5FLElBQUksT0FBTyxFQUFFO2dCQUNULE9BQU8sQ0FBQyxRQUFRLENBQUMseUJBQXlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQy9EO1NBQ0o7SUFDTCxDQUFDO0NBQ0o7QUFFRCxjQUFjO0FBQ2QsV0FBaUIsUUFBUTtJQUVyQixnQkFBZ0I7SUFDSCx1QkFBYyxHQUFHLGdCQUFnQixDQUFDO0FBV25ELENBQUMsRUFkZ0IsUUFBUSxLQUFSLFFBQVEsUUFjeEI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbEtzRDtBQWF2RCxjQUFjO0FBQ1AsSUFBVSxXQUFXLENBOEQzQjtBQTlERCxXQUFpQixXQUFXO0lBQ3hCLGdCQUFnQjtJQUNoQixJQUFJLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFXeEIsZ0JBQWdCO0lBQ2hCLE1BQU0sV0FBVyxHQUFnQjtRQUM3Qix5Q0FBeUMsRUFBRTtZQUN2QyxFQUFFLG1EQUF3RDtZQUMxRCxPQUFPLEVBQUUsaURBQWlEO1NBQzdEO1FBQ0Qsa0NBQWtDLEVBQUU7WUFDaEMsRUFBRSw0Q0FBaUQ7WUFDbkQsT0FBTyxFQUFFLHdDQUF3QztTQUNwRDtRQUNELGlFQUFpRSxFQUFFO1lBQy9ELEVBQUUsMkVBQWdGO1lBQ2xGLE9BQU8sRUFBRSwyRUFBMkU7U0FDdkY7UUFDRCw0QkFBNEIsRUFBRTtZQUMxQixFQUFFLHNDQUEyQztZQUM3QyxPQUFPLEVBQUUsaUNBQWlDO1NBQzdDO1FBQ0QsdUJBQXVCLEVBQUU7WUFDckIsRUFBRSxpQ0FBc0M7WUFDeEMsT0FBTyxFQUFFLG1FQUFtRTtTQUMvRTtRQUNELDBDQUEwQyxFQUFFO1lBQ3hDLEVBQUUsb0RBQXlEO1lBQzNELE9BQU8sRUFBRSwwREFBMEQ7U0FDdEU7UUFDRCw0QkFBNEIsRUFBRTtZQUMxQixFQUFFLHNDQUEyQztZQUM3QyxPQUFPLEVBQUUscUNBQXFDO1NBQ2pEO0tBQ0o7SUFFWSxtQkFBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3ZELGdCQUFnQjtJQUNoQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXpDLFNBQWdCLGVBQWU7UUFDM0IsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNkLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxtQkFBTyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUM5QixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLElBQUksSUFBSSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUU7b0JBQ2YsTUFBTSxJQUFJLCtEQUFXLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUMxRDtxQkFBTTtvQkFDSCxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztpQkFDakM7YUFDSjtTQUNKO1FBQ0QsV0FBVyxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0lBWmUsMkJBQWUsa0JBWTlCO0FBQ0wsQ0FBQyxFQTlEZ0IsV0FBVyxLQUFYLFdBQVcsUUE4RDNCO0FBRUQsY0FBYztBQUNQLE1BQU0sV0FBVyxHQUFHLElBQUksS0FBSyxDQUFTLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM5RXpCO0FBUXpDLGdCQUFnQjtBQUNULFNBQVMsZUFBZSxDQUFDLE9BQW9CO0lBQ2hELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQzdDLE9BQU87UUFDSCxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVM7UUFDdkMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVO0tBQzdDO0FBQ0wsQ0FBQztBQUVELGdCQUFnQjtBQUNULFNBQVMsbUJBQW1CLENBQUMsT0FBb0I7SUFDcEQsTUFBTSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlDLE1BQU0sVUFBVSxHQUFlO1FBQzNCLElBQUksRUFBRSxzREFBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDaEMsR0FBRyxFQUFFLHNEQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztLQUNqQztJQUNELE9BQU8sVUFBVSxDQUFDO0FBQ3RCLENBQUM7Ozs7Ozs7Ozs7Ozs7OztBQzFCRCxjQUFjO0FBQ1AsSUFBVSxjQUFjLENBSTlCO0FBSkQsV0FBaUIsY0FBYztJQUNkLHlDQUEwQixHQUFHLE1BQU0sQ0FBQztJQUNwQyx5Q0FBMEIsR0FBRyxJQUFJLENBQUM7SUFDbEMsbURBQW9DLEdBQUcsSUFBSSxDQUFDO0FBQzdELENBQUMsRUFKZ0IsY0FBYyxLQUFkLGNBQWMsUUFJOUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDRkQsZ0JBQWdCO0FBQ1QsSUFBVSx5QkFBeUIsQ0FHekM7QUFIRCxXQUFpQix5QkFBeUI7SUFDekIsK0JBQUssR0FBRyxPQUFPLENBQUM7SUFDaEIsZ0NBQU0sR0FBRyxRQUFRLENBQUM7QUFDbkMsQ0FBQyxFQUhnQix5QkFBeUIsS0FBekIseUJBQXlCLFFBR3pDO0FBZ0JELGNBQWM7QUFDUCxJQUFVLElBQUksQ0FLcEI7QUFMRCxXQUFpQixJQUFJO0lBQ0osUUFBRyxHQUFHLEtBQUssQ0FBQztJQUNaLFNBQUksR0FBRyxNQUFNLENBQUM7SUFDZCxVQUFLLEdBQUcsT0FBTyxDQUFDO0lBQ2hCLFdBQU0sR0FBRyxRQUFRLENBQUM7QUFDbkMsQ0FBQyxFQUxnQixJQUFJLEtBQUosSUFBSSxRQUtwQjtBQUlELGNBQWM7QUFDUCxJQUFVLGFBQWEsQ0FJN0I7QUFKRCxXQUFpQixhQUFhO0lBQ2Isa0JBQUksR0FBRyxNQUFNLENBQUM7SUFDZCxrQkFBSSxHQUFHLE1BQU0sQ0FBQztJQUNkLDRCQUFjLEdBQUcsZ0JBQWdCLENBQUM7QUFDbkQsQ0FBQyxFQUpnQixhQUFhLEtBQWIsYUFBYSxRQUk3QjtBQTJCRCxjQUFjO0FBQ1AsSUFBVSxTQUFTLENBU3pCO0FBVEQsV0FBaUIsU0FBUztJQUN0QixTQUFnQixNQUFNLENBQUMsS0FBZ0I7UUFDbkMsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUZlLGdCQUFNLFNBRXJCO0lBRUQsd0RBQXdEO0lBQ3hELFNBQWdCLFlBQVksQ0FBQyxLQUFnQjtRQUN6QyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztJQUNoRixDQUFDO0lBRmUsc0JBQVksZUFFM0I7QUFDTCxDQUFDLEVBVGdCLFNBQVMsS0FBVCxTQUFTLFFBU3pCO0FBS0QsY0FBYztBQUNQLElBQVUsUUFBUSxDQU14QjtBQU5ELFdBQWlCLFFBQVE7SUFDUixlQUFNLEdBQUcsUUFBUSxDQUFDO0lBQ2xCLFlBQUcsR0FBRyxLQUFLLENBQUM7SUFDWixlQUFNLEdBQUcsUUFBUSxDQUFDO0lBQ2xCLGNBQUssR0FBRyxPQUFPLENBQUM7SUFDaEIsa0JBQVMsR0FBRyxXQUFXLENBQUM7QUFDekMsQ0FBQyxFQU5nQixRQUFRLEtBQVIsUUFBUSxRQU14QjtBQUlELGNBQWM7QUFDUCxJQUFVLGNBQWMsQ0FJOUI7QUFKRCxXQUFpQixjQUFjO0lBQ2QsbUJBQUksR0FBRyxNQUFNLENBQUM7SUFDZCxxQkFBTSxHQUFHLFFBQVEsQ0FBQztJQUNsQixxQkFBTSxHQUFHLFFBQVEsQ0FBQztBQUNuQyxDQUFDLEVBSmdCLGNBQWMsS0FBZCxjQUFjLFFBSTlCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUZELGdCQUFnQjtBQUNULFNBQVMsY0FBYyxDQUFDLEtBQWE7SUFDeEMsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNyQyxDQUFDO0FBRUQsZ0JBQWdCO0FBQ1QsU0FBUyxjQUFjLENBQUMsS0FBYTtJQUN4QyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMxQyxPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRUQsZ0JBQWdCO0FBQ1QsU0FBUyxlQUFlLENBQUMsT0FBb0I7SUFDaEQsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQy9CLENBQUM7QUFFRCxnQkFBZ0I7QUFDVCxTQUFTLGVBQWUsQ0FBQyxPQUFvQixFQUFFLEtBQWE7SUFDL0QsTUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQztBQUN4QyxDQUFDO0FBRUQsZ0JBQWdCO0FBQ1QsU0FBUyxnQkFBZ0IsQ0FBQyxPQUFvQjtJQUNqRCxPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDaEMsQ0FBQztBQUVELGdCQUFnQjtBQUNULFNBQVMsZ0JBQWdCLENBQUMsT0FBb0IsRUFBRSxNQUFjO0lBQ2pFLE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxjQUFjLENBQUM7QUFDMUMsQ0FBQztBQUVELGdCQUFnQjtBQUNULFNBQVMsd0JBQXdCLENBQUMsT0FBb0I7SUFDekQsT0FBTztRQUNILEtBQUssRUFBRSxPQUFPLENBQUMsV0FBVztRQUMxQixNQUFNLEVBQUUsT0FBTyxDQUFDLFlBQVk7S0FDL0IsQ0FBQztBQUNOLENBQUM7QUFFRCxnQkFBZ0I7QUFDVCxTQUFTLDJCQUEyQixDQUFDLE9BQW9CLEVBQUUsT0FBZ0I7SUFDOUUsSUFBSSxPQUFPLEVBQUU7UUFDVCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7S0FDOUI7U0FBTTtRQUNILE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztLQUNsQztBQUNMLENBQUM7QUFFRCxnQkFBZ0I7QUFDVCxTQUFTLDZCQUE2QixDQUFDLE9BQW9CO0lBQzlELE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDO0lBQ3BDLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssZ0JBQWdCLEVBQUU7UUFDN0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7S0FDN0M7QUFDTCxDQUFDO0FBRUQ7OztFQUdFO0FBQ0ssU0FBUyxNQUFNLENBQUMsTUFBK0IsRUFBRSxHQUE0QjtJQUNoRixLQUFLLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBRTtRQUNuQixJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDekIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtLQUNKO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVEOzs7RUFHRTtBQUNLLFNBQVMsVUFBVSxDQUFDLE1BQStCLEVBQUUsR0FBd0M7SUFDaEcsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1FBQ25CLEtBQUssTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFO1lBQ25CLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDekIsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN2QixNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ25DLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxlQUFlLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ3hEO1NBQ0o7S0FDSjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxnQkFBZ0I7QUFDVCxTQUFTLGVBQWUsQ0FBQyxjQUF1QixFQUFFLEtBQWM7SUFDbkUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDM0IsT0FBTyxLQUFLLENBQUM7S0FDaEI7U0FBTTtRQUNILElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQzVCLE1BQU0sV0FBVyxHQUFHLElBQUksS0FBSyxDQUFVLE1BQU0sQ0FBQyxDQUFDO1lBQy9DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzdCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDekIsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDakQ7WUFDRCxPQUFPLFdBQVcsQ0FBQztTQUN0QjthQUFNO1lBQ0gsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO2dCQUNoQixPQUFPLElBQUksQ0FBQzthQUNmO2lCQUFNO2dCQUNILE1BQU0sUUFBUSxHQUFHLEtBQWdDLENBQUM7Z0JBQ2xELElBQUksY0FBYyxLQUFLLFNBQVMsRUFBRTtvQkFDOUIsT0FBTyxVQUFVLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWTtpQkFDaEQ7cUJBQU07b0JBQ0gsSUFBSSxPQUFPLGNBQWMsS0FBSyxRQUFRLEVBQUU7d0JBQ3BDLE9BQU8sVUFBVSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVk7cUJBQ2hEO3lCQUFNO3dCQUNILElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFBRTs0QkFDL0IsT0FBTyxVQUFVLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsWUFBWTt5QkFDaEQ7NkJBQU07NEJBQ0gsSUFBSSxjQUFjLEtBQUssSUFBSSxFQUFFO2dDQUN6QixPQUFPLFVBQVUsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZOzZCQUNoRDtpQ0FBTTtnQ0FDSCxNQUFNLGlCQUFpQixHQUFHLGNBQXlDLENBQUM7Z0NBQ3BFLE9BQU8sVUFBVSxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUTs2QkFDM0Q7eUJBQ0o7cUJBQ0o7aUJBQ0o7YUFDSjtTQUNKO0tBQ0o7QUFDTCxDQUFDO0FBRUQsZ0JBQWdCO0FBQ1QsU0FBUyxlQUFlLENBQUksSUFBTyxFQUFFLEtBQVU7SUFDbEQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVsQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztLQUM5RTtJQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFFRCxnQkFBZ0I7QUFDVCxTQUFTLFdBQVc7SUFDdkIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQztTQUNwQyxRQUFRLENBQUMsRUFBRSxDQUFDO1NBQ1osT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwSjhDO0FBQzBFO0FBRXJFO0FBQ2U7QUFDbEI7QUFFZ0I7QUFFakUsY0FBYztBQUNQLE1BQU0sYUFBYyxTQUFRLDBEQUFhO0lBK0I1QyxnQkFBZ0I7SUFDaEIsWUFBWSx5QkFBaUUsRUFDekUsb0NBQTRGLEVBQzVGLDJCQUF1RTtRQUV2RSxLQUFLLENBQUMsYUFBYSxDQUFDLHdDQUF3QyxDQUFDLHlCQUF5QixFQUFFLG9DQUFvQyxDQUFDLENBQUMsQ0FBQztRQW5DbkksZ0JBQWdCO1FBQ1IsdUJBQWtCLEdBQUcsS0FBSyxDQUFDO1FBQ25DLGdCQUFnQjtRQUNSLDJCQUFzQixHQUFHLEtBQUssQ0FBQztRQWtDbkMsd0RBQXdEO1FBQ3hELElBQUksb0NBQW9DLEtBQUssU0FBUyxFQUFFO1lBQ3BELElBQUksT0FBTyxvQ0FBb0MsS0FBSyxVQUFVLEVBQUU7Z0JBQzVELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxvQ0FBb0MsQ0FBQztnQkFFL0QsSUFBSSwyQkFBMkIsS0FBSyxTQUFTLEVBQUU7b0JBQzNDLElBQUksQ0FBQyxvQkFBb0IsR0FBRywyQkFBMkIsQ0FBQztpQkFDM0Q7YUFDSjtTQUNKO1FBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2xCLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7U0FDN0M7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQzFELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNmO0lBQ0wsQ0FBQztJQUVRLE9BQU87UUFDWixJQUFJLENBQUMsa0JBQWtCLEdBQUcsU0FBUyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxTQUFTLENBQUM7UUFFdEMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFHRDs7Ozs7Ozs7OztPQVVHO0lBQ00sSUFBSTtRQUNUOzs7O1dBSUc7UUFDSCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxLQUFLLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztTQUNsQztRQUdEOztXQUVHO1FBQ0gsSUFBSSxRQUFRLENBQUMsVUFBVSxLQUFLLFNBQVMsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtZQUM3RCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDcEYsT0FBTztTQUNWO1FBRUQ7Ozs7V0FJRztRQUNILElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLHNCQUFzQixLQUFLLEtBQUssRUFBRTtZQUNwRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUM7WUFDbkMsT0FBTztTQUNWO1FBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksRUFBRTtZQUMzQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUM3QjtRQUVELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBR0QsZ0JBQWdCO0lBQ1AsYUFBYSxDQUFDLFNBQTZCLEVBQUUsVUFBdUM7UUFDekYsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEtBQUssU0FBUyxFQUFFO1lBQ3ZDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUN6RSxPQUFPLGlCQUFpQixDQUFDO1NBQzVCO2FBQU07WUFDSCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7Z0JBQ3RDLE9BQU87b0JBQ0gsT0FBTyxFQUFFLEtBQUs7b0JBQ2QsU0FBUyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDO2lCQUMzRDthQUNKO2lCQUFNO2dCQUNILGlHQUFpRztnQkFDakcsd0dBQXdHO2dCQUN4RyxNQUFNLElBQUksR0FBRywrREFBMkYsQ0FBQztnQkFDekcsTUFBTSxPQUFPLEdBQUcsR0FBRyxJQUFJLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDeEQsTUFBTSxJQUFJLDZEQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDaEM7U0FDSjtJQUNMLENBQUM7SUFFRCxnQkFBZ0I7SUFDUCxlQUFlLENBQUMsU0FBNkIsRUFBRSxPQUFnQixFQUFFLFNBQW1EO1FBQ3pILElBQUksT0FBTyxFQUFFO1lBQ1QsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEtBQUssU0FBUyxFQUFFO2dCQUN6QyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDeEM7U0FDSjthQUFNO1lBQ0gsSUFBSSxJQUFJLENBQUMscUJBQXFCLEtBQUssU0FBUyxFQUFFO2dCQUMxQyxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7b0JBQ3pCLE1BQU0sSUFBSSw0RUFBd0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztpQkFDdkQ7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztpQkFDcEQ7YUFDSjtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxnQkFBZ0I7UUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzRCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RCxJQUFJLENBQUMsa0NBQWtDLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDekQ7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGtCQUFrQjtRQUN0QixNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRWxDLE1BQU0sZUFBZSxHQUFHLElBQUksS0FBSyxDQUFzQixDQUFDLENBQUMsQ0FBQztRQUMxRCxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVELGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDN0QsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzRCxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTNELEtBQUssSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFLE9BQU8sR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFO1lBQy9ELE1BQU0sY0FBYyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRCxLQUFLLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRSxPQUFPLEdBQUcsY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRTtnQkFDOUQsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNyQyxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pDO1NBQ0o7UUFFRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ2xDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQzNCLFdBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFO1lBQzFDLE1BQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6RCxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsR0FBRyx3QkFBOEIsQ0FBQztZQUMvRCxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hFLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLHNCQUE2QixDQUFDO1lBQ3ZELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEQsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLGtCQUEyQixDQUFDO1lBQ25ELGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM1QyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDMUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN2RSxXQUFXLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDL0M7UUFFRDs7O1VBR0U7UUFDRiw2REFBNkQ7UUFDN0QsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFFckM7Ozs7VUFJRTtRQUNGLE1BQU0sQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQy9CLENBQUM7Q0FDSjtBQUVELGNBQWM7QUFDZCxXQUFpQixhQUFhO0lBcUIxQjs7O09BR0c7SUFDSCxJQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQztJQUU3QixnQkFBZ0I7SUFDaEIsU0FBZ0Isd0NBQXdDLENBQUMseUJBQWlFLEVBQ3RILG9DQUE2RjtRQUc3RixNQUFNLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEgsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLE1BQU0sV0FBVyxHQUFHLGVBQWUsS0FBSyxJQUFJLENBQUM7UUFFN0MsSUFBSSxnQkFBeUMsQ0FBQztRQUM5QyxJQUFJLE1BQXdDLENBQUM7UUFDN0MsSUFBSSxlQUFlLEtBQUssSUFBSSxFQUFFO1lBQzFCLE1BQU0sZUFBZSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDOUQsSUFBSSxlQUFlLEtBQUssSUFBSSxFQUFFO2dCQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7YUFDNUM7WUFDRCxZQUFZLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQStCLENBQUM7WUFDdkYsTUFBTSxHQUFHLHdGQUFtQyxDQUFDLG9CQUFvQixDQUFDLENBQUM7U0FDdEU7YUFBTTtZQUNILElBQUkseUJBQXlCLEtBQUssU0FBUyxFQUFFO2dCQUN6QyxNQUFNLEdBQUcsU0FBUyxDQUFDO2FBQ3RCO2lCQUFNO2dCQUNILElBQUkseUJBQXlCLFlBQVksV0FBVyxFQUFFO29CQUNsRCxNQUFNLEdBQUcsU0FBUyxDQUFDO29CQUNuQixnQkFBZ0IsR0FBRyx5QkFBeUIsQ0FBQztpQkFDaEQ7cUJBQU07b0JBQ0gsSUFBSSxtRUFBdUIsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFO3dCQUNwRCxNQUFNLEdBQUcseUJBQWlELENBQUM7cUJBQzlEO3lCQUFNO3dCQUNILE1BQU0sR0FBRyxnRUFBb0IsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO3FCQUM1RDtpQkFDSjthQUNKO1lBRUQsSUFBSSxnQkFBZ0IsS0FBSyxTQUFTLEVBQUU7Z0JBQ2hDLElBQUksb0NBQW9DLFlBQVksV0FBVyxFQUFFO29CQUM3RCxnQkFBZ0IsR0FBRyxvQ0FBb0MsQ0FBQztpQkFDM0Q7YUFDSjtTQUNKO1FBRUQsT0FBTztZQUNILFlBQVksRUFBRSxNQUFNO1lBQ3BCLFdBQVc7WUFDWCxnQkFBZ0I7U0FDbkIsQ0FBQztJQUNOLENBQUM7SUE5Q2Usc0RBQXdDLDJDQThDdkQ7QUFDTCxDQUFDLEVBM0VnQixhQUFhLEtBQWIsYUFBYSxRQTJFN0I7Ozs7Ozs7U0NuVEQ7U0FDQTs7U0FFQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTs7U0FFQTtTQUNBOztTQUVBO1NBQ0E7U0FDQTs7Ozs7VUN0QkE7VUFDQTtVQUNBO1VBQ0E7VUFDQSx3Q0FBd0MseUNBQXlDO1VBQ2pGO1VBQ0E7VUFDQSxFOzs7OztVQ1BBLHdGOzs7OztVQ0FBO1VBQ0E7VUFDQTtVQUNBLHNEQUFzRCxrQkFBa0I7VUFDeEU7VUFDQSwrQ0FBK0MsY0FBYztVQUM3RCxFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNObUM7QUFDUztBQUM0QjtBQUNYO0FBQ047QUFDVDtBQUNOO0FBQ0c7QUFDTztBQUNRO0FBQ0o7QUFDQztBQUNkO0FBQ1c7QUFDSTtBQUNSO0FBQ1I7QUFDb0I7QUFDM0I7QUFDbUIiLCJmaWxlIjoiLi9idW5kbGUvZXNtL2dvbGRlbi1sYXlvdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25maWd1cmF0aW9uRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZXh0ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBBc3NlcnRFcnJvciwgVW5yZWFjaGFibGVDYXNlRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBJdGVtVHlwZSwgSnNvblZhbHVlLCBSZXNwb25zaXZlTW9kZSwgU2lkZSB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcclxuaW1wb3J0IHtcclxuICAgIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyxcclxuICAgIFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLFxyXG4gICAgUmVzb2x2ZWRJdGVtQ29uZmlnLFxyXG4gICAgUmVzb2x2ZWRMYXlvdXRDb25maWcsXHJcbiAgICBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZyxcclxuICAgIFJlc29sdmVkUm9vdEl0ZW1Db25maWcsXHJcbiAgICBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyxcclxuICAgIFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnXHJcbn0gZnJvbSBcIi4vcmVzb2x2ZWQtY29uZmlnXCI7XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEl0ZW1Db25maWcge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgaXRlbS4gUG9zc2libGUgdmFsdWVzIGFyZSAncm93JywgJ2NvbHVtbicsICdzdGFjaycsICdjb21wb25lbnQnLlxyXG4gICAgICovXHJcbiAgICB0eXBlOiBJdGVtVHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGFycmF5IG9mIGNvbmZpZ3VyYXRpb25zIGZvciBpdGVtcyB0aGF0IHdpbGwgYmUgY3JlYXRlZCBhcyBjaGlsZHJlbiBvZiB0aGlzIGl0ZW0uXHJcbiAgICAgKi9cclxuICAgIGNvbnRlbnQ/OiBJdGVtQ29uZmlnW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgd2lkdGggb2YgdGhpcyBpdGVtLCByZWxhdGl2ZSB0byB0aGUgb3RoZXIgY2hpbGRyZW4gb2YgaXRzIHBhcmVudCBpbiBwZXJjZW50XHJcbiAgICAgKi9cclxuICAgIHdpZHRoPzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1pbmltdW0gd2lkdGggb2YgdGhpcyBpdGVtIGluIHBpeGVsc1xyXG4gICAgICogQ0FVVElPTiAtIE5vdCB0ZXN0ZWQgLSBkbyBub3QgdXNlXHJcbiAgICAgKi9cclxuICAgIG1pbldpZHRoPzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGhlaWdodCBvZiB0aGlzIGl0ZW0sIHJlbGF0aXZlIHRvIHRoZSBvdGhlciBjaGlsZHJlbiBvZiBpdHMgcGFyZW50IGluIHBlcmNlbnRcclxuICAgICAqL1xyXG4gICAgaGVpZ2h0PzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1pbmltdW0gaGVpZ2h0IG9mIHRoaXMgaXRlbSBpbiBwaXhlbHNcclxuICAgICAqIENBVVRJT04gLSBOb3QgdGVzdGVkIC0gZG8gbm90IHVzZVxyXG4gICAgICovXHJcbiAgICBtaW5IZWlnaHQ/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIHN0cmluZyB0aGF0IGNhbiBiZSB1c2VkIHRvIGlkZW50aWZ5IGEgQ29udGVudEl0ZW0uXHJcbiAgICAgKiBEbyBOT1QgYXNzaWduIGFuIGFycmF5LiAgVGhpcyBvbmx5IGV4aXN0cyBmb3IgbGVnYWN5IHB1cnBvc2VzLiAgSWYgYW4gYXJyYXkgaXMgYXNzaWduZWQsIHRoZSBmaXJzdCBlbGVtZW50XHJcbiAgICAgKiB3aWxsIGJlY29tZSB0aGUgaWQuXHJcbiAgICAgKi9cclxuICAgIGlkPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgaXRlbSBpcyBjbG9zYWJsZS4gSWYgZmFsc2UsIHRoZSB4IG9uIHRoZSBpdGVtcyB0YWIgd2lsbCBiZSBoaWRkZW4gYW5kIGNvbnRhaW5lci5jbG9zZSgpXHJcbiAgICAgKiB3aWxsIHJldHVybiBmYWxzZVxyXG4gICAgICogRGVmYXVsdDogdHJ1ZVxyXG4gICAgICovXHJcbiAgICBpc0Nsb3NhYmxlPzogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSB0aXRsZSBvZiB0aGUgaXRlbSBhcyBkaXNwbGF5ZWQgb24gaXRzIHRhYiBhbmQgb24gcG9wb3V0IHdpbmRvd3NcclxuICAgICAqIERlZmF1bHQ6IGNvbXBvbmVudFR5cGUudG9TdHJpbmcoKSBvciAnJ1xyXG4gICAgICovXHJcbiAgICB0aXRsZT86IHN0cmluZztcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBJdGVtQ29uZmlnIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKGl0ZW1Db25maWc6IEl0ZW1Db25maWcpOiBSZXNvbHZlZEl0ZW1Db25maWcge1xyXG4gICAgICAgIHN3aXRjaCAoaXRlbUNvbmZpZy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuZ3JvdW5kOlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbmZpZ3VyYXRpb25FcnJvcignSXRlbUNvbmZpZyBjYW5ub3Qgc3BlY2lmeSB0eXBlIGdyb3VuZCcsIEpTT04uc3RyaW5naWZ5KGl0ZW1Db25maWcpKTtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5yb3c6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJvd09yQ29sdW1uSXRlbUNvbmZpZy5yZXNvbHZlKGl0ZW1Db25maWcgYXMgUm93T3JDb2x1bW5JdGVtQ29uZmlnKTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuc3RhY2s6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RhY2tJdGVtQ29uZmlnLnJlc29sdmUoaXRlbUNvbmZpZyBhcyBTdGFja0l0ZW1Db25maWcpO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5jb21wb25lbnQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50SXRlbUNvbmZpZy5yZXNvbHZlKGl0ZW1Db25maWcgYXMgQ29tcG9uZW50SXRlbUNvbmZpZyk7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ2FzZUVycm9yKCdVQ1VJQ1I1NTQ5OScsIGl0ZW1Db25maWcudHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQ29udGVudChjb250ZW50OiBJdGVtQ29uZmlnW10gfCB1bmRlZmluZWQpOiBSZXNvbHZlZEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY291bnQgPSBjb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFJlc29sdmVkSXRlbUNvbmZpZz4oY291bnQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IEl0ZW1Db25maWcucmVzb2x2ZShjb250ZW50W2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUlkKGlkOiBzdHJpbmcgfCBzdHJpbmdbXSB8IHVuZGVmaW5lZCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKGlkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5pZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpZCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpZC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWRbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc0dyb3VuZChjb25maWc6IEl0ZW1Db25maWcpOiBjb25maWcgaXMgSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIGNvbmZpZy50eXBlID09PSBJdGVtVHlwZS5ncm91bmQ7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNSb3coY29uZmlnOiBJdGVtQ29uZmlnKTogY29uZmlnIGlzIEl0ZW1Db25maWcge1xyXG4gICAgICAgIHJldHVybiBjb25maWcudHlwZSA9PT0gSXRlbVR5cGUucm93O1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzQ29sdW1uKGNvbmZpZzogSXRlbUNvbmZpZyk6IGNvbmZpZyBpcyBJdGVtQ29uZmlnIHtcclxuICAgICAgICByZXR1cm4gY29uZmlnLnR5cGUgPT09IEl0ZW1UeXBlLmNvbHVtbjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc1N0YWNrKGNvbmZpZzogSXRlbUNvbmZpZyk6IGNvbmZpZyBpcyBJdGVtQ29uZmlnIHtcclxuICAgICAgICByZXR1cm4gY29uZmlnLnR5cGUgPT09IEl0ZW1UeXBlLnN0YWNrO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcG9uZW50KGNvbmZpZzogSXRlbUNvbmZpZyk6IGNvbmZpZyBpcyBDb21wb25lbnRJdGVtQ29uZmlnIHtcclxuICAgICAgICByZXR1cm4gY29uZmlnLnR5cGUgPT09IEl0ZW1UeXBlLmNvbXBvbmVudDtcclxuICAgIH1cclxufVxyXG5cclxuLy8gU3RhY2sgb3IgQ29tcG9uZW50XHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSGVhZGVyZWRJdGVtQ29uZmlnIGV4dGVuZHMgSXRlbUNvbmZpZyB7XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoSGVhZGVyZWRJdGVtQ29uZmlnOm5hbWVzcGFjZSkuKEhlYWRlcjppbnRlcmZhY2UpLnNob3d9IGluc3RlYWQgKi9cclxuICAgIGhhc0hlYWRlcnM/OiBib29sZWFuO1xyXG4gICAgaGVhZGVyPzogSGVhZGVyZWRJdGVtQ29uZmlnLkhlYWRlcjtcclxuICAgIG1heGltaXNlZD86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgSGVhZGVyZWRJdGVtQ29uZmlnIHtcclxuICAgIGNvbnN0IGxlZ2FjeU1heGltaXNlZElkID0gJ19fZ2xNYXhpbWlzZWQnO1xyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSGVhZGVyIHtcclxuICAgICAgICBzaG93PzogZmFsc2UgfCBTaWRlO1xyXG4gICAgICAgIHBvcG91dD86IGZhbHNlIHwgc3RyaW5nO1xyXG4gICAgICAgIGRvY2s/OiBmYWxzZSB8IHN0cmluZztcclxuICAgICAgICBtYXhpbWlzZT86IGZhbHNlIHwgc3RyaW5nO1xyXG4gICAgICAgIGNsb3NlPzogc3RyaW5nO1xyXG4gICAgICAgIG1pbmltaXNlPzogc3RyaW5nO1xyXG4gICAgICAgIHRhYkRyb3Bkb3duPzogZmFsc2UgfCBzdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBIZWFkZXIge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKGhlYWRlcjogSGVhZGVyIHwgdW5kZWZpbmVkLCBoYXNIZWFkZXJzOiBib29sZWFuIHwgdW5kZWZpbmVkKTogUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcuSGVhZGVyIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICAgICAgaWYgKGhlYWRlciA9PT0gdW5kZWZpbmVkICYmIGhhc0hlYWRlcnMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcuSGVhZGVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGhlYWRlcj8uc2hvdyA/PyAoaGFzSGVhZGVycyA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogaGFzSGVhZGVycyA/IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlci5kZWZhdWx0cy5zaG93IDogZmFsc2UpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvcG91dDogaGVhZGVyPy5wb3BvdXQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4aW1pc2U6IGhlYWRlcj8ubWF4aW1pc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xvc2U6IGhlYWRlcj8uY2xvc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWluaW1pc2U6IGhlYWRlcj8ubWluaW1pc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFiRHJvcGRvd246IGhlYWRlcj8udGFiRHJvcGRvd24sXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlSWRBbmRNYXhpbWlzZWQoY29uZmlnOiBIZWFkZXJlZEl0ZW1Db25maWcpOiB7IGlkOiBzdHJpbmcsIG1heGltaXNlZDogYm9vbGVhbn0ge1xyXG4gICAgICAgIGxldCBpZDogc3RyaW5nO1xyXG4gICAgICAgIC8vIFRvIHN1cHBvcnQgbGVnYWN5IGNvbmZpZ3Mgd2l0aCBJZCBzYXZlZCBhcyBhbiBhcnJheSBvZiBzdHJpbmcsIGFzc2lnbiBjb25maWcuaWQgdG8gYSB0eXBlIHdoaWNoIGluY2x1ZGVzIHN0cmluZyBhcnJheVxyXG4gICAgICAgIGxldCBsZWdhY3lJZDogc3RyaW5nIHwgc3RyaW5nW10gfCB1bmRlZmluZWQgPSBjb25maWcuaWQ7XHJcbiAgICAgICAgbGV0IGxlZ2FjeU1heGltaXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChsZWdhY3lJZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlkID0gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGxlZ2FjeUlkKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaWR4ID0gbGVnYWN5SWQuZmluZEluZGV4KChpZCkgPT4gaWQgPT09IGxlZ2FjeU1heGltaXNlZElkKVxyXG4gICAgICAgICAgICAgICAgaWYgKGlkeCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZWdhY3lNYXhpbWlzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZ2FjeUlkID0gbGVnYWN5SWQuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobGVnYWN5SWQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkID0gbGVnYWN5SWRbMF07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkID0gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWQgPSBsZWdhY3lJZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1heGltaXNlZDogYm9vbGVhbjtcclxuICAgICAgICBpZiAoY29uZmlnLm1heGltaXNlZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG1heGltaXNlZCA9IGNvbmZpZy5tYXhpbWlzZWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbWF4aW1pc2VkID0gbGVnYWN5TWF4aW1pc2VkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHsgaWQsIG1heGltaXNlZCB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RhY2tJdGVtQ29uZmlnIGV4dGVuZHMgSGVhZGVyZWRJdGVtQ29uZmlnIHtcclxuICAgIHR5cGU6ICdzdGFjayc7XHJcbiAgICBjb250ZW50OiBDb21wb25lbnRJdGVtQ29uZmlnW107XHJcbiAgICAvKiogVGhlIGluZGV4IG9mIHRoZSBpdGVtIGluIGNvbnRlbnQgd2hpY2ggaXMgdG8gYmUgYWN0aXZlKi9cclxuICAgIGFjdGl2ZUl0ZW1JbmRleD86IG51bWJlcjtcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBTdGFja0l0ZW1Db25maWcge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoaXRlbUNvbmZpZzogU3RhY2tJdGVtQ29uZmlnKTogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcge1xyXG4gICAgICAgIGNvbnN0IHsgaWQsIG1heGltaXNlZCB9ID0gSGVhZGVyZWRJdGVtQ29uZmlnLnJlc29sdmVJZEFuZE1heGltaXNlZChpdGVtQ29uZmlnKTtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBJdGVtVHlwZS5zdGFjayxcclxuICAgICAgICAgICAgY29udGVudDogcmVzb2x2ZUNvbnRlbnQoaXRlbUNvbmZpZy5jb250ZW50KSxcclxuICAgICAgICAgICAgd2lkdGg6IGl0ZW1Db25maWcud2lkdGggPz8gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLndpZHRoLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogaXRlbUNvbmZpZy5taW5XaWR0aCA/PyBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMubWluV2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogaXRlbUNvbmZpZy5oZWlnaHQgPz8gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmhlaWdodCxcclxuICAgICAgICAgICAgbWluSGVpZ2h0OiBpdGVtQ29uZmlnLm1pbkhlaWdodCA/PyBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMubWluSGVpZ2h0LFxyXG4gICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgbWF4aW1pc2VkLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiBpdGVtQ29uZmlnLmlzQ2xvc2FibGUgPz8gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgICAgIGFjdGl2ZUl0ZW1JbmRleDogaXRlbUNvbmZpZy5hY3RpdmVJdGVtSW5kZXggPz8gUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcuZGVmYXVsdEFjdGl2ZUl0ZW1JbmRleCxcclxuICAgICAgICAgICAgaGVhZGVyOiBIZWFkZXJlZEl0ZW1Db25maWcuSGVhZGVyLnJlc29sdmUoaXRlbUNvbmZpZy5oZWFkZXIsIGl0ZW1Db25maWcuaGFzSGVhZGVycyksXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQ29udGVudChjb250ZW50OiBDb21wb25lbnRJdGVtQ29uZmlnW10gfCB1bmRlZmluZWQpOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY291bnQgPSBjb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZz4oY291bnQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkSXRlbUNvbmZpZyA9IGNvbnRlbnRbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtQ29uZmlnID0gSXRlbUNvbmZpZy5yZXNvbHZlKGNoaWxkSXRlbUNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIVJlc29sdmVkSXRlbUNvbmZpZy5pc0NvbXBvbmVudEl0ZW0oaXRlbUNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ1VDVVNJQ1JDOTExMTQnLCBKU09OLnN0cmluZ2lmeShpdGVtQ29uZmlnKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IGl0ZW1Db25maWc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50SXRlbUNvbmZpZyBleHRlbmRzIEhlYWRlcmVkSXRlbUNvbmZpZyB7XHJcbiAgICB0eXBlOiAnY29tcG9uZW50JztcclxuICAgIHJlYWRvbmx5IGNvbnRlbnQ/OiBbXTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGNvbXBvbmVudC5cclxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKENvbXBvbmVudEl0ZW1Db25maWc6aW50ZXJmYWNlKS5jb21wb25lbnRUeXBlfSBpbnN0ZWFkXHJcbiAgICAgKi9cclxuICAgIGNvbXBvbmVudE5hbWU/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgY29tcG9uZW50LlxyXG4gICAgICogYGNvbXBvbmVudFR5cGVgIG11c3QgYmUgb2YgdHlwZSBgc3RyaW5nYCBpZiBpdCBpcyByZWdpc3RlcmVkIHdpdGggYW55IG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOlxyXG4gICAgICogKiB7QGxpbmsgKEdvbGRlbkxheW91dDpjbGFzcykucmVnaXN0ZXJDb21wb25lbnR9IChkZXByZWNhdGVkKVxyXG4gICAgICogKiB7QGxpbmsgKEdvbGRlbkxheW91dDpjbGFzcykucmVnaXN0ZXJDb21wb25lbnRDb25zdHJ1Y3Rvcn1cclxuICAgICAqICoge0BsaW5rIChHb2xkZW5MYXlvdXQ6Y2xhc3MpLnJlZ2lzdGVyQ29tcG9uZW50RmFjdG9yeUZ1bmN0aW9ufVxyXG4gICAgICovXHJcbiAgICBjb21wb25lbnRUeXBlOiBKc29uVmFsdWU7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGF0ZSBpbmZvcm1hdGlvbiB3aXRoIHdoaWNoIGEgY29tcG9uZW50IHdpbGwgYmUgaW5pdGlhbGlzZWQgd2l0aC5cclxuICAgICAqIFdpbGwgYmUgcGFzc2VkIHRvIHRoZSBjb21wb25lbnQgY29uc3RydWN0b3IgZnVuY3Rpb24gYW5kIHdpbGwgYmUgdGhlIHZhbHVlIHJldHVybmVkIGJ5XHJcbiAgICAgKiBjb250YWluZXIuaW5pdGlhbFN0YXRlLlxyXG4gICAgICovXHJcbiAgICBjb21wb25lbnRTdGF0ZT86IEpzb25WYWx1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQ6IHRydWVcclxuICAgICAqL1xyXG4gICAgcmVvcmRlckVuYWJsZWQ/OiBib29sZWFuOyAgLy8gVGFrZXMgcHJlY2VkZW5jZSBvdmVyIExheW91dENvbmZpZy5yZW9yZGVyRW5hYmxlZC5cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBDb21wb25lbnRJdGVtQ29uZmlnIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKGl0ZW1Db25maWc6IENvbXBvbmVudEl0ZW1Db25maWcpOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcge1xyXG4gICAgICAgIGxldCBjb21wb25lbnRUeXBlOiBKc29uVmFsdWUgfCB1bmRlZmluZWQgPSBpdGVtQ29uZmlnLmNvbXBvbmVudFR5cGU7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudFR5cGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb21wb25lbnRUeXBlID0gaXRlbUNvbmZpZy5jb21wb25lbnROYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tcG9uZW50VHlwZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50SXRlbUNvbmZpZy5jb21wb25lbnRUeXBlIGlzIHVuZGVmaW5lZCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaWQsIG1heGltaXNlZCB9ID0gSGVhZGVyZWRJdGVtQ29uZmlnLnJlc29sdmVJZEFuZE1heGltaXNlZChpdGVtQ29uZmlnKTtcclxuICAgICAgICAgICAgbGV0IHRpdGxlOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIGlmIChpdGVtQ29uZmlnLnRpdGxlID09PSB1bmRlZmluZWQgfHwgaXRlbUNvbmZpZy50aXRsZSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlID0gQ29tcG9uZW50SXRlbUNvbmZpZy5jb21wb25lbnRUeXBlVG9UaXRsZShjb21wb25lbnRUeXBlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlID0gaXRlbUNvbmZpZy50aXRsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IGl0ZW1Db25maWcudHlwZSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW1Db25maWcud2lkdGggPz8gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgbWluV2lkdGg6IGl0ZW1Db25maWcubWluV2lkdGggPz8gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLm1pbldpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBpdGVtQ29uZmlnLmhlaWdodCA/PyBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgbWluSGVpZ2h0OiBpdGVtQ29uZmlnLm1pbkhlaWdodCA/PyBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMubWluSGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgICBtYXhpbWlzZWQsXHJcbiAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiBpdGVtQ29uZmlnLmlzQ2xvc2FibGUgPz8gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgICAgICAgICByZW9yZGVyRW5hYmxlZDogaXRlbUNvbmZpZy5yZW9yZGVyRW5hYmxlZCA/PyBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcuZGVmYXVsdFJlb3JkZXJFbmFibGVkLFxyXG4gICAgICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIucmVzb2x2ZShpdGVtQ29uZmlnLmhlYWRlciwgaXRlbUNvbmZpZy5oYXNIZWFkZXJzKSxcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFR5cGUsXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRTdGF0ZTogaXRlbUNvbmZpZy5jb21wb25lbnRTdGF0ZSA/PyB7fSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudFR5cGVUb1RpdGxlKGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZSk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50VHlwZVR5cGUgPSB0eXBlb2YgY29tcG9uZW50VHlwZTtcclxuICAgICAgICBzd2l0Y2ggKGNvbXBvbmVudFR5cGVUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6IHJldHVybiBjb21wb25lbnRUeXBlIGFzIHN0cmluZztcclxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzogcmV0dXJuIChjb21wb25lbnRUeXBlIGFzIG51bWJlcikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6IHJldHVybiAoY29tcG9uZW50VHlwZSBhcyBib29sZWFuKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBSb3dPckNvbHVtblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJvd09yQ29sdW1uSXRlbUNvbmZpZyBleHRlbmRzIEl0ZW1Db25maWcge1xyXG4gICAgdHlwZTogJ3JvdycgfCAnY29sdW1uJztcclxuICAgIGNvbnRlbnQ6IChSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnKVtdO1xyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJvd09yQ29sdW1uSXRlbUNvbmZpZyB7XHJcbiAgICBleHBvcnQgdHlwZSBDaGlsZEl0ZW1Db25maWcgPSBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnO1xyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc0NoaWxkSXRlbUNvbmZpZyhpdGVtQ29uZmlnOiBJdGVtQ29uZmlnKTogaXRlbUNvbmZpZyBpcyBDaGlsZEl0ZW1Db25maWcge1xyXG4gICAgICAgIHN3aXRjaCAoaXRlbUNvbmZpZy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUucm93OlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbHVtbjpcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5zdGFjazpcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5jb21wb25lbnQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5ncm91bmQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDYXNlRXJyb3IoJ1VST0NPU1BDSUNJQzEzNjg3JywgaXRlbUNvbmZpZy50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoaXRlbUNvbmZpZzogUm93T3JDb2x1bW5JdGVtQ29uZmlnKTogUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IGl0ZW1Db25maWcudHlwZSxcclxuICAgICAgICAgICAgY29udGVudDogUm93T3JDb2x1bW5JdGVtQ29uZmlnLnJlc29sdmVDb250ZW50KGl0ZW1Db25maWcuY29udGVudCksXHJcbiAgICAgICAgICAgIHdpZHRoOiBpdGVtQ29uZmlnLndpZHRoID8/IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy53aWR0aCxcclxuICAgICAgICAgICAgbWluV2lkdGg6IGl0ZW1Db25maWcud2lkdGggPz8gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLm1pbldpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGl0ZW1Db25maWcuaGVpZ2h0ID8/IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5oZWlnaHQsXHJcbiAgICAgICAgICAgIG1pbkhlaWdodDogaXRlbUNvbmZpZy5oZWlnaHQgPz8gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLm1pbkhlaWdodCxcclxuICAgICAgICAgICAgaWQ6IEl0ZW1Db25maWcucmVzb2x2ZUlkKGl0ZW1Db25maWcuaWQpLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiBpdGVtQ29uZmlnLmlzQ2xvc2FibGUgPz8gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUNvbnRlbnQoY29udGVudDogQ2hpbGRJdGVtQ29uZmlnW10gfCB1bmRlZmluZWQpOiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZy5DaGlsZEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY291bnQgPSBjb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLkNoaWxkSXRlbUNvbmZpZz4oY291bnQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkSXRlbUNvbmZpZyA9IGNvbnRlbnRbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIVJvd09yQ29sdW1uSXRlbUNvbmZpZy5pc0NoaWxkSXRlbUNvbmZpZyhjaGlsZEl0ZW1Db25maWcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbmZpZ3VyYXRpb25FcnJvcignSXRlbUNvbmZpZyBpcyBub3QgUm93LCBDb2x1bW4gb3IgU3RhY2snLCBjaGlsZEl0ZW1Db25maWcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZENoaWxkSXRlbUNvbmZpZyA9IEl0ZW1Db25maWcucmVzb2x2ZShjaGlsZEl0ZW1Db25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcuaXNDaGlsZEl0ZW1Db25maWcocmVzb2x2ZWRDaGlsZEl0ZW1Db25maWcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignVVJPQ09TUElDOTk1MTInLCBKU09OLnN0cmluZ2lmeShyZXNvbHZlZENoaWxkSXRlbUNvbmZpZykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHJlc29sdmVkQ2hpbGRJdGVtQ29uZmlnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IHR5cGUgUm9vdEl0ZW1Db25maWcgPSBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnO1xyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBSb290SXRlbUNvbmZpZyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNSb290SXRlbUNvbmZpZyhpdGVtQ29uZmlnOiBJdGVtQ29uZmlnKTogaXRlbUNvbmZpZyBpcyBSb290SXRlbUNvbmZpZyB7XHJcbiAgICAgICAgc3dpdGNoIChpdGVtQ29uZmlnLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5yb3c6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnN0YWNrOlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbXBvbmVudDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmdyb3VuZDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNhc2VFcnJvcignVVJJQ0lSMjM2ODcnLCBpdGVtQ29uZmlnLnR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZShpdGVtQ29uZmlnOiBSb290SXRlbUNvbmZpZyB8IHVuZGVmaW5lZCk6IFJlc29sdmVkUm9vdEl0ZW1Db25maWcgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmIChpdGVtQ29uZmlnID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBJdGVtQ29uZmlnLnJlc29sdmUoaXRlbUNvbmZpZyk7XHJcbiAgICAgICAgICAgIGlmICghUmVzb2x2ZWRSb290SXRlbUNvbmZpZy5pc1Jvb3RJdGVtQ29uZmlnKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBDb25maWd1cmF0aW9uRXJyb3IoJ0l0ZW1Db25maWcgaXMgbm90IFJvdywgQ29sdW1uIG9yIFN0YWNrJywgSlNPTi5zdHJpbmdpZnkoaXRlbUNvbmZpZykpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXRDb25maWcge1xyXG4gICAgcm9vdDogUm9vdEl0ZW1Db25maWc7XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayAoTGF5b3V0Q29uZmlnOmludGVyZmFjZSkucm9vdH0gKi9cclxuICAgIGNvbnRlbnQ/OiAoUm93T3JDb2x1bW5JdGVtQ29uZmlnIHwgU3RhY2tJdGVtQ29uZmlnIHwgQ29tcG9uZW50SXRlbUNvbmZpZylbXTtcclxuICAgIG9wZW5Qb3BvdXRzPzogUG9wb3V0TGF5b3V0Q29uZmlnW107XHJcbiAgICBkaW1lbnNpb25zPzogTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnM7XHJcbiAgICBzZXR0aW5ncz86IExheW91dENvbmZpZy5TZXR0aW5ncztcclxuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChMYXlvdXRDb25maWc6aW50ZXJmYWNlKS5oZWFkZXJ9IGluc3RlYWQgKi9cclxuICAgIGxhYmVscz86IExheW91dENvbmZpZy5MYWJlbHM7XHJcbiAgICBoZWFkZXI/OiBMYXlvdXRDb25maWcuSGVhZGVyO1xyXG59XHJcblxyXG4vKiogVXNlIHRvIHNwZWNpZnkgTGF5b3V0Q29uZmlnIHdpdGggZGVmYXVsdHMgb3IgZGVzZXJpYWxpc2UgYSBMYXlvdXRDb25maWcuXHJcbiAqIERlc2VyaWFsaXNhdGlvbiB3aWxsIGhhbmRsZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cclxuICogTm90ZSB0aGF0IExheW91dENvbmZpZyBzaG91bGQgYmUgdXNlZCBmb3Igc2VyaWFsaXNhdGlvbiAobm90IExheW91dENvbmZpZylcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBMYXlvdXRDb25maWcge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBTZXR0aW5ncyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlICR7QGxpbmsgKExheW91dENvbmZpZzpuYW1lc3BhY2UpLihIZWFkZXI6aW50ZXJmYWNlKS5zaG93fSBpbnN0ZWFkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGFzSGVhZGVycz86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnN0cmFpbnMgdGhlIGFyZWEgaW4gd2hpY2ggaXRlbXMgY2FuIGJlIGRyYWdnZWQgdG8gdGhlIGxheW91dCdzIGNvbnRhaW5lci4gV2lsbCBiZSBzZXQgdG8gZmFsc2VcclxuICAgICAgICAgKiBhdXRvbWF0aWNhbGx5IHdoZW4gbGF5b3V0LmNyZWF0ZURyYWdTb3VyY2UoKSBpcyBjYWxsZWQuXHJcbiAgICAgICAgICogRGVmYXVsdDogdHJ1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cmFpbkRyYWdUb0NvbnRhaW5lcj86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElmIHRydWUsIHRoZSB1c2VyIGNhbiByZS1hcnJhbmdlIHRoZSBsYXlvdXQgYnkgZHJhZ2dpbmcgaXRlbXMgYnkgdGhlaXIgdGFicyB0byB0aGUgZGVzaXJlZCBsb2NhdGlvbi5cclxuICAgICAgICAgKiBDYW4gYmUgb3ZlcnJpZGRlbiBieSBJdGVtQ29uZmlnLnJlb3JkZXJFbmFibGVkIGZvciBzcGVjaWZpYyBJdGVtQ29uZmlnc1xyXG4gICAgICAgICAqIERlZmF1bHQ6IHRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW9yZGVyRW5hYmxlZD86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlY2lkZXMgd2hhdCB3aWxsIGJlIG9wZW5lZCBpbiBhIG5ldyB3aW5kb3cgaWYgdGhlIHVzZXIgY2xpY2tzIHRoZSBwb3BvdXQgaWNvbi4gSWYgdHJ1ZSB0aGUgZW50aXJlIHN0YWNrIHdpbGxcclxuICAgICAgICAgKiBiZSB0cmFuc2ZlcnJlZCB0byB0aGUgbmV3IHdpbmRvdywgaWYgZmFsc2Ugb25seSB0aGUgYWN0aXZlIGNvbXBvbmVudCB3aWxsIGJlIG9wZW5lZC5cclxuICAgICAgICAgKiBEZWZhdWx0OiBmYWxzZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBvcG91dFdob2xlU3RhY2s/OiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgaWYgYW4gZXJyb3IgaXMgdGhyb3duIHdoZW4gYSBwb3BvdXQgaXMgYmxvY2tlZCBieSB0aGUgYnJvd3NlciAoZS5nLiBieSBvcGVuaW5nIGl0IHByb2dyYW1tYXRpY2FsbHkpLlxyXG4gICAgICAgICAqIElmIGZhbHNlLCB0aGUgcG9wb3V0IGNhbGwgd2lsbCBmYWlsIHNpbGVudGx5LlxyXG4gICAgICAgICAqIERlZmF1bHQ6IHRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBibG9ja2VkUG9wb3V0c1Rocm93RXJyb3I/OiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgaWYgYWxsIHBvcG91dHMgc2hvdWxkIGJlIGNsb3NlZCB3aGVuIHRoZSBwYWdlIHRoYXQgY3JlYXRlZCB0aGVtIGlzIGNsb3NlZC4gUG9wb3V0cyBkb24ndCBoYXZlIGFcclxuICAgICAgICAgKiBzdHJvbmcgZGVwZW5kZW5jeSBvbiB0aGVpciBwYXJlbnQgYW5kIGNhbiBleGlzdCBvbiB0aGVpciBvd24sIGJ1dCBjYW4gYmUgcXVpdGUgYW5ub3lpbmcgdG8gY2xvc2UgYnkgaGFuZC4gSW5cclxuICAgICAgICAgKiBhZGRpdGlvbiwgYW55IGNoYW5nZXMgbWFkZSB0byBwb3BvdXRzIHdvbid0IGJlIHN0b3JlZCBhZnRlciB0aGUgcGFyZW50IGlzIGNsb3NlZC5cclxuICAgICAgICAgKiBEZWZhdWx0OiB0cnVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xvc2VQb3BvdXRzT25VbmxvYWQ/OiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIHBvcG91dCBpY29uIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGhlYWRlci1iYXIuXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoTGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkuKEhlYWRlcjppbnRlcmZhY2UpLnBvcG91dH0gaW5zdGVhZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dQb3BvdXRJY29uPzogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2lmaWVzIGlmIHRoZSBtYXhpbWlzZSBpY29uIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGhlYWRlci1iYXIuXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoTGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkuKEhlYWRlcjppbnRlcmZhY2UpLm1heGltaXNlfSBpbnN0ZWFkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd01heGltaXNlSWNvbj86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyBpZiB0aGUgY2xvc2UgaWNvbiBzaG91bGQgYmUgZGlzcGxheWVkIGluIHRoZSBoZWFkZXItYmFyLlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKExheW91dENvbmZpZzpuYW1lc3BhY2UpLihIZWFkZXI6aW50ZXJmYWNlKS5jbG9zZX0gaW5zdGVhZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dDbG9zZUljb24/OiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgUmVzcG9uc2l2ZSBNb2RlIChtb3JlIGluZm8gbmVlZGVkKS5cclxuICAgICAgICAgKiBEZWZhdWx0OiBub25lXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVzcG9uc2l2ZU1vZGU/OiBSZXNwb25zaXZlTW9kZTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2lmaWVzIE1heGltdW0gcGl4ZWwgb3ZlcmxhcCBwZXIgdGFiLlxyXG4gICAgICAgICAqIERlZmF1bHQ6IDBcclxuICAgICAgICAgKi9cclxuICAgICAgICB0YWJPdmVybGFwQWxsb3dhbmNlPzogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIERlZmF1bHQ6IHRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW9yZGVyT25UYWJNZW51Q2xpY2s/OiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWZhdWx0OiAxMFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRhYkNvbnRyb2xPZmZzZXQ/OiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRvIHBvcCBpbiBlbGVtZW50cyB3aGVuIGNsb3NpbmcgYSBwb3BvdXQgd2luZG93LlxyXG4gICAgICAgICAqIERlZmF1bHQ6IGZhbHNlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9wSW5PbkNsb3NlPzogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIFNldHRpbmdzIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZShzZXR0aW5nczogU2V0dGluZ3MgfCB1bmRlZmluZWQpOiBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncyB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MgPSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdHJhaW5EcmFnVG9Db250YWluZXI6IHNldHRpbmdzPy5jb25zdHJhaW5EcmFnVG9Db250YWluZXIgPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuZGVmYXVsdHMuY29uc3RyYWluRHJhZ1RvQ29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgcmVvcmRlckVuYWJsZWQ6IHNldHRpbmdzPy5yZW9yZGVyRW5hYmxlZCA/PyBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncy5kZWZhdWx0cy5yZW9yZGVyRW5hYmxlZCxcclxuICAgICAgICAgICAgICAgIHBvcG91dFdob2xlU3RhY2s6IHNldHRpbmdzPy5wb3BvdXRXaG9sZVN0YWNrID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmRlZmF1bHRzLnBvcG91dFdob2xlU3RhY2ssXHJcbiAgICAgICAgICAgICAgICBibG9ja2VkUG9wb3V0c1Rocm93RXJyb3I6IHNldHRpbmdzPy5ibG9ja2VkUG9wb3V0c1Rocm93RXJyb3IgPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuZGVmYXVsdHMuYmxvY2tlZFBvcG91dHNUaHJvd0Vycm9yLFxyXG4gICAgICAgICAgICAgICAgY2xvc2VQb3BvdXRzT25VbmxvYWQ6IHNldHRpbmdzPy5jbG9zZVBvcG91dHNPblVubG9hZCA/PyBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncy5kZWZhdWx0cy5jbG9zZVBvcG91dHNPblVubG9hZCxcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNpdmVNb2RlOiBzZXR0aW5ncz8ucmVzcG9uc2l2ZU1vZGUgPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuZGVmYXVsdHMucmVzcG9uc2l2ZU1vZGUsXHJcbiAgICAgICAgICAgICAgICB0YWJPdmVybGFwQWxsb3dhbmNlOiBzZXR0aW5ncz8udGFiT3ZlcmxhcEFsbG93YW5jZSA/PyBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncy5kZWZhdWx0cy50YWJPdmVybGFwQWxsb3dhbmNlLFxyXG4gICAgICAgICAgICAgICAgcmVvcmRlck9uVGFiTWVudUNsaWNrOiBzZXR0aW5ncz8ucmVvcmRlck9uVGFiTWVudUNsaWNrID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmRlZmF1bHRzLnJlb3JkZXJPblRhYk1lbnVDbGljayxcclxuICAgICAgICAgICAgICAgIHRhYkNvbnRyb2xPZmZzZXQ6IHNldHRpbmdzPy50YWJDb250cm9sT2Zmc2V0ID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmRlZmF1bHRzLnRhYkNvbnRyb2xPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBwb3BJbk9uQ2xvc2U6IHNldHRpbmdzPy5wb3BJbk9uQ2xvc2UgPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuZGVmYXVsdHMucG9wSW5PbkNsb3NlLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRGltZW5zaW9ucyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHdpZHRoIG9mIHRoZSBib3JkZXJzIGJldHdlZW4gdGhlIGxheW91dCBpdGVtcyBpbiBwaXhlbC4gUGxlYXNlIG5vdGU6IFRoZSBhY3R1YWwgZHJhZ2dhYmxlIGFyZWEgaXMgd2lkZXJcclxuICAgICAgICAgKiB0aGFuIHRoZSB2aXNpYmxlIG9uZSwgbWFraW5nIGl0IHNhZmUgdG8gc2V0IHRoaXMgdG8gc21hbGwgdmFsdWVzIHdpdGhvdXQgYWZmZWN0aW5nIHVzYWJpbGl0eS5cclxuICAgICAgICAgKiBEZWZhdWx0OiA1XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYm9yZGVyV2lkdGg/OiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlZmF1bHQ6IDE1XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYm9yZGVyR3JhYldpZHRoPzogbnVtYmVyLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWluaW11bSBoZWlnaHQgYW4gaXRlbSBjYW4gYmUgcmVzaXplZCB0byAoaW4gcGl4ZWwpLlxyXG4gICAgICAgICAqIERlZmF1bHQ6IDEwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWluSXRlbUhlaWdodD86IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1pbmltdW0gd2lkdGggYW4gaXRlbSBjYW4gYmUgcmVzaXplZCB0byAoaW4gcGl4ZWwpLlxyXG4gICAgICAgICAqIERlZmF1bHQ6IDEwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWluSXRlbVdpZHRoPzogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBoZWFkZXIgZWxlbWVudHMgaW4gcGl4ZWwuIFRoaXMgY2FuIGJlIGNoYW5nZWQsIGJ1dCB5b3VyIHRoZW1lJ3MgaGVhZGVyIGNzcyBuZWVkcyB0byBiZVxyXG4gICAgICAgICAqIGFkanVzdGVkIGFjY29yZGluZ2x5LlxyXG4gICAgICAgICAqIERlZmF1bHQ6IDIwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGVhZGVySGVpZ2h0PzogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgd2lkdGggb2YgdGhlIGVsZW1lbnQgdGhhdCBhcHBlYXJzIHdoZW4gYW4gaXRlbSBpcyBkcmFnZ2VkIChpbiBwaXhlbCkuXHJcbiAgICAgICAgICogRGVmYXVsdDogMzAwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZHJhZ1Byb3h5V2lkdGg/OiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBoZWlnaHQgb2YgdGhlIGVsZW1lbnQgdGhhdCBhcHBlYXJzIHdoZW4gYW4gaXRlbSBpcyBkcmFnZ2VkIChpbiBwaXhlbCkuXHJcbiAgICAgICAgICogRGVmYXVsdDogMjAwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZHJhZ1Byb3h5SGVpZ2h0PzogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgRGltZW5zaW9ucyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoZGltZW5zaW9uczogRGltZW5zaW9ucyB8IHVuZGVmaW5lZCk6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogZGltZW5zaW9ucz8uYm9yZGVyV2lkdGggPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuRGltZW5zaW9ucy5kZWZhdWx0cy5ib3JkZXJXaWR0aCxcclxuICAgICAgICAgICAgICAgIGJvcmRlckdyYWJXaWR0aDogZGltZW5zaW9ucz8uYm9yZGVyR3JhYldpZHRoID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMuZGVmYXVsdHMuYm9yZGVyR3JhYldpZHRoLFxyXG4gICAgICAgICAgICAgICAgbWluSXRlbUhlaWdodDogZGltZW5zaW9ucz8ubWluSXRlbUhlaWdodCA/PyBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zLmRlZmF1bHRzLm1pbkl0ZW1IZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBtaW5JdGVtV2lkdGg6IGRpbWVuc2lvbnM/Lm1pbkl0ZW1XaWR0aCA/PyBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zLmRlZmF1bHRzLm1pbkl0ZW1XaWR0aCxcclxuICAgICAgICAgICAgICAgIGhlYWRlckhlaWdodDogZGltZW5zaW9ucz8uaGVhZGVySGVpZ2h0ID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMuZGVmYXVsdHMuaGVhZGVySGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgZHJhZ1Byb3h5V2lkdGg6IGRpbWVuc2lvbnM/LmRyYWdQcm94eVdpZHRoID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMuZGVmYXVsdHMuZHJhZ1Byb3h5V2lkdGgsXHJcbiAgICAgICAgICAgICAgICBkcmFnUHJveHlIZWlnaHQ6IGRpbWVuc2lvbnM/LmRyYWdQcm94eUhlaWdodCA/PyBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zLmRlZmF1bHRzLmRyYWdQcm94eUhlaWdodCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIExhYmVscyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoTGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkuKEhlYWRlcjppbnRlcmZhY2UpLmNsb3NlfSBpbnN0ZWFkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xvc2U/OiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKExheW91dENvbmZpZzpuYW1lc3BhY2UpLihIZWFkZXI6aW50ZXJmYWNlKS5tYXhpbWlzZX0gaW5zdGVhZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1heGltaXNlPzogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChMYXlvdXRDb25maWc6bmFtZXNwYWNlKS4oSGVhZGVyOmludGVyZmFjZSkubWluaW1pc2V9IGluc3RlYWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBtaW5pbWlzZT86IHN0cmluZztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoTGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkuKEhlYWRlcjppbnRlcmZhY2UpLnBvcGlufSBpbnN0ZWFkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9waW4/OiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKExheW91dENvbmZpZzpuYW1lc3BhY2UpLihIZWFkZXI6aW50ZXJmYWNlKS5wb3BvdXR9IGluc3RlYWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwb3BvdXQ/OiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKExheW91dENvbmZpZzpuYW1lc3BhY2UpLihIZWFkZXI6aW50ZXJmYWNlKS50YWJEcm9wZG93bn0gaW5zdGVhZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRhYkRyb3Bkb3duPzogc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSGVhZGVyIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgd2hldGhlciBoZWFkZXIgc2hvdWxkIGJlIGRpc3BsYXllZCwgYW5kIGlmIHNvLCBvbiB3aGljaCBzaWRlLlxyXG4gICAgICAgICAqIElmIGZhbHNlLCB0aGUgbGF5b3V0IHdpbGwgYmUgZGlzcGxheWVkIHdpdGggc3BsaXR0ZXJzIG9ubHkuXHJcbiAgICAgICAgICogRGVmYXVsdDogJ3RvcCdcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93PzogZmFsc2UgfCBTaWRlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB0b29sdGlwIHRleHQgdGhhdCBhcHBlYXJzIHdoZW4gaG92ZXJpbmcgb3ZlciB0aGUgcG9wb3V0IGljb24gb3IgZmFsc2UgaWYgcG9wb3V0IGJ1dHRvbiBub3QgZGlzcGxheWVkLlxyXG4gICAgICAgICAqIERlZmF1bHQ6ICdvcGVuIGluIG5ldyB3aW5kb3cnXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9wb3V0PzogZmFsc2UgfCBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRvb2x0aXAgdGV4dCB0aGF0IGFwcGVhcnMgd2hlbiBob3ZlcmluZyBvdmVyIHRoZSBwb3BpbiBpY29uLlxyXG4gICAgICAgICAqIERlZmF1bHQ6ICdwb3AgaW4nXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9waW4/OiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRvb2x0aXAgdGV4dCB0aGF0IGFwcGVhcnMgd2hlbiBob3ZlcmluZyBvdmVyIHRoZSBtYXhpbWlzZSBpY29uIG9yIGZhbHNlIGlmIG1heGltaXNlZCBidXR0b24gbm90IGRpc3BsYXllZC5cclxuICAgICAgICAgKiBEZWZhdWx0OiAnbWF4aW1pc2UnXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWF4aW1pc2U/OiBmYWxzZSB8IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdG9vbHRpcCB0ZXh0IHRoYXQgYXBwZWFycyB3aGVuIGhvdmVyaW5nIG92ZXIgdGhlIGNsb3NlIGljb24uXHJcbiAgICAgICAgICogRGVmYXVsdDogJ2Nsb3NlJ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsb3NlPzogZmFsc2UgfCBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRvb2x0aXAgdGV4dCB0aGF0IGFwcGVhcnMgd2hlbiBob3ZlcmluZyBvdmVyIHRoZSBtaW5pbWlzZSBpY29uLlxyXG4gICAgICAgICAqIERlZmF1bHQ6ICdtaW5pbWlzZSdcclxuICAgICAgICAgKi9cclxuICAgICAgICBtaW5pbWlzZT86IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIERlZmF1bHQ6ICdhZGRpdGlvbmFsIHRhYnMnXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGFiRHJvcGRvd24/OiBmYWxzZSB8IHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIEhlYWRlciB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoaGVhZGVyOiBIZWFkZXIgfCB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiBMYXlvdXRDb25maWcuU2V0dGluZ3MgfCB1bmRlZmluZWQsIGxhYmVsczogTGF5b3V0Q29uZmlnLkxhYmVscyB8IHVuZGVmaW5lZFxyXG4gICAgICAgICk6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlciB7XHJcbiAgICAgICAgICAgIGxldCBzaG93OiBmYWxzZSB8IFNpZGU7XHJcbiAgICAgICAgICAgIGlmIChoZWFkZXI/LnNob3cgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgc2hvdyA9IGhlYWRlci5zaG93O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzICE9PSB1bmRlZmluZWQgJiYgc2V0dGluZ3MuaGFzSGVhZGVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdyA9IHNldHRpbmdzLmhhc0hlYWRlcnMgPyBSZXNvbHZlZExheW91dENvbmZpZy5IZWFkZXIuZGVmYXVsdHMuc2hvdyA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93ID0gUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmRlZmF1bHRzLnNob3c7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZExheW91dENvbmZpZy5IZWFkZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBzaG93LFxyXG4gICAgICAgICAgICAgICAgcG9wb3V0OiBoZWFkZXI/LnBvcG91dCA/PyBsYWJlbHM/LnBvcG91dCA/P1xyXG4gICAgICAgICAgICAgICAgICAgIChzZXR0aW5ncz8uc2hvd1BvcG91dEljb24gPT09IGZhbHNlID8gZmFsc2UgOiBSZXNvbHZlZExheW91dENvbmZpZy5IZWFkZXIuZGVmYXVsdHMucG9wb3V0KSxcclxuICAgICAgICAgICAgICAgIGRvY2s6IGhlYWRlcj8ucG9waW4gPz8gbGFiZWxzPy5wb3BpbiA/PyBSZXNvbHZlZExheW91dENvbmZpZy5IZWFkZXIuZGVmYXVsdHMuZG9jayxcclxuICAgICAgICAgICAgICAgIG1heGltaXNlOiBoZWFkZXI/Lm1heGltaXNlID8/IGxhYmVscz8ubWF4aW1pc2UgPz9cclxuICAgICAgICAgICAgICAgICAgICAoc2V0dGluZ3M/LnNob3dNYXhpbWlzZUljb24gPT09IGZhbHNlID8gZmFsc2UgOiBSZXNvbHZlZExheW91dENvbmZpZy5IZWFkZXIuZGVmYXVsdHMubWF4aW1pc2UpLFxyXG4gICAgICAgICAgICAgICAgY2xvc2U6IGhlYWRlcj8uY2xvc2UgPz8gbGFiZWxzPy5jbG9zZSA/P1xyXG4gICAgICAgICAgICAgICAgICAgIChzZXR0aW5ncz8uc2hvd0Nsb3NlSWNvbiA9PT0gZmFsc2UgPyBmYWxzZSA6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlci5kZWZhdWx0cy5jbG9zZSksXHJcbiAgICAgICAgICAgICAgICBtaW5pbWlzZTogaGVhZGVyPy5taW5pbWlzZSA/PyBsYWJlbHM/Lm1pbmltaXNlID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlci5kZWZhdWx0cy5taW5pbWlzZSxcclxuICAgICAgICAgICAgICAgIHRhYkRyb3Bkb3duOiBoZWFkZXI/LnRhYkRyb3Bkb3duID8/IGxhYmVscz8udGFiRHJvcGRvd24gPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmRlZmF1bHRzLnRhYkRyb3Bkb3duLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc1BvcG91dChjb25maWc6IExheW91dENvbmZpZyk6IGNvbmZpZyBpcyBQb3BvdXRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIHJldHVybiAncGFyZW50SWQnIGluIGNvbmZpZyB8fCAnaW5kZXhJblBhcmVudCcgaW4gY29uZmlnIHx8ICd3aW5kb3cnIGluIGNvbmZpZztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZShsYXlvdXRDb25maWc6IExheW91dENvbmZpZyk6IFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgICAgICBpZiAoaXNQb3BvdXQobGF5b3V0Q29uZmlnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUG9wb3V0TGF5b3V0Q29uZmlnLnJlc29sdmUobGF5b3V0Q29uZmlnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgcm9vdDogUm9vdEl0ZW1Db25maWcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGlmIChsYXlvdXRDb25maWcucm9vdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByb290ID0gbGF5b3V0Q29uZmlnLnJvb3Q7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGF5b3V0Q29uZmlnLmNvbnRlbnQgIT09IHVuZGVmaW5lZCAmJiBsYXlvdXRDb25maWcuY29udGVudC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdCA9IGxheW91dENvbmZpZy5jb250ZW50WzBdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByb290ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZzogUmVzb2x2ZWRMYXlvdXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHJvb3Q6IFJvb3RJdGVtQ29uZmlnLnJlc29sdmUocm9vdCksXHJcbiAgICAgICAgICAgICAgICBvcGVuUG9wb3V0czogTGF5b3V0Q29uZmlnLnJlc29sdmVPcGVuUG9wb3V0cyhsYXlvdXRDb25maWcub3BlblBvcG91dHMpLFxyXG4gICAgICAgICAgICAgICAgZGltZW5zaW9uczogTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMucmVzb2x2ZShsYXlvdXRDb25maWcuZGltZW5zaW9ucyksXHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nczogTGF5b3V0Q29uZmlnLlNldHRpbmdzLnJlc29sdmUobGF5b3V0Q29uZmlnLnNldHRpbmdzKSxcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogTGF5b3V0Q29uZmlnLkhlYWRlci5yZXNvbHZlKGxheW91dENvbmZpZy5oZWFkZXIsIGxheW91dENvbmZpZy5zZXR0aW5ncywgbGF5b3V0Q29uZmlnLmxhYmVscyksXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGZyb21SZXNvbHZlZChjb25maWc6IFJlc29sdmVkTGF5b3V0Q29uZmlnKTogTGF5b3V0Q29uZmlnIHtcclxuICAgICAgICBjb25zdCBjb3BpZWRDb25maWcgPSBSZXNvbHZlZExheW91dENvbmZpZy5jcmVhdGVDb3B5KGNvbmZpZyk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBMYXlvdXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgIHJvb3Q6IGNvcGllZENvbmZpZy5yb290IGFzIFJvb3RJdGVtQ29uZmlnLFxyXG4gICAgICAgICAgICBvcGVuUG9wb3V0czogY29waWVkQ29uZmlnLm9wZW5Qb3BvdXRzIGFzIHVua25vd24gYXMgUG9wb3V0TGF5b3V0Q29uZmlnW10sXHJcbiAgICAgICAgICAgIGRpbWVuc2lvbnM6IGNvcGllZENvbmZpZy5kaW1lbnNpb25zLFxyXG4gICAgICAgICAgICBzZXR0aW5nczogY29waWVkQ29uZmlnLnNldHRpbmdzLFxyXG4gICAgICAgICAgICBoZWFkZXI6IGNvcGllZENvbmZpZy5oZWFkZXIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc1Jlc29sdmVkKGNvbmZpZ09yUmVzb2x2ZWRDb25maWc6IFJlc29sdmVkTGF5b3V0Q29uZmlnIHwgTGF5b3V0Q29uZmlnKTogY29uZmlnT3JSZXNvbHZlZENvbmZpZyBpcyBSZXNvbHZlZExheW91dENvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgY29uZmlnID0gY29uZmlnT3JSZXNvbHZlZENvbmZpZyBhcyBSZXNvbHZlZExheW91dENvbmZpZztcclxuICAgICAgICByZXR1cm4gY29uZmlnLnJlc29sdmVkICE9PSB1bmRlZmluZWQgJiYgKGNvbmZpZy5yZXNvbHZlZCA9PT0gdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVPcGVuUG9wb3V0cyhwb3BvdXRDb25maWdzOiBQb3BvdXRMYXlvdXRDb25maWdbXSB8IHVuZGVmaW5lZCk6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnW10ge1xyXG4gICAgICAgIGlmIChwb3BvdXRDb25maWdzID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gcG9wb3V0Q29uZmlncy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheTxSZXNvbHZlZFBvcG91dExheW91dENvbmZpZz4oY291bnQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IFBvcG91dExheW91dENvbmZpZy5yZXNvbHZlKHBvcG91dENvbmZpZ3NbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFBvcG91dExheW91dENvbmZpZyBleHRlbmRzIExheW91dENvbmZpZyB7XHJcbiAgICAvKiogVGhlIGlkIG9mIHRoZSBlbGVtZW50IHRoZSBpdGVtIHdpbGwgYmUgYXBwZW5kZWQgdG8gb24gcG9wSW5cclxuICAgICogSWYgbnVsbCwgYXBwZW5kIHRvIHRvcG1vc3QgbGF5b3V0IGVsZW1lbnRcclxuICAgICovXHJcbiAgICBwYXJlbnRJZDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcclxuICAgIC8qKiBUaGUgcG9zaXRpb24gb2YgdGhpcyBlbGVtZW50IHdpdGhpbiBpdHMgcGFyZW50XHJcbiAgICAqIElmIG51bGwsIHBvc2l0aW9uIGlzIGxhc3RcclxuICAgICovXHJcbiAgICBpbmRleEluUGFyZW50OiBudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKFBvcG91dExheW91dENvbmZpZzppbnRlcmZhY2UpLndpbmRvd30gKi9cclxuICAgIGRpbWVuc2lvbnM6IFBvcG91dExheW91dENvbmZpZy5EaW1lbnNpb25zIHwgdW5kZWZpbmVkOyAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcclxuICAgIHdpbmRvdzogUG9wb3V0TGF5b3V0Q29uZmlnLldpbmRvdyB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBQb3BvdXRMYXlvdXRDb25maWcge1xyXG4gICAgLy8gUHJldmlvdXMgdmVyc2lvbnMga2VwdCB3aW5kb3cgaW5mb3JtYXRpb24gaW4gRGltZW5zaW9ucyBrZXkuICBPbmx5IHVzZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcclxuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChQb3BvdXRMYXlvdXRDb25maWc6bmFtZXNwYWNlKS4oV2luZG93OmludGVyZmFjZSl9ICovXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIERpbWVuc2lvbnMgZXh0ZW5kcyBMYXlvdXRDb25maWcuRGltZW5zaW9ucyB7XHJcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKFBvcG91dExheW91dENvbmZpZzpuYW1lc3BhY2UpLihXaW5kb3c6aW50ZXJmYWNlKS53aWR0aH0gKi9cclxuICAgICAgICB3aWR0aDogbnVtYmVyIHwgbnVsbCxcclxuICAgICAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoUG9wb3V0TGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkuKFdpbmRvdzppbnRlcmZhY2UpLmhlaWdodH0gKi9cclxuICAgICAgICBoZWlnaHQ6IG51bWJlciB8IG51bGwsXHJcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKFBvcG91dExheW91dENvbmZpZzpuYW1lc3BhY2UpLihXaW5kb3c6aW50ZXJmYWNlKS5sZWZ0fSAqL1xyXG4gICAgICAgIGxlZnQ6IG51bWJlciB8IG51bGwsXHJcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKFBvcG91dExheW91dENvbmZpZzpuYW1lc3BhY2UpLihXaW5kb3c6aW50ZXJmYWNlKS50b3B9ICovXHJcbiAgICAgICAgdG9wOiBudW1iZXIgfCBudWxsLFxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICB3aWR0aD86IG51bWJlcixcclxuICAgICAgICBoZWlnaHQ/OiBudW1iZXIsXHJcbiAgICAgICAgbGVmdD86IG51bWJlcixcclxuICAgICAgICB0b3A/OiBudW1iZXIsXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBXaW5kb3cge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKHdpbmRvdzogV2luZG93IHwgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBEaW1lbnNpb25zIHwgdW5kZWZpbmVkKTogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcuV2luZG93XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZy5XaW5kb3c7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRzID0gUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcuV2luZG93LmRlZmF1bHRzO1xyXG4gICAgICAgICAgICBpZiAod2luZG93ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2luZG93LndpZHRoID8/IGRlZmF1bHRzLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogd2luZG93LmhlaWdodCA/PyBkZWZhdWx0cy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogd2luZG93LmxlZnQgPz8gZGVmYXVsdHMubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHdpbmRvdy50b3AgPz8gZGVmYXVsdHMudG9wLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBkaW1lbnNpb25zPy53aWR0aCA/PyBkZWZhdWx0cy53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGRpbWVuc2lvbnM/LmhlaWdodCA/PyBkZWZhdWx0cy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogZGltZW5zaW9ucz8ubGVmdCA/PyBkZWZhdWx0cy5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogZGltZW5zaW9ucz8udG9wID8/IGRlZmF1bHRzLnRvcCxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZShwb3BvdXRDb25maWc6IFBvcG91dExheW91dENvbmZpZyk6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnIHtcclxuICAgICAgICBsZXQgcm9vdDogUm9vdEl0ZW1Db25maWcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKHBvcG91dENvbmZpZy5yb290ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcm9vdCA9IHBvcG91dENvbmZpZy5yb290O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChwb3BvdXRDb25maWcuY29udGVudCAhPT0gdW5kZWZpbmVkICYmIHBvcG91dENvbmZpZy5jb250ZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJvb3QgPSBwb3BvdXRDb25maWcuY29udGVudFswXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJvb3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbmZpZzogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgIHJvb3Q6IFJvb3RJdGVtQ29uZmlnLnJlc29sdmUocm9vdCksXHJcbiAgICAgICAgICAgIG9wZW5Qb3BvdXRzOiBMYXlvdXRDb25maWcucmVzb2x2ZU9wZW5Qb3BvdXRzKHBvcG91dENvbmZpZy5vcGVuUG9wb3V0cyksXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiBMYXlvdXRDb25maWcuU2V0dGluZ3MucmVzb2x2ZShwb3BvdXRDb25maWcuc2V0dGluZ3MpLFxyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBMYXlvdXRDb25maWcuRGltZW5zaW9ucy5yZXNvbHZlKHBvcG91dENvbmZpZy5kaW1lbnNpb25zKSxcclxuICAgICAgICAgICAgaGVhZGVyOiBMYXlvdXRDb25maWcuSGVhZGVyLnJlc29sdmUocG9wb3V0Q29uZmlnLmhlYWRlciwgcG9wb3V0Q29uZmlnLnNldHRpbmdzLCBwb3BvdXRDb25maWcubGFiZWxzKSxcclxuICAgICAgICAgICAgcGFyZW50SWQ6IHBvcG91dENvbmZpZy5wYXJlbnRJZCA/PyBudWxsLFxyXG4gICAgICAgICAgICBpbmRleEluUGFyZW50OiBwb3BvdXRDb25maWcuaW5kZXhJblBhcmVudCA/PyBudWxsLFxyXG4gICAgICAgICAgICB3aW5kb3c6IFBvcG91dExheW91dENvbmZpZy5XaW5kb3cucmVzb2x2ZShwb3BvdXRDb25maWcud2luZG93LCBwb3BvdXRDb25maWcuZGltZW5zaW9ucyksXHJcbiAgICAgICAgICAgIHJlc29sdmVkOiB0cnVlLFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyBAZGVwcmVjYXRlZCAtIHVzZSB7QGxpbmsgKExheW91dENvbmZpZzppbnRlcmZhY2UpfSAqL1xyXG5leHBvcnQgdHlwZSBDb25maWcgPSBMYXlvdXRDb25maWc7XHJcbiIsImltcG9ydCB7IEFzc2VydEVycm9yLCBVbnJlYWNoYWJsZUNhc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9pbnRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IENvbmZpZ01pbmlmaWVyIH0gZnJvbSAnLi4vdXRpbHMvY29uZmlnLW1pbmlmaWVyJztcclxuaW1wb3J0IHsgSXRlbVR5cGUsIEpzb25WYWx1ZSwgUmVzcG9uc2l2ZU1vZGUsIFNpZGUgfSBmcm9tICcuLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7IGRlZXBFeHRlbmRWYWx1ZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzb2x2ZWRJdGVtQ29uZmlnIHtcclxuICAgIC8vIHNlZSBJdGVtQ29uZmlnIGZvciBjb21tZW50c1xyXG4gICAgcmVhZG9ubHkgdHlwZTogSXRlbVR5cGU7XHJcbiAgICByZWFkb25seSBjb250ZW50OiByZWFkb25seSBSZXNvbHZlZEl0ZW1Db25maWdbXTtcclxuICAgIHJlYWRvbmx5IHdpZHRoOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBtaW5XaWR0aDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBtaW5IZWlnaHQ6IG51bWJlcjtcclxuICAgIC8vIGlkIG5vIGxvbmdlciBzcGVjaWZpZXMgd2hldGhlciBhbiBJdGVtIGlzIG1heGltaXNlZC4gIFRoaXMgaXMgbm93IGRvbmUgYnkgSGVhZGVySXRlbUNvbmZpZy5tYXhpbWlzZWRcclxuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgICByZWFkb25seSBpc0Nsb3NhYmxlOiBib29sZWFuO1xyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJlc29sdmVkSXRlbUNvbmZpZyB7XHJcbiAgICBleHBvcnQgY29uc3QgZGVmYXVsdHM6IFJlc29sdmVkSXRlbUNvbmZpZyA9IHtcclxuICAgICAgICB0eXBlOiBJdGVtVHlwZS5ncm91bmQsIC8vIG5vdCByZWFsbHkgZGVmYXVsdCBidXQgbmVlZCBzb21ldGhpbmdcclxuICAgICAgICBjb250ZW50OiBbXSxcclxuICAgICAgICB3aWR0aDogNTAsXHJcbiAgICAgICAgbWluV2lkdGg6IDAsXHJcbiAgICAgICAgaGVpZ2h0OiA1MCxcclxuICAgICAgICBtaW5IZWlnaHQ6IDAsXHJcbiAgICAgICAgaWQ6ICcnLFxyXG4gICAgICAgIGlzQ2xvc2FibGU6IHRydWUsXHJcbiAgICB9IGFzIGNvbnN0O1xyXG5cclxuICAgIC8qKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgb3JpZ2luYWwgUmVzb2x2ZWRJdGVtQ29uZmlnIHVzaW5nIGFuIGFsdGVybmF0aXZlIGNvbnRlbnQgaWYgc3BlY2lmaWVkICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShvcmlnaW5hbDogUmVzb2x2ZWRJdGVtQ29uZmlnLCBjb250ZW50PzogUmVzb2x2ZWRJdGVtQ29uZmlnW10pOiBSZXNvbHZlZEl0ZW1Db25maWcge1xyXG4gICAgICAgIHN3aXRjaCAob3JpZ2luYWwudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmdyb3VuZDpcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5yb3c6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLmNyZWF0ZUNvcHkob3JpZ2luYWwgYXMgUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCBhcyBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZy5DaGlsZEl0ZW1Db25maWdbXSk7XHJcblxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnN0YWNrOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnLmNyZWF0ZUNvcHkob3JpZ2luYWwgYXMgUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcsIGNvbnRlbnQgYXMgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnW10pO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5jb21wb25lbnQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnLmNyZWF0ZUNvcHkob3JpZ2luYWwgYXMgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnKTtcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDYXNlRXJyb3IoJ0NJQ0M5MTM1NCcsIG9yaWdpbmFsLnR5cGUsICdJbnZhbGlkIENvbmZpZyBJdGVtIHR5cGUgc3BlY2lmaWVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0KHR5cGU6IEl0ZW1UeXBlKTogUmVzb2x2ZWRJdGVtQ29uZmlnIHtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5ncm91bmQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ0NJQ0NEUjkxNTYyJyk7IC8vIEdldCBkZWZhdWx0IHJvb3QgZnJvbSBMYXlvdXRDb25maWdcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5yb3c6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLmNyZWF0ZURlZmF1bHQodHlwZSk7XHJcblxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnN0YWNrOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnLmNyZWF0ZURlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29tcG9uZW50OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZy5jcmVhdGVEZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ2FzZUVycm9yKCdDSUNDREQ5MTU2MycsIHR5cGUsICdJbnZhbGlkIENvbmZpZyBJdGVtIHR5cGUgc3BlY2lmaWVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc0NvbXBvbmVudEl0ZW0oaXRlbUNvbmZpZzogUmVzb2x2ZWRJdGVtQ29uZmlnKTogaXRlbUNvbmZpZyBpcyBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcge1xyXG4gICAgICAgIHJldHVybiBpdGVtQ29uZmlnLnR5cGUgPT09IEl0ZW1UeXBlLmNvbXBvbmVudDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNTdGFja0l0ZW0oaXRlbUNvbmZpZzogUmVzb2x2ZWRJdGVtQ29uZmlnKTogaXRlbUNvbmZpZyBpcyBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1Db25maWcudHlwZSA9PT0gSXRlbVR5cGUuc3RhY2s7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzR3JvdW5kSXRlbShpdGVtQ29uZmlnOiBSZXNvbHZlZEl0ZW1Db25maWcpOiBpdGVtQ29uZmlnIGlzIFJlc29sdmVkR3JvdW5kSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1Db25maWcudHlwZSA9PT0gSXRlbVR5cGUuZ3JvdW5kO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBTdGFjayBvciBDb21wb25lbnRcclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZyBleHRlbmRzIFJlc29sdmVkSXRlbUNvbmZpZyB7XHJcbiAgICBoZWFkZXI6IFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLkhlYWRlciB8IHVuZGVmaW5lZDsgLy8gdW5kZWZpbmVkIG1lYW5zIGdldCBoZWFkZXIgc2V0dGluZ3MgZnJvbSBMYXlvdXRDb25maWdcclxuICAgIHJlYWRvbmx5IG1heGltaXNlZDogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZyB7XHJcbiAgICBleHBvcnQgY29uc3QgZGVmYXVsdE1heGltaXNlZCA9IGZhbHNlO1xyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSGVhZGVyIHtcclxuICAgICAgICAvLyB1bmRlZmluZWQgbWVhbnMgZ2V0IHByb3BlcnR5IHZhbHVlIGZyb20gTGF5b3V0Q29uZmlnXHJcbiAgICAgICAgcmVhZG9ubHkgc2hvdzogZmFsc2UgfCBTaWRlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIHJlYWRvbmx5IHBvcG91dDogZmFsc2UgfCBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmVhZG9ubHkgbWF4aW1pc2U6IGZhbHNlIHwgc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIHJlYWRvbmx5IGNsb3NlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmVhZG9ubHkgbWluaW1pc2U6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICByZWFkb25seSB0YWJEcm9wZG93bjogZmFsc2UgfCBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBIZWFkZXIge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb3B5KG9yaWdpbmFsOiBIZWFkZXIgfCB1bmRlZmluZWQsIHNob3c/OiBmYWxzZSB8IFNpZGUpOiBIZWFkZXIgfCB1bmRlZmluZWQge1xyXG4gICAgICAgICAgICBpZiAob3JpZ2luYWwgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogc2hvdyA/PyBvcmlnaW5hbC5zaG93LFxyXG4gICAgICAgICAgICAgICAgICAgIHBvcG91dDogb3JpZ2luYWwucG9wb3V0LFxyXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlOiBvcmlnaW5hbC5jbG9zZSxcclxuICAgICAgICAgICAgICAgICAgICBtYXhpbWlzZTogb3JpZ2luYWwubWF4aW1pc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWluaW1pc2U6IG9yaWdpbmFsLm1pbmltaXNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhYkRyb3Bkb3duOiBvcmlnaW5hbC50YWJEcm9wZG93bixcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyBleHRlbmRzIFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnIHtcclxuICAgIHJlYWRvbmx5IHR5cGU6ICdzdGFjayc7XHJcbiAgICByZWFkb25seSBjb250ZW50OiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWdbXTtcclxuICAgIC8qKiBUaGUgaW5kZXggb2YgdGhlIGFjdGl2ZSBpdGVtIGluIHRoZSBTdGFjay4gIE9ubHkgdW5kZWZpbmVkIGlmIHRoZSBTdGFjayBpcyBlbXB0eS4gKi9cclxuICAgIHJlYWRvbmx5IGFjdGl2ZUl0ZW1JbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnIHtcclxuICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0QWN0aXZlSXRlbUluZGV4ID0gMDtcclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShvcmlnaW5hbDogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcsIGNvbnRlbnQ/OiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWdbXSk6IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBvcmlnaW5hbC50eXBlLFxyXG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50ICE9PSB1bmRlZmluZWQgPyBjb3B5Q29udGVudChjb250ZW50KSA6IGNvcHlDb250ZW50KG9yaWdpbmFsLmNvbnRlbnQpLFxyXG4gICAgICAgICAgICB3aWR0aDogb3JpZ2luYWwud2lkdGgsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBvcmlnaW5hbC5taW5XaWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBvcmlnaW5hbC5oZWlnaHQsXHJcbiAgICAgICAgICAgIG1pbkhlaWdodDogb3JpZ2luYWwubWluSGVpZ2h0LFxyXG4gICAgICAgICAgICBpZDogb3JpZ2luYWwuaWQsXHJcbiAgICAgICAgICAgIG1heGltaXNlZDogb3JpZ2luYWwubWF4aW1pc2VkLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiBvcmlnaW5hbC5pc0Nsb3NhYmxlLFxyXG4gICAgICAgICAgICBhY3RpdmVJdGVtSW5kZXg6IG9yaWdpbmFsLmFjdGl2ZUl0ZW1JbmRleCxcclxuICAgICAgICAgICAgaGVhZGVyOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIuY3JlYXRlQ29weShvcmlnaW5hbC5oZWFkZXIpLFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjb3B5Q29udGVudChvcmlnaW5hbDogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnW10pOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBvcmlnaW5hbC5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZz4oY291bnQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHRbaV0gPSBSZXNvbHZlZEl0ZW1Db25maWcuY3JlYXRlQ29weShvcmlnaW5hbFtpXSkgYXMgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0KCk6IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBJdGVtVHlwZS5zdGFjayxcclxuICAgICAgICAgICAgY29udGVudDogW10sXHJcbiAgICAgICAgICAgIHdpZHRoOiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMud2lkdGgsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMubWluV2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmhlaWdodCxcclxuICAgICAgICAgICAgbWluSGVpZ2h0OiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMubWluSGVpZ2h0LFxyXG4gICAgICAgICAgICBpZDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlkLFxyXG4gICAgICAgICAgICBtYXhpbWlzZWQ6IFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLmRlZmF1bHRNYXhpbWlzZWQsXHJcbiAgICAgICAgICAgIGlzQ2xvc2FibGU6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5pc0Nsb3NhYmxlLFxyXG4gICAgICAgICAgICBhY3RpdmVJdGVtSW5kZXg6IGRlZmF1bHRBY3RpdmVJdGVtSW5kZXgsXHJcbiAgICAgICAgICAgIGhlYWRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyBleHRlbmRzIFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnIHtcclxuICAgIC8vIHNlZSBDb21wb25lbnRJdGVtQ29uZmlnIGZvciBjb21tZW50c1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ2NvbXBvbmVudCc7XHJcbiAgICByZWFkb25seSBjb250ZW50OiBbXTtcclxuICAgIHJlYWRvbmx5IHRpdGxlOiBzdHJpbmc7XHJcbiAgICByZWFkb25seSByZW9yZGVyRW5hYmxlZDogYm9vbGVhbjsgLy8gVGFrZXMgcHJlY2VkZW5jZSBvdmVyIExheW91dENvbmZpZy5yZW9yZGVyRW5hYmxlZC5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGNvbXBvbmVudCBhcyBzcGVjaWZpZWQgaW4gbGF5b3V0LnJlZ2lzdGVyQ29tcG9uZW50LiBNYW5kYXRvcnkgaWYgdHlwZSBpcyAnY29tcG9uZW50Jy5cclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgY29tcG9uZW50VHlwZTogSnNvblZhbHVlO1xyXG4gICAgcmVhZG9ubHkgY29tcG9uZW50U3RhdGU/OiBKc29uVmFsdWU7XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnIHtcclxuICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0UmVvcmRlckVuYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50VHlwZU5hbWUoaXRlbUNvbmZpZzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBjb21wb25lbnRUeXBlID0gaXRlbUNvbmZpZy5jb21wb25lbnRUeXBlO1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50VHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFR5cGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvcHkob3JpZ2luYWw6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyk6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IG9yaWdpbmFsLnR5cGUsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IFtdLFxyXG4gICAgICAgICAgICB3aWR0aDogb3JpZ2luYWwud2lkdGgsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBvcmlnaW5hbC5taW5XaWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBvcmlnaW5hbC5oZWlnaHQsXHJcbiAgICAgICAgICAgIG1pbkhlaWdodDogb3JpZ2luYWwubWluSGVpZ2h0LFxyXG4gICAgICAgICAgICBpZDogb3JpZ2luYWwuaWQsXHJcbiAgICAgICAgICAgIG1heGltaXNlZDogb3JpZ2luYWwubWF4aW1pc2VkLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiBvcmlnaW5hbC5pc0Nsb3NhYmxlLFxyXG4gICAgICAgICAgICByZW9yZGVyRW5hYmxlZDogb3JpZ2luYWwucmVvcmRlckVuYWJsZWQsXHJcbiAgICAgICAgICAgIHRpdGxlOiBvcmlnaW5hbC50aXRsZSxcclxuICAgICAgICAgICAgaGVhZGVyOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIuY3JlYXRlQ29weShvcmlnaW5hbC5oZWFkZXIpLFxyXG4gICAgICAgICAgICBjb21wb25lbnRUeXBlOiBvcmlnaW5hbC5jb21wb25lbnRUeXBlLFxyXG4gICAgICAgICAgICBjb21wb25lbnRTdGF0ZTogZGVlcEV4dGVuZFZhbHVlKHVuZGVmaW5lZCwgb3JpZ2luYWwuY29tcG9uZW50U3RhdGUpIGFzIEpzb25WYWx1ZSxcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdChjb21wb25lbnRUeXBlOiBKc29uVmFsdWUgPSAnJywgY29tcG9uZW50U3RhdGU/OiBKc29uVmFsdWUsIHRpdGxlID0gJycpOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBJdGVtVHlwZS5jb21wb25lbnQsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IFtdLFxyXG4gICAgICAgICAgICB3aWR0aDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLndpZHRoLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLm1pbldpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5oZWlnaHQsXHJcbiAgICAgICAgICAgIG1pbkhlaWdodDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLm1pbkhlaWdodCxcclxuICAgICAgICAgICAgaWQ6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5pZCxcclxuICAgICAgICAgICAgbWF4aW1pc2VkOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5kZWZhdWx0TWF4aW1pc2VkLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMuaXNDbG9zYWJsZSxcclxuICAgICAgICAgICAgcmVvcmRlckVuYWJsZWQ6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZy5kZWZhdWx0UmVvcmRlckVuYWJsZWQsXHJcbiAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgICAgICBoZWFkZXI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgY29tcG9uZW50VHlwZSxcclxuICAgICAgICAgICAgY29tcG9uZW50U3RhdGUsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNvcHlDb21wb25lbnRUeXBlKGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZSk6IEpzb25WYWx1ZSB7XHJcbiAgICAgICAgcmV0dXJuIGRlZXBFeHRlbmRWYWx1ZSh7fSwgY29tcG9uZW50VHlwZSkgYXMgSnNvblZhbHVlXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBCYXNlIGZvciBSb290IG9yIFJvd09yQ29sdW1uIEl0ZW1Db25maWdzXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcgZXh0ZW5kcyBSZXNvbHZlZEl0ZW1Db25maWcge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ3JvdycgfCAnY29sdW1uJztcclxuICAgIC8qKiBOb3RlIHRoYXQgUm93T3JDb2x1bW4gUmVzb2x2ZWRJdGVtQ29uZmlnIGNvbnRlbnRzLCBjYW4gY29udGFpbiBDb21wb25lbnRJdGVtIGl0ZW1Db25maWdzLiAgSG93ZXZlclxyXG4gICAgICogd2hlbiBDb250ZW50SXRlbXMgYXJlIGNyZWF0ZWQsIHRoZXNlIENvbXBvbmVudEl0ZW0gaXRlbUNvbmZpZ3Mgd2lsbCBjcmVhdGUgYSBTdGFjayB3aXRoIGEgY2hpbGQgQ29tcG9uZW50SXRlbS5cclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgY29udGVudDogcmVhZG9ubHkgKFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnIHwgUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcgfCBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcpW107XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcge1xyXG4gICAgZXhwb3J0IHR5cGUgQ2hpbGRJdGVtQ29uZmlnID0gUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB8IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZztcclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNDaGlsZEl0ZW1Db25maWcoaXRlbUNvbmZpZzogUmVzb2x2ZWRJdGVtQ29uZmlnKTogaXRlbUNvbmZpZyBpcyBDaGlsZEl0ZW1Db25maWcge1xyXG4gICAgICAgIHN3aXRjaCAoaXRlbUNvbmZpZy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUucm93OlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbHVtbjpcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5zdGFjazpcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5jb21wb25lbnQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5ncm91bmQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDYXNlRXJyb3IoJ0NST0NPU1BDSUNJQzEzNjg3JywgaXRlbUNvbmZpZy50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvcHkob3JpZ2luYWw6IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLCBjb250ZW50PzogQ2hpbGRJdGVtQ29uZmlnW10pOiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgdHlwZTogb3JpZ2luYWwudHlwZSxcclxuICAgICAgICAgICAgY29udGVudDogY29udGVudCAhPT0gdW5kZWZpbmVkID8gY29weUNvbnRlbnQoY29udGVudCkgOiBjb3B5Q29udGVudChvcmlnaW5hbC5jb250ZW50KSxcclxuICAgICAgICAgICAgd2lkdGg6IG9yaWdpbmFsLndpZHRoLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogb3JpZ2luYWwubWluV2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogb3JpZ2luYWwuaGVpZ2h0LFxyXG4gICAgICAgICAgICBtaW5IZWlnaHQ6IG9yaWdpbmFsLm1pbkhlaWdodCxcclxuICAgICAgICAgICAgaWQ6IG9yaWdpbmFsLmlkLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiBvcmlnaW5hbC5pc0Nsb3NhYmxlLFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjb3B5Q29udGVudChvcmlnaW5hbDogcmVhZG9ubHkgQ2hpbGRJdGVtQ29uZmlnW10pOiBDaGlsZEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBvcmlnaW5hbC5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PENoaWxkSXRlbUNvbmZpZz4oY291bnQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHRbaV0gPSBSZXNvbHZlZEl0ZW1Db25maWcuY3JlYXRlQ29weShvcmlnaW5hbFtpXSkgYXMgQ2hpbGRJdGVtQ29uZmlnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0KHR5cGU6ICdyb3cnIHwgJ2NvbHVtbicpOiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgY29udGVudDogW10sXHJcbiAgICAgICAgICAgIHdpZHRoOiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMud2lkdGgsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMubWluV2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmhlaWdodCxcclxuICAgICAgICAgICAgbWluSGVpZ2h0OiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMubWluSGVpZ2h0LFxyXG4gICAgICAgICAgICBpZDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlkLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMuaXNDbG9zYWJsZSxcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJvb3RJdGVtQ29uZmlnIGlzIHRoZSB0b3Btb3N0IFJlc29sdmVkSXRlbUNvbmZpZyBzcGVjaWZpZWQgYnkgdGhlIHVzZXIuXHJcbiAqIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBoYXZlIGEgY29ycmVzcG9uZGluZyBjb250ZW50SXRlbS4gIEl0IHNwZWNpZmllcyB0aGUgb25lIGFuZCBvbmx5IGNoaWxkIG9mIHRoZSBHcm91bmQgQ29udGVudEl0ZW1cclxuICogTm90ZSB0aGF0IFJvb3RJdGVtQ29uZmlnIGNhbiBiZSBhbiBDb21wb25lbnRJdGVtIGl0ZW1Db25maWcuICBIb3dldmVyIHdoZW4gdGhlIEdyb3VuZCBDb250ZW50SXRlbSdzIGNoaWxkIGlzIGNyZWF0ZWRcclxuICogYSBDb21wb25lbnRJdGVtIGl0ZW1Db25maWcgd2lsbCBjcmVhdGUgYSBTdGFjayB3aXRoIGEgY2hpbGQgQ29tcG9uZW50SXRlbS5cclxuICogQHB1YmxpY1xyXG4qL1xyXG5leHBvcnQgdHlwZSBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnID0gUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB8IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZztcclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgUmVzb2x2ZWRSb290SXRlbUNvbmZpZyB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShjb25maWc6IFJlc29sdmVkUm9vdEl0ZW1Db25maWcpOiBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnIHtcclxuICAgICAgICByZXR1cm4gUmVzb2x2ZWRJdGVtQ29uZmlnLmNyZWF0ZUNvcHkoY29uZmlnKSBhcyBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc1Jvb3RJdGVtQ29uZmlnKGl0ZW1Db25maWc6IFJlc29sdmVkSXRlbUNvbmZpZyk6IGl0ZW1Db25maWcgaXMgUmVzb2x2ZWRSb290SXRlbUNvbmZpZyB7XHJcbiAgICAgICAgc3dpdGNoIChpdGVtQ29uZmlnLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5yb3c6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnN0YWNrOlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbXBvbmVudDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmdyb3VuZDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNhc2VFcnJvcignQ1JPQ09TUENJQ0lDMTM2ODcnLCBpdGVtQ29uZmlnLnR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlc29sdmVkR3JvdW5kSXRlbUNvbmZpZyBleHRlbmRzIFJlc29sdmVkSXRlbUNvbmZpZyB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnZ3JvdW5kJztcclxuICAgIHJlYWRvbmx5IHdpZHRoOiAxMDAsXHJcbiAgICByZWFkb25seSBtaW5XaWR0aDogMCxcclxuICAgIHJlYWRvbmx5IGhlaWdodDogMTAwLFxyXG4gICAgcmVhZG9ubHkgbWluSGVpZ2h0OiAwLFxyXG4gICAgcmVhZG9ubHkgaWQ6ICcnLFxyXG4gICAgcmVhZG9ubHkgaXNDbG9zYWJsZTogZmFsc2UsXHJcbiAgICByZWFkb25seSB0aXRsZTogJycsXHJcbiAgICByZWFkb25seSByZW9yZGVyRW5hYmxlZDogZmFsc2UsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBSZXNvbHZlZEdyb3VuZEl0ZW1Db25maWcge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShyb290SXRlbUNvbmZpZzogUmVzb2x2ZWRSb290SXRlbUNvbmZpZyB8IHVuZGVmaW5lZCk6UmVzb2x2ZWRHcm91bmRJdGVtQ29uZmlnIHtcclxuICAgICAgICBjb25zdCBjb250ZW50ID0gcm9vdEl0ZW1Db25maWcgPT09IHVuZGVmaW5lZCA/IFtdIDogW3Jvb3RJdGVtQ29uZmlnXTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiBJdGVtVHlwZS5ncm91bmQsXHJcbiAgICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAsXHJcbiAgICAgICAgICAgIG1pbldpZHRoOiAwLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCxcclxuICAgICAgICAgICAgbWluSGVpZ2h0OiAwLFxyXG4gICAgICAgICAgICBpZDogJycsXHJcbiAgICAgICAgICAgIGlzQ2xvc2FibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICB0aXRsZTogJycsXHJcbiAgICAgICAgICAgIHJlb3JkZXJFbmFibGVkOiBmYWxzZSxcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzb2x2ZWRMYXlvdXRDb25maWcge1xyXG4gICAgcmVhZG9ubHkgcm9vdDogUmVzb2x2ZWRSb290SXRlbUNvbmZpZyB8IHVuZGVmaW5lZDtcclxuICAgIHJlYWRvbmx5IG9wZW5Qb3BvdXRzOiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZ1tdO1xyXG4gICAgcmVhZG9ubHkgZGltZW5zaW9uczogUmVzb2x2ZWRMYXlvdXRDb25maWcuRGltZW5zaW9ucztcclxuICAgIHJlYWRvbmx5IHNldHRpbmdzOiBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncztcclxuICAgIHJlYWRvbmx5IGhlYWRlcjogUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyO1xyXG4gICAgcmVhZG9ubHkgcmVzb2x2ZWQ6IHRydWUsXHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgUmVzb2x2ZWRMYXlvdXRDb25maWcge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBTZXR0aW5ncyB7XHJcbiAgICAgICAgLy8gc2VlIENvbmZpZy5TZXR0aW5ncyBmb3IgY29tbWVudHNcclxuICAgICAgICByZWFkb25seSBjb25zdHJhaW5EcmFnVG9Db250YWluZXI6IGJvb2xlYW47XHJcbiAgICAgICAgcmVhZG9ubHkgcmVvcmRlckVuYWJsZWQ6IGJvb2xlYW47IC8vIGFsc28gaW4gUmVzb2x2ZWRJdGVtQ29uZmlnIHdoaWNoIHRha2VzIHByZWNlZGVuY2VcclxuICAgICAgICByZWFkb25seSBwb3BvdXRXaG9sZVN0YWNrOiBib29sZWFuO1xyXG4gICAgICAgIHJlYWRvbmx5IGJsb2NrZWRQb3BvdXRzVGhyb3dFcnJvcjogYm9vbGVhbjtcclxuICAgICAgICByZWFkb25seSBjbG9zZVBvcG91dHNPblVubG9hZDogYm9vbGVhbjtcclxuICAgICAgICByZWFkb25seSByZXNwb25zaXZlTW9kZTogUmVzcG9uc2l2ZU1vZGU7XHJcbiAgICAgICAgcmVhZG9ubHkgdGFiT3ZlcmxhcEFsbG93YW5jZTogbnVtYmVyO1xyXG4gICAgICAgIHJlYWRvbmx5IHJlb3JkZXJPblRhYk1lbnVDbGljazogYm9vbGVhbjtcclxuICAgICAgICByZWFkb25seSB0YWJDb250cm9sT2Zmc2V0OiBudW1iZXI7XHJcbiAgICAgICAgcmVhZG9ubHkgcG9wSW5PbkNsb3NlOiBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgU2V0dGluZ3Mge1xyXG4gICAgICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0czogUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MgPSB7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbkRyYWdUb0NvbnRhaW5lcjogdHJ1ZSxcclxuICAgICAgICAgICAgcmVvcmRlckVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIHBvcG91dFdob2xlU3RhY2s6IGZhbHNlLFxyXG4gICAgICAgICAgICBibG9ja2VkUG9wb3V0c1Rocm93RXJyb3I6IHRydWUsXHJcbiAgICAgICAgICAgIGNsb3NlUG9wb3V0c09uVW5sb2FkOiB0cnVlLFxyXG4gICAgICAgICAgICByZXNwb25zaXZlTW9kZTogUmVzcG9uc2l2ZU1vZGUubm9uZSwgLy8gd2FzIG9ubG9hZFxyXG4gICAgICAgICAgICB0YWJPdmVybGFwQWxsb3dhbmNlOiAwLFxyXG4gICAgICAgICAgICByZW9yZGVyT25UYWJNZW51Q2xpY2s6IHRydWUsXHJcbiAgICAgICAgICAgIHRhYkNvbnRyb2xPZmZzZXQ6IDEwLFxyXG4gICAgICAgICAgICBwb3BJbk9uQ2xvc2U6IGZhbHNlLFxyXG4gICAgICAgIH0gYXMgY29uc3Q7XHJcblxyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb3B5KG9yaWdpbmFsOiBTZXR0aW5ncyk6IFNldHRpbmdzIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0cmFpbkRyYWdUb0NvbnRhaW5lcjogb3JpZ2luYWwuY29uc3RyYWluRHJhZ1RvQ29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgcmVvcmRlckVuYWJsZWQ6IG9yaWdpbmFsLnJlb3JkZXJFbmFibGVkLFxyXG4gICAgICAgICAgICAgICAgcG9wb3V0V2hvbGVTdGFjazogb3JpZ2luYWwucG9wb3V0V2hvbGVTdGFjayxcclxuICAgICAgICAgICAgICAgIGJsb2NrZWRQb3BvdXRzVGhyb3dFcnJvcjogb3JpZ2luYWwuYmxvY2tlZFBvcG91dHNUaHJvd0Vycm9yLFxyXG4gICAgICAgICAgICAgICAgY2xvc2VQb3BvdXRzT25VbmxvYWQ6IG9yaWdpbmFsLmNsb3NlUG9wb3V0c09uVW5sb2FkLFxyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZU1vZGU6IG9yaWdpbmFsLnJlc3BvbnNpdmVNb2RlLFxyXG4gICAgICAgICAgICAgICAgdGFiT3ZlcmxhcEFsbG93YW5jZTogb3JpZ2luYWwudGFiT3ZlcmxhcEFsbG93YW5jZSxcclxuICAgICAgICAgICAgICAgIHJlb3JkZXJPblRhYk1lbnVDbGljazogb3JpZ2luYWwucmVvcmRlck9uVGFiTWVudUNsaWNrLFxyXG4gICAgICAgICAgICAgICAgdGFiQ29udHJvbE9mZnNldDogb3JpZ2luYWwudGFiQ29udHJvbE9mZnNldCxcclxuICAgICAgICAgICAgICAgIHBvcEluT25DbG9zZTogb3JpZ2luYWwucG9wSW5PbkNsb3NlLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRGltZW5zaW9ucyB7XHJcbiAgICAgICAgLy8gc2VlIExheW91dENvbmZpZy5EaW1lbnNpb25zIGZvciBjb21tZW50c1xyXG4gICAgICAgIHJlYWRvbmx5IGJvcmRlcldpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgcmVhZG9ubHkgYm9yZGVyR3JhYldpZHRoOiBudW1iZXIsXHJcbiAgICAgICAgcmVhZG9ubHkgbWluSXRlbUhlaWdodDogbnVtYmVyO1xyXG4gICAgICAgIHJlYWRvbmx5IG1pbkl0ZW1XaWR0aDogbnVtYmVyO1xyXG4gICAgICAgIHJlYWRvbmx5IGhlYWRlckhlaWdodDogbnVtYmVyO1xyXG4gICAgICAgIHJlYWRvbmx5IGRyYWdQcm94eVdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgcmVhZG9ubHkgZHJhZ1Byb3h5SGVpZ2h0OiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBEaW1lbnNpb25zIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShvcmlnaW5hbDogRGltZW5zaW9ucyk6IERpbWVuc2lvbnMge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IG9yaWdpbmFsLmJvcmRlcldpZHRoLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyR3JhYldpZHRoOiBvcmlnaW5hbC5ib3JkZXJHcmFiV2lkdGgsXHJcbiAgICAgICAgICAgICAgICBtaW5JdGVtSGVpZ2h0OiBvcmlnaW5hbC5taW5JdGVtSGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgbWluSXRlbVdpZHRoOiBvcmlnaW5hbC5taW5JdGVtV2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJIZWlnaHQ6IG9yaWdpbmFsLmhlYWRlckhlaWdodCxcclxuICAgICAgICAgICAgICAgIGRyYWdQcm94eVdpZHRoOiBvcmlnaW5hbC5kcmFnUHJveHlXaWR0aCxcclxuICAgICAgICAgICAgICAgIGRyYWdQcm94eUhlaWdodDogb3JpZ2luYWwuZHJhZ1Byb3h5SGVpZ2h0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnQgY29uc3QgZGVmYXVsdHM6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMgPSB7XHJcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOiA1LFxyXG4gICAgICAgICAgICBib3JkZXJHcmFiV2lkdGg6IDUsXHJcbiAgICAgICAgICAgIG1pbkl0ZW1IZWlnaHQ6IDEwLFxyXG4gICAgICAgICAgICBtaW5JdGVtV2lkdGg6IDEwLFxyXG4gICAgICAgICAgICBoZWFkZXJIZWlnaHQ6IDIwLFxyXG4gICAgICAgICAgICBkcmFnUHJveHlXaWR0aDogMzAwLFxyXG4gICAgICAgICAgICBkcmFnUHJveHlIZWlnaHQ6IDIwMFxyXG4gICAgICAgIH0gYXMgY29uc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBIZWFkZXIge1xyXG4gICAgICAgIHJlYWRvbmx5IHNob3c6IGZhbHNlIHwgU2lkZTtcclxuICAgICAgICByZWFkb25seSBwb3BvdXQ6IGZhbHNlIHwgc3RyaW5nO1xyXG4gICAgICAgIHJlYWRvbmx5IGRvY2s6IHN0cmluZztcclxuICAgICAgICByZWFkb25seSBtYXhpbWlzZTogZmFsc2UgfCBzdHJpbmc7XHJcbiAgICAgICAgcmVhZG9ubHkgbWluaW1pc2U6IHN0cmluZztcclxuICAgICAgICByZWFkb25seSBjbG9zZTogZmFsc2UgfCBzdHJpbmc7XHJcbiAgICAgICAgcmVhZG9ubHkgdGFiRHJvcGRvd246IGZhbHNlIHwgc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgSGVhZGVyIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShvcmlnaW5hbDogSGVhZGVyKTogSGVhZGVyIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNob3c6IG9yaWdpbmFsLnNob3csXHJcbiAgICAgICAgICAgICAgICBwb3BvdXQ6IG9yaWdpbmFsLnBvcG91dCxcclxuICAgICAgICAgICAgICAgIGRvY2s6IG9yaWdpbmFsLmRvY2ssXHJcbiAgICAgICAgICAgICAgICBjbG9zZTogb3JpZ2luYWwuY2xvc2UsXHJcbiAgICAgICAgICAgICAgICBtYXhpbWlzZTogb3JpZ2luYWwubWF4aW1pc2UsXHJcbiAgICAgICAgICAgICAgICBtaW5pbWlzZTogb3JpZ2luYWwubWluaW1pc2UsXHJcbiAgICAgICAgICAgICAgICB0YWJEcm9wZG93bjogb3JpZ2luYWwudGFiRHJvcGRvd24sXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0czogUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyID0ge1xyXG4gICAgICAgICAgICBzaG93OiBTaWRlLnRvcCxcclxuICAgICAgICAgICAgcG9wb3V0OiAnb3BlbiBpbiBuZXcgd2luZG93JyxcclxuICAgICAgICAgICAgZG9jazogJ2RvY2snLFxyXG4gICAgICAgICAgICBtYXhpbWlzZTogJ21heGltaXNlJyxcclxuICAgICAgICAgICAgbWluaW1pc2U6ICdtaW5pbWlzZScsXHJcbiAgICAgICAgICAgIGNsb3NlOiAnY2xvc2UnLFxyXG4gICAgICAgICAgICB0YWJEcm9wZG93bjogJ2FkZGl0aW9uYWwgdGFicydcclxuICAgICAgICB9IGFzIGNvbnN0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc1BvcG91dChjb25maWc6IFJlc29sdmVkTGF5b3V0Q29uZmlnKTogY29uZmlnIGlzIFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnIHtcclxuICAgICAgICByZXR1cm4gJ3BhcmVudElkJyBpbiBjb25maWc7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHQoKTogUmVzb2x2ZWRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRMYXlvdXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgIHJvb3Q6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgb3BlblBvcG91dHM6IFtdLFxyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zLmRlZmF1bHRzLFxyXG4gICAgICAgICAgICBzZXR0aW5nczogUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuZGVmYXVsdHMsXHJcbiAgICAgICAgICAgIGhlYWRlcjogUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmRlZmF1bHRzLFxyXG4gICAgICAgICAgICByZXNvbHZlZDogdHJ1ZSxcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShjb25maWc6IFJlc29sdmVkTGF5b3V0Q29uZmlnKTogUmVzb2x2ZWRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIGlmIChpc1BvcG91dChjb25maWcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZy5jcmVhdGVDb3B5KGNvbmZpZyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZExheW91dENvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgIHJvb3Q6IGNvbmZpZy5yb290ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnLmNyZWF0ZUNvcHkoY29uZmlnLnJvb3QpLFxyXG4gICAgICAgICAgICAgICAgb3BlblBvcG91dHM6IFJlc29sdmVkTGF5b3V0Q29uZmlnLmNvcHlPcGVuUG9wb3V0cyhjb25maWcub3BlblBvcG91dHMpLFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmNyZWF0ZUNvcHkoY29uZmlnLnNldHRpbmdzKSxcclxuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMuY3JlYXRlQ29weShjb25maWcuZGltZW5zaW9ucyksXHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlci5jcmVhdGVDb3B5KGNvbmZpZy5oZWFkZXIpLFxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQ6IGNvbmZpZy5yZXNvbHZlZCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY29weU9wZW5Qb3BvdXRzKG9yaWdpbmFsOiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZ1tdKTogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBvcmlnaW5hbC5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnPihjb3VudCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLmNyZWF0ZUNvcHkob3JpZ2luYWxbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGFrZXMgYSBHb2xkZW5MYXlvdXQgY29uZmlndXJhdGlvbiBvYmplY3QgYW5kXHJcbiAgICAgKiByZXBsYWNlcyBpdHMga2V5cyBhbmQgdmFsdWVzIHJlY3Vyc2l2ZWx5IHdpdGhcclxuICAgICAqIG9uZSBsZXR0ZXIgY291bnRlcnBhcnRzXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBtaW5pZnlDb25maWcobGF5b3V0Q29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZyk6IFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgICAgICByZXR1cm4gQ29uZmlnTWluaWZpZXIudHJhbnNsYXRlT2JqZWN0KGxheW91dENvbmZpZywgdHJ1ZSkgYXMgUmVzb2x2ZWRMYXlvdXRDb25maWc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUYWtlcyBhIGNvbmZpZ3VyYXRpb24gT2JqZWN0IHRoYXQgd2FzIHByZXZpb3VzbHkgbWluaWZpZWRcclxuICAgICAqIHVzaW5nIG1pbmlmeUNvbmZpZyBhbmQgcmV0dXJucyBpdHMgb3JpZ2luYWwgdmVyc2lvblxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gdW5taW5pZnlDb25maWcobWluaWZpZWRDb25maWc6IFJlc29sdmVkTGF5b3V0Q29uZmlnKTogUmVzb2x2ZWRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIHJldHVybiBDb25maWdNaW5pZmllci50cmFuc2xhdGVPYmplY3QobWluaWZpZWRDb25maWcsIGZhbHNlKSBhcyBSZXNvbHZlZExheW91dENvbmZpZztcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZyBleHRlbmRzIFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgIHJlYWRvbmx5IHBhcmVudElkOiBzdHJpbmcgfCBudWxsO1xyXG4gICAgcmVhZG9ubHkgaW5kZXhJblBhcmVudDogbnVtYmVyIHwgbnVsbDtcclxuICAgIHJlYWRvbmx5IHdpbmRvdzogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcuV2luZG93O1xyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICByZWFkb25seSB3aWR0aDogbnVtYmVyIHwgbnVsbCxcclxuICAgICAgICByZWFkb25seSBoZWlnaHQ6IG51bWJlciB8IG51bGwsXHJcbiAgICAgICAgcmVhZG9ubHkgbGVmdDogbnVtYmVyIHwgbnVsbCxcclxuICAgICAgICByZWFkb25seSB0b3A6IG51bWJlciB8IG51bGwsXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBXaW5kb3cge1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb3B5KG9yaWdpbmFsOiBXaW5kb3cpOiBXaW5kb3cge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IG9yaWdpbmFsLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBvcmlnaW5hbC5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBvcmlnaW5hbC5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgdG9wOiBvcmlnaW5hbC50b3AsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0czogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcuV2luZG93ID0ge1xyXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBudWxsLFxyXG4gICAgICAgICAgICBsZWZ0OiBudWxsLFxyXG4gICAgICAgICAgICB0b3A6IG51bGwsXHJcbiAgICAgICAgfSBhcyBjb25zdDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShvcmlnaW5hbDogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcpOiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZyA9IHtcclxuICAgICAgICAgICAgcm9vdDogb3JpZ2luYWwucm9vdCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogUmVzb2x2ZWRSb290SXRlbUNvbmZpZy5jcmVhdGVDb3B5KG9yaWdpbmFsLnJvb3QpLFxyXG4gICAgICAgICAgICBvcGVuUG9wb3V0czogUmVzb2x2ZWRMYXlvdXRDb25maWcuY29weU9wZW5Qb3BvdXRzKG9yaWdpbmFsLm9wZW5Qb3BvdXRzKSxcclxuICAgICAgICAgICAgc2V0dGluZ3M6IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmNyZWF0ZUNvcHkob3JpZ2luYWwuc2V0dGluZ3MpLFxyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zLmNyZWF0ZUNvcHkob3JpZ2luYWwuZGltZW5zaW9ucyksXHJcbiAgICAgICAgICAgIGhlYWRlcjogUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmNyZWF0ZUNvcHkob3JpZ2luYWwuaGVhZGVyKSxcclxuICAgICAgICAgICAgcGFyZW50SWQ6IG9yaWdpbmFsLnBhcmVudElkLFxyXG4gICAgICAgICAgICBpbmRleEluUGFyZW50OiBvcmlnaW5hbC5pbmRleEluUGFyZW50LFxyXG4gICAgICAgICAgICB3aW5kb3c6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLldpbmRvdy5jcmVhdGVDb3B5KG9yaWdpbmFsLndpbmRvdyksXHJcbiAgICAgICAgICAgIHJlc29sdmVkOiBvcmlnaW5hbC5yZXNvbHZlZCxcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnRJdGVtQ29uZmlnLCBJdGVtQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZyc7XHJcbmltcG9ydCB7IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9yZXNvbHZlZC1jb25maWcnO1xyXG5pbXBvcnQgeyBUYWIgfSBmcm9tICcuLi9jb250cm9scy90YWInO1xyXG5pbXBvcnQgeyBBc3NlcnRFcnJvciwgVW5leHBlY3RlZE51bGxFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9pbnRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuLi9pdGVtcy9jb21wb25lbnQtaXRlbSc7XHJcbmltcG9ydCB7IENvbnRlbnRJdGVtIH0gZnJvbSAnLi4vaXRlbXMvY29udGVudC1pdGVtJztcclxuaW1wb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4uL2xheW91dC1tYW5hZ2VyJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vdXRpbHMvZXZlbnQtZW1pdHRlcic7XHJcbmltcG9ydCB7IFN0eWxlQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvc3R5bGUtY29uc3RhbnRzJztcclxuaW1wb3J0IHsgSnNvblZhbHVlLCBMb2dpY2FsWkluZGV4IH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xyXG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBzZXRFbGVtZW50SGVpZ2h0LCBzZXRFbGVtZW50V2lkdGggfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50Q29udGFpbmVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2NvbXBvbmVudFR5cGU6IEpzb25WYWx1ZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2JvdW5kQ29tcG9uZW50OiBDb21wb25lbnRDb250YWluZXIuQmluZGFibGVDb21wb25lbnQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF93aWR0aDogbnVtYmVyO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9pc0Nsb3NhYmxlO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfaW5pdGlhbFN0YXRlOiBKc29uVmFsdWUgfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9zdGF0ZTogSnNvblZhbHVlIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdmlzaWJsZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzU2hvd25XaXRoWmVyb0RpbWVuc2lvbnM7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF90YWI6IFRhYjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3N0YWNrTWF4aW1pc2VkID0gZmFsc2U7XHJcblxyXG4gICAgc3RhdGVSZXF1ZXN0RXZlbnQ6IENvbXBvbmVudENvbnRhaW5lci5TdGF0ZVJlcXVlc3RFdmVudEhhbmRsZXIgfCB1bmRlZmluZWQ7XHJcbiAgICB2aXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQ6IENvbXBvbmVudENvbnRhaW5lci5WaXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQgfCB1bmRlZmluZWQ7XHJcbiAgICB2aXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQ6IENvbXBvbmVudENvbnRhaW5lci5WaXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQgfCB1bmRlZmluZWQ7XHJcbiAgICB2aXJ0dWFsWkluZGV4Q2hhbmdlUmVxdWlyZWRFdmVudDogQ29tcG9uZW50Q29udGFpbmVyLlZpcnR1YWxaSW5kZXhDaGFuZ2VSZXF1aXJlZEV2ZW50IHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIGdldCB3aWR0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fd2lkdGg7IH1cclxuICAgIGdldCBoZWlnaHQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2hlaWdodDsgfVxyXG4gICAgZ2V0IHBhcmVudCgpOiBDb21wb25lbnRJdGVtIHsgcmV0dXJuIHRoaXMuX3BhcmVudDsgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChDb21wb25lbnRDb250YWluZXI6Y2xhc3MpLmNvbXBvbmVudFR5cGV9ICovXHJcbiAgICBnZXQgY29tcG9uZW50TmFtZSgpOiBKc29uVmFsdWUgeyByZXR1cm4gdGhpcy5fY29tcG9uZW50VHlwZTsgfVxyXG4gICAgZ2V0IGNvbXBvbmVudFR5cGUoKTogSnNvblZhbHVlIHsgcmV0dXJuIHRoaXMuX2NvbXBvbmVudFR5cGU7IH1cclxuICAgIGdldCB2aXJ0dWFsKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fYm91bmRDb21wb25lbnQudmlydHVhbDsgfVxyXG4gICAgZ2V0IGNvbXBvbmVudCgpOiBDb21wb25lbnRDb250YWluZXIuQ29tcG9uZW50IHsgcmV0dXJuIHRoaXMuX2JvdW5kQ29tcG9uZW50LmNvbXBvbmVudDsgfVxyXG4gICAgZ2V0IHRhYigpOiBUYWIgeyByZXR1cm4gdGhpcy5fdGFiOyB9XHJcbiAgICBnZXQgdGl0bGUoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3BhcmVudC50aXRsZTsgfVxyXG4gICAgZ2V0IGxheW91dE1hbmFnZXIoKTogTGF5b3V0TWFuYWdlciB7IHJldHVybiB0aGlzLl9sYXlvdXRNYW5hZ2VyOyB9XHJcbiAgICBnZXQgaXNIaWRkZW4oKTogYm9vbGVhbiB7IHJldHVybiAhdGhpcy5fdmlzaWJsZTsgfVxyXG4gICAgZ2V0IHZpc2libGUoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl92aXNpYmxlOyB9XHJcbiAgICBnZXQgc3RhdGUoKTogSnNvblZhbHVlIHwgdW5kZWZpbmVkIHsgcmV0dXJuIHRoaXMuX3N0YXRlOyB9XHJcbiAgICAvKiogUmV0dXJuIHRoZSBpbml0aWFsIGNvbXBvbmVudCBzdGF0ZSAqL1xyXG4gICAgZ2V0IGluaXRpYWxTdGF0ZSgpOiBKc29uVmFsdWUgfCB1bmRlZmluZWQgeyByZXR1cm4gdGhpcy5faW5pdGlhbFN0YXRlOyB9XHJcbiAgICAvKiogVGhlIGlubmVyIERPTSBlbGVtZW50IHdoZXJlIHRoZSBjb250YWluZXIncyBjb250ZW50IGlzIGludGVuZGVkIHRvIGxpdmUgaW4gKi9cclxuICAgIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7IH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3BhcmVudDogQ29tcG9uZW50SXRlbSxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfbGF5b3V0TWFuYWdlcjogTGF5b3V0TWFuYWdlcixcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3VwZGF0ZUl0ZW1Db25maWdFdmVudDogQ29tcG9uZW50Q29udGFpbmVyLlVwZGF0ZUl0ZW1Db25maWdFdmVudEhhbmRsZXIsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3Nob3dFdmVudDogQ29tcG9uZW50Q29udGFpbmVyLlNob3dFdmVudEhhbmRsZXIsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2hpZGVFdmVudDogQ29tcG9uZW50Q29udGFpbmVyLkhpZGVFdmVudEhhbmRsZXIsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2ZvY3VzRXZlbnQ6IENvbXBvbmVudENvbnRhaW5lci5Gb2N1c0V2ZW50SGFuZGxlcixcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfYmx1ckV2ZW50OiBDb21wb25lbnRDb250YWluZXIuQmx1ckV2ZW50SGFuZGxlcixcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3dpZHRoID0gMDtcclxuICAgICAgICB0aGlzLl9oZWlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2lzU2hvd25XaXRoWmVyb0RpbWVuc2lvbnMgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLl9jb21wb25lbnRUeXBlID0gX2NvbmZpZy5jb21wb25lbnRUeXBlO1xyXG4gICAgICAgIHRoaXMuX2lzQ2xvc2FibGUgPSBfY29uZmlnLmlzQ2xvc2FibGU7XHJcbiAgICAgICAgdGhpcy5faW5pdGlhbFN0YXRlID0gX2NvbmZpZy5jb21wb25lbnRTdGF0ZTtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuX2luaXRpYWxTdGF0ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fYm91bmRDb21wb25lbnQgPSB0aGlzLmxheW91dE1hbmFnZXIuYmluZENvbXBvbmVudCh0aGlzLCBfY29uZmlnKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50UG9zaXRpb25Qcm9wZXJ0eUZyb21Cb3VuZENvbXBvbmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZWxlYXNlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVJlcXVlc3RFdmVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmVtaXQoJ2Rlc3Ryb3knKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoQ29tcG9uZW50Q29udGFpbmVyOmNsYXNzKS5lbGVtZW50IH0gKi9cclxuICAgIGdldEVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlkZXMgdGhlIGNvbnRhaW5lcidzIGNvbXBvbmVudCBpdGVtIChhbmQgaGVuY2UsIHRoZSBjb250YWluZXIpIGlmIG5vdCBhbHJlYWR5IGhpZGRlbi5cclxuICAgICAqIEVtaXRzIGhpZGUgZXZlbnQgcHJpb3IgdG8gaGlkaW5nIHRoZSBjb250YWluZXIuXHJcbiAgICAgKi9cclxuICAgIGhpZGUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5faGlkZUV2ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93cyB0aGUgY29udGFpbmVyJ3MgY29tcG9uZW50IGl0ZW0gKGFuZCBoZW5jZSwgdGhlIGNvbnRhaW5lcikgaWYgbm90IHZpc2libGUuXHJcbiAgICAgKiBFbWl0cyBzaG93IGV2ZW50IHByaW9yIHRvIGhpZGluZyB0aGUgY29udGFpbmVyLlxyXG4gICAgICovXHJcbiAgICBzaG93KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3Nob3dFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm9jdXMgdGhpcyBjb21wb25lbnQgaW4gTGF5b3V0LlxyXG4gICAgICovXHJcbiAgICBmb2N1cyhzdXBwcmVzc0V2ZW50ID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9mb2N1c0V2ZW50KHN1cHByZXNzRXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGZvY3VzIGZyb20gdGhpcyBjb21wb25lbnQgaW4gTGF5b3V0LlxyXG4gICAgICovXHJcbiAgICBibHVyKHN1cHByZXNzRXZlbnQgPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2JsdXJFdmVudChzdXBwcmVzc0V2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgc2l6ZSBmcm9tIHdpdGhpbiB0aGUgY29udGFpbmVyLiBUcmF2ZXJzZXMgdXBcclxuICAgICAqIHRoZSBpdGVtIHRyZWUgdW50aWwgaXQgZmluZHMgYSByb3cgb3IgY29sdW1uIGVsZW1lbnRcclxuICAgICAqIGFuZCByZXNpemVzIGl0cyBpdGVtcyBhY2NvcmRpbmdseS5cclxuICAgICAqXHJcbiAgICAgKiBJZiB0aGlzIGNvbnRhaW5lciBpc24ndCBhIGRlc2NlbmRhbnQgb2YgYSByb3cgb3IgY29sdW1uXHJcbiAgICAgKiBpdCByZXR1cm5zIGZhbHNlXHJcbiAgICAgKiBAcGFyYW0gd2lkdGggLSBUaGUgbmV3IHdpZHRoIGluIHBpeGVsXHJcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IC0gVGhlIG5ldyBoZWlnaHQgaW4gcGl4ZWxcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyByZXNpemVTdWNjZXNmdWxcclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgc2V0U2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBhbmNlc3Rvckl0ZW06IENvbnRlbnRJdGVtIHwgbnVsbCA9IHRoaXMuX3BhcmVudDtcclxuICAgICAgICBpZiAoYW5jZXN0b3JJdGVtLmlzQ29sdW1uIHx8IGFuY2VzdG9ySXRlbS5pc1JvdyB8fCBhbmNlc3Rvckl0ZW0ucGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignSUNTU1BSQycsICdDb21wb25lbnRDb250YWluZXIgY2Fubm90IGhhdmUgUm93Q29sdW1uIFBhcmVudCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBhbmNlc3RvckNoaWxkSXRlbTogQ29udGVudEl0ZW07XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIGFuY2VzdG9yQ2hpbGRJdGVtID0gYW5jZXN0b3JJdGVtO1xyXG4gICAgICAgICAgICAgICAgYW5jZXN0b3JJdGVtID0gYW5jZXN0b3JJdGVtLnBhcmVudDtcclxuICAgICAgICAgICAgfSB3aGlsZSAoYW5jZXN0b3JJdGVtICE9PSBudWxsICYmICFhbmNlc3Rvckl0ZW0uaXNDb2x1bW4gJiYgIWFuY2VzdG9ySXRlbS5pc1Jvdyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5jZXN0b3JJdGVtID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBubyBSb3cgb3IgQ29sdW1uIGZvdW5kXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbmNlc3Rvckl0ZW0gaXMgUm93IG9yIENvbHVtblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gYW5jZXN0b3JJdGVtLmlzQ29sdW1uID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFNpemUgPSB0aGlzW2RpcmVjdGlvbl07XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNpemUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignSUNTU0NTMTExOTQnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U2l6ZSA9IGRpcmVjdGlvbiA9PT0gJ2hlaWdodCcgPyBoZWlnaHQgOiB3aWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG90YWxQaXhlbCA9IGN1cnJlbnRTaXplICogKDEgLyAoYW5jZXN0b3JDaGlsZEl0ZW1bZGlyZWN0aW9uXSAvIDEwMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSAobmV3U2l6ZSAvIHRvdGFsUGl4ZWwpICogMTAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gKGFuY2VzdG9yQ2hpbGRJdGVtW2RpcmVjdGlvbl0gLSBwZXJjZW50YWdlKSAvIChhbmNlc3Rvckl0ZW0uY29udGVudEl0ZW1zLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFuY2VzdG9ySXRlbS5jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2VzdG9ySXRlbS5jb250ZW50SXRlbXNbaV0gPT09IGFuY2VzdG9yQ2hpbGRJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvckl0ZW0uY29udGVudEl0ZW1zW2ldW2RpcmVjdGlvbl0gPSBwZXJjZW50YWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JJdGVtLmNvbnRlbnRJdGVtc1tpXVtkaXJlY3Rpb25dICs9IGRlbHRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvckl0ZW0udXBkYXRlU2l6ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZXMgdGhlIGNvbnRhaW5lciBpZiBpdCBpcyBjbG9zYWJsZS4gQ2FuIGJlIGNhbGxlZCBieVxyXG4gICAgICogYm90aCB0aGUgY29tcG9uZW50IHdpdGhpbiBhdCBhcyB3ZWxsIGFzIHRoZSBjb250ZW50SXRlbSBjb250YWluaW5nXHJcbiAgICAgKiBpdC4gRW1pdHMgYSBjbG9zZSBldmVudCBiZWZvcmUgdGhlIGNvbnRhaW5lciBpdHNlbGYgaXMgY2xvc2VkLlxyXG4gICAgICovXHJcbiAgICBjbG9zZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5faXNDbG9zYWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogUmVwbGFjZXMgY29tcG9uZW50IHdpdGhvdXQgYWZmZWN0aW5nIGxheW91dCAqL1xyXG4gICAgcmVwbGFjZUNvbXBvbmVudChpdGVtQ29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZWxlYXNlQ29tcG9uZW50KCk7XHJcblxyXG4gICAgICAgIGlmICghSXRlbUNvbmZpZy5pc0NvbXBvbmVudChpdGVtQ29uZmlnKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcGxhY2VDb21wb25lbnQgbm90IHBhc3NlZCBhIGNvbXBvbmVudCBJdGVtQ29uZmlnJylcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBDb21wb25lbnRJdGVtQ29uZmlnLnJlc29sdmUoaXRlbUNvbmZpZyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxTdGF0ZSA9IGNvbmZpZy5jb21wb25lbnRTdGF0ZTtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9pbml0aWFsU3RhdGU7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudFR5cGUgPSBjb25maWcuY29tcG9uZW50VHlwZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUl0ZW1Db25maWdFdmVudChjb25maWcpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYm91bmRDb21wb25lbnQgPSB0aGlzLmxheW91dE1hbmFnZXIuYmluZENvbXBvbmVudCh0aGlzLCBjb25maWcpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRQb3NpdGlvblByb3BlcnR5RnJvbUJvdW5kQ29tcG9uZW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgaW5pdGlhbCBjb21wb25lbnQgc3RhdGUgb3IgdGhlIGxhdGVzdCBwYXNzZWQgaW4gc2V0U3RhdGUoKVxyXG4gICAgICogQHJldHVybnMgc3RhdGVcclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKENvbXBvbmVudENvbnRhaW5lcjpjbGFzcykuaW5pdGlhbFN0YXRlfVxyXG4gICAgICovXHJcbiAgICBnZXRTdGF0ZSgpOiBKc29uVmFsdWUgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1lcmdlcyB0aGUgcHJvdmlkZWQgc3RhdGUgaW50byB0aGUgY3VycmVudCBvbmVcclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKENvbXBvbmVudENvbnRhaW5lcjpjbGFzcykuc3RhdGVSZXF1ZXN0RXZlbnR9XHJcbiAgICAgKi9cclxuICAgIGV4dGVuZFN0YXRlKHN0YXRlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuZGVkU3RhdGUgPSBkZWVwRXh0ZW5kKHRoaXMuX3N0YXRlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBzdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShleHRlbmRlZFN0YXRlIGFzIEpzb25WYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBjb21wb25lbnQgc3RhdGVcclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKENvbXBvbmVudENvbnRhaW5lcjpjbGFzcykuc3RhdGVSZXF1ZXN0RXZlbnR9XHJcbiAgICAgKi9cclxuICAgIHNldFN0YXRlKHN0YXRlOiBKc29uVmFsdWUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgIHRoaXMuX3BhcmVudC5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ3N0YXRlQ2hhbmdlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0J3MgdGhlIGNvbXBvbmVudHMgdGl0bGVcclxuICAgICAqL1xyXG4gICAgc2V0VGl0bGUodGl0bGU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3BhcmVudC5zZXRUaXRsZSh0aXRsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc2V0VGFiKHRhYjogVGFiKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGFiID0gdGFiO1xyXG4gICAgICAgIHRoaXMuZW1pdCgndGFiJywgdGFiKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNldFZpc2liaWxpdHkodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fYm91bmRDb21wb25lbnQudmlydHVhbCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52aXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQodGhpcywgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl92aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oZWlnaHQgPT09IDAgJiYgdGhpcy5fd2lkdGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc1Nob3duV2l0aFplcm9EaW1lbnNpb25zID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNTaG93bldpdGhaZXJvRGltZW5zaW9ucyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2l6ZVRvTm9kZVNpemUodGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0U2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzU2hvd25XaXRoWmVyb0RpbWVuc2lvbnMgJiYgKHRoaXMuX2hlaWdodCAhPT0gMCB8fCB0aGlzLl93aWR0aCAhPT0gMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc1Nob3duV2l0aFplcm9EaW1lbnNpb25zID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTaXplVG9Ob2RlU2l6ZSh0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRTaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNTaG93bldpdGhaZXJvRGltZW5zaW9ucyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0SGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGNvbnRhaW5lcidzIHNpemUsIGJ1dCBjb25zaWRlcmVkIHRlbXBvcmFyeSAoZm9yIGRyYWdnaW5nKVxyXG4gICAgICogc28gZG9uJ3QgZW1pdCBhbnkgZXZlbnRzLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGVudGVyRHJhZ01vZGUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcclxuICAgICAgICBzZXRFbGVtZW50V2lkdGgodGhpcy5fZWxlbWVudCwgd2lkdGgpO1xyXG4gICAgICAgIHNldEVsZW1lbnRIZWlnaHQodGhpcy5fZWxlbWVudCwgaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudmlydHVhbFpJbmRleENoYW5nZVJlcXVpcmVkRXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpcnR1YWxaSW5kZXhDaGFuZ2VSZXF1aXJlZEV2ZW50KHRoaXMsIExvZ2ljYWxaSW5kZXguZHJhZywgU3R5bGVDb25zdGFudHMuZGVmYXVsdENvbXBvbmVudERyYWdaSW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kcmFnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhpdERyYWdNb2RlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnZpcnR1YWxaSW5kZXhDaGFuZ2VSZXF1aXJlZEV2ZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy52aXJ0dWFsWkluZGV4Q2hhbmdlUmVxdWlyZWRFdmVudCh0aGlzLCBMb2dpY2FsWkluZGV4LmJhc2UsIFN0eWxlQ29uc3RhbnRzLmRlZmF1bHRDb21wb25lbnRCYXNlWkluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZW50ZXJTdGFja01heGltaXNlZCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zdGFja01heGltaXNlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKHRoaXMudmlydHVhbFpJbmRleENoYW5nZVJlcXVpcmVkRXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpcnR1YWxaSW5kZXhDaGFuZ2VSZXF1aXJlZEV2ZW50KHRoaXMsIExvZ2ljYWxaSW5kZXguc3RhY2tNYXhpbWlzZWQsIFN0eWxlQ29uc3RhbnRzLmRlZmF1bHRDb21wb25lbnRTdGFja01heGltaXNlZFpJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4aXRTdGFja01heGltaXNlZCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy52aXJ0dWFsWkluZGV4Q2hhbmdlUmVxdWlyZWRFdmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlydHVhbFpJbmRleENoYW5nZVJlcXVpcmVkRXZlbnQodGhpcywgTG9naWNhbFpJbmRleC5iYXNlLCBTdHlsZUNvbnN0YW50cy5kZWZhdWx0Q29tcG9uZW50QmFzZVpJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3N0YWNrTWF4aW1pc2VkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZHJhZygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fYm91bmRDb21wb25lbnQudmlydHVhbCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52aXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0TWFuYWdlci5maXJlQmVmb3JlVmlydHVhbFJlY3RpbmdFdmVudCgxKTtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQodGhpcywgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dE1hbmFnZXIuZmlyZUFmdGVyVmlydHVhbFJlY3RpbmdFdmVudCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgY29udGFpbmVyJ3Mgc2l6ZS4gQ2FsbGVkIGJ5IHRoZSBjb250YWluZXIncyBjb21wb25lbnQgaXRlbS5cclxuICAgICAqIFRvIGluc3RlYWQgc2V0IHRoZSBzaXplIHByb2dyYW1tYXRpY2FsbHkgZnJvbSB3aXRoaW4gdGhlIGNvbXBvbmVudCBpdHNlbGYsXHJcbiAgICAgKiB1c2UgdGhlIHB1YmxpYyBzZXRTaXplIG1ldGhvZFxyXG4gICAgICogQHBhcmFtIHdpZHRoIC0gaW4gcHhcclxuICAgICAqIEBwYXJhbSBoZWlnaHQgLSBpbiBweFxyXG4gICAgICogQHBhcmFtIGZvcmNlIC0gc2V0IGV2ZW4gaWYgbm8gY2hhbmdlXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgc2V0U2l6ZVRvTm9kZVNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGZvcmNlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHdpZHRoICE9PSB0aGlzLl93aWR0aCB8fCBoZWlnaHQgIT09IHRoaXMuX2hlaWdodCB8fCBmb3JjZSkge1xyXG4gICAgICAgICAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgICAgIHNldEVsZW1lbnRXaWR0aCh0aGlzLl9lbGVtZW50LCB3aWR0aCk7XHJcbiAgICAgICAgICAgIHNldEVsZW1lbnRIZWlnaHQodGhpcy5fZWxlbWVudCwgaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ib3VuZENvbXBvbmVudC52aXJ0dWFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFZpcnR1YWxTaXplZENvbnRhaW5lclRvTGF5b3V0TWFuYWdlcigpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdyZXNpemUnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tTaG93bkZyb21aZXJvRGltZW5zaW9ucygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIG5vdGlmeVZpcnR1YWxSZWN0aW5nUmVxdWlyZWQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlydHVhbFJlY3RpbmdSZXF1aXJlZEV2ZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy52aXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQodGhpcywgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVzaXplJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tTaG93bkZyb21aZXJvRGltZW5zaW9ucygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHVwZGF0ZUVsZW1lbnRQb3NpdGlvblByb3BlcnR5RnJvbUJvdW5kQ29tcG9uZW50KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9ib3VuZENvbXBvbmVudC52aXJ0dWFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnc3RhdGljJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJyc7IC8vIHNldCBpdCBiYWNrIHRvIGF0dHJpYnV0ZSB2YWx1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGFkZFZpcnR1YWxTaXplZENvbnRhaW5lclRvTGF5b3V0TWFuYWdlcigpIHtcclxuICAgICAgICB0aGlzLl9sYXlvdXRNYW5hZ2VyLmJlZ2luVmlydHVhbFNpemVkQ29udGFpbmVyQWRkaW5nKCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5fbGF5b3V0TWFuYWdlci5hZGRWaXJ0dWFsU2l6ZWRDb250YWluZXIodGhpcyk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5fbGF5b3V0TWFuYWdlci5lbmRWaXJ0dWFsU2l6ZWRDb250YWluZXJBZGRpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBjaGVja1Nob3duRnJvbVplcm9EaW1lbnNpb25zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1Nob3duV2l0aFplcm9EaW1lbnNpb25zICYmICh0aGlzLl9oZWlnaHQgIT09IDAgfHwgdGhpcy5fd2lkdGggIT09IDApKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzU2hvd25XaXRoWmVyb0RpbWVuc2lvbnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0U2hvdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGVtaXRTaG93KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZW1pdCgnc2hvd24nKTtcclxuICAgICAgICB0aGlzLmVtaXQoJ3Nob3cnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGVtaXRIaWRlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZW1pdCgnaGlkZScpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVsZWFzZUNvbXBvbmVudCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fc3RhY2tNYXhpbWlzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5leGl0U3RhY2tNYXhpbWlzZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbWl0KCdiZWZvcmVDb21wb25lbnRSZWxlYXNlJywgdGhpcy5fYm91bmRDb21wb25lbnQuY29tcG9uZW50KTtcclxuICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIudW5iaW5kQ29tcG9uZW50KHRoaXMsIHRoaXMuX2JvdW5kQ29tcG9uZW50LnZpcnR1YWwsIHRoaXMuX2JvdW5kQ29tcG9uZW50LmNvbXBvbmVudCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgQ29tcG9uZW50Q29udGFpbmVyfSAqL1xyXG5leHBvcnQgdHlwZSBJdGVtQ29udGFpbmVyID0gQ29tcG9uZW50Q29udGFpbmVyO1xyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBDb21wb25lbnRDb250YWluZXIge1xyXG4gICAgZXhwb3J0IHR5cGUgQ29tcG9uZW50ID0gdW5rbm93bjtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIEJpbmRhYmxlQ29tcG9uZW50IHtcclxuICAgICAgICBjb21wb25lbnQ6IENvbXBvbmVudDtcclxuICAgICAgICB2aXJ0dWFsOiBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCB0eXBlIFN0YXRlUmVxdWVzdEV2ZW50SGFuZGxlciA9ICh0aGlzOiB2b2lkKSA9PiBKc29uVmFsdWUgfCB1bmRlZmluZWQ7XHJcbiAgICBleHBvcnQgdHlwZSBWaXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQgPSAodGhpczogdm9pZCwgY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgZXhwb3J0IHR5cGUgVmlydHVhbFZpc2liaWxpdHlDaGFuZ2VSZXF1aXJlZEV2ZW50ID0gKHRoaXM6IHZvaWQsIGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCB2aXNpYmxlOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gICAgZXhwb3J0IHR5cGUgVmlydHVhbFpJbmRleENoYW5nZVJlcXVpcmVkRXZlbnQgPVxyXG4gICAgICAgICh0aGlzOiB2b2lkLCBjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgbG9naWNhbFpJbmRleDogTG9naWNhbFpJbmRleCwgZGVmYXVsdFpJbmRleDogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgU2hvd0V2ZW50SGFuZGxlciA9ICh0aGlzOiB2b2lkKSA9PiB2b2lkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgSGlkZUV2ZW50SGFuZGxlciA9ICh0aGlzOiB2b2lkKSA9PiB2b2lkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgRm9jdXNFdmVudEhhbmRsZXIgPSAodGhpczogdm9pZCwgc3VwcHJlc3NFdmVudDogYm9vbGVhbikgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIEJsdXJFdmVudEhhbmRsZXIgPSAodGhpczogdm9pZCwgc3VwcHJlc3NFdmVudDogYm9vbGVhbikgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIFVwZGF0ZUl0ZW1Db25maWdFdmVudEhhbmRsZXIgPSAoaXRlbUNvbmZpZzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnKSA9PiB2b2lkO1xyXG59XHJcbiIsImltcG9ydCB7IFJlc29sdmVkTGF5b3V0Q29uZmlnLCBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9yZXNvbHZlZC1jb25maWcnO1xyXG5pbXBvcnQgeyBQb3BvdXRCbG9ja2VkRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvZXh0ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBVbmV4cGVjdGVkTnVsbEVycm9yLCBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBDb250ZW50SXRlbSB9IGZyb20gJy4uL2l0ZW1zL2NvbnRlbnQtaXRlbSc7XHJcbmltcG9ydCB7IExheW91dE1hbmFnZXIgfSBmcm9tICcuLi9sYXlvdXQtbWFuYWdlcic7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJy4uL3V0aWxzL2V2ZW50LWVtaXR0ZXInO1xyXG5pbXBvcnQgeyBSZWN0IH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xyXG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBnZXRVbmlxdWVJZCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbi8qKlxyXG4gKiBQb3BzIGEgY29udGVudCBpdGVtIG91dCBpbnRvIGEgbmV3IGJyb3dzZXIgd2luZG93LlxyXG4gKiBUaGlzIGlzIGFjaGlldmVkIGJ5XHJcbiAqXHJcbiAqICAgIC0gQ3JlYXRpbmcgYSBuZXcgY29uZmlndXJhdGlvbiB3aXRoIHRoZSBjb250ZW50IGl0ZW0gYXMgcm9vdCBlbGVtZW50XHJcbiAqICAgIC0gU2VyaWFsaXppbmcgYW5kIG1pbmlmeWluZyB0aGUgY29uZmlndXJhdGlvblxyXG4gKiAgICAtIE9wZW5pbmcgdGhlIGN1cnJlbnQgd2luZG93J3MgVVJMIHdpdGggdGhlIGNvbmZpZ3VyYXRpb24gYXMgYSBHRVQgcGFyYW1ldGVyXHJcbiAqICAgIC0gR29sZGVuTGF5b3V0IHdoZW4gb3BlbmVkIGluIHRoZSBuZXcgd2luZG93IHdpbGwgbG9vayBmb3IgdGhlIEdFVCBwYXJhbWV0ZXJcclxuICogICAgICBhbmQgdXNlIGl0IGluc3RlYWQgb2YgdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb25cclxuICogQHB1YmxpY1xyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBCcm93c2VyUG9wb3V0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3BvcG91dFdpbmRvdzogV2luZG93IHwgbnVsbDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzSW5pdGlhbGlzZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jaGVja1JlYWR5SW50ZXJ2YWw6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIF9jb25maWcgLSBHb2xkZW5MYXlvdXQgaXRlbSBjb25maWdcclxuICAgICAqIEBwYXJhbSBfaW5pdGlhbFdpbmRvd1NpemUgLSBBIG1hcCB3aXRoIHdpZHRoLCBoZWlnaHQsIHRvcCBhbmQgbGVmdFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9jb25maWc6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9pbml0aWFsV2luZG93U2l6ZTogUmVjdCxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfbGF5b3V0TWFuYWdlcjogTGF5b3V0TWFuYWdlcixcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbGlzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9wb3BvdXRXaW5kb3cgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlV2luZG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9Db25maWcoKTogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0luaXRpYWxpc2VkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgY3JlYXRlIGNvbmZpZywgbGF5b3V0IG5vdCB5ZXQgaW5pdGlhbGlzZWQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGdsSW5zdGFuY2UgPSB0aGlzLmdldEdsSW5zdGFuY2UoKTtcclxuICAgICAgICBjb25zdCBnbEluc3RhbmNlQ29uZmlnID0gZ2xJbnN0YW5jZS5zYXZlTGF5b3V0KCk7XHJcblxyXG4gICAgICAgIGxldCBsZWZ0OiBudW1iZXIgfCBudWxsO1xyXG4gICAgICAgIGxldCB0b3A6IG51bWJlciB8IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcG91dFdpbmRvdyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZWZ0ID0gbnVsbDtcclxuICAgICAgICAgICAgdG9wID0gbnVsbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZWZ0ID0gdGhpcy5fcG9wb3V0V2luZG93LnNjcmVlblggPz8gdGhpcy5fcG9wb3V0V2luZG93LnNjcmVlbkxlZnQ7XHJcbiAgICAgICAgICAgIHRvcCA9IHRoaXMuX3BvcG91dFdpbmRvdy5zY3JlZW5ZID8/IHRoaXMuX3BvcG91dFdpbmRvdy5zY3JlZW5Ub3A7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB3aW5kb3c6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLldpbmRvdyA9IHtcclxuICAgICAgICAgICAgd2lkdGg6IHRoaXMuZ2V0R2xJbnN0YW5jZSgpLndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0R2xJbnN0YW5jZSgpLmhlaWdodCxcclxuICAgICAgICAgICAgbGVmdCxcclxuICAgICAgICAgICAgdG9wLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbmZpZzogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgIHJvb3Q6IGdsSW5zdGFuY2VDb25maWcucm9vdCxcclxuICAgICAgICAgICAgb3BlblBvcG91dHM6IGdsSW5zdGFuY2VDb25maWcub3BlblBvcG91dHMsXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiBnbEluc3RhbmNlQ29uZmlnLnNldHRpbmdzLFxyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBnbEluc3RhbmNlQ29uZmlnLmRpbWVuc2lvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcjogZ2xJbnN0YW5jZUNvbmZpZy5oZWFkZXIsXHJcbiAgICAgICAgICAgIHdpbmRvdyxcclxuICAgICAgICAgICAgcGFyZW50SWQ6IHRoaXMuX2NvbmZpZy5wYXJlbnRJZCxcclxuICAgICAgICAgICAgaW5kZXhJblBhcmVudDogdGhpcy5fY29uZmlnLmluZGV4SW5QYXJlbnQsXHJcbiAgICAgICAgICAgIHJlc29sdmVkOiB0cnVlLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0R2xJbnN0YW5jZSgpOiBMYXlvdXRNYW5hZ2VyIHtcclxuICAgICAgICBpZiAodGhpcy5fcG9wb3V0V2luZG93ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdCUEdHSTI0NjkzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3BvdXRXaW5kb3cuX19nbEluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSBuYXRpdmUgQnJvd3NlcldpbmRvdyBiYWNraW5nIHRoaXMgcG9wb3V0LlxyXG4gICAgICogTWlnaHQgdGhyb3cgYW4gVW5leHBlY3RlZE51bGxFcnJvciBleGNlcHRpb24gd2hlbiB0aGUgd2luZG93IGlzIG5vdCBpbml0aWFsaXplZCB5ZXQuXHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKi9cclxuICAgIGdldFdpbmRvdygpOiBXaW5kb3cge1xyXG4gICAgICAgIGlmICh0aGlzLl9wb3BvdXRXaW5kb3cgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0JQR1cwODcyMTUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcG91dFdpbmRvdztcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5nZXRHbEluc3RhbmNlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRHbEluc3RhbmNlKCkuY2xvc2VXaW5kb3coKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRXaW5kb3coKS5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcG9wcGVkIG91dCBpdGVtIHRvIGl0cyBvcmlnaW5hbCBwb3NpdGlvbi4gSWYgdGhlIG9yaWdpbmFsXHJcbiAgICAgKiBwYXJlbnQgaXNuJ3QgYXZhaWxhYmxlIGFueW1vcmUgaXQgZmFsbHMgYmFjayB0byB0aGUgbGF5b3V0J3MgdG9wbW9zdCBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHBvcEluKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBwYXJlbnRJdGVtOiBDb250ZW50SXRlbTtcclxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLl9jb25maWcuaW5kZXhJblBhcmVudDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50SWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAqIFRoZSBkZWVwRXh0ZW5kIGNhbGwgc2VlbXMgYSBiaXQgcG9pbnRsZXNzLCBidXQgaXQncyBjcnVjaWFsIHRvXHJcbiAgICAgICAgKiBjb3B5IHRoZSBjb25maWcgcmV0dXJuZWQgYnkgdGhpcy5nZXRHbEluc3RhbmNlKCkudG9Db25maWcoKVxyXG4gICAgICAgICogb250byBhIG5ldyBvYmplY3QuIEludGVybmV0IEV4cGxvcmVyIGtlZXBzIHRoZSByZWZlcmVuY2VzXHJcbiAgICAgICAgKiB0byBvYmplY3RzIG9uIHRoZSBjaGlsZCB3aW5kb3csIHJlc3VsdGluZyBpbiB0aGUgZm9sbG93aW5nIGVycm9yXHJcbiAgICAgICAgKiBvbmNlIHRoZSBjaGlsZCB3aW5kb3cgaXMgY2xvc2VkOlxyXG4gICAgICAgICpcclxuICAgICAgICAqIFRoZSBjYWxsZWUgKHNlcnZlciBbbm90IHNlcnZlciBhcHBsaWNhdGlvbl0pIGlzIG5vdCBhdmFpbGFibGUgYW5kIGRpc2FwcGVhcmVkXHJcbiAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBnbEluc3RhbmNlTGF5b3V0Q29uZmlnID0gdGhpcy5nZXRHbEluc3RhbmNlKCkuc2F2ZUxheW91dCgpO1xyXG4gICAgICAgIGNvbnN0IGNvcGllZEdsSW5zdGFuY2VMYXlvdXRDb25maWcgPSBkZWVwRXh0ZW5kKHt9LCBnbEluc3RhbmNlTGF5b3V0Q29uZmlnKSBhcyBSZXNvbHZlZExheW91dENvbmZpZztcclxuICAgICAgICBjb25zdCBjb3BpZWRSb290ID0gY29waWVkR2xJbnN0YW5jZUxheW91dENvbmZpZy5yb290O1xyXG4gICAgICAgIGlmIChjb3BpZWRSb290ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignQlBQSVIxOTk5OCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBncm91bmRJdGVtID0gdGhpcy5fbGF5b3V0TWFuYWdlci5ncm91bmRJdGVtO1xyXG4gICAgICAgIGlmIChncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignQlBQSUczNDk3MicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYXJlbnRJdGVtID0gZ3JvdW5kSXRlbS5nZXRJdGVtc0J5UG9wSW5QYXJlbnRJZCh0aGlzLl9jb25maWcucGFyZW50SWQpWzBdO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICogRmFsbGJhY2sgaWYgcGFyZW50SXRlbSBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgYWRkIGl0IHRvIHRoZSB0b3Btb3N0XHJcbiAgICAgICAgKiBpdGVtIG9yIG1ha2UgaXQgdGhlIHRvcG1vc3QgaXRlbSBpZiB0aGUgbGF5b3V0IGlzIGVtcHR5XHJcbiAgICAgICAgKi9cclxuICAgICAgICBpZiAoIXBhcmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKGdyb3VuZEl0ZW0uY29udGVudEl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEl0ZW0gPSBncm91bmRJdGVtLmNvbnRlbnRJdGVtc1swXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEl0ZW0gPSBncm91bmRJdGVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld0NvbnRlbnRJdGVtID0gdGhpcy5fbGF5b3V0TWFuYWdlci5jcmVhdGVBbmRJbml0Q29udGVudEl0ZW0oY29waWVkUm9vdCwgcGFyZW50SXRlbSk7XHJcblxyXG4gICAgICAgIHBhcmVudEl0ZW0uYWRkQ2hpbGQobmV3Q29udGVudEl0ZW0sIGluZGV4KTtcclxuICAgICAgICBpZiAodGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuc2V0dGluZ3MucG9wSW5PbkNsb3NlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uQ2xvc2UoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgVVJMIGFuZCB3aW5kb3cgcGFyYW1ldGVyXHJcbiAgICAgKiBhbmQgb3BlbnMgYSBuZXcgd2luZG93XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVXaW5kb3coKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5jcmVhdGVVcmwoKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQm9ndXMgdGl0bGUgdG8gcHJldmVudCByZS11c2FnZSBvZiBleGlzdGluZyB3aW5kb3cgd2l0aCB0aGVcclxuICAgICAgICAgKiBzYW1lIHRpdGxlLiBUaGUgYWN0dWFsIHRpdGxlIHdpbGwgYmUgc2V0IGJ5IHRoZSBuZXcgd2luZG93J3NcclxuICAgICAgICAgKiBHb2xkZW5MYXlvdXQgaW5zdGFuY2UgaWYgaXQgZGV0ZWN0cyB0aGF0IGl0IGlzIGluIHN1YldpbmRvd01vZGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKS50b1N0cmluZygzNik7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcHRpb25zIGFzIHVzZWQgaW4gdGhlIHdpbmRvdy5vcGVuIHN0cmluZ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGZlYXR1cmVzID0gdGhpcy5zZXJpYWxpemVXaW5kb3dGZWF0dXJlcyh7XHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLl9pbml0aWFsV2luZG93U2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLl9pbml0aWFsV2luZG93U2l6ZS5oZWlnaHQsXHJcbiAgICAgICAgICAgIGlubmVyV2lkdGg6IHRoaXMuX2luaXRpYWxXaW5kb3dTaXplLndpZHRoLFxyXG4gICAgICAgICAgICBpbm5lckhlaWdodDogdGhpcy5faW5pdGlhbFdpbmRvd1NpemUuaGVpZ2h0LFxyXG4gICAgICAgICAgICBtZW51YmFyOiAnbm8nLFxyXG4gICAgICAgICAgICB0b29sYmFyOiAnbm8nLFxyXG4gICAgICAgICAgICBsb2NhdGlvbjogJ25vJyxcclxuICAgICAgICAgICAgcGVyc29uYWxiYXI6ICdubycsXHJcbiAgICAgICAgICAgIHJlc2l6YWJsZTogJ3llcycsXHJcbiAgICAgICAgICAgIHNjcm9sbGJhcnM6ICdubycsXHJcbiAgICAgICAgICAgIHN0YXR1czogJ25vJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9wb3BvdXRXaW5kb3cgPSBnbG9iYWxUaGlzLm9wZW4odXJsLCB0YXJnZXQsIGZlYXR1cmVzKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9wb3BvdXRXaW5kb3cpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLnNldHRpbmdzLmJsb2NrZWRQb3BvdXRzVGhyb3dFcnJvciA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgUG9wb3V0QmxvY2tlZEVycm9yKCdQb3BvdXQgYmxvY2tlZCcpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3BvcG91dFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gdGhpcy5wb3NpdGlvbldpbmRvdygpLCB7IHBhc3NpdmU6IHRydWUgfSlcclxuICAgICAgICB0aGlzLl9wb3BvdXRXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuc2V0dGluZ3MucG9wSW5PbkNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvcEluKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB7IHBhc3NpdmU6IHRydWUgfSlcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUG9sbGluZyB0aGUgY2hpbGR3aW5kb3cgdG8gZmluZCBvdXQgaWYgR29sZGVuTGF5b3V0IGhhcyBiZWVuIGluaXRpYWxpc2VkXHJcbiAgICAgICAgICogZG9lc24ndCBzZWVtIG9wdGltYWwsIGJ1dCB0aGUgYWx0ZXJuYXRpdmVzIC0gYWRkaW5nIGEgY2FsbGJhY2sgdG8gdGhlIHBhcmVudFxyXG4gICAgICAgICAqIHdpbmRvdyBvciByYWlzaW5nIGFuIGV2ZW50IG9uIHRoZSB3aW5kb3cgb2JqZWN0IC0gYm90aCB3b3VsZCBpbnRyb2R1Y2Uga25vd2xlZGdlXHJcbiAgICAgICAgICogYWJvdXQgdGhlIHBhcmVudCB0byB0aGUgY2hpbGQgd2luZG93IHdoaWNoIHdlJ2QgcmF0aGVyIGF2b2lkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fY2hlY2tSZWFkeUludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5jaGVja1JlYWR5KCksIDEwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGNoZWNrUmVhZHkoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcG91dFdpbmRvdyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignQlBDUjAxODQ0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BvcG91dFdpbmRvdy5fX2dsSW5zdGFuY2UgJiYgdGhpcy5fcG9wb3V0V2luZG93Ll9fZ2xJbnN0YW5jZS5pc0luaXRpYWxpc2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uSW5pdGlhbGlzZWQoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaGVja1JlYWR5SW50ZXJ2YWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fY2hlY2tSZWFkeUludGVydmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1JlYWR5SW50ZXJ2YWwgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXJpYWxpc2VzIGEgbWFwIG9mIGtleTp2YWx1ZXMgdG8gYSB3aW5kb3cgb3B0aW9ucyBzdHJpbmdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gd2luZG93T3B0aW9ucyAtXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgc2VyaWFsaXNlZCB3aW5kb3cgb3B0aW9uc1xyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2VyaWFsaXplV2luZG93RmVhdHVyZXMod2luZG93T3B0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3Qgd2luZG93T3B0aW9uc1N0cmluZzogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gd2luZG93T3B0aW9ucykge1xyXG4gICAgICAgICAgICB3aW5kb3dPcHRpb25zU3RyaW5nLnB1c2goa2V5ICsgJz0nICsgd2luZG93T3B0aW9uc1trZXldLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHdpbmRvd09wdGlvbnNTdHJpbmcuam9pbignLCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgVVJMIGZvciB0aGUgbmV3IHdpbmRvdywgaW5jbHVkaW5nIHRoZVxyXG4gICAgICogY29uZmlnIEdFVCBwYXJhbWV0ZXJcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBVUkxcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVVybCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHN0b3JhZ2VLZXkgPSAnZ2wtd2luZG93LWNvbmZpZy0nICsgZ2V0VW5pcXVlSWQoKTtcclxuICAgICAgICBjb25zdCBjb25maWcgPSBSZXNvbHZlZExheW91dENvbmZpZy5taW5pZnlDb25maWcodGhpcy5fY29uZmlnKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHdoaWxlIHdyaXRpbmcgdG8gbG9jYWxTdG9yYWdlICcgKyBlLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChsb2NhdGlvbi5ocmVmKTtcclxuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnZ2wtd2luZG93Jywgc3RvcmFnZUtleSk7XHJcbiAgICAgICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW92ZSB0aGUgbmV3bHkgY3JlYXRlZCB3aW5kb3cgcm91Z2hseSB0b1xyXG4gICAgICogd2hlcmUgdGhlIGNvbXBvbmVudCB1c2VkIHRvIGJlLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcG9zaXRpb25XaW5kb3coKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcG91dFdpbmRvdyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jyb3dzZXJQb3BvdXQucG9zaXRpb25XaW5kb3c6IG51bGwgcG9wb3V0V2luZG93Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcG9wb3V0V2luZG93Lm1vdmVUbyh0aGlzLl9pbml0aWFsV2luZG93U2l6ZS5sZWZ0LCB0aGlzLl9pbml0aWFsV2luZG93U2l6ZS50b3ApO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3BvdXRXaW5kb3cuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayB3aGVuIHRoZSBuZXcgd2luZG93IGlzIG9wZW5lZCBhbmQgdGhlIEdvbGRlbkxheW91dCBpbnN0YW5jZVxyXG4gICAgICogd2l0aGluIGl0IGlzIGluaXRpYWxpc2VkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkluaXRpYWxpc2VkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbGlzZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZ2V0R2xJbnN0YW5jZSgpLm9uKCdwb3BJbicsICgpID0+IHRoaXMucG9wSW4oKSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdpbml0aWFsaXNlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlZCA1MG1zIGFmdGVyIHRoZSB3aW5kb3cgdW5sb2FkIGV2ZW50XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfb25DbG9zZSgpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZW1pdCgnY2xvc2VkJyksIDUwKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVbmV4cGVjdGVkTnVsbEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgQ29tcG9uZW50SXRlbSB9IGZyb20gJy4uL2l0ZW1zL2NvbXBvbmVudC1pdGVtJztcclxuaW1wb3J0IHsgQ29udGVudEl0ZW0gfSBmcm9tICcuLi9pdGVtcy9jb250ZW50LWl0ZW0nO1xyXG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJy4uL2l0ZW1zL3N0YWNrJztcclxuaW1wb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4uL2xheW91dC1tYW5hZ2VyJztcclxuaW1wb3J0IHsgRG9tQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvZG9tLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IERyYWdMaXN0ZW5lciB9IGZyb20gJy4uL3V0aWxzL2RyYWctbGlzdGVuZXInO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuLi91dGlscy9ldmVudC1lbWl0dGVyJztcclxuaW1wb3J0IHsgZ2V0SlF1ZXJ5T2Zmc2V0IH0gZnJvbSAnLi4vdXRpbHMvanF1ZXJ5LWxlZ2FjeSc7XHJcbmltcG9ydCB7IFNpZGUgfSBmcm9tICcuLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7XHJcbiAgICBnZXRFbGVtZW50V2lkdGhBbmRIZWlnaHQsXHJcbiAgICBudW1iZXJUb1BpeGVsc1xyXG59IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGNyZWF0ZXMgYSB0ZW1wb3JhcnkgY29udGFpbmVyXHJcbiAqIGZvciB0aGUgY29tcG9uZW50IHdoaWxzdCBpdCBpcyBiZWluZyBkcmFnZ2VkXHJcbiAqIGFuZCBoYW5kbGVzIGRyYWcgZXZlbnRzXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERyYWdQcm94eSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XHJcbiAgICBwcml2YXRlIF9hcmVhOiBDb250ZW50SXRlbS5BcmVhIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9sYXN0VmFsaWRBcmVhOiBDb250ZW50SXRlbS5BcmVhIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9taW5YOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9taW5ZOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9tYXhYOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9tYXhZOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9zaWRlZDogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX2VsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBfcHJveHlDb250YWluZXJFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgX2NvbXBvbmVudEl0ZW1Gb2N1c2VkOiBib29sZWFuO1xyXG5cclxuICAgIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB4IC0gVGhlIGluaXRpYWwgeCBwb3NpdGlvblxyXG4gICAgICogQHBhcmFtIHkgLSBUaGUgaW5pdGlhbCB5IHBvc2l0aW9uXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfZHJhZ0xpc3RlbmVyOiBEcmFnTGlzdGVuZXIsXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfbGF5b3V0TWFuYWdlcjogTGF5b3V0TWFuYWdlcixcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9jb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtLFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX29yaWdpbmFsUGFyZW50OiBDb250ZW50SXRlbSkge1xyXG5cclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIub24oJ2RyYWcnLCAob2Zmc2V0WCwgb2Zmc2V0WSwgZXZlbnQpID0+IHRoaXMub25EcmFnKG9mZnNldFgsIG9mZnNldFksIGV2ZW50KSk7XHJcbiAgICAgICAgdGhpcy5fZHJhZ0xpc3RlbmVyLm9uKCdkcmFnU3RvcCcsICgpID0+IHRoaXMub25Ecm9wKCkpO1xyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZURyYWdQcm94eUVsZW1lbnRzKHgsIHkpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fY29tcG9uZW50SXRlbS5wYXJlbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IF9jb250ZW50SXRlbSB3aWxsIGhhdmUgZHVtbXkgR3JvdW5kSXRlbSBhcyBwYXJlbnQgaWYgaW5pdGlhdGVkIGJ5IGEgZXh0ZXJuYWwgZHJhZyBzb3VyY2VcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0RQQzEwMDk3Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jb21wb25lbnRJdGVtRm9jdXNlZCA9IHRoaXMuX2NvbXBvbmVudEl0ZW0uZm9jdXNlZDtcclxuICAgICAgICBpZiAodGhpcy5fY29tcG9uZW50SXRlbUZvY3VzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50SXRlbS5ibHVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEl0ZW0ucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMuX2NvbXBvbmVudEl0ZW0sIHRydWUpO1xyXG5cclxuICAgICAgICB0aGlzLnNldERpbWVuc2lvbnMoKTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5kZXRlcm1pbmVNaW5NYXhYWSgpO1xyXG4gICAgICAgIGlmICh0aGlzLl9sYXlvdXRNYW5hZ2VyLmxheW91dENvbmZpZy5zZXR0aW5ncy5jb25zdHJhaW5EcmFnVG9Db250YWluZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgY29uc3RyYWluZWRQb3NpdGlvbiA9IHRoaXMuZ2V0WFlXaXRoaW5NaW5NYXgoeCwgeSk7XHJcbiAgICAgICAgICAgIHggPSBjb25zdHJhaW5lZFBvc2l0aW9uLng7XHJcbiAgICAgICAgICAgIHkgPSBjb25zdHJhaW5lZFBvc2l0aW9uLnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9sYXlvdXRNYW5hZ2VyLmNhbGN1bGF0ZUl0ZW1BcmVhcygpO1xyXG4gICAgICAgIHRoaXMuc2V0RHJvcFBvc2l0aW9uKHgsIHkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBDcmVhdGUgU3RhY2stbGlrZSBzdHJ1Y3R1cmUgdG8gY29udGFpbiB0aGUgZHJhZ2dlZCBjb21wb25lbnQgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlRHJhZ1Byb3h5RWxlbWVudHMoaW5pdGlhbFg6IG51bWJlciwgaW5pdGlhbFk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5EcmFnUHJveHkpO1xyXG4gICAgICAgIGNvbnN0IGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBoZWFkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5IZWFkZXIpO1xyXG4gICAgICAgIGNvbnN0IHRhYnNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGFic0VsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlRhYnMpO1xyXG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0YWJFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5UYWIpO1xyXG4gICAgICAgIGNvbnN0IHRpdGxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICB0aXRsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlRpdGxlKTtcclxuICAgICAgICB0YWJFbGVtZW50LmFwcGVuZENoaWxkKHRpdGxlRWxlbWVudCk7XHJcbiAgICAgICAgdGFic0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFiRWxlbWVudCk7XHJcbiAgICAgICAgaGVhZGVyRWxlbWVudC5hcHBlbmRDaGlsZCh0YWJzRWxlbWVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3Byb3h5Q29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuX3Byb3h5Q29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuQ29udGVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQoaGVhZGVyRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9wcm94eUNvbnRhaW5lckVsZW1lbnQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3JpZ2luYWxQYXJlbnQgaW5zdGFuY2VvZiBTdGFjayAmJiB0aGlzLl9vcmlnaW5hbFBhcmVudC5oZWFkZXJTaG93KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NpZGVkID0gdGhpcy5fb3JpZ2luYWxQYXJlbnQuaGVhZGVyTGVmdFJpZ2h0U2lkZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbG1fJyArIHRoaXMuX29yaWdpbmFsUGFyZW50LmhlYWRlclNpZGUpO1xyXG4gICAgICAgICAgICBpZiAoW1NpZGUucmlnaHQsIFNpZGUuYm90dG9tXS5pbmRleE9mKHRoaXMuX29yaWdpbmFsUGFyZW50LmhlYWRlclNpZGUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3h5Q29udGFpbmVyRWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgaGVhZGVyRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVtYmVyVG9QaXhlbHMoaW5pdGlhbFgpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUudG9wID0gbnVtYmVyVG9QaXhlbHMoaW5pdGlhbFkpO1xyXG4gICAgICAgIHRhYkVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsIHRoaXMuX2NvbXBvbmVudEl0ZW0udGl0bGUpO1xyXG4gICAgICAgIHRpdGxlRWxlbWVudC5pbnNlcnRBZGphY2VudFRleHQoJ2FmdGVyYmVnaW4nLCB0aGlzLl9jb21wb25lbnRJdGVtLnRpdGxlKTtcclxuICAgICAgICB0aGlzLl9wcm94eUNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY29tcG9uZW50SXRlbS5lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRldGVybWluZU1pbk1heFhZKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGdldEpRdWVyeU9mZnNldCh0aGlzLl9sYXlvdXRNYW5hZ2VyLmNvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5fbWluWCA9IG9mZnNldC5sZWZ0O1xyXG4gICAgICAgIHRoaXMuX21pblkgPSBvZmZzZXQudG9wO1xyXG4gICAgICAgIGNvbnN0IHsgd2lkdGg6IGNvbnRhaW5lcldpZHRoLCBoZWlnaHQ6IGNvbnRhaW5lckhlaWdodCB9ID0gZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0KHRoaXMuX2xheW91dE1hbmFnZXIuY29udGFpbmVyKTtcclxuICAgICAgICB0aGlzLl9tYXhYID0gY29udGFpbmVyV2lkdGggKyB0aGlzLl9taW5YO1xyXG4gICAgICAgIHRoaXMuX21heFkgPSBjb250YWluZXJIZWlnaHQgKyB0aGlzLl9taW5ZO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0WFlXaXRoaW5NaW5NYXgoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB7eDogbnVtYmVyLCB5OiBudW1iZXJ9IHtcclxuICAgICAgICBpZiAoeCA8PSB0aGlzLl9taW5YKSB7XHJcbiAgICAgICAgICAgIHggPSBNYXRoLmNlaWwodGhpcy5fbWluWCArIDEpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoeCA+PSB0aGlzLl9tYXhYKSB7XHJcbiAgICAgICAgICAgIHggPSBNYXRoLmZsb29yKHRoaXMuX21heFggLSAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh5IDw9IHRoaXMuX21pblkpIHtcclxuICAgICAgICAgICAgeSA9IE1hdGguY2VpbCh0aGlzLl9taW5ZICsgMSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh5ID49IHRoaXMuX21heFkpIHtcclxuICAgICAgICAgICAgeSA9IE1hdGguZmxvb3IodGhpcy5fbWF4WSAtIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHt4LHl9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgb24gZXZlcnkgbW91c2VNb3ZlIGV2ZW50IGR1cmluZyBhIGRyYWcuIERldGVybWluZXMgaWYgdGhlIGRyYWcgaXNcclxuICAgICAqIHN0aWxsIHdpdGhpbiB0aGUgdmFsaWQgZHJhZyBhcmVhIGFuZCBjYWxscyB0aGUgbGF5b3V0TWFuYWdlciB0byBoaWdobGlnaHQgdGhlXHJcbiAgICAgKiBjdXJyZW50IGRyb3AgYXJlYVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBvZmZzZXRYIC0gVGhlIGRpZmZlcmVuY2UgZnJvbSB0aGUgb3JpZ2luYWwgeCBwb3NpdGlvbiBpbiBweFxyXG4gICAgICogQHBhcmFtIG9mZnNldFkgLSBUaGUgZGlmZmVyZW5jZSBmcm9tIHRoZSBvcmlnaW5hbCB5IHBvc2l0aW9uIGluIHB4XHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25EcmFnKG9mZnNldFg6IG51bWJlciwgb2Zmc2V0WTogbnVtYmVyLCBldmVudDogUG9pbnRlckV2ZW50KSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5wYWdlWDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQucGFnZVk7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuc2V0dGluZ3MuY29uc3RyYWluRHJhZ1RvQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RHJvcFBvc2l0aW9uKHgsIHkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzV2l0aGluQ29udGFpbmVyID0geCA+IHRoaXMuX21pblggJiYgeCA8IHRoaXMuX21heFggJiYgeSA+IHRoaXMuX21pblkgJiYgeSA8IHRoaXMuX21heFk7XHJcbiAgICAgICAgICAgIGlmIChpc1dpdGhpbkNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXREcm9wUG9zaXRpb24oeCwgeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEl0ZW0uZHJhZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgdGFyZ2V0IHBvc2l0aW9uLCBoaWdobGlnaHRpbmcgdGhlIGFwcHJvcHJpYXRlIGFyZWFcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geCAtIFRoZSB4IHBvc2l0aW9uIGluIHB4XHJcbiAgICAgKiBAcGFyYW0geSAtIFRoZSB5IHBvc2l0aW9uIGluIHB4XHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2V0RHJvcFBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVtYmVyVG9QaXhlbHMoeCk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS50b3AgPSBudW1iZXJUb1BpeGVscyh5KTtcclxuICAgICAgICB0aGlzLl9hcmVhID0gdGhpcy5fbGF5b3V0TWFuYWdlci5nZXRBcmVhKHgsIHkpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fYXJlYSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0VmFsaWRBcmVhID0gdGhpcy5fYXJlYTtcclxuICAgICAgICAgICAgdGhpcy5fYXJlYS5jb250ZW50SXRlbS5oaWdobGlnaHREcm9wWm9uZSh4LCB5LCB0aGlzLl9hcmVhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayB3aGVuIHRoZSBkcmFnIGhhcyBmaW5pc2hlZC4gRGV0ZXJtaW5lcyB0aGUgZHJvcCBhcmVhXHJcbiAgICAgKiBhbmQgYWRkcyB0aGUgY2hpbGQgdG8gaXRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uRHJvcCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBkcm9wVGFyZ2V0SW5kaWNhdG9yID0gdGhpcy5fbGF5b3V0TWFuYWdlci5kcm9wVGFyZ2V0SW5kaWNhdG9yO1xyXG4gICAgICAgIGlmIChkcm9wVGFyZ2V0SW5kaWNhdG9yID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdEUE9EMzAwMTEnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkcm9wVGFyZ2V0SW5kaWNhdG9yLmhpZGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEl0ZW0uZXhpdERyYWdNb2RlKCk7XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogVmFsaWQgZHJvcCBhcmVhIGZvdW5kXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGV0IGRyb3BwZWRDb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICh0aGlzLl9hcmVhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGRyb3BwZWRDb21wb25lbnRJdGVtID0gdGhpcy5fY29tcG9uZW50SXRlbTtcclxuICAgICAgICAgICAgdGhpcy5fYXJlYS5jb250ZW50SXRlbS5vbkRyb3AoZHJvcHBlZENvbXBvbmVudEl0ZW0sIHRoaXMuX2FyZWEpO1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIE5vIHZhbGlkIGRyb3AgYXJlYSBhdmFpbGFibGUgYXQgcHJlc2VudCwgYnV0IG9uZSBoYXMgYmVlbiBmb3VuZCBiZWZvcmUuXHJcbiAgICAgICAgICAgICAqIFVzZSBpdFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2xhc3RWYWxpZEFyZWEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgZHJvcHBlZENvbXBvbmVudEl0ZW0gPSB0aGlzLl9jb21wb25lbnRJdGVtO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdQYXJlbnRDb250ZW50SXRlbSA9IHRoaXMuX2xhc3RWYWxpZEFyZWEuY29udGVudEl0ZW07XHJcbiAgICAgICAgICAgIG5ld1BhcmVudENvbnRlbnRJdGVtLm9uRHJvcChkcm9wcGVkQ29tcG9uZW50SXRlbSwgdGhpcy5fbGFzdFZhbGlkQXJlYSk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogTm8gdmFsaWQgZHJvcCBhcmVhIGZvdW5kIGR1cmluZyB0aGUgZHVyYXRpb24gb2YgdGhlIGRyYWcuIFJldHVyblxyXG4gICAgICAgICAgICAgKiBjb250ZW50IGl0ZW0gdG8gaXRzIG9yaWdpbmFsIHBvc2l0aW9uIGlmIGEgb3JpZ2luYWwgcGFyZW50IGlzIHByb3ZpZGVkLlxyXG4gICAgICAgICAgICAgKiAoV2hpY2ggaXMgbm90IHRoZSBjYXNlIGlmIHRoZSBkcmFnIGhhZCBiZWVuIGluaXRpYXRlZCBieSBjcmVhdGVEcmFnU291cmNlKVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX29yaWdpbmFsUGFyZW50KSB7XHJcbiAgICAgICAgICAgIGRyb3BwZWRDb21wb25lbnRJdGVtID0gdGhpcy5fY29tcG9uZW50SXRlbTtcclxuICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxQYXJlbnQuYWRkQ2hpbGQoZHJvcHBlZENvbXBvbmVudEl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFRoZSBkcmFnIGRpZG4ndCB1bHRpbWF0ZWx5IGVuZCB1cCB3aXRoIGFkZGluZyB0aGUgY29udGVudCBpdGVtIHRvXHJcbiAgICAgICAgICAgICAqIGFueSBjb250YWluZXIuIEluIG9yZGVyIHRvIGVuc3VyZSBjbGVhbiB1cCBoYXBwZW5zLCBkZXN0cm95IHRoZVxyXG4gICAgICAgICAgICAgKiBjb250ZW50IGl0ZW0uXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudEl0ZW0uZGVzdHJveSgpOyAvLyBjb250ZW50SXRlbSBjaGlsZHJlbiBhcmUgbm93IGRlc3Ryb3llZCBhcyB3ZWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLl9sYXlvdXRNYW5hZ2VyLmVtaXQoJ2l0ZW1Ecm9wcGVkJywgdGhpcy5fY29tcG9uZW50SXRlbSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jb21wb25lbnRJdGVtRm9jdXNlZCAmJiBkcm9wcGVkQ29tcG9uZW50SXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGRyb3BwZWRDb21wb25lbnRJdGVtLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyB0aGUgRHJhZyBQcm94eSdzIGRpbWVuc2lvbnNcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNldERpbWVuc2lvbnMoKSB7XHJcbiAgICAgICAgY29uc3QgZGltZW5zaW9ucyA9IHRoaXMuX2xheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLmRpbWVuc2lvbnM7XHJcbiAgICAgICAgaWYgKGRpbWVuc2lvbnMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RyYWdQcm94eS5zZXREaW1lbnNpb25zOiBkaW1lbnNpb25zIHVuZGVmaW5lZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHdpZHRoID0gZGltZW5zaW9ucy5kcmFnUHJveHlXaWR0aDtcclxuICAgICAgICBsZXQgaGVpZ2h0ID0gZGltZW5zaW9ucy5kcmFnUHJveHlIZWlnaHQ7XHJcbiAgICAgICAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQgfHwgaGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEcmFnUHJveHkuc2V0RGltZW5zaW9uczogd2lkdGggYW5kL29yIGhlaWdodCB1bmRlZmluZWQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGhlYWRlckhlaWdodCA9IHRoaXMuX2xheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLmhlYWRlci5zaG93ID09PSBmYWxzZSA/IDAgOiBkaW1lbnNpb25zLmhlYWRlckhlaWdodDtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLndpZHRoID0gbnVtYmVyVG9QaXhlbHMod2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gbnVtYmVyVG9QaXhlbHMoaGVpZ2h0KVxyXG4gICAgICAgIHdpZHRoIC09ICh0aGlzLl9zaWRlZCA/IGhlYWRlckhlaWdodCA6IDApO1xyXG4gICAgICAgIGhlaWdodCAtPSAoIXRoaXMuX3NpZGVkID8gaGVhZGVySGVpZ2h0IDogMCk7XHJcbiAgICAgICAgdGhpcy5fcHJveHlDb250YWluZXJFbGVtZW50LnN0eWxlLndpZHRoID0gbnVtYmVyVG9QaXhlbHMod2lkdGgpO1xyXG4gICAgICAgIHRoaXMuX3Byb3h5Q29udGFpbmVyRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBudW1iZXJUb1BpeGVscyhoZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEl0ZW0uZW50ZXJEcmFnTW9kZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLl9jb21wb25lbnRJdGVtLnNob3coKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnRJdGVtQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZyc7XHJcbmltcG9ydCB7IFVuZXhwZWN0ZWROdWxsRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBDb21wb25lbnRJdGVtIH0gZnJvbSAnLi4vaXRlbXMvY29tcG9uZW50LWl0ZW0nO1xyXG5pbXBvcnQgeyBHcm91bmRJdGVtIH0gZnJvbSAnLi4vaXRlbXMvZ3JvdW5kLWl0ZW0nO1xyXG5pbXBvcnQgeyBMYXlvdXRNYW5hZ2VyIH0gZnJvbSAnLi4vbGF5b3V0LW1hbmFnZXInO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIgfSBmcm9tICcuLi91dGlscy9kcmFnLWxpc3RlbmVyJztcclxuaW1wb3J0IHsgSnNvblZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xyXG5pbXBvcnQgeyBEcmFnUHJveHkgfSBmcm9tICcuL2RyYWctcHJveHknO1xyXG5pbXBvcnQgeyBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyB9IGZyb20gXCIuLi9jb25maWcvcmVzb2x2ZWQtY29uZmlnXCI7XHJcblxyXG4vKipcclxuICogQWxsb3dzIGZvciBhbnkgRE9NIGl0ZW0gdG8gY3JlYXRlIGEgY29tcG9uZW50IG9uIGRyYWdcclxuICogc3RhcnQgdG8gYmUgZHJhZ2dlZCBpbnRvIHRoZSBMYXlvdXRcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERyYWdTb3VyY2Uge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZHJhZ0xpc3RlbmVyOiBEcmFnTGlzdGVuZXIgfCBudWxsO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZHVtbXlHcm91bmRDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZHVtbXlHcm91bmRDb250ZW50SXRlbTogR3JvdW5kSXRlbTtcclxuIFxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgX2xheW91dE1hbmFnZXI6IExheW91dE1hbmFnZXIsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2VsZW1lbnQ6IEhUTUxFbGVtZW50LFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9leHRyYUFsbG93YWJsZUNoaWxkVGFyZ2V0czogSFRNTEVsZW1lbnRbXSxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfY29tcG9uZW50VHlwZU9yRnRuOiBKc29uVmFsdWUgfCAoKCkgPT4gRHJhZ1NvdXJjZS5Db21wb25lbnRJdGVtQ29uZmlnKSxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfY29tcG9uZW50U3RhdGU6IEpzb25WYWx1ZSB8IHVuZGVmaW5lZCxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfdGl0bGU6IHN0cmluZyB8IHVuZGVmaW5lZCxcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lciA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuX2R1bW15R3JvdW5kQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGR1bW15Um9vdEl0ZW1Db25maWcgPSBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZy5jcmVhdGVEZWZhdWx0KCdyb3cnKTtcclxuICAgICAgICB0aGlzLl9kdW1teUdyb3VuZENvbnRlbnRJdGVtID0gbmV3IEdyb3VuZEl0ZW0odGhpcy5fbGF5b3V0TWFuYWdlciwgZHVtbXlSb290SXRlbUNvbmZpZywgdGhpcy5fZHVtbXlHcm91bmRDb250YWluZXIpO1xyXG4gXHJcbiAgICAgICAgdGhpcy5jcmVhdGVEcmFnTGlzdGVuZXIoKTtcclxuICAgIH1cclxuXHJcblx0LyoqXHJcblx0ICogRGlzcG9zZXMgb2YgdGhlIGRyYWcgbGlzdGVuZXJzIHNvIHRoZSBkcmFnIHNvdXJjZSBpcyBub3QgdXNhYmxlIGFueSBtb3JlLlxyXG4gICAgICogQGludGVybmFsXHJcblx0ICovXHJcblx0ZGVzdHJveSgpOiB2b2lkIHtcclxuXHRcdHRoaXMucmVtb3ZlRHJhZ0xpc3RlbmVyKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIGluaXRpYWxseSBhbmQgYWZ0ZXIgZXZlcnkgZHJhZ1xyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlRHJhZ0xpc3RlbmVyKCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRHJhZ0xpc3RlbmVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lciA9IG5ldyBEcmFnTGlzdGVuZXIodGhpcy5fZWxlbWVudCwgdGhpcy5fZXh0cmFBbGxvd2FibGVDaGlsZFRhcmdldHMpO1xyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lci5vbignZHJhZ1N0YXJ0JywgKHgsIHkpID0+IHRoaXMub25EcmFnU3RhcnQoeCwgeSkpO1xyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lci5vbignZHJhZ1N0b3AnLCAoKSA9PiB0aGlzLm9uRHJhZ1N0b3AoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBmb3IgdGhlIERyYWdMaXN0ZW5lcidzIGRyYWdTdGFydCBldmVudFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB4IC0gVGhlIHggcG9zaXRpb24gb2YgdGhlIG1vdXNlIG9uIGRyYWdTdGFydFxyXG4gICAgICogQHBhcmFtIHkgLSBUaGUgeCBwb3NpdGlvbiBvZiB0aGUgbW91c2Ugb24gZHJhZ1N0YXJ0XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkRyYWdTdGFydCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBjb21wb25lbnRUeXBlOiBKc29uVmFsdWU7XHJcbiAgICAgICAgbGV0IGNvbXBvbmVudFN0YXRlOiBKc29uVmFsdWUgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IHRpdGxlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb21wb25lbnRUeXBlT3JGdG4gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBjb25zdCBkcmFnU291cmNlSXRlbUNvbmZpZzogRHJhZ1NvdXJjZS5Db21wb25lbnRJdGVtQ29uZmlnID0gdGhpcy5fY29tcG9uZW50VHlwZU9yRnRuKCk7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGUgPSBkcmFnU291cmNlSXRlbUNvbmZpZy50eXBlO1xyXG4gICAgICAgICAgICBjb21wb25lbnRTdGF0ZSA9IGRyYWdTb3VyY2VJdGVtQ29uZmlnLnN0YXRlO1xyXG4gICAgICAgICAgICB0aXRsZSA9IGRyYWdTb3VyY2VJdGVtQ29uZmlnLnRpdGxlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGUgPSB0aGlzLl9jb21wb25lbnRUeXBlT3JGdG47XHJcbiAgICAgICAgICAgIGNvbXBvbmVudFN0YXRlID0gdGhpcy5fY29tcG9uZW50U3RhdGU7XHJcbiAgICAgICAgICAgIHRpdGxlID0gdGhpcy5fdGl0bGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYSBkdW1teSBDb250ZW50SXRlbSBvbmx5IGZvciBkcmFnIHB1cnBvc2VzXHJcbiAgICAgICAgLy8gQWxsIENvbnRlbnRJdGVtcyAoZXhjZXB0IGZvciBHcm91bmRJdGVtKSBuZWVkIGEgcGFyZW50LiAgV2hlbiBkcmFnZ2luZywgdGhlIHBhcmVudCBpcyBub3QgdXNlZC5cclxuICAgICAgICAvLyBJbnN0ZWFkIG9mIGFsbG93aW5nIG51bGwgcGFyZW50cyAoYXMgSmF2YXNjcmlwdCB2ZXJzaW9uIGRpZCksIHVzZSBhIHRlbXBvcmFyeSBkdW1teSBHcm91bmRJdGVtIHBhcmVudCBhbmQgYWRkIENvbnRlbnRJdGVtIHRvIHRoYXRcclxuICAgICAgICAvLyBJZiB0aGlzIGRvZXMgbm90IHdvcmssIG5lZWQgdG8gY3JlYXRlIGFsdGVybmF0aXZlIEdyb3VuZEl0ZW0gY2xhc3NcclxuXHJcbiAgICAgICAgY29uc3QgaXRlbUNvbmZpZzogQ29tcG9uZW50SXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2NvbXBvbmVudCcsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGUsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudFN0YXRlLFxyXG4gICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRJdGVtQ29uZmlnID0gQ29tcG9uZW50SXRlbUNvbmZpZy5yZXNvbHZlKGl0ZW1Db25maWcpO1xyXG5cclxuICAgICAgICBjb25zdCBjb21wb25lbnRJdGVtID0gbmV3IENvbXBvbmVudEl0ZW0odGhpcy5fbGF5b3V0TWFuYWdlciwgcmVzb2x2ZWRJdGVtQ29uZmlnLCB0aGlzLl9kdW1teUdyb3VuZENvbnRlbnRJdGVtKVxyXG4gICAgICAgIHRoaXMuX2R1bW15R3JvdW5kQ29udGVudEl0ZW0uY29udGVudEl0ZW1zLnB1c2goY29tcG9uZW50SXRlbSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9kcmFnTGlzdGVuZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0RTT0RTRDY2NzQ2Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZHJhZ1Byb3h5ID0gbmV3IERyYWdQcm94eSh4LCB5LCB0aGlzLl9kcmFnTGlzdGVuZXIsIHRoaXMuX2xheW91dE1hbmFnZXIsIGNvbXBvbmVudEl0ZW0gLCB0aGlzLl9kdW1teUdyb3VuZENvbnRlbnRJdGVtKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zaXRpb25JbmRpY2F0b3IgPSB0aGlzLl9sYXlvdXRNYW5hZ2VyLnRyYW5zaXRpb25JbmRpY2F0b3I7XHJcbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uSW5kaWNhdG9yID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignRFNPRFNUNjY3NDYnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25JbmRpY2F0b3IudHJhbnNpdGlvbkVsZW1lbnRzKHRoaXMuX2VsZW1lbnQsIGRyYWdQcm94eS5lbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIG9uRHJhZ1N0b3AoKSB7XHJcbiAgICAgICAgLy8gaWYgKHRoaXMuX2R1bW15R3JvdW5kQ29udGVudEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIC8vICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdEU09EU0RSVTA4MTE2Jyk7XHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5fZHVtbXlHcm91bmRDb250ZW50SXRlbS5fJGRlc3Ryb3lcclxuICAgICAgICAvLyAgICAgdGhpcy5fZHVtbXlHcm91bmRDb250ZW50SXRlbSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgdGhpcy5jcmVhdGVEcmFnTGlzdGVuZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuXHQgKiBDYWxsZWQgYWZ0ZXIgZXZlcnkgZHJhZyBhbmQgd2hlbiB0aGUgZHJhZyBzb3VyY2UgaXMgYmVpbmcgZGlzcG9zZWQgb2YuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuXHQgKi9cclxuXHRwcml2YXRlIHJlbW92ZURyYWdMaXN0ZW5lcigpIHtcclxuXHRcdGlmICh0aGlzLl9kcmFnTGlzdGVuZXIgIT09IG51bGwgKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lci5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lciA9IG51bGw7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIERyYWdTb3VyY2Uge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb21wb25lbnRJdGVtQ29uZmlnIHtcclxuICAgICAgICB0eXBlOiBKc29uVmFsdWUsXHJcbiAgICAgICAgc3RhdGU/OiBKc29uVmFsdWUsXHJcbiAgICAgICAgdGl0bGU/OiBzdHJpbmcsXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRG9tQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvZG9tLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IEFyZWFMaW5rZWRSZWN0IH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xyXG5pbXBvcnQgeyBudW1iZXJUb1BpeGVscywgc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY2xhc3MgRHJvcFRhcmdldEluZGljYXRvciB7XHJcbiAgICBwcml2YXRlIF9lbGVtZW50OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvLyBNYXliZSB1c2UgY29udGFpbmVyIGluc3RlYWQgb2YgRG9jdW1lbnQgQm9keT9cclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRHJvcFRhcmdldEluZGljYXRvcik7XHJcbiAgICAgICAgY29uc3QgaW5uZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgaW5uZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Jbm5lcik7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZChpbm5lckVsZW1lbnQpO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBoaWdobGlnaHRBcmVhKGFyZWE6IEFyZWFMaW5rZWRSZWN0KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVtYmVyVG9QaXhlbHMoYXJlYS54MSk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS50b3AgPSBudW1iZXJUb1BpeGVscyhhcmVhLnkxKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLndpZHRoID0gbnVtYmVyVG9QaXhlbHMoYXJlYS54MiAtIGFyZWEueDEpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gbnVtYmVyVG9QaXhlbHMoYXJlYS55MiAtIGFyZWEueTEpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZSgpOiB2b2lkIHtcclxuICAgICAgICBzZXRFbGVtZW50RGlzcGxheVZpc2liaWxpdHkodGhpcy5fZWxlbWVudCwgZmFsc2UpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEhlYWRlciB9IGZyb20gJy4vaGVhZGVyJztcclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIEhlYWRlckJ1dHRvbiB7XHJcbiAgICBwcml2YXRlIF9lbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgX2NsaWNrRXZlbnRMaXN0ZW5lciA9IChldjogTW91c2VFdmVudCkgPT4gdGhpcy5vbkNsaWNrKGV2KTtcclxuICAgIHByaXZhdGUgX3RvdWNoU3RhcnRFdmVudExpc3RlbmVyID0gKGV2OiBUb3VjaEV2ZW50KSA9PiB0aGlzLm9uVG91Y2hTdGFydChldik7XHJcblxyXG4gICAgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQgeyByZXR1cm4gdGhpcy5fZWxlbWVudDsgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2hlYWRlcjogSGVhZGVyLCBsYWJlbDogc3RyaW5nLCBjc3NDbGFzczogc3RyaW5nLCBwcml2YXRlIF9wdXNoRXZlbnQ6IEhlYWRlckJ1dHRvbi5QdXNoRXZlbnQpIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNzc0NsYXNzKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnRpdGxlID0gbGFiZWw7XHJcbiAgICAgICAgdGhpcy5faGVhZGVyLm9uKCdkZXN0cm95JywgKCkgPT4gdGhpcy5kZXN0cm95KCkpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jbGlja0V2ZW50TGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl90b3VjaFN0YXJ0RXZlbnRMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgIHRoaXMuX2hlYWRlci5jb250cm9sc0NvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2xpY2tFdmVudExpc3RlbmVyKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl90b3VjaFN0YXJ0RXZlbnRMaXN0ZW5lcik7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZCh0aGlzLl9lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQ2xpY2soZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLl9wdXNoRXZlbnQoZXYpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Ub3VjaFN0YXJ0KGV2OiBUb3VjaEV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fcHVzaEV2ZW50KGV2KTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEhlYWRlckJ1dHRvbiB7XHJcbiAgICBleHBvcnQgdHlwZSBQdXNoRXZlbnQgPSAodGhpczogdm9pZCwgZXY6IEV2ZW50KSA9PiB2b2lkO1xyXG59XHJcbiIsImltcG9ydCB7IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9pbnRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuLi9pdGVtcy9jb21wb25lbnQtaXRlbSc7XHJcbmltcG9ydCB7IENvbnRlbnRJdGVtIH0gZnJvbSAnLi4vaXRlbXMvY29udGVudC1pdGVtJztcclxuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICcuLi9pdGVtcy9zdGFjayc7XHJcbmltcG9ydCB7IExheW91dE1hbmFnZXIgfSBmcm9tICcuLi9sYXlvdXQtbWFuYWdlcic7XHJcbmltcG9ydCB7IERvbUNvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2RvbS1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIgfSBmcm9tICcuLi91dGlscy9kcmFnLWxpc3RlbmVyJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vdXRpbHMvZXZlbnQtZW1pdHRlcic7XHJcbmltcG9ydCB7IFNpZGUgfSBmcm9tICcuLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7IG51bWJlclRvUGl4ZWxzLCBzZXRFbGVtZW50RGlzcGxheVZpc2liaWxpdHkgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IEhlYWRlckJ1dHRvbiB9IGZyb20gJy4vaGVhZGVyLWJ1dHRvbic7XHJcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4vdGFiJztcclxuaW1wb3J0IHsgVGFic0NvbnRhaW5lciB9IGZyb20gJy4vdGFicy1jb250YWluZXInO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIGhlYWRlciBhYm92ZSBhIFN0YWNrIENvbnRlbnRJdGVtLlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSGVhZGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhYnNDb250YWluZXI6IFRhYnNDb250YWluZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NvbnRyb2xzQ29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfc2hvdzogYm9vbGVhbjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3BvcG91dEVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9wb3BvdXRMYWJlbDogc3RyaW5nO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWF4aW1pc2VFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWF4aW1pc2VMYWJlbDogc3RyaW5nO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWluaW1pc2VFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWluaW1pc2VMYWJlbDogc3RyaW5nO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xvc2VFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xvc2VMYWJlbDogc3RyaW5nO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdGFiRHJvcGRvd25FbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdGFiRHJvcGRvd25MYWJlbDogc3RyaW5nO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhYkNvbnRyb2xPZmZzZXQ6IG51bWJlcjtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jbGlja0xpc3RlbmVyID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB0aGlzLm9uQ2xpY2soZXYpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdG91Y2hTdGFydExpc3RlbmVyID0gKGV2OiBUb3VjaEV2ZW50KSA9PiB0aGlzLm9uVG91Y2hTdGFydChldik7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kb2N1bWVudE1vdXNlVXBMaXN0ZW5lcjogKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfcm93Q29sdW1uQ2xvc2FibGUgPSB0cnVlO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfY2FuUmVtb3ZlQ29tcG9uZW50OiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfc2lkZTogU2lkZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2xlZnRSaWdodFNpZGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xvc2VCdXR0b246IEhlYWRlckJ1dHRvbiB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcG9wb3V0QnV0dG9uOiBIZWFkZXJCdXR0b24gfCBudWxsID0gbnVsbDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhYkRyb3Bkb3duQnV0dG9uOiBIZWFkZXJCdXR0b247XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9tYXhpbWlzZUJ1dHRvbjogSGVhZGVyQnV0dG9uIHwgdW5kZWZpbmVkO1xyXG4gICAgLy8gLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgLy8gcHJpdmF0ZSBfYWN0aXZlQ29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSB8IG51bGwgPSBudWxsOyAvLyBvbmx5IHVzZWQgdG8gaWRlbnRpZnkgYWN0aXZlIHRhYlxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGdldCBzaG93KCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fc2hvdzsgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZ2V0IHNpZGUoKTogU2lkZSB7IHJldHVybiB0aGlzLl9zaWRlOyB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBnZXQgbGVmdFJpZ2h0U2lkZWQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9sZWZ0UmlnaHRTaWRlZDsgfVxyXG5cclxuICAgIGdldCBsYXlvdXRNYW5hZ2VyKCk6IExheW91dE1hbmFnZXIgeyByZXR1cm4gdGhpcy5fbGF5b3V0TWFuYWdlcjsgfVxyXG4gICAgZ2V0IHBhcmVudCgpOiBTdGFjayB7IHJldHVybiB0aGlzLl9wYXJlbnQ7IH1cclxuICAgIGdldCB0YWJzKCk6IFRhYltdIHsgcmV0dXJuIHRoaXMuX3RhYnNDb250YWluZXIudGFiczsgfVxyXG4gICAgZ2V0IGxhc3RWaXNpYmxlVGFiSW5kZXgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX3RhYnNDb250YWluZXIubGFzdFZpc2libGVUYWJJbmRleDsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChTdGFjazpjbGFzcykuZ2V0QWN0aXZlQ29tcG9uZW50SXRlbX0gKi9cclxuICAgIGdldCBhY3RpdmVDb250ZW50SXRlbSgpOiBDb250ZW50SXRlbSB8IG51bGwge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZUNvbXBvbmVudEl0ZW0gPSB0aGlzLl9nZXRBY3RpdmVDb21wb25lbnRJdGVtRXZlbnQoKTtcclxuICAgICAgICBpZiAoYWN0aXZlQ29tcG9uZW50SXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhY3RpdmVDb21wb25lbnRJdGVtO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7IH1cclxuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChIZWFkZXI6Y2xhc3MpLnRhYnNDb250YWluZXJFbGVtZW50fSAqL1xyXG4gICAgZ2V0IHRhYnNDb250YWluZXIoKTogSFRNTEVsZW1lbnQgeyByZXR1cm4gdGhpcy5fdGFic0NvbnRhaW5lci5lbGVtZW50OyB9XHJcbiAgICBnZXQgdGFic0NvbnRhaW5lckVsZW1lbnQoKTogSFRNTEVsZW1lbnQgeyByZXR1cm4gdGhpcy5fdGFic0NvbnRhaW5lci5lbGVtZW50OyB9XHJcbiAgICBnZXQgY29udHJvbHNDb250YWluZXJFbGVtZW50KCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2NvbnRyb2xzQ29udGFpbmVyRWxlbWVudDsgfVxyXG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKEhlYWRlcjpjbGFzcykuY29udHJvbHNDb250YWluZXJFbGVtZW50fSAqL1xyXG4gICAgZ2V0IGNvbnRyb2xzQ29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2NvbnRyb2xzQ29udGFpbmVyRWxlbWVudDsgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9sYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9wYXJlbnQ6IFN0YWNrLFxyXG4gICAgICAgIHNldHRpbmdzOiBIZWFkZXIuU2V0dGluZ3MsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2NvbmZpZ0Nsb3NhYmxlOiBib29sZWFuLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9nZXRBY3RpdmVDb21wb25lbnRJdGVtRXZlbnQ6IEhlYWRlci5HZXRBY3RpdmVDb21wb25lbnRJdGVtRXZlbnQsXHJcbiAgICAgICAgY2xvc2VFdmVudDogSGVhZGVyLkNsb3NlRXZlbnQsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgX3BvcG91dEV2ZW50OiBIZWFkZXIuUG9wb3V0RXZlbnQgfCB1bmRlZmluZWQsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgX21heGltaXNlVG9nZ2xlRXZlbnQ6IEhlYWRlci5NYXhpbWlzZVRvZ2dsZUV2ZW50IHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9jbGlja0V2ZW50OiBIZWFkZXIuQ2xpY2tFdmVudCB8IHVuZGVmaW5lZCxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfdG91Y2hTdGFydEV2ZW50OiBIZWFkZXIuVG91Y2hTdGFydEV2ZW50IHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9jb21wb25lbnRSZW1vdmVFdmVudDogSGVhZGVyLkNvbXBvbmVudFJlbW92ZUV2ZW50IHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9jb21wb25lbnRGb2N1c0V2ZW50OiBIZWFkZXIuQ29tcG9uZW50Rm9jdXNFdmVudCB8IHVuZGVmaW5lZCxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfY29tcG9uZW50RHJhZ1N0YXJ0RXZlbnQ6IEhlYWRlci5Db21wb25lbnREcmFnU3RhcnRFdmVudCB8IHVuZGVmaW5lZCxcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYnNDb250YWluZXIgPSBuZXcgVGFic0NvbnRhaW5lcih0aGlzLl9sYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgICAgICAoaXRlbSkgPT4gdGhpcy5oYW5kbGVUYWJJbml0aWF0ZWRDb21wb25lbnRSZW1vdmVFdmVudChpdGVtKSxcclxuICAgICAgICAgICAgKGl0ZW0pID0+IHRoaXMuaGFuZGxlVGFiSW5pdGlhdGVkQ29tcG9uZW50Rm9jdXNFdmVudChpdGVtKSxcclxuICAgICAgICAgICAgKHgsIHksIGRyYWdMaXN0ZW5lciwgaXRlbSkgPT4gdGhpcy5oYW5kbGVUYWJJbml0aWF0ZWREcmFnU3RhcnRFdmVudCh4LCB5LCBkcmFnTGlzdGVuZXIsIGl0ZW0pLFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnByb2Nlc3NUYWJEcm9wZG93bkFjdGl2ZUNoYW5nZWQoKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLl9zaG93ID0gc2V0dGluZ3Muc2hvdztcclxuICAgICAgICB0aGlzLl9wb3BvdXRFbmFibGVkID0gc2V0dGluZ3MucG9wb3V0RW5hYmxlZDtcclxuICAgICAgICB0aGlzLl9wb3BvdXRMYWJlbCA9IHNldHRpbmdzLnBvcG91dExhYmVsO1xyXG4gICAgICAgIHRoaXMuX21heGltaXNlRW5hYmxlZCA9IHNldHRpbmdzLm1heGltaXNlRW5hYmxlZDtcclxuICAgICAgICB0aGlzLl9tYXhpbWlzZUxhYmVsID0gc2V0dGluZ3MubWF4aW1pc2VMYWJlbDtcclxuICAgICAgICB0aGlzLl9taW5pbWlzZUVuYWJsZWQgPSBzZXR0aW5ncy5taW5pbWlzZUVuYWJsZWQ7XHJcbiAgICAgICAgdGhpcy5fbWluaW1pc2VMYWJlbCA9IHNldHRpbmdzLm1pbmltaXNlTGFiZWw7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VFbmFibGVkID0gc2V0dGluZ3MuY2xvc2VFbmFibGVkO1xyXG4gICAgICAgIHRoaXMuX2Nsb3NlTGFiZWwgPSBzZXR0aW5ncy5jbG9zZUxhYmVsO1xyXG4gICAgICAgIHRoaXMuX3RhYkRyb3Bkb3duRW5hYmxlZCA9IHNldHRpbmdzLnRhYkRyb3Bkb3duRW5hYmxlZDtcclxuICAgICAgICB0aGlzLl90YWJEcm9wZG93bkxhYmVsID0gc2V0dGluZ3MudGFiRHJvcGRvd25MYWJlbDtcclxuICAgICAgICB0aGlzLnNldFNpZGUoc2V0dGluZ3Muc2lkZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NhblJlbW92ZUNvbXBvbmVudCA9IHRoaXMuX2NvbmZpZ0Nsb3NhYmxlO1xyXG5cclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkhlYWRlcik7XHJcbiAgICAgICAgdGhpcy5fY29udHJvbHNDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xyXG4gICAgICAgIHRoaXMuX2NvbnRyb2xzQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuQ29udHJvbHMpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fdGFic0NvbnRhaW5lci5lbGVtZW50KTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2NvbnRyb2xzQ29udGFpbmVyRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl90YWJzQ29udGFpbmVyLmRyb3Bkb3duRWxlbWVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jbGlja0xpc3RlbmVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fdG91Y2hTdGFydExpc3RlbmVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2RvY3VtZW50TW91c2VVcExpc3RlbmVyID0gKCkgPT4gdGhpcy5fdGFic0NvbnRhaW5lci5oaWRlQWRkaXRpb25hbFRhYnNEcm9wZG93bigpXHJcbiAgICAgICAgZ2xvYmFsVGhpcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFiQ29udHJvbE9mZnNldCA9IHRoaXMuX2xheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLnNldHRpbmdzLnRhYkNvbnRyb2xPZmZzZXQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90YWJEcm9wZG93bkVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGFiRHJvcGRvd25CdXR0b24gPSBuZXcgSGVhZGVyQnV0dG9uKHRoaXMsIHRoaXMuX3RhYkRyb3Bkb3duTGFiZWwsIERvbUNvbnN0YW50cy5DbGFzc05hbWUuVGFiRHJvcGRvd24sXHJcbiAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLl90YWJzQ29udGFpbmVyLnNob3dBZGRpdGlvbmFsVGFic0Ryb3Bkb3duKClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9wb3BvdXRFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvcG91dEJ1dHRvbiA9IG5ldyBIZWFkZXJCdXR0b24odGhpcywgdGhpcy5fcG9wb3V0TGFiZWwsIERvbUNvbnN0YW50cy5DbGFzc05hbWUuUG9wb3V0LCAoKSA9PiB0aGlzLmhhbmRsZUJ1dHRvblBvcG91dEV2ZW50KCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWF4aW1pc2UgY29udHJvbCAtIHNldCB0aGUgY29tcG9uZW50IHRvIHRoZSBmdWxsIHNpemUgb2YgdGhlIGxheW91dFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXhpbWlzZUVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWF4aW1pc2VCdXR0b24gPSBuZXcgSGVhZGVyQnV0dG9uKHRoaXMsIHRoaXMuX21heGltaXNlTGFiZWwsIERvbUNvbnN0YW50cy5DbGFzc05hbWUuTWF4aW1pc2UsXHJcbiAgICAgICAgICAgICAgICAoZXYpID0+IHRoaXMuaGFuZGxlQnV0dG9uTWF4aW1pc2VUb2dnbGVFdmVudChldilcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENsb3NlIGJ1dHRvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmICh0aGlzLl9jb25maWdDbG9zYWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jbG9zZUJ1dHRvbiA9IG5ldyBIZWFkZXJCdXR0b24odGhpcywgdGhpcy5fY2xvc2VMYWJlbCwgRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5DbG9zZSwgKCkgPT4gY2xvc2VFdmVudCgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucHJvY2Vzc1RhYkRyb3Bkb3duQWN0aXZlQ2hhbmdlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVzdHJveXMgdGhlIGVudGlyZSBoZWFkZXJcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZW1pdCgnZGVzdHJveScpO1xyXG5cclxuICAgICAgICB0aGlzLl9wb3BvdXRFdmVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9tYXhpbWlzZVRvZ2dsZUV2ZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX2NsaWNrRXZlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fdG91Y2hTdGFydEV2ZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudFJlbW92ZUV2ZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEZvY3VzRXZlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50RHJhZ1N0YXJ0RXZlbnQgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYnNDb250YWluZXIuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICBnbG9iYWxUaGlzLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9kb2N1bWVudE1vdXNlVXBMaXN0ZW5lcik7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGFiIGFuZCBhc3NvY2lhdGVzIGl0IHdpdGggYSBjb250ZW50SXRlbVxyXG4gICAgICogQHBhcmFtIGluZGV4IC0gVGhlIHBvc2l0aW9uIG9mIHRoZSB0YWJcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBjcmVhdGVUYWIoY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSwgaW5kZXg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3RhYnNDb250YWluZXIuY3JlYXRlVGFiKGNvbXBvbmVudEl0ZW0sIGluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpbmRzIGEgdGFiIGJhc2VkIG9uIHRoZSBjb250ZW50SXRlbSBpdHMgYXNzb2NpYXRlZCB3aXRoIGFuZCByZW1vdmVzIGl0LlxyXG4gICAgICogQ2Fubm90IHJlbW92ZSB0YWIgaWYgaXQgaGFzIHRoZSBhY3RpdmUgQ29tcG9uZW50SXRlbVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZVRhYihjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGFic0NvbnRhaW5lci5yZW1vdmVUYWIoY29tcG9uZW50SXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvY2Vzc0FjdGl2ZUNvbXBvbmVudENoYW5nZWQobmV3QWN0aXZlQ29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3RhYnNDb250YWluZXIucHJvY2Vzc0FjdGl2ZUNvbXBvbmVudENoYW5nZWQobmV3QWN0aXZlQ29tcG9uZW50SXRlbSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVUYWJTaXplcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNldFNpZGUodmFsdWU6IFNpZGUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zaWRlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbGVmdFJpZ2h0U2lkZWQgPSBbU2lkZS5yaWdodCwgU2lkZS5sZWZ0XS5pbmNsdWRlcyh0aGlzLl9zaWRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2dyYW1tYXRpY2FsbHkgc2V0IGNsb3NhYmlsaXR5LlxyXG4gICAgICogQHBhcmFtIHZhbHVlIC0gV2hldGhlciB0byBlbmFibGUvZGlzYWJsZSBjbG9zYWJpbGl0eS5cclxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIGFjdGlvbiB3YXMgc3VjY2Vzc2Z1bFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHNldFJvd0NvbHVtbkNsb3NhYmxlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fcm93Q29sdW1uQ2xvc2FibGUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUNsb3NhYmlsaXR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBoZWFkZXIncyBjbG9zYWJpbGl0eS4gSWYgYSBzdGFjay9oZWFkZXIgaXMgYWJsZVxyXG4gICAgICogdG8gY2xvc2UsIGJ1dCBoYXMgYSBub24gY2xvc2FibGUgY29tcG9uZW50IGFkZGVkIHRvIGl0LCB0aGUgc3RhY2sgaXMgbm9cclxuICAgICAqIGxvbmdlciBjbG9zYWJsZSB1bnRpbCBhbGwgY29tcG9uZW50cyBhcmUgY2xvc2FibGUuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdXBkYXRlQ2xvc2FiaWxpdHkoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGlzQ2xvc2FibGU6IGJvb2xlYW47XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWdDbG9zYWJsZSkge1xyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9yb3dDb2x1bW5DbG9zYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgaXNDbG9zYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaXNDbG9zYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZW4gPSB0aGlzLnRhYnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYiA9IHRoaXMuX3RhYnNDb250YWluZXIudGFic1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gdGFiLmNvbXBvbmVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdGVtLmlzQ2xvc2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jbG9zZUJ1dHRvbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzZXRFbGVtZW50RGlzcGxheVZpc2liaWxpdHkodGhpcy5fY2xvc2VCdXR0b24uZWxlbWVudCwgaXNDbG9zYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9wb3BvdXRCdXR0b24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5KHRoaXMuX3BvcG91dEJ1dHRvbi5lbGVtZW50LCBpc0Nsb3NhYmxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2NhblJlbW92ZUNvbXBvbmVudCA9IGlzQ2xvc2FibGUgfHwgdGhpcy5fdGFic0NvbnRhaW5lci50YWJDb3VudCA+IDE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgYXBwbHlGb2N1c2VkVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRm9jdXNlZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRm9jdXNlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByb2Nlc3NNYXhpbWlzZWQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21heGltaXNlQnV0dG9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignSFBNQVgxNjk5NycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21heGltaXNlQnV0dG9uLmVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsIHRoaXMuX21pbmltaXNlTGFiZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm9jZXNzTWluaW1pc2VkKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXhpbWlzZUJ1dHRvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0hQTUlOMTY5OTcnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXhpbWlzZUJ1dHRvbi5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCB0aGlzLl9tYXhpbWlzZUxhYmVsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQdXNoZXMgdGhlIHRhYnMgdG8gdGhlIHRhYiBkcm9wZG93biBpZiB0aGUgYXZhaWxhYmxlIHNwYWNlIGlzIG5vdCBzdWZmaWNpZW50XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdXBkYXRlVGFiU2l6ZXMoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RhYnNDb250YWluZXIudGFiQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckhlaWdodCA9IHRoaXMuX3Nob3cgPyB0aGlzLl9sYXlvdXRNYW5hZ2VyLmxheW91dENvbmZpZy5kaW1lbnNpb25zLmhlYWRlckhlaWdodCA6IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGVmdFJpZ2h0U2lkZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLndpZHRoID0gbnVtYmVyVG9QaXhlbHMoaGVhZGVySGVpZ2h0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUud2lkdGggPSAnJztcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gbnVtYmVyVG9QaXhlbHMoaGVhZGVySGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgYXZhaWxhYmxlV2lkdGg6IG51bWJlcjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xlZnRSaWdodFNpZGVkKSB7XHJcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVXaWR0aCA9IHRoaXMuX2VsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gdGhpcy5fY29udHJvbHNDb250YWluZXJFbGVtZW50Lm9mZnNldEhlaWdodCAtIHRoaXMuX3RhYkNvbnRyb2xPZmZzZXQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVXaWR0aCA9IHRoaXMuX2VsZW1lbnQub2Zmc2V0V2lkdGggLSB0aGlzLl9jb250cm9sc0NvbnRhaW5lckVsZW1lbnQub2Zmc2V0V2lkdGggLSB0aGlzLl90YWJDb250cm9sT2Zmc2V0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl90YWJzQ29udGFpbmVyLnVwZGF0ZVRhYlNpemVzKGF2YWlsYWJsZVdpZHRoLCB0aGlzLl9nZXRBY3RpdmVDb21wb25lbnRJdGVtRXZlbnQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlVGFiSW5pdGlhdGVkQ29tcG9uZW50UmVtb3ZlRXZlbnQoY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jYW5SZW1vdmVDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudFJlbW92ZUV2ZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0hIVENFMjIyOTQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudFJlbW92ZUV2ZW50KGNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlVGFiSW5pdGlhdGVkQ29tcG9uZW50Rm9jdXNFdmVudChjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudEZvY3VzRXZlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdISFRBRTIyMjk0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50Rm9jdXNFdmVudChjb21wb25lbnRJdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVUYWJJbml0aWF0ZWREcmFnU3RhcnRFdmVudCh4OiBudW1iZXIsIHk6IG51bWJlciwgZHJhZ0xpc3RlbmVyOiBEcmFnTGlzdGVuZXIsIGNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0pIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2NhblJlbW92ZUNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBkcmFnTGlzdGVuZXIuY2FuY2VsRHJhZygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb21wb25lbnREcmFnU3RhcnRFdmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdISFREU0UyMjI5NCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50RHJhZ1N0YXJ0RXZlbnQoeCwgeSwgZHJhZ0xpc3RlbmVyLCBjb21wb25lbnRJdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHByb2Nlc3NUYWJEcm9wZG93bkFjdGl2ZUNoYW5nZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RhYkRyb3Bkb3duQnV0dG9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5KHRoaXMuX3RhYkRyb3Bkb3duQnV0dG9uLmVsZW1lbnQsIHRoaXMuX3RhYnNDb250YWluZXIuZHJvcGRvd25BY3RpdmUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhhbmRsZUJ1dHRvblBvcG91dEV2ZW50KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9sYXlvdXRNYW5hZ2VyLmxheW91dENvbmZpZy5zZXR0aW5ncy5wb3BvdXRXaG9sZVN0YWNrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wb3BvdXRFdmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdISEJQT0UxNzgzNCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9wb3V0RXZlbnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUNvbXBvbmVudEl0ZW0gPSB0aGlzLl9nZXRBY3RpdmVDb21wb25lbnRJdGVtRXZlbnQoKTtcclxuICAgICAgICAgICAgaWYgKGFjdGl2ZUNvbXBvbmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUNvbXBvbmVudEl0ZW0ucG9wb3V0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZWxzZTogaWYgdGhlIHN0YWNrIGlzIGVtcHR5IHRoZXJlIHdvbid0IGJlIGFuIGFjdGl2ZSBpdGVtIChhbmQgbm90aGluZyB0byBwb3BvdXQpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIHByaXZhdGUgaGFuZGxlQnV0dG9uTWF4aW1pc2VUb2dnbGVFdmVudChldjogRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5fbWF4aW1pc2VUb2dnbGVFdmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0hIQk1URTE2ODM0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fbWF4aW1pc2VUb2dnbGVFdmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgaGVhZGVyJ3MgYmFja2dyb3VuZCBpcyBjbGlja2VkIChub3QgaXQncyB0YWJzIG9yIGNvbnRyb2xzKVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25DbGljayhldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5ub3RpZnlDbGljayhldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBoZWFkZXIncyBiYWNrZ3JvdW5kIGlzIHRvdWNoZWQgKG5vdCBpdCdzIHRhYnMgb3IgY29udHJvbHMpXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvblRvdWNoU3RhcnQoZXZlbnQ6IFRvdWNoRXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzLl9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5VG91Y2hTdGFydChldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgbm90aWZ5Q2xpY2soZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5fY2xpY2tFdmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0hOSEM0NjgzNCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrRXZlbnQoZXYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIG5vdGlmeVRvdWNoU3RhcnQoZXY6IFRvdWNoRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5fdG91Y2hTdGFydEV2ZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignSE5IVFM0NjgzNCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RvdWNoU3RhcnRFdmVudChldik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEhlYWRlciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBHZXRBY3RpdmVDb21wb25lbnRJdGVtRXZlbnQgPSAodGhpczogdm9pZCkgPT4gQ29tcG9uZW50SXRlbSB8IHVuZGVmaW5lZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIENsb3NlRXZlbnQgPSAodGhpczogdm9pZCkgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIFBvcG91dEV2ZW50ID0gKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBNYXhpbWlzZVRvZ2dsZUV2ZW50ID0gKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBDbGlja0V2ZW50ID0gKHRoaXM6IHZvaWQsIGV2OiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgVG91Y2hTdGFydEV2ZW50ID0gKHRoaXM6IHZvaWQsIGV2OiBUb3VjaEV2ZW50KSA9PiB2b2lkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgQ29tcG9uZW50UmVtb3ZlRXZlbnQgPSAodGhpczogdm9pZCwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIENvbXBvbmVudEZvY3VzRXZlbnQgPSAodGhpczogdm9pZCwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIENvbXBvbmVudERyYWdTdGFydEV2ZW50ID0gKHRoaXM6IHZvaWQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBkcmFnTGlzdGVuZXI6IERyYWdMaXN0ZW5lciwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIFN0YXRlQ2hhbmdlZEV2ZW50ID0gKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBTZXR0aW5ncyB7XHJcbiAgICAgICAgc2hvdzogYm9vbGVhbjtcclxuICAgICAgICBzaWRlOiBTaWRlO1xyXG4gICAgICAgIHBvcG91dEVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgcG9wb3V0TGFiZWw6IHN0cmluZztcclxuICAgICAgICBtYXhpbWlzZUVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgbWF4aW1pc2VMYWJlbDogc3RyaW5nO1xyXG4gICAgICAgIG1pbmltaXNlRW5hYmxlZDogYm9vbGVhbjtcclxuICAgICAgICBtaW5pbWlzZUxhYmVsOiBzdHJpbmc7XHJcbiAgICAgICAgY2xvc2VFbmFibGVkOiBib29sZWFuO1xyXG4gICAgICAgIGNsb3NlTGFiZWw6IHN0cmluZztcclxuICAgICAgICB0YWJEcm9wZG93bkVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgdGFiRHJvcGRvd25MYWJlbDogc3RyaW5nO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IERvbUNvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2RvbS1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIgfSBmcm9tICcuLi91dGlscy9kcmFnLWxpc3RlbmVyJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vdXRpbHMvZXZlbnQtZW1pdHRlcic7XHJcbmltcG9ydCB7IG51bWJlclRvUGl4ZWxzIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY2xhc3MgU3BsaXR0ZXIge1xyXG4gICAgcHJpdmF0ZSBfZ3JhYlNpemU7XHJcbiAgICBwcml2YXRlIF9kcmFnTGlzdGVuZXI6IERyYWdMaXN0ZW5lcjtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuXHJcbiAgICBnZXQgZWxlbWVudCgpOiBIVE1MRGl2RWxlbWVudCB7IHJldHVybiB0aGlzLl9lbGVtZW50OyB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfaXNWZXJ0aWNhbDogYm9vbGVhbiwgcHJpdmF0ZSBfc2l6ZTogbnVtYmVyLCBncmFiU2l6ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fZ3JhYlNpemUgPSBncmFiU2l6ZSA8IHRoaXMuX3NpemUgPyB0aGlzLl9zaXplIDogZ3JhYlNpemU7XHJcblxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5TcGxpdHRlcik7XHJcbiAgICAgICAgY29uc3QgZHJhZ0hhbmRsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkcmFnSGFuZGxlRWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRHJhZ0hhbmRsZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGhhbmRsZUV4Y2Vzc1NpemUgPSB0aGlzLl9ncmFiU2l6ZSAtIHRoaXMuX3NpemU7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlRXhjZXNzUG9zID0gaGFuZGxlRXhjZXNzU2l6ZSAvIDI7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIGRyYWdIYW5kbGVFbGVtZW50LnN0eWxlLnRvcCA9IG51bWJlclRvUGl4ZWxzKC1oYW5kbGVFeGNlc3NQb3MpO1xyXG4gICAgICAgICAgICBkcmFnSGFuZGxlRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBudW1iZXJUb1BpeGVscyh0aGlzLl9zaXplICsgaGFuZGxlRXhjZXNzU2l6ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlZlcnRpY2FsKTtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBudW1iZXJUb1BpeGVscyh0aGlzLl9zaXplKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkcmFnSGFuZGxlRWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVtYmVyVG9QaXhlbHMoLWhhbmRsZUV4Y2Vzc1Bvcyk7XHJcbiAgICAgICAgICAgIGRyYWdIYW5kbGVFbGVtZW50LnN0eWxlLndpZHRoID0gbnVtYmVyVG9QaXhlbHModGhpcy5fc2l6ZSArIGhhbmRsZUV4Y2Vzc1NpemUpO1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Ib3Jpem9udGFsKTtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS53aWR0aCA9IG51bWJlclRvUGl4ZWxzKHRoaXMuX3NpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZChkcmFnSGFuZGxlRWxlbWVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lciA9IG5ldyBEcmFnTGlzdGVuZXIodGhpcy5fZWxlbWVudCwgW2RyYWdIYW5kbGVFbGVtZW50XSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uPEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSywgY2FsbGJhY2s6IEV2ZW50RW1pdHRlci5DYWxsYmFjazxLPik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lci5vbjxLPihldmVudE5hbWUsIGNhbGxiYWNrKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBDb21wb25lbnRJdGVtIH0gZnJvbSAnLi4vaXRlbXMvY29tcG9uZW50LWl0ZW0nO1xyXG5pbXBvcnQgeyBMYXlvdXRNYW5hZ2VyIH0gZnJvbSAnLi4vbGF5b3V0LW1hbmFnZXInO1xyXG5pbXBvcnQgeyBEb21Db25zdGFudHMgfSBmcm9tICcuLi91dGlscy9kb20tY29uc3RhbnRzJztcclxuaW1wb3J0IHsgRHJhZ0xpc3RlbmVyIH0gZnJvbSAnLi4vdXRpbHMvZHJhZy1saXN0ZW5lcic7XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyBhbiBpbmRpdmlkdWFsIHRhYiB3aXRoaW4gYSBTdGFjaydzIGhlYWRlclxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGFiIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2VsZW1lbnQ6IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdGl0bGVFbGVtZW50OiBIVE1MU3BhbkVsZW1lbnQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jbG9zZUVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50IHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2RyYWdMaXN0ZW5lcjogRHJhZ0xpc3RlbmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfaXNBY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF90YWJDbGlja0xpc3RlbmVyID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB0aGlzLm9uVGFiQ2xpY2tEb3duKGV2KTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhYlRvdWNoU3RhcnRMaXN0ZW5lciA9IChldjogVG91Y2hFdmVudCkgPT4gdGhpcy5vblRhYlRvdWNoU3RhcnQoZXYpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xvc2VDbGlja0xpc3RlbmVyID0gKCkgPT4gdGhpcy5vbkNsb3NlQ2xpY2soKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Nsb3NlVG91Y2hTdGFydExpc3RlbmVyID0gKCkgPT4gdGhpcy5vbkNsb3NlVG91Y2hTdGFydCgpO1xyXG4gICAgLy8gLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgLy8gcHJpdmF0ZSByZWFkb25seSBfY2xvc2VNb3VzZURvd25MaXN0ZW5lciA9ICgpID0+IHRoaXMub25DbG9zZU1vdXNlZG93bigpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZHJhZ1N0YXJ0TGlzdGVuZXIgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHRoaXMub25EcmFnU3RhcnQoeCwgeSk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jb250ZW50SXRlbURlc3Ryb3lMaXN0ZW5lciA9ICgpID0+IHRoaXMub25Db250ZW50SXRlbURlc3Ryb3koKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhYlRpdGxlQ2hhbmdlZExpc3RlbmVyID0gKHRpdGxlOiBzdHJpbmcpID0+IHRoaXMuc2V0VGl0bGUodGl0bGUpXHJcblxyXG4gICAgZ2V0IGlzQWN0aXZlKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faXNBY3RpdmU7IH1cclxuICAgIC8vIGdldCBoZWFkZXIoKTogSGVhZGVyIHsgcmV0dXJuIHRoaXMuX2hlYWRlcjsgfVxyXG4gICAgZ2V0IGNvbXBvbmVudEl0ZW0oKTogQ29tcG9uZW50SXRlbSB7IHJldHVybiB0aGlzLl9jb21wb25lbnRJdGVtOyB9XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoVGFiOmNsYXNzKS5jb21wb25lbnRJdGVtfSAqL1xyXG4gICAgZ2V0IGNvbnRlbnRJdGVtKCk6IENvbXBvbmVudEl0ZW0geyByZXR1cm4gdGhpcy5fY29tcG9uZW50SXRlbTsgfVxyXG4gICAgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQgeyByZXR1cm4gdGhpcy5fZWxlbWVudDsgfVxyXG4gICAgZ2V0IHRpdGxlRWxlbWVudCgpOiBIVE1MRWxlbWVudCB7IHJldHVybiB0aGlzLl90aXRsZUVsZW1lbnQ7IH1cclxuICAgIGdldCBjbG9zZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQgeyByZXR1cm4gdGhpcy5fY2xvc2VFbGVtZW50OyB9XHJcbiAgICBnZXQgcmVvcmRlckVuYWJsZWQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9kcmFnTGlzdGVuZXIgIT09IHVuZGVmaW5lZDsgfVxyXG4gICAgc2V0IHJlb3JkZXJFbmFibGVkKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnJlb3JkZXJFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbmFibGVSZW9yZGVyKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVSZW9yZGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2xheW91dE1hbmFnZXI6IExheW91dE1hbmFnZXIsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgX2NvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0sXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgX2Nsb3NlRXZlbnQ6IFRhYi5DbG9zZUV2ZW50IHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9mb2N1c0V2ZW50OiBUYWIuRm9jdXNFdmVudCB8IHVuZGVmaW5lZCxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfZHJhZ1N0YXJ0RXZlbnQ6IFRhYi5EcmFnU3RhcnRFdmVudCB8IHVuZGVmaW5lZFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlRhYik7XHJcbiAgICAgICAgdGhpcy5fdGl0bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOyBcclxuICAgICAgICB0aGlzLl90aXRsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlRpdGxlKTtcclxuICAgICAgICB0aGlzLl9jbG9zZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsgXHJcbiAgICAgICAgdGhpcy5fY2xvc2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5DbG9zZVRhYik7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl90aXRsZUVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY2xvc2VFbGVtZW50KTtcclxuXHJcbiAgICAgICAgaWYgKF9jb21wb25lbnRJdGVtLmlzQ2xvc2FibGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2xvc2VFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jbG9zZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0VGl0bGUoX2NvbXBvbmVudEl0ZW0udGl0bGUpO1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEl0ZW0ub24oJ3RpdGxlQ2hhbmdlZCcsIHRoaXMuX3RhYlRpdGxlQ2hhbmdlZExpc3RlbmVyKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVvcmRlckVuYWJsZWQgPSBfY29tcG9uZW50SXRlbS5yZW9yZGVyRW5hYmxlZCA/PyB0aGlzLl9sYXlvdXRNYW5hZ2VyLmxheW91dENvbmZpZy5zZXR0aW5ncy5yZW9yZGVyRW5hYmxlZDtcclxuXHJcbiAgICAgICAgaWYgKHJlb3JkZXJFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlUmVvcmRlcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX3RhYkNsaWNrTGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl90YWJUb3VjaFN0YXJ0TGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudEl0ZW0uaXNDbG9zYWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jbG9zZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jbG9zZUNsaWNrTGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgdGhpcy5fY2xvc2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9jbG9zZVRvdWNoU3RhcnRMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAvLyB0aGlzLl9jbG9zZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5fY2xvc2VNb3VzZURvd25MaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlRWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgdGhpcy5fY2xvc2VFbGVtZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50SXRlbS5zZXRUYWIodGhpcyk7XHJcbiAgICAgICAgdGhpcy5fbGF5b3V0TWFuYWdlci5lbWl0KCd0YWJDcmVhdGVkJywgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSB0YWIncyB0aXRsZSB0byB0aGUgcHJvdmlkZWQgc3RyaW5nIGFuZCBzZXRzXHJcbiAgICAgKiBpdHMgdGl0bGUgYXR0cmlidXRlIHRvIGEgcHVyZSB0ZXh0IHJlcHJlc2VudGF0aW9uICh3aXRob3V0XHJcbiAgICAgKiBodG1sIHRhZ3MpIG9mIHRoZSBzYW1lIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgc2V0VGl0bGUodGl0bGU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3RpdGxlRWxlbWVudC5pbm5lclRleHQgPSB0aXRsZTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnRpdGxlID0gdGl0bGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoaXMgdGFiJ3MgYWN0aXZlIHN0YXRlLiBUbyBwcm9ncmFtbWF0aWNhbGx5XHJcbiAgICAgKiBzd2l0Y2ggdGFicywgdXNlIFN0YWNrLnNldEFjdGl2ZUNvbXBvbmVudEl0ZW0oIGl0ZW0gKSBpbnN0ZWFkLlxyXG4gICAgICovXHJcbiAgICBzZXRBY3RpdmUoaXNBY3RpdmU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAoaXNBY3RpdmUgPT09IHRoaXMuX2lzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faXNBY3RpdmUgPSBpc0FjdGl2ZTtcclxuXHJcbiAgICAgICAgaWYgKGlzQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkFjdGl2ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKERvbUNvbnN0YW50cy5DbGFzc05hbWUuQWN0aXZlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95cyB0aGUgdGFiXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9jbG9zZUV2ZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX2ZvY3VzRXZlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fZHJhZ1N0YXJ0RXZlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX3RhYkNsaWNrTGlzdGVuZXIpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuX3RhYlRvdWNoU3RhcnRMaXN0ZW5lcik7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VFbGVtZW50Py5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2Nsb3NlQ2xpY2tMaXN0ZW5lcik7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VFbGVtZW50Py5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fY2xvc2VUb3VjaFN0YXJ0TGlzdGVuZXIpO1xyXG4gICAgICAgIC8vIHRoaXMuX2Nsb3NlRWxlbWVudD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5fY2xvc2VNb3VzZURvd25MaXN0ZW5lcik7XHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50SXRlbS5vZmYoJ3RpdGxlQ2hhbmdlZCcsIHRoaXMuX3RhYlRpdGxlQ2hhbmdlZExpc3RlbmVyKTtcclxuICAgICAgICBpZiAodGhpcy5yZW9yZGVyRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmRpc2FibGVSZW9yZGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc2V0Qmx1cnJlZCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Gb2N1c2VkKTtcclxuICAgICAgICB0aGlzLl90aXRsZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShEb21Db25zdGFudHMuQ2xhc3NOYW1lLkZvY3VzZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNldEZvY3VzZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRm9jdXNlZCk7XHJcbiAgICAgICAgdGhpcy5fdGl0bGVFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Gb2N1c2VkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrIGZvciB0aGUgRHJhZ0xpc3RlbmVyXHJcbiAgICAgKiBAcGFyYW0geCAtIFRoZSB0YWJzIGFic29sdXRlIHggcG9zaXRpb25cclxuICAgICAqIEBwYXJhbSB5IC0gVGhlIHRhYnMgYWJzb2x1dGUgeSBwb3NpdGlvblxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25EcmFnU3RhcnQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fZHJhZ0xpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignVE9EU0RMVTEwMDkzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RyYWdTdGFydEV2ZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ1RPRFMyMzMwOScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhZ1N0YXJ0RXZlbnQoeCwgeSwgdGhpcy5fZHJhZ0xpc3RlbmVyLCB0aGlzLmNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIG9uQ29udGVudEl0ZW1EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kcmFnTGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgd2hlbiB0aGUgdGFiIGlzIGNsaWNrZWRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uVGFiQ2xpY2tEb3duKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHRoaXMuX2VsZW1lbnQgfHwgdGFyZ2V0ID09PSB0aGlzLl90aXRsZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgLy8gbGVmdCBtb3VzZSBidXR0b25cclxuICAgICAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeUZvY3VzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbWlkZGxlIG1vdXNlIGJ1dHRvblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMSAmJiB0aGlzLl9jb21wb25lbnRJdGVtLmlzQ2xvc2FibGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlDbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgb25UYWJUb3VjaFN0YXJ0KGV2ZW50OiBUb3VjaEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcy5fZWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeUZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgd2hlbiB0aGUgdGFiJ3MgY2xvc2UgYnV0dG9uIGlzIGNsaWNrZWRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uQ2xvc2VDbGljaygpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeUNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBvbkNsb3NlVG91Y2hTdGFydCgpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeUNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayB0byBjYXB0dXJlIHRhYiBjbG9zZSBidXR0b24gbW91c2Vkb3duXHJcbiAgICAgKiB0byBwcmV2ZW50IHRhYiBmcm9tIGFjdGl2YXRpbmcuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgLy8gcHJpdmF0ZSBvbkNsb3NlTW91c2Vkb3duKCk6IHZvaWQge1xyXG4gICAgLy8gICAgIC8vIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgbm90aWZ5Q2xvc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2Nsb3NlRXZlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdUTkMxNTAwNycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlRXZlbnQodGhpcy5fY29tcG9uZW50SXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgbm90aWZ5Rm9jdXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZvY3VzRXZlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdUTkExNTAwNycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZvY3VzRXZlbnQodGhpcy5fY29tcG9uZW50SXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgZW5hYmxlUmVvcmRlcigpIHtcclxuICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIgPSBuZXcgRHJhZ0xpc3RlbmVyKHRoaXMuX2VsZW1lbnQsIFt0aGlzLl90aXRsZUVsZW1lbnRdKTtcclxuICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIub24oJ2RyYWdTdGFydCcsIHRoaXMuX2RyYWdTdGFydExpc3RlbmVyKTtcclxuICAgICAgICB0aGlzLl9jb21wb25lbnRJdGVtLm9uKCdkZXN0cm95JywgdGhpcy5fY29udGVudEl0ZW1EZXN0cm95TGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgZGlzYWJsZVJlb3JkZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RyYWdMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ1REUjg3NzQ1Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50SXRlbS5vZmYoJ2Rlc3Ryb3knLCB0aGlzLl9jb250ZW50SXRlbURlc3Ryb3lMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lci5vZmYoJ2RyYWdTdGFydCcsIHRoaXMuX2RyYWdTdGFydExpc3RlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5fZHJhZ0xpc3RlbmVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBUYWIge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgQ2xvc2VFdmVudCA9IChjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKSA9PiB2b2lkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgRm9jdXNFdmVudCA9IChjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKSA9PiB2b2lkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgRHJhZ1N0YXJ0RXZlbnQgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIGRyYWdMaXN0ZW5lcjogRHJhZ0xpc3RlbmVyLCBjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKSA9PiB2b2lkO1xyXG59XHJcbiIsImltcG9ydCB7IEFzc2VydEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgQ29tcG9uZW50SXRlbSB9IGZyb20gJy4uL2l0ZW1zL2NvbXBvbmVudC1pdGVtJztcclxuaW1wb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4uL2xheW91dC1tYW5hZ2VyJztcclxuaW1wb3J0IHsgRG9tQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvZG9tLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IERyYWdMaXN0ZW5lciB9IGZyb20gJy4uL3V0aWxzL2RyYWctbGlzdGVuZXInO1xyXG5pbXBvcnQgeyBudW1iZXJUb1BpeGVscywgcGl4ZWxzVG9OdW1iZXIgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4vdGFiJztcclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIFRhYnNDb250YWluZXIge1xyXG4gICAgLy8gVGhlcmUgaXMgb25lIHRhYiBwZXIgQ29tcG9uZW50SXRlbSBpbiBzdGFjay4gIEhvd2V2ZXIgdGhleSBtYXkgbm90IGJlIG9yZGVyZWQgdGhlIHNhbWVcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhYnM6IFRhYltdID0gW107XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZHJvcGRvd25FbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2VsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBfbGFzdFZpc2libGVUYWJJbmRleCA9IC0xO1xyXG4gICAgcHJpdmF0ZSBfZHJvcGRvd25BY3RpdmUgPSBmYWxzZTtcclxuXHJcbiAgICBnZXQgdGFicygpOiBUYWJbXSB7IHJldHVybiB0aGlzLl90YWJzOyB9XHJcbiAgICBnZXQgdGFiQ291bnQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX3RhYnMubGVuZ3RoOyB9XHJcbiAgICBnZXQgbGFzdFZpc2libGVUYWJJbmRleCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fbGFzdFZpc2libGVUYWJJbmRleDsgfVxyXG4gICAgXHJcbiAgICBnZXQgZWxlbWVudCgpOiBIVE1MRWxlbWVudCB7IHJldHVybiB0aGlzLl9lbGVtZW50OyB9XHJcbiAgICBnZXQgZHJvcGRvd25FbGVtZW50KCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2Ryb3Bkb3duRWxlbWVudDsgfVxyXG4gICAgZ2V0IGRyb3Bkb3duQWN0aXZlKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fZHJvcGRvd25BY3RpdmU7IH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9sYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgIHByaXZhdGUgX2NvbXBvbmVudFJlbW92ZUV2ZW50OiBUYWJzQ29udGFpbmVyLkNvbXBvbmVudEl0ZW1SZW1vdmVFdmVudCxcclxuICAgICAgICBwcml2YXRlIF9jb21wb25lbnRGb2N1c0V2ZW50OiBUYWJzQ29udGFpbmVyLkNvbXBvbmVudEl0ZW1Gb2N1c0V2ZW50LFxyXG4gICAgICAgIHByaXZhdGUgX2NvbXBvbmVudERyYWdTdGFydEV2ZW50OiBUYWJzQ29udGFpbmVyLkNvbXBvbmVudEl0ZW1EcmFnU3RhcnRFdmVudCxcclxuICAgICAgICBwcml2YXRlIF9kcm9wZG93bkFjdGl2ZUNoYW5nZWRFdmVudDogVGFic0NvbnRhaW5lci5Ecm9wZG93bkFjdGl2ZUNoYW5nZWRFdmVudCxcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuVGFicyk7XHJcblxyXG4gICAgICAgIHRoaXMuX2Ryb3Bkb3duRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKTtcclxuICAgICAgICB0aGlzLl9kcm9wZG93bkVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlRhYkRyb3Bkb3duTGlzdCk7XHJcbiAgICAgICAgdGhpcy5fZHJvcGRvd25FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RhYnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fdGFic1tpXS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0YWIgYW5kIGFzc29jaWF0ZXMgaXQgd2l0aCBhIGNvbnRlbnRJdGVtXHJcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgcG9zaXRpb24gb2YgdGhlIHRhYlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVUYWIoY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSwgaW5kZXg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIC8vSWYgdGhlcmUncyBhbHJlYWR5IGEgdGFiIHJlbGF0aW5nIHRvIHRoZVxyXG4gICAgICAgIC8vY29udGVudCBpdGVtLCBkb24ndCBkbyBhbnl0aGluZ1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGFicy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGFic1tpXS5jb21wb25lbnRJdGVtID09PSBjb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRhYiA9IG5ldyBUYWIodGhpcy5fbGF5b3V0TWFuYWdlcixcclxuICAgICAgICAgICAgY29tcG9uZW50SXRlbSxcclxuICAgICAgICAgICAgKGl0ZW0pID0+IHRoaXMuaGFuZGxlVGFiQ2xvc2VFdmVudChpdGVtKSxcclxuICAgICAgICAgICAgKGl0ZW0pID0+IHRoaXMuaGFuZGxlVGFiRm9jdXNFdmVudChpdGVtKSxcclxuICAgICAgICAgICAgKHgsIHksIGRyYWdMaXN0ZW5lciwgaXRlbSkgPT4gdGhpcy5oYW5kbGVUYWJEcmFnU3RhcnRFdmVudCh4LCB5LCBkcmFnTGlzdGVuZXIsIGl0ZW0pKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3RhYnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RhYnMucHVzaCh0YWIpO1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRhYi5lbGVtZW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLl90YWJzLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGFic1tpbmRleCAtIDFdLmVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmVuZCcsIHRhYi5lbGVtZW50KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RhYnNbMF0uZWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWJlZ2luJywgdGFiLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl90YWJzLnNwbGljZShpbmRleCwgMCwgdGFiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlVGFiKGNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0pOiB2b2lkIHtcclxuICAgICAgICAvLyBjb21wb25lbnRJdGVtIGNhbm5vdCBiZSBBY3RpdmVDb21wb25lbnRJdGVtXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90YWJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90YWJzW2ldLmNvbXBvbmVudEl0ZW0gPT09IGNvbXBvbmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhYiA9IHRoaXMuX3RhYnNbaV07XHJcbiAgICAgICAgICAgICAgICB0YWIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGFicy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY29udGVudEl0ZW0gaXMgbm90IGNvbnRyb2xsZWQgYnkgdGhpcyBoZWFkZXInKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm9jZXNzQWN0aXZlQ29tcG9uZW50Q2hhbmdlZChuZXdBY3RpdmVDb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGFjdGl2ZUluZGV4ID0gLTE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90YWJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID0gdGhpcy5fdGFic1tpXS5jb21wb25lbnRJdGVtID09PSBuZXdBY3RpdmVDb21wb25lbnRJdGVtO1xyXG4gICAgICAgICAgICB0aGlzLl90YWJzW2ldLnNldEFjdGl2ZShpc0FjdGl2ZSk7XHJcbiAgICAgICAgICAgIGlmIChpc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYWN0aXZlSW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignSFNBQ0k1NjYzMicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9sYXlvdXRNYW5hZ2VyLmxheW91dENvbmZpZy5zZXR0aW5ncy5yZW9yZGVyT25UYWJNZW51Q2xpY2spIHtcclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIHRhYiBzZWxlY3RlZCB3YXMgaW4gdGhlIGRyb3Bkb3duLCBtb3ZlIGV2ZXJ5dGhpbmcgZG93biBvbmUgdG8gbWFrZSB3YXkgZm9yIHRoaXMgb25lIHRvIGJlIHRoZSBmaXJzdC5cclxuICAgICAgICAgICAgICAgICAqIFRoaXMgd2lsbCBtYWtlIHN1cmUgdGhlIG1vc3QgdXNlZCB0YWJzIHN0YXkgdmlzaWJsZS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xhc3RWaXNpYmxlVGFiSW5kZXggIT09IC0xICYmIGFjdGl2ZUluZGV4ID4gdGhpcy5fbGFzdFZpc2libGVUYWJJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVRhYiA9IHRoaXMuX3RhYnNbYWN0aXZlSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBhY3RpdmVJbmRleDsgaiA+IDA7IGotLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90YWJzW2pdID0gdGhpcy5fdGFic1tqIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhYnNbMF0gPSBhY3RpdmVUYWI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVwZGF0ZVRhYlNpemVzIHdpbGwgYWx3YXlzIGJlIGNhbGxlZCBhZnRlciB0aGlzIGFuZCBpdCB3aWxsIHJlcG9zaXRpb24gdGFiIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQdXNoZXMgdGhlIHRhYnMgdG8gdGhlIHRhYiBkcm9wZG93biBpZiB0aGUgYXZhaWxhYmxlIHNwYWNlIGlzIG5vdCBzdWZmaWNpZW50XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVRhYlNpemVzKGF2YWlsYWJsZVdpZHRoOiBudW1iZXIsIGFjdGl2ZUNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0gfCB1bmRlZmluZWQpOiB2b2lkIHtcclxuICAgICAgICBsZXQgZHJvcERvd25BY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCBzdWNjZXNzID0gdGhpcy50cnlVcGRhdGVUYWJTaXplcyhkcm9wRG93bkFjdGl2ZSwgYXZhaWxhYmxlV2lkdGgsIGFjdGl2ZUNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgIGlmICghc3VjY2Vzcykge1xyXG4gICAgICAgICAgICBkcm9wRG93bkFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBhbHdheXMgc3VjY2VlZFxyXG4gICAgICAgICAgICB0aGlzLnRyeVVwZGF0ZVRhYlNpemVzKGRyb3BEb3duQWN0aXZlLCBhdmFpbGFibGVXaWR0aCwgYWN0aXZlQ29tcG9uZW50SXRlbSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkcm9wRG93bkFjdGl2ZSAhPT0gdGhpcy5fZHJvcGRvd25BY3RpdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fZHJvcGRvd25BY3RpdmUgPSBkcm9wRG93bkFjdGl2ZTtcclxuICAgICAgICAgICAgdGhpcy5fZHJvcGRvd25BY3RpdmVDaGFuZ2VkRXZlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5VXBkYXRlVGFiU2l6ZXMoZHJvcGRvd25BY3RpdmU6IGJvb2xlYW4sIGF2YWlsYWJsZVdpZHRoOiBudW1iZXIsIGFjdGl2ZUNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5fdGFicy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlmIChhY3RpdmVDb21wb25lbnRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm9uLWVtcHR5IHRhYnMgbXVzdCBoYXZlIGFjdGl2ZSBjb21wb25lbnQgaXRlbScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY3VtdWxhdGl2ZVRhYldpZHRoID0gMDtcclxuICAgICAgICAgICAgbGV0IHRhYk92ZXJsYXBBbGxvd2FuY2VFeGNlZWRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCB0YWJPdmVybGFwQWxsb3dhbmNlID0gdGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuc2V0dGluZ3MudGFiT3ZlcmxhcEFsbG93YW5jZTtcclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlSW5kZXggPSB0aGlzLl90YWJzLmluZGV4T2YoYWN0aXZlQ29tcG9uZW50SXRlbS50YWIpO1xyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVUYWIgPSB0aGlzLl90YWJzW2FjdGl2ZUluZGV4XTtcclxuICAgICAgICAgICAgdGhpcy5fbGFzdFZpc2libGVUYWJJbmRleCA9IC0xO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90YWJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gdGhpcy5fdGFic1tpXS5lbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vUHV0IHRoZSB0YWIgaW4gdGhlIHRhYkNvbnRhaW5lciBzbyBpdHMgdHJ1ZSB3aWR0aCBjYW4gYmUgY2hlY2tlZFxyXG4gICAgICAgICAgICAgICAgaWYgKHRhYkVsZW1lbnQucGFyZW50RWxlbWVudCAhPT0gdGhpcy5fZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGFiRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJNYXJnaW5SaWdodFBpeGVscyA9IGdldENvbXB1dGVkU3R5bGUoYWN0aXZlVGFiLmVsZW1lbnQpLm1hcmdpblJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFiTWFyZ2luUmlnaHQgPSBwaXhlbHNUb051bWJlcih0YWJNYXJnaW5SaWdodFBpeGVscyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJXaWR0aCA9IHRhYkVsZW1lbnQub2Zmc2V0V2lkdGggKyB0YWJNYXJnaW5SaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICBjdW11bGF0aXZlVGFiV2lkdGggKz0gdGFiV2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9JbmNsdWRlIHRoZSBhY3RpdmUgdGFiJ3Mgd2lkdGggaWYgaXQgaXNuJ3QgYWxyZWFkeVxyXG4gICAgICAgICAgICAgICAgLy9UaGlzIGlzIHRvIGVuc3VyZSB0aGVyZSBpcyByb29tIHRvIHNob3cgdGhlIGFjdGl2ZSB0YWJcclxuICAgICAgICAgICAgICAgIGxldCB2aXNpYmxlVGFiV2lkdGggPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZUluZGV4IDw9IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlVGFiV2lkdGggPSBjdW11bGF0aXZlVGFiV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVRhYk1hcmdpblJpZ2h0UGl4ZWxzID0gZ2V0Q29tcHV0ZWRTdHlsZShhY3RpdmVUYWIuZWxlbWVudCkubWFyZ2luUmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlVGFiTWFyZ2luUmlnaHQgPSBwaXhlbHNUb051bWJlcihhY3RpdmVUYWJNYXJnaW5SaWdodFBpeGVscyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZVRhYldpZHRoID0gY3VtdWxhdGl2ZVRhYldpZHRoICsgYWN0aXZlVGFiLmVsZW1lbnQub2Zmc2V0V2lkdGggKyBhY3RpdmVUYWJNYXJnaW5SaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdGFicyB3b24ndCBmaXQsIGNoZWNrIHRoZSBvdmVybGFwIGFsbG93YW5jZS5cclxuICAgICAgICAgICAgICAgIGlmICh2aXNpYmxlVGFiV2lkdGggPiBhdmFpbGFibGVXaWR0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL09uY2UgYWxsb3dhbmNlIGlzIGV4Y2VlZGVkLCBhbGwgcmVtYWluaW5nIHRhYnMgZ28gdG8gbWVudS5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRhYk92ZXJsYXBBbGxvd2FuY2VFeGNlZWRlZCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ObyBvdmVybGFwIGZvciBmaXJzdCB0YWIgb3IgYWN0aXZlIHRhYlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL092ZXJsYXAgc3ByZWFkcyBhbW9uZyBub24tYWN0aXZlLCBub24tZmlyc3QgdGFic1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb3ZlcmxhcDogbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlSW5kZXggPiAwICYmIGFjdGl2ZUluZGV4IDw9IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXAgPSAodmlzaWJsZVRhYldpZHRoIC0gYXZhaWxhYmxlV2lkdGgpIC8gKGkgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXAgPSAodmlzaWJsZVRhYldpZHRoIC0gYXZhaWxhYmxlV2lkdGgpIC8gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9DaGVjayBvdmVybGFwIGFnYWluc3QgYWxsb3dhbmNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3ZlcmxhcCA8IHRhYk92ZXJsYXBBbGxvd2FuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IGk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSAoaiAhPT0gYWN0aXZlSW5kZXggJiYgaiAhPT0gMCkgPyAnLScgKyBudW1iZXJUb1BpeGVscyhvdmVybGFwKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhYnNbal0uZWxlbWVudC5zdHlsZS56SW5kZXggPSBudW1iZXJUb1BpeGVscyhpIC0gaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFic1tqXS5lbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdFZpc2libGVUYWJJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFiRWxlbWVudC5wYXJlbnRFbGVtZW50ICE9PSB0aGlzLl9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZCh0YWJFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYk92ZXJsYXBBbGxvd2FuY2VFeGNlZWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSBhY3RpdmVJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0FjdGl2ZSB0YWIgc2hvdWxkIHNob3cgZXZlbiBpZiBhbGxvd2FuY2UgZXhjZWVkZWQuIChXZSBsZWZ0IHJvb20uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJFbGVtZW50LnN0eWxlLnpJbmRleCA9ICdhdXRvJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFiRWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJFbGVtZW50LnBhcmVudEVsZW1lbnQgIT09IHRoaXMuX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQodGFiRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWJPdmVybGFwQWxsb3dhbmNlRXhjZWVkZWQgJiYgaSAhPT0gYWN0aXZlSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRyb3Bkb3duQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RhYiBtZW51IGFscmVhZHkgc2hvd24sIHNvIHdlIGp1c3QgYWRkIHRvIGl0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiRWxlbWVudC5zdHlsZS56SW5kZXggPSAnYXV0byc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYkVsZW1lbnQucGFyZW50RWxlbWVudCAhPT0gdGhpcy5fZHJvcGRvd25FbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJvcGRvd25FbGVtZW50LmFwcGVuZENoaWxkKHRhYkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9XZSBub3cga25vdyB0aGUgdGFiIG1lbnUgbXVzdCBiZSBzaG93biwgc28gd2UgaGF2ZSB0byByZWNhbGN1bGF0ZSBldmVyeXRoaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdFZpc2libGVUYWJJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiRWxlbWVudC5zdHlsZS56SW5kZXggPSAnYXV0byc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiRWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYkVsZW1lbnQucGFyZW50RWxlbWVudCAhPT0gdGhpcy5fZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRhYkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93cyBkcm9wIGRvd24gZm9yIGFkZGl0aW9uYWwgdGFicyB3aGVuIHRoZXJlIGFyZSB0b28gbWFueSB0byBkaXNwbGF5LlxyXG4gICAgICovXHJcbiAgICBzaG93QWRkaXRpb25hbFRhYnNEcm9wZG93bigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9kcm9wZG93bkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlkZXMgZHJvcCBkb3duIGZvciBhZGRpdGlvbmFsIHRhYnMgd2hlbiB0aGVyZSBhcmUgdG9vIG1hbnkgdG8gZGlzcGxheS5cclxuICAgICAqL1xyXG4gICAgaGlkZUFkZGl0aW9uYWxUYWJzRHJvcGRvd24oKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZHJvcGRvd25FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVUYWJDbG9zZUV2ZW50KGNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0pIHtcclxuICAgICAgICB0aGlzLl9jb21wb25lbnRSZW1vdmVFdmVudChjb21wb25lbnRJdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZVRhYkZvY3VzRXZlbnQoY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEZvY3VzRXZlbnQoY29tcG9uZW50SXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVUYWJEcmFnU3RhcnRFdmVudCh4OiBudW1iZXIsIHk6IG51bWJlciwgZHJhZ0xpc3RlbmVyOiBEcmFnTGlzdGVuZXIsIGNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0pIHtcclxuICAgICAgICB0aGlzLl9jb21wb25lbnREcmFnU3RhcnRFdmVudCh4LCB5LCBkcmFnTGlzdGVuZXIsIGNvbXBvbmVudEl0ZW0pO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFRhYnNDb250YWluZXIge1xyXG4gICAgZXhwb3J0IHR5cGUgQ29tcG9uZW50SXRlbVJlbW92ZUV2ZW50ID0gKHRoaXM6IHZvaWQsIGNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0pID0+IHZvaWQ7XHJcbiAgICBleHBvcnQgdHlwZSBDb21wb25lbnRJdGVtRm9jdXNFdmVudCA9ICh0aGlzOiB2b2lkLCBjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKSA9PiB2b2lkO1xyXG4gICAgZXhwb3J0IHR5cGUgQ29tcG9uZW50SXRlbURyYWdTdGFydEV2ZW50ID0gKHRoaXM6IHZvaWQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBkcmFnTGlzdGVuZXI6IERyYWdMaXN0ZW5lciwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkgPT4gdm9pZDtcclxuICAgIGV4cG9ydCB0eXBlIERyb3Bkb3duQWN0aXZlQ2hhbmdlZEV2ZW50ID0gKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcbn0iLCJpbXBvcnQgeyBEb21Db25zdGFudHMgfSBmcm9tICcuLi91dGlscy9kb20tY29uc3RhbnRzJztcclxuaW1wb3J0IHsgUmVjdCB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcclxuXHJcbi8qKiBAaW50ZXJuYWwgQGRlcHJlY2F0ZWQgVG8gYmUgcmVtb3ZlZCAqL1xyXG5leHBvcnQgY2xhc3MgVHJhbnNpdGlvbkluZGljYXRvciB7XHJcbiAgICBwcml2YXRlIF9lbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgX3RvRWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsO1xyXG4gICAgcHJpdmF0ZSBfZnJvbURpbWVuc2lvbnM6IG51bGw7XHJcbiAgICBwcml2YXRlIF90b3RhbEFuaW1hdGlvbkR1cmF0aW9uOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9hbmltYXRpb25TdGFydFRpbWU6IG51bWJlciB8IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlRyYW5zaXRpb25JbmRpY2F0b3IpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3RvRWxlbWVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fZnJvbURpbWVuc2lvbnMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3RvdGFsQW5pbWF0aW9uRHVyYXRpb24gPSAyMDA7XHJcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uU3RhcnRUaW1lID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgdHJhbnNpdGlvbkVsZW1lbnRzKGZyb21FbGVtZW50OiBIVE1MRWxlbWVudCwgdG9FbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRPRE8gLSBUaGlzIGlzIG5vdCBxdWl0ZSBhcyBjb29sIGFzIGV4cGVjdGVkLiBSZXZpZXcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vIHRoaXMuX3RvRWxlbWVudCA9IHRvRWxlbWVudDtcclxuICAgICAgICAvLyB0aGlzLl9hbmltYXRpb25TdGFydFRpbWUgPSBub3coKTtcclxuICAgICAgICAvLyB0aGlzLl9mcm9tRGltZW5zaW9ucyA9IHRoaXMuX21lYXN1cmUoZnJvbUVsZW1lbnQpO1xyXG4gICAgICAgIC8vIHRoaXMuX2Zyb21EaW1lbnNpb25zLm9wYWNpdHkgPSAwLjg7XHJcbiAgICAgICAgLy8gdGhpcy5fZWxlbWVudC5zaG93KCkuY3NzKHRoaXMuX2Zyb21EaW1lbnNpb25zKTtcclxuICAgICAgICAvLyBhbmltRnJhbWUoZm5CaW5kKHRoaXMuX25leHRBbmltYXRpb25GcmFtZSwgdGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbmV4dEFuaW1hdGlvbkZyYW1lKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIGlmICh0aGlzLl90b0VsZW1lbnQgPT09IG51bGwgfHwgdGhpcy5fZnJvbURpbWVuc2lvbnMgPT09IG51bGwgfHwgdGhpcy5fYW5pbWF0aW9uU3RhcnRUaW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgLy8gICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdUSU5BRlREOTcxMTUnKTtcclxuICAgICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAgIC8vICAgICBjb25zdCB0b0RpbWVuc2lvbnMgPSB0aGlzLm1lYXN1cmUodGhpcy5fdG9FbGVtZW50KTtcclxuICAgICAgICAvLyAgICAgY29uc3QgYW5pbWF0aW9uUHJvZ3Jlc3MgPSAobm93KCkgLSB0aGlzLl9hbmltYXRpb25TdGFydFRpbWUpIC8gdGhpcy5fdG90YWxBbmltYXRpb25EdXJhdGlvbjtcclxuICAgICAgICAvLyAgICAgY29uc3QgY3VycmVudEZyYW1lU3R5bGVzID0ge307XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IGNzc1Byb3BlcnR5O1xyXG5cclxuICAgICAgICAvLyAgICAgaWYgKGFuaW1hdGlvblByb2dyZXNzID49IDEpIHtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAvLyAgICAgICAgIHJldHVybjtcclxuICAgICAgICAvLyAgICAgfVxyXG5cclxuICAgICAgICAvLyAgICAgdG9EaW1lbnNpb25zLm9wYWNpdHkgPSAwO1xyXG5cclxuICAgICAgICAvLyAgICAgZm9yIChjb25zdCBjc3NQcm9wZXJ0eSBpbiB0aGlzLl9mcm9tRGltZW5zaW9ucykge1xyXG4gICAgICAgIC8vICAgICAgICAgY3VycmVudEZyYW1lU3R5bGVzW2Nzc1Byb3BlcnR5XSA9IHRoaXMuX2Zyb21EaW1lbnNpb25zW2Nzc1Byb3BlcnR5XSArXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgKHRvRGltZW5zaW9uc1tjc3NQcm9wZXJ0eV0gLSB0aGlzLl9mcm9tRGltZW5zaW9uc1tjc3NQcm9wZXJ0eV0pICpcclxuICAgICAgICAvLyAgICAgICAgICAgICBhbmltYXRpb25Qcm9ncmVzcztcclxuICAgICAgICAvLyAgICAgfVxyXG5cclxuICAgICAgICAvLyAgICAgdGhpcy5fZWxlbWVudC5jc3MoY3VycmVudEZyYW1lU3R5bGVzKTtcclxuICAgICAgICAvLyAgICAgYW5pbUZyYW1lKGZuQmluZCh0aGlzLl9uZXh0QW5pbWF0aW9uRnJhbWUsIHRoaXMpKTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtZWFzdXJlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogUmVjdCB7XHJcbiAgICAgICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCxcclxuICAgICAgICAgICAgdG9wOiByZWN0LnRvcCxcclxuICAgICAgICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iLCIvKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRXh0ZXJuYWxFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB0eXBlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvbkVycm9yIGV4dGVuZHMgRXh0ZXJuYWxFcnJvciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBub2RlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoJ0NvbmZpZ3VyYXRpb24nLCBtZXNzYWdlKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNsYXNzIFBvcG91dEJsb2NrZWRFcnJvciBleHRlbmRzIEV4dGVybmFsRXJyb3Ige1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoJ1BvcG91dEJsb2NrZWQnLCBtZXNzYWdlKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNsYXNzIEFwaUVycm9yIGV4dGVuZHMgRXh0ZXJuYWxFcnJvciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcignQVBJJywgbWVzc2FnZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBjbGFzcyBCaW5kRXJyb3IgZXh0ZW5kcyBFeHRlcm5hbEVycm9yIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCdCaW5kJywgbWVzc2FnZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqIEBpbnRlcm5hbCAqL1xyXG5hYnN0cmFjdCBjbGFzcyBJbnRlcm5hbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IodHlwZTogc3RyaW5nLCBjb2RlOiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihgJHt0eXBlfTogJHtjb2RlfSR7bWVzc2FnZSA9PT0gdW5kZWZpbmVkID8gJycgOiAnOiAnICsgbWVzc2FnZX1gKVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBjbGFzcyBBc3NlcnRFcnJvciBleHRlbmRzIEludGVybmFsRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoY29kZTogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoJ0Fzc2VydCcsIGNvZGUsIG1lc3NhZ2UpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIFVucmVhY2hhYmxlQ2FzZUVycm9yIGV4dGVuZHMgSW50ZXJuYWxFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb2RlOiBzdHJpbmcsIHZhcmlhYmxlVmFsdWU6IG5ldmVyLCBtZXNzYWdlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoJ1VucmVhY2hhYmxlQ2FzZScsIGNvZGUsIGAke3ZhcmlhYmxlVmFsdWV9JHttZXNzYWdlID09PSB1bmRlZmluZWQgPyAnJyA6ICc6ICcgKyBtZXNzYWdlfWApXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIFVuZXhwZWN0ZWROdWxsRXJyb3IgZXh0ZW5kcyBJbnRlcm5hbEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvZGU6IHN0cmluZywgbWVzc2FnZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCdVbmV4cGVjdGVkTnVsbCcsIGNvZGUsIG1lc3NhZ2UpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvciBleHRlbmRzIEludGVybmFsRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoY29kZTogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoJ1VuZXhwZWN0ZWRVbmRlZmluZWQnLCBjb2RlLCBtZXNzYWdlKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyB9IGZyb20gJy4vY29uZmlnL3Jlc29sdmVkLWNvbmZpZyc7XHJcbmltcG9ydCB7IENvbXBvbmVudENvbnRhaW5lciB9IGZyb20gJy4vY29udGFpbmVyL2NvbXBvbmVudC1jb250YWluZXInO1xyXG5pbXBvcnQgeyBBcGlFcnJvciwgQmluZEVycm9yIH0gZnJvbSAnLi9lcnJvcnMvZXh0ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBBc3NlcnRFcnJvciwgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yIH0gZnJvbSAnLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBJMThuU3RyaW5nSWQsIGkxOG5TdHJpbmdzIH0gZnJvbSAnLi91dGlscy9pMThuLXN0cmluZ3MnO1xyXG5pbXBvcnQgeyBKc29uVmFsdWUsIExvZ2ljYWxaSW5kZXggfSBmcm9tICcuL3V0aWxzL3R5cGVzJztcclxuaW1wb3J0IHsgZGVlcEV4dGVuZFZhbHVlLCBlbnN1cmVFbGVtZW50UG9zaXRpb25BYnNvbHV0ZSwgbnVtYmVyVG9QaXhlbHMsIHNldEVsZW1lbnREaXNwbGF5VmlzaWJpbGl0eSwgc2V0RWxlbWVudEhlaWdodCwgc2V0RWxlbWVudFdpZHRoIH0gZnJvbSAnLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFZpcnR1YWxMYXlvdXQgfSBmcm9tICcuL3ZpcnR1YWwtbGF5b3V0JztcclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBjbGFzcyBHb2xkZW5MYXlvdXQgZXh0ZW5kcyBWaXJ0dWFsTGF5b3V0IHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2NvbXBvbmVudFR5cGVzTWFwID0gbmV3IE1hcDxzdHJpbmcsIEdvbGRlbkxheW91dC5Db21wb25lbnRJbnN0YW50aWF0b3I+KCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9nZXRDb21wb25lbnRDb25zdHJ1Y3RvckZ0bjogR29sZGVuTGF5b3V0LkdldENvbXBvbmVudENvbnN0cnVjdG9yQ2FsbGJhY2s7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdmlydHVhYmxlQ29tcG9uZW50TWFwID0gbmV3IE1hcDxDb21wb25lbnRDb250YWluZXIsIEdvbGRlbkxheW91dC5WaXJ0dWFibGVDb21wb25lbnQ+KCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9nb2xkZW5MYXlvdXRCb3VuZGluZ0NsaWVudFJlY3Q6IERPTVJlY3Q7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfY29udGFpbmVyVmlydHVhbFJlY3RpbmdSZXF1aXJlZEV2ZW50TGlzdGVuZXIgPVxyXG4gICAgICAgIChjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHRoaXMuaGFuZGxlQ29udGFpbmVyVmlydHVhbFJlY3RpbmdSZXF1aXJlZEV2ZW50KGNvbnRhaW5lciwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jb250YWluZXJWaXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnRMaXN0ZW5lciA9XHJcbiAgICAgICAgKGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCB2aXNpYmxlOiBib29sZWFuKSA9PiB0aGlzLmhhbmRsZUNvbnRhaW5lclZpcnR1YWxWaXNpYmlsaXR5Q2hhbmdlUmVxdWlyZWRFdmVudChjb250YWluZXIsIHZpc2libGUpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfY29udGFpbmVyVmlydHVhbFpJbmRleENoYW5nZVJlcXVpcmVkRXZlbnRMaXN0ZW5lciA9XHJcbiAgICAgICAgKGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCBsb2dpY2FsWkluZGV4OiBMb2dpY2FsWkluZGV4LCBkZWZhdWx0WkluZGV4OiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ29udGFpbmVyVmlydHVhbFpJbmRleENoYW5nZVJlcXVpcmVkRXZlbnQoY29udGFpbmVyLCBsb2dpY2FsWkluZGV4LCBkZWZhdWx0WkluZGV4KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgbmV3IGNvbXBvbmVudCB0eXBlIHdpdGggdGhlIGxheW91dCBtYW5hZ2VyLlxyXG4gICAgICpcclxuICAgICAqIEBkZXByZWNhdGVkIFNlZSB7QGxpbmsgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDA5MjI1MzEvaG93LXRvLWNoZWNrLWlmLWEtamF2YXNjcmlwdC1mdW5jdGlvbi1pcy1hLWNvbnN0cnVjdG9yfVxyXG4gICAgICogaW5zdGVhZCB1c2Uge0BsaW5rIChHb2xkZW5MYXlvdXQ6Y2xhc3MpLnJlZ2lzdGVyQ29tcG9uZW50Q29uc3RydWN0b3J9XHJcbiAgICAgKiBvciB7QGxpbmsgKEdvbGRlbkxheW91dDpjbGFzcykucmVnaXN0ZXJDb21wb25lbnRGYWN0b3J5RnVuY3Rpb259XHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyQ29tcG9uZW50KG5hbWU6IHN0cmluZyxcclxuICAgICAgICBjb21wb25lbnRDb25zdHJ1Y3Rvck9yRmFjdG9yeUZ0bjogR29sZGVuTGF5b3V0LkNvbXBvbmVudENvbnN0cnVjdG9yIHwgR29sZGVuTGF5b3V0LkNvbXBvbmVudEZhY3RvcnlGdW5jdGlvbixcclxuICAgICAgICB2aXJ0dWFsID0gZmFsc2VcclxuICAgICk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50Q29uc3RydWN0b3JPckZhY3RvcnlGdG4gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKCdyZWdpc3RlckNvbXBvbmVudCgpIGNvbXBvbmVudENvbnN0cnVjdG9yT3JGYWN0b3J5RnRuIHBhcmFtZXRlciBpcyBub3QgYSBmdW5jdGlvbicpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudENvbnN0cnVjdG9yT3JGYWN0b3J5RnRuLmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50Q29uc3RydWN0b3IgPSBjb21wb25lbnRDb25zdHJ1Y3Rvck9yRmFjdG9yeUZ0biBhcyBHb2xkZW5MYXlvdXQuQ29tcG9uZW50Q29uc3RydWN0b3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tcG9uZW50Q29uc3RydWN0b3IobmFtZSwgY29tcG9uZW50Q29uc3RydWN0b3IsIHZpcnR1YWwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50RmFjdG9yeUZ0biA9IGNvbXBvbmVudENvbnN0cnVjdG9yT3JGYWN0b3J5RnRuIGFzIEdvbGRlbkxheW91dC5Db21wb25lbnRGYWN0b3J5RnVuY3Rpb247XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyQ29tcG9uZW50RmFjdG9yeUZ1bmN0aW9uKG5hbWUsIGNvbXBvbmVudEZhY3RvcnlGdG4sIHZpcnR1YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYSBuZXcgY29tcG9uZW50IHR5cGUgd2l0aCB0aGUgbGF5b3V0IG1hbmFnZXIuXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyQ29tcG9uZW50Q29uc3RydWN0b3IodHlwZU5hbWU6IHN0cmluZywgY29tcG9uZW50Q29uc3RydWN0b3I6IEdvbGRlbkxheW91dC5Db21wb25lbnRDb25zdHJ1Y3RvciwgdmlydHVhbCA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRDb25zdHJ1Y3RvciAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaTE4blN0cmluZ3NbSTE4blN0cmluZ0lkLlBsZWFzZVJlZ2lzdGVyQUNvbnN0cnVjdG9yRnVuY3Rpb25dKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ29tcG9uZW50VHlwZSA9IHRoaXMuX2NvbXBvbmVudFR5cGVzTWFwLmdldCh0eXBlTmFtZSk7XHJcblxyXG4gICAgICAgIGlmIChleGlzdGluZ0NvbXBvbmVudFR5cGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQmluZEVycm9yKGAke2kxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5Db21wb25lbnRJc0FscmVhZHlSZWdpc3RlcmVkXX06ICR7dHlwZU5hbWV9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jb21wb25lbnRUeXBlc01hcC5zZXQodHlwZU5hbWUsIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yOiBjb21wb25lbnRDb25zdHJ1Y3RvcixcclxuICAgICAgICAgICAgICAgIGZhY3RvcnlGdW5jdGlvbjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgdmlydHVhbCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIG5ldyBjb21wb25lbnQgd2l0aCB0aGUgbGF5b3V0IG1hbmFnZXIuXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyQ29tcG9uZW50RmFjdG9yeUZ1bmN0aW9uKHR5cGVOYW1lOiBzdHJpbmcsIGNvbXBvbmVudEZhY3RvcnlGdW5jdGlvbjogR29sZGVuTGF5b3V0LkNvbXBvbmVudEZhY3RvcnlGdW5jdGlvbiwgdmlydHVhbCA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRGYWN0b3J5RnVuY3Rpb24gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEJpbmRFcnJvcignUGxlYXNlIHJlZ2lzdGVyIGEgY29uc3RydWN0b3IgZnVuY3Rpb24nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ29tcG9uZW50VHlwZSA9IHRoaXMuX2NvbXBvbmVudFR5cGVzTWFwLmdldCh0eXBlTmFtZSk7XHJcblxyXG4gICAgICAgIGlmIChleGlzdGluZ0NvbXBvbmVudFR5cGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQmluZEVycm9yKGAke2kxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5Db21wb25lbnRJc0FscmVhZHlSZWdpc3RlcmVkXX06ICR7dHlwZU5hbWV9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jb21wb25lbnRUeXBlc01hcC5zZXQodHlwZU5hbWUsIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBmYWN0b3J5RnVuY3Rpb246IGNvbXBvbmVudEZhY3RvcnlGdW5jdGlvbixcclxuICAgICAgICAgICAgICAgIHZpcnR1YWwsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYSBjb21wb25lbnQgZnVuY3Rpb24gd2l0aCB0aGUgbGF5b3V0IG1hbmFnZXIuIFRoaXMgZnVuY3Rpb24gc2hvdWxkXHJcbiAgICAgKiByZXR1cm4gYSBjb25zdHJ1Y3RvciBmb3IgYSBjb21wb25lbnQgYmFzZWQgb24gYSBjb25maWcuXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGlmIGEgY29tcG9uZW50IHR5cGUgd2l0aCB0aGUgcmVxdWlyZWQgbmFtZSBpcyBub3QgYWxyZWFkeSByZWdpc3RlcmVkLlxyXG4gICAgICogSXQgaXMgcmVjb21tZW5kZWQgdGhhdCBhcHBsaWNhdGlvbnMgdXNlIHRoZSB7QGxpbmsgKFZpcnR1YWxMYXlvdXQ6Y2xhc3MpLmdldENvbXBvbmVudEV2ZW50fSBhbmRcclxuICAgICAqIHtAbGluayAoVmlydHVhbExheW91dDpjbGFzcykucmVsZWFzZUNvbXBvbmVudEV2ZW50fSBpbnN0ZWFkIG9mIHJlZ2lzdGVyaW5nIGEgY29uc3RydWN0b3IgY2FsbGJhY2tcclxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKEdvbGRlbkxheW91dDpjbGFzcykucmVnaXN0ZXJHZXRDb21wb25lbnRDb25zdHJ1Y3RvckNhbGxiYWNrfVxyXG4gICAgICovXHJcbiAgICByZWdpc3RlckNvbXBvbmVudEZ1bmN0aW9uKGNhbGxiYWNrOiBHb2xkZW5MYXlvdXQuR2V0Q29tcG9uZW50Q29uc3RydWN0b3JDYWxsYmFjayk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJHZXRDb21wb25lbnRDb25zdHJ1Y3RvckNhbGxiYWNrKGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgY2xvc3VyZSB3aXRoIHRoZSBsYXlvdXQgbWFuYWdlciB3aGljaCBzdXBwbGllcyBhIENvbXBvbmVudCBDb25zdHJ1Y3Rvci5cclxuICAgICAqIFRoaXMgY2FsbGJhY2sgc2hvdWxkIHJldHVybiBhIGNvbnN0cnVjdG9yIGZvciBhIGNvbXBvbmVudCBiYXNlZCBvbiBhIGNvbmZpZy5cclxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgaWYgYSBjb21wb25lbnQgdHlwZSB3aXRoIHRoZSByZXF1aXJlZCBuYW1lIGlzIG5vdCBhbHJlYWR5IHJlZ2lzdGVyZWQuXHJcbiAgICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IGFwcGxpY2F0aW9ucyB1c2UgdGhlIHtAbGluayAoVmlydHVhbExheW91dDpjbGFzcykuZ2V0Q29tcG9uZW50RXZlbnR9IGFuZFxyXG4gICAgICoge0BsaW5rIChWaXJ0dWFsTGF5b3V0OmNsYXNzKS5yZWxlYXNlQ29tcG9uZW50RXZlbnR9IGluc3RlYWQgb2YgcmVnaXN0ZXJpbmcgYSBjb25zdHJ1Y3RvciBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICByZWdpc3RlckdldENvbXBvbmVudENvbnN0cnVjdG9yQ2FsbGJhY2soY2FsbGJhY2s6IEdvbGRlbkxheW91dC5HZXRDb21wb25lbnRDb25zdHJ1Y3RvckNhbGxiYWNrKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSByZWdpc3RlciBhIGNhbGxiYWNrIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fZ2V0Q29tcG9uZW50Q29uc3RydWN0b3JGdG4gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ011bHRpcGxlIGNvbXBvbmVudCBmdW5jdGlvbnMgYXJlIGJlaW5nIHJlZ2lzdGVyZWQuICBPbmx5IHRoZSBmaW5hbCByZWdpc3RlcmVkIGZ1bmN0aW9uIHdpbGwgYmUgdXNlZC4nKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZ2V0Q29tcG9uZW50Q29uc3RydWN0b3JGdG4gPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICBnZXRSZWdpc3RlcmVkQ29tcG9uZW50VHlwZU5hbWVzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICBjb25zdCB0eXBlTmFtZXNJdGVyYWJsZUl0ZXJhdG9yID0gdGhpcy5fY29tcG9uZW50VHlwZXNNYXAua2V5cygpO1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHR5cGVOYW1lc0l0ZXJhYmxlSXRlcmF0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjb21wb25lbnQgaW5zdGFudGlhdG9yLiAgQXR0ZW1wdHMgdG8gdXRpbGl6ZSByZWdpc3RlcmVkXHJcbiAgICAgKiBjb21wb25lbnQgdHlwZSBieSBmaXJzdCwgdGhlbiBmYWxscyBiYWNrIHRvIHRoZSBjb21wb25lbnQgY29uc3RydWN0b3IgY2FsbGJhY2sgZnVuY3Rpb24gKGlmIHJlZ2lzdGVyZWQpLlxyXG4gICAgICogSWYgbmVpdGhlciBnZXRzIGFuIGluc3RhbnRpYXRvciwgdGhlbiByZXR1cm5zIGB1bmRlZmluZWRgLlxyXG4gICAgICogTm90ZSB0aGF0IGB1bmRlZmluZWRgIHdpbGwgcmV0dXJuIGlmIGNvbmZpZy5jb21wb25lbnRUeXBlIGlzIG5vdCBhIHN0cmluZ1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjb25maWcgLSBUaGUgaXRlbSBjb25maWdcclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqL1xyXG4gICAgZ2V0Q29tcG9uZW50SW5zdGFudGlhdG9yKGNvbmZpZzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnKTogR29sZGVuTGF5b3V0LkNvbXBvbmVudEluc3RhbnRpYXRvciB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgbGV0IGluc3RhbnRpYXRvcjogR29sZGVuTGF5b3V0LkNvbXBvbmVudEluc3RhbnRpYXRvciB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcucmVzb2x2ZUNvbXBvbmVudFR5cGVOYW1lKGNvbmZpZylcclxuICAgICAgICBpZiAodHlwZU5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpbnN0YW50aWF0b3IgPSB0aGlzLl9jb21wb25lbnRUeXBlc01hcC5nZXQodHlwZU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5zdGFudGlhdG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2dldENvbXBvbmVudENvbnN0cnVjdG9yRnRuICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbnRpYXRvciA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcjogdGhpcy5fZ2V0Q29tcG9uZW50Q29uc3RydWN0b3JGdG4oY29uZmlnKSxcclxuICAgICAgICAgICAgICAgICAgICBmYWN0b3J5RnVuY3Rpb246IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICB2aXJ0dWFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGluc3RhbnRpYXRvcjtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBiaW5kQ29tcG9uZW50KGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCBpdGVtQ29uZmlnOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcpOiBDb21wb25lbnRDb250YWluZXIuQmluZGFibGVDb21wb25lbnQge1xyXG4gICAgICAgIGxldCBpbnN0YW50aWF0b3I6IEdvbGRlbkxheW91dC5Db21wb25lbnRJbnN0YW50aWF0b3IgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHR5cGVOYW1lID0gUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnLnJlc29sdmVDb21wb25lbnRUeXBlTmFtZShpdGVtQ29uZmlnKTtcclxuICAgICAgICBpZiAodHlwZU5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpbnN0YW50aWF0b3IgPSB0aGlzLl9jb21wb25lbnRUeXBlc01hcC5nZXQodHlwZU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5zdGFudGlhdG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2dldENvbXBvbmVudENvbnN0cnVjdG9yRnRuICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbnRpYXRvciA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcjogdGhpcy5fZ2V0Q29tcG9uZW50Q29uc3RydWN0b3JGdG4oaXRlbUNvbmZpZyksXHJcbiAgICAgICAgICAgICAgICAgICAgZmFjdG9yeUZ1bmN0aW9uOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlydHVhbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQ6IENvbXBvbmVudENvbnRhaW5lci5CaW5kYWJsZUNvbXBvbmVudDtcclxuICAgICAgICBpZiAoaW5zdGFudGlhdG9yICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgdmlydHVhbCA9IGluc3RhbnRpYXRvci52aXJ0dWFsO1xyXG4gICAgICAgICAgICAvLyBoYW5kbGUgY2FzZSB3aGVyZSBjb21wb25lbnQgaXMgb2J0YWluZWQgYnkgbmFtZSBvciBjb21wb25lbnQgY29uc3RydWN0b3IgY2FsbGJhY2tcclxuICAgICAgICAgICAgbGV0IGNvbXBvbmVudFN0YXRlOiBKc29uVmFsdWUgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGlmIChpdGVtQ29uZmlnLmNvbXBvbmVudFN0YXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFN0YXRlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gbWFrZSBjb3B5XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRTdGF0ZSA9IGRlZXBFeHRlbmRWYWx1ZSh7fSwgaXRlbUNvbmZpZy5jb21wb25lbnRTdGF0ZSkgYXMgSnNvblZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgY29tcG9uZW50OiBDb21wb25lbnRDb250YWluZXIuQ29tcG9uZW50IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnRDb25zdHJ1Y3RvciA9IGluc3RhbnRpYXRvci5jb25zdHJ1Y3RvcjtcclxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudENvbnN0cnVjdG9yICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudCA9IG5ldyBjb21wb25lbnRDb25zdHJ1Y3Rvcihjb250YWluZXIsIGNvbXBvbmVudFN0YXRlLCB2aXJ0dWFsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZhY3RvcnlGdW5jdGlvbiA9IGluc3RhbnRpYXRvci5mYWN0b3J5RnVuY3Rpb247XHJcbiAgICAgICAgICAgICAgICBpZiAoZmFjdG9yeUZ1bmN0aW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQgPSBmYWN0b3J5RnVuY3Rpb24oY29udGFpbmVyLCBjb21wb25lbnRTdGF0ZSwgdmlydHVhbCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1CQ0ZGVTEwMDA4Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh2aXJ0dWFsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdHTEJDVkNVOTg4Nzc0Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpcnR1YWJsZUNvbXBvbmVudCA9IGNvbXBvbmVudCBhcyBHb2xkZW5MYXlvdXQuVmlydHVhYmxlQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudFJvb3RFbGVtZW50ID0gdmlydHVhYmxlQ29tcG9uZW50LnJvb3RIdG1sRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50Um9vdEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmluZEVycm9yKGAke2kxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5WaXJ0dWFsQ29tcG9uZW50RG9lc05vdEhhdmVSb290SHRtbEVsZW1lbnRdfTogJHt0eXBlTmFtZX1gKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnN1cmVFbGVtZW50UG9zaXRpb25BYnNvbHV0ZShjb21wb25lbnRSb290RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbXBvbmVudFJvb3RFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmlydHVhYmxlQ29tcG9uZW50TWFwLnNldChjb250YWluZXIsIHZpcnR1YWJsZUNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci52aXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQgPSB0aGlzLl9jb250YWluZXJWaXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnRMaXN0ZW5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnZpcnR1YWxWaXNpYmlsaXR5Q2hhbmdlUmVxdWlyZWRFdmVudCA9IHRoaXMuX2NvbnRhaW5lclZpcnR1YWxWaXNpYmlsaXR5Q2hhbmdlUmVxdWlyZWRFdmVudExpc3RlbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIudmlydHVhbFpJbmRleENoYW5nZVJlcXVpcmVkRXZlbnQgPSB0aGlzLl9jb250YWluZXJWaXJ0dWFsWkluZGV4Q2hhbmdlUmVxdWlyZWRFdmVudExpc3RlbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgdmlydHVhbDogaW5zdGFudGlhdG9yLnZpcnR1YWwsXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFVzZSBnZXRDb21wb25lbnRFdmVudFxyXG4gICAgICAgICAgICByZXN1bHQgPSBzdXBlci5iaW5kQ29tcG9uZW50KGNvbnRhaW5lciwgaXRlbUNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIG92ZXJyaWRlIHVuYmluZENvbXBvbmVudChjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgdmlydHVhbDogYm9vbGVhbiwgY29tcG9uZW50OiBDb21wb25lbnRDb250YWluZXIuQ29tcG9uZW50IHwgdW5kZWZpbmVkKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdmlydHVhYmxlQ29tcG9uZW50ID0gdGhpcy5fdmlydHVhYmxlQ29tcG9uZW50TWFwLmdldChjb250YWluZXIpO1xyXG4gICAgICAgIGlmICh2aXJ0dWFibGVDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBzdXBlci51bmJpbmRDb21wb25lbnQoY29udGFpbmVyLCB2aXJ0dWFsLCBjb21wb25lbnQpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50Um9vdEVsZW1lbnQgPSB2aXJ0dWFibGVDb21wb25lbnQucm9vdEh0bWxFbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50Um9vdEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdHTFVDNzc3NDMnLCBjb250YWluZXIudGl0bGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQ2hpbGQoY29tcG9uZW50Um9vdEVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlydHVhYmxlQ29tcG9uZW50TWFwLmRlbGV0ZShjb250YWluZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlIGZpcmVCZWZvcmVWaXJ0dWFsUmVjdGluZ0V2ZW50KGNvdW50OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9nb2xkZW5MYXlvdXRCb3VuZGluZ0NsaWVudFJlY3QgPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBzdXBlci5maXJlQmVmb3JlVmlydHVhbFJlY3RpbmdFdmVudChjb3VudCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlQ29udGFpbmVyVmlydHVhbFJlY3RpbmdSZXF1aXJlZEV2ZW50KGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHZpcnR1YWJsZUNvbXBvbmVudCA9IHRoaXMuX3ZpcnR1YWJsZUNvbXBvbmVudE1hcC5nZXQoY29udGFpbmVyKTtcclxuICAgICAgICBpZiAodmlydHVhYmxlQ29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignR0xIQ1NDRTU1OTMzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSB2aXJ0dWFibGVDb21wb25lbnQucm9vdEh0bWxFbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAocm9vdEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJpbmRFcnJvcihpMThuU3RyaW5nc1tJMThuU3RyaW5nSWQuQ29tcG9uZW50SXNOb3RWaXJ0dWFibGVdICsgJyAnICsgY29udGFpbmVyLnRpdGxlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckJvdW5kaW5nQ2xpZW50UmVjdCA9IGNvbnRhaW5lci5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGVmdCA9IGNvbnRhaW5lckJvdW5kaW5nQ2xpZW50UmVjdC5sZWZ0IC0gdGhpcy5fZ29sZGVuTGF5b3V0Qm91bmRpbmdDbGllbnRSZWN0LmxlZnQ7XHJcbiAgICAgICAgICAgICAgICByb290RWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVtYmVyVG9QaXhlbHMobGVmdCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0b3AgPSBjb250YWluZXJCb3VuZGluZ0NsaWVudFJlY3QudG9wIC0gdGhpcy5fZ29sZGVuTGF5b3V0Qm91bmRpbmdDbGllbnRSZWN0LnRvcDtcclxuICAgICAgICAgICAgICAgIHJvb3RFbGVtZW50LnN0eWxlLnRvcCA9IG51bWJlclRvUGl4ZWxzKHRvcCk7XHJcbiAgICAgICAgICAgICAgICBzZXRFbGVtZW50V2lkdGgocm9vdEVsZW1lbnQsIHdpZHRoKTtcclxuICAgICAgICAgICAgICAgIHNldEVsZW1lbnRIZWlnaHQocm9vdEVsZW1lbnQsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVDb250YWluZXJWaXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQoY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXIsIHZpc2libGU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB2aXJ0dWFibGVDb21wb25lbnQgPSB0aGlzLl92aXJ0dWFibGVDb21wb25lbnRNYXAuZ2V0KGNvbnRhaW5lcik7XHJcbiAgICAgICAgaWYgKHZpcnR1YWJsZUNvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0dMSENWVkNSRTU1OTM0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSB2aXJ0dWFibGVDb21wb25lbnQucm9vdEh0bWxFbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAocm9vdEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJpbmRFcnJvcihpMThuU3RyaW5nc1tJMThuU3RyaW5nSWQuQ29tcG9uZW50SXNOb3RWaXJ0dWFibGVdICsgJyAnICsgY29udGFpbmVyLnRpdGxlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNldEVsZW1lbnREaXNwbGF5VmlzaWJpbGl0eShyb290RWxlbWVudCwgdmlzaWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVDb250YWluZXJWaXJ0dWFsWkluZGV4Q2hhbmdlUmVxdWlyZWRFdmVudChjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgbG9naWNhbFpJbmRleDogTG9naWNhbFpJbmRleCwgZGVmYXVsdFpJbmRleDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgdmlydHVhYmxlQ29tcG9uZW50ID0gdGhpcy5fdmlydHVhYmxlQ29tcG9uZW50TWFwLmdldChjb250YWluZXIpO1xyXG4gICAgICAgIGlmICh2aXJ0dWFibGVDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdHTEhDVlpJQ1JFNTU5MzUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByb290RWxlbWVudCA9IHZpcnR1YWJsZUNvbXBvbmVudC5yb290SHRtbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmIChyb290RWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmluZEVycm9yKGkxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5Db21wb25lbnRJc05vdFZpcnR1YWJsZV0gKyAnICcgKyBjb250YWluZXIudGl0bGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcm9vdEVsZW1lbnQuc3R5bGUuekluZGV4ID0gZGVmYXVsdFpJbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBHb2xkZW5MYXlvdXQge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBWaXJ0dWFibGVDb21wb25lbnQge1xyXG4gICAgICAgIHJvb3RIdG1sRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IHR5cGUgQ29tcG9uZW50Q29uc3RydWN0b3IgPSBuZXcoY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXIsIHN0YXRlOiBKc29uVmFsdWUgfCB1bmRlZmluZWQsIHZpcnR1YWw6IGJvb2xlYW4pID0+IENvbXBvbmVudENvbnRhaW5lci5Db21wb25lbnQ7XHJcbiAgICBleHBvcnQgdHlwZSBDb21wb25lbnRGYWN0b3J5RnVuY3Rpb24gPSAoY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXIsIHN0YXRlOiBKc29uVmFsdWUgfCB1bmRlZmluZWQsIHZpcnR1YWw6IGJvb2xlYW4pID0+IENvbXBvbmVudENvbnRhaW5lci5Db21wb25lbnQgfCB1bmRlZmluZWQ7XHJcbiAgICBleHBvcnQgdHlwZSBHZXRDb21wb25lbnRDb25zdHJ1Y3RvckNhbGxiYWNrID0gKHRoaXM6IHZvaWQsIGNvbmZpZzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnKSA9PiBDb21wb25lbnRDb25zdHJ1Y3RvcjtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudEluc3RhbnRpYXRvciB7XHJcbiAgICAgICAgY29uc3RydWN0b3I6IENvbXBvbmVudENvbnN0cnVjdG9yIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGZhY3RvcnlGdW5jdGlvbjogQ29tcG9uZW50RmFjdG9yeUZ1bmN0aW9uIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIHZpcnR1YWw6IGJvb2xlYW47XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnLCBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9yZXNvbHZlZC1jb25maWcnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRDb250YWluZXIgfSBmcm9tICcuLi9jb250YWluZXIvY29tcG9uZW50LWNvbnRhaW5lcic7XHJcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4uL2NvbnRyb2xzL3RhYic7XHJcbmltcG9ydCB7IFVuZXhwZWN0ZWROdWxsRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBMYXlvdXRNYW5hZ2VyIH0gZnJvbSAnLi4vbGF5b3V0LW1hbmFnZXInO1xyXG5pbXBvcnQgeyBEb21Db25zdGFudHMgfSBmcm9tICcuLi91dGlscy9kb20tY29uc3RhbnRzJztcclxuaW1wb3J0IHsgSXRlbVR5cGUsIEpzb25WYWx1ZSB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcclxuaW1wb3J0IHsgZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0LCBzZXRFbGVtZW50SGVpZ2h0LCBzZXRFbGVtZW50V2lkdGggfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IENvbXBvbmVudFBhcmVudGFibGVJdGVtIH0gZnJvbSAnLi9jb21wb25lbnQtcGFyZW50YWJsZS1pdGVtJztcclxuaW1wb3J0IHsgQ29udGVudEl0ZW0gfSBmcm9tICcuL2NvbnRlbnQtaXRlbSc7XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50SXRlbSBleHRlbmRzIENvbnRlbnRJdGVtIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3Jlb3JkZXJFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfaGVhZGVyQ29uZmlnOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF90aXRsZTogc3RyaW5nO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfaW5pdGlhbFdhbnRNYXhpbWlzZTogYm9vbGVhbjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2NvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdGFiOiBUYWI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9mb2N1c2VkID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChDb21wb25lbnRJdGVtOmNsYXNzKS5jb21wb25lbnRUeXBlfSAqL1xyXG4gICAgZ2V0IGNvbXBvbmVudE5hbWUoKTogSnNvblZhbHVlIHsgcmV0dXJuIHRoaXMuX2NvbnRhaW5lci5jb21wb25lbnRUeXBlOyB9XHJcbiAgICBnZXQgY29tcG9uZW50VHlwZSgpOiBKc29uVmFsdWUgeyByZXR1cm4gdGhpcy5fY29udGFpbmVyLmNvbXBvbmVudFR5cGU7IH1cclxuICAgIGdldCByZW9yZGVyRW5hYmxlZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX3Jlb3JkZXJFbmFibGVkOyB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBnZXQgaW5pdGlhbFdhbnRNYXhpbWlzZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2luaXRpYWxXYW50TWF4aW1pc2U7IH1cclxuICAgIGdldCBjb21wb25lbnQoKTogQ29tcG9uZW50Q29udGFpbmVyLkNvbXBvbmVudCB8IHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLl9jb250YWluZXIuY29tcG9uZW50OyB9XHJcbiAgICBnZXQgY29udGFpbmVyKCk6IENvbXBvbmVudENvbnRhaW5lciB7IHJldHVybiB0aGlzLl9jb250YWluZXI7IH1cclxuICAgIGdldCBwYXJlbnRJdGVtKCk6IENvbXBvbmVudFBhcmVudGFibGVJdGVtIHsgcmV0dXJuIHRoaXMuX3BhcmVudEl0ZW07IH1cclxuXHJcbiAgICBnZXQgaGVhZGVyQ29uZmlnKCk6IFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLkhlYWRlciB8IHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLl9oZWFkZXJDb25maWc7IH1cclxuICAgIGdldCB0aXRsZSgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fdGl0bGU7IH1cclxuICAgIGdldCB0YWIoKTogVGFiIHsgcmV0dXJuIHRoaXMuX3RhYjsgfVxyXG4gICAgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9mb2N1c2VkOyB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgbGF5b3V0TWFuYWdlcjogTGF5b3V0TWFuYWdlcixcclxuICAgICAgICBjb25maWc6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfcGFyZW50SXRlbTogQ29tcG9uZW50UGFyZW50YWJsZUl0ZW1cclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKGxheW91dE1hbmFnZXIsIGNvbmZpZywgX3BhcmVudEl0ZW0sIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcclxuXHJcbiAgICAgICAgdGhpcy5pc0NvbXBvbmVudCA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuX3Jlb3JkZXJFbmFibGVkID0gY29uZmlnLnJlb3JkZXJFbmFibGVkO1xyXG5cclxuICAgICAgICB0aGlzLmFwcGx5VXBkYXRhYmxlQ29uZmlnKGNvbmZpZyk7XHJcblxyXG4gICAgICAgIHRoaXMuX2luaXRpYWxXYW50TWF4aW1pc2UgPSBjb25maWcubWF4aW1pc2VkO1xyXG5cclxuICAgICAgICBjb25zdCBjb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuQ29udGVudCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IG5ldyBDb21wb25lbnRDb250YWluZXIoY29uZmlnLCB0aGlzLCBsYXlvdXRNYW5hZ2VyLCBjb250YWluZXJFbGVtZW50LFxyXG4gICAgICAgICAgICAoaXRlbUNvbmZpZykgPT4gdGhpcy5oYW5kbGVVcGRhdGVJdGVtQ29uZmlnRXZlbnQoaXRlbUNvbmZpZyksXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMuc2hvdygpLFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmhpZGUoKSxcclxuICAgICAgICAgICAgKHN1cHByZXNzRXZlbnQpID0+IHRoaXMuZm9jdXMoc3VwcHJlc3NFdmVudCksXHJcbiAgICAgICAgICAgIChzdXBwcmVzc0V2ZW50KSA9PiB0aGlzLmJsdXIoc3VwcHJlc3NFdmVudCksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5kZXN0cm95KClcclxuICAgICAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlVcGRhdGFibGVDb25maWcoY29uZmlnOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldFRpdGxlKGNvbmZpZy50aXRsZSk7XHJcbiAgICAgICAgdGhpcy5faGVhZGVyQ29uZmlnID0gY29uZmlnLmhlYWRlcjtcclxuICAgIH1cclxuXHJcbiAgICB0b0NvbmZpZygpOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlUmVxdWVzdEV2ZW50ID0gdGhpcy5fY29udGFpbmVyLnN0YXRlUmVxdWVzdEV2ZW50O1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gc3RhdGVSZXF1ZXN0RXZlbnQgPT09IHVuZGVmaW5lZCA/IHRoaXMuX2NvbnRhaW5lci5zdGF0ZSA6IHN0YXRlUmVxdWVzdEV2ZW50KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBJdGVtVHlwZS5jb21wb25lbnQsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IFtdLFxyXG4gICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcclxuICAgICAgICAgICAgbWluV2lkdGg6IHRoaXMubWluV2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXHJcbiAgICAgICAgICAgIG1pbkhlaWdodDogdGhpcy5taW5IZWlnaHQsXHJcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICAgICAgICBtYXhpbWlzZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiB0aGlzLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgICAgIHJlb3JkZXJFbmFibGVkOiB0aGlzLl9yZW9yZGVyRW5hYmxlZCxcclxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuX3RpdGxlLFxyXG4gICAgICAgICAgICBoZWFkZXI6IFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLkhlYWRlci5jcmVhdGVDb3B5KHRoaXMuX2hlYWRlckNvbmZpZyksXHJcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGU6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZy5jb3B5Q29tcG9uZW50VHlwZSh0aGlzLmNvbXBvbmVudFR5cGUpLFxyXG4gICAgICAgICAgICBjb21wb25lbnRTdGF0ZTogc3RhdGUsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnBhcmVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignQ0lDNjg4ODMnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFVzZWQgYnkgRHJhZyBQcm94eVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZW50ZXJEcmFnTW9kZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHNldEVsZW1lbnRXaWR0aCh0aGlzLmVsZW1lbnQsIHdpZHRoKTtcclxuICAgICAgICBzZXRFbGVtZW50SGVpZ2h0KHRoaXMuZWxlbWVudCwgaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIuZW50ZXJEcmFnTW9kZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleGl0RHJhZ01vZGUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmV4aXREcmFnTW9kZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGVudGVyU3RhY2tNYXhpbWlzZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmVudGVyU3RhY2tNYXhpbWlzZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleGl0U3RhY2tNYXhpbWlzZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmV4aXRTdGFja01heGltaXNlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVzZWQgYnkgRHJhZyBQcm94eVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZHJhZygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIuZHJhZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIG92ZXJyaWRlIHVwZGF0ZVNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVOb2RlU2l6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIG92ZXJyaWRlIGluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVOb2RlU2l6ZSgpO1xyXG5cclxuICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmVtaXQoJ29wZW4nKTtcclxuICAgICAgICB0aGlzLmluaXRDb250ZW50SXRlbXMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGlzIGNvbXBvbmVudCdzIHRpdGxlXHJcbiAgICAgKlxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICogQHBhcmFtIHRpdGxlIC1cclxuICAgICAqL1xyXG5cclxuICAgIHNldFRpdGxlKHRpdGxlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMuZW1pdCgndGl0bGVDaGFuZ2VkJywgdGl0bGUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGFiKHRhYjogVGFiKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGFiID0gdGFiO1xyXG4gICAgICAgIHRoaXMuZW1pdCgndGFiJywgdGFiKVxyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5zZXRUYWIodGFiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBoaWRlKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLmhpZGUoKTtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIuc2V0VmlzaWJpbGl0eShmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgb3ZlcnJpZGUgc2hvdygpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5zaG93KCk7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnNldFZpc2liaWxpdHkodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGb2N1c2VzIHRoZSBpdGVtIGlmIGl0IGlzIG5vdCBhbHJlYWR5IGZvY3VzZWRcclxuICAgICAqL1xyXG4gICAgZm9jdXMoc3VwcHJlc3NFdmVudCA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRJdGVtLnNldEFjdGl2ZUNvbXBvbmVudEl0ZW0odGhpcywgdHJ1ZSwgc3VwcHJlc3NFdmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc2V0Rm9jdXNlZChzdXBwcmVzc0V2ZW50OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZm9jdXNlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy50YWIuc2V0Rm9jdXNlZCgpO1xyXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRCYXNlQnViYmxpbmdFdmVudCgnZm9jdXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCbHVycyAoZGVmb2N1c2VzKSB0aGUgaXRlbSBpZiBpdCBpcyBmb2N1c2VkXHJcbiAgICAgKi9cclxuICAgIGJsdXIoc3VwcHJlc3NFdmVudCA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLnNldEZvY3VzZWRDb21wb25lbnRJdGVtKHVuZGVmaW5lZCwgc3VwcHJlc3NFdmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNldEJsdXJyZWQoc3VwcHJlc3NFdmVudDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2ZvY3VzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRhYi5zZXRCbHVycmVkKCk7XHJcbiAgICAgICAgaWYgKCFzdXBwcmVzc0V2ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdEJhc2VCdWJibGluZ0V2ZW50KCdibHVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBzZXRQYXJlbnQocGFyZW50OiBDb250ZW50SXRlbSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3BhcmVudEl0ZW0gPSBwYXJlbnQgYXMgQ29tcG9uZW50UGFyZW50YWJsZUl0ZW07XHJcbiAgICAgICAgc3VwZXIuc2V0UGFyZW50KHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVVcGRhdGVJdGVtQ29uZmlnRXZlbnQoaXRlbUNvbmZpZzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5hcHBseVVwZGF0YWJsZUNvbmZpZyhpdGVtQ29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHVwZGF0ZU5vZGVTaXplKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdCB1cGRhdGUgc2l6ZSBvZiBoaWRkZW4gY29tcG9uZW50cyB0byBwcmV2ZW50IHVud2FudGVkIHJlZmxvd3NcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0KHRoaXMuZWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5zZXRTaXplVG9Ob2RlU2l6ZSh3aWR0aCwgaGVpZ2h0LCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChDb21wb25lbnRJdGVtOmNsYXNzKX0gKi9cclxuZXhwb3J0IHR5cGUgQ29tcG9uZW50ID0gQ29tcG9uZW50SXRlbTtcclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgQ29tcG9uZW50SXRlbSB7XHJcbiAgICBleHBvcnQgdHlwZSBDb21wb25lbnQgPSBDb21wb25lbnRDb250YWluZXIuQ29tcG9uZW50O1xyXG59XHJcbiIsImltcG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuL2NvbXBvbmVudC1pdGVtJztcclxuaW1wb3J0IHsgQ29udGVudEl0ZW0gfSBmcm9tICcuL2NvbnRlbnQtaXRlbSc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50UGFyZW50YWJsZUl0ZW0gZXh0ZW5kcyBDb250ZW50SXRlbSB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9mb2N1c2VkID0gZmFsc2U7XHJcblxyXG4gICAgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9mb2N1c2VkOyB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc2V0Rm9jdXNlZFZhbHVlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZm9jdXNlZCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGFic3RyYWN0IHNldEFjdGl2ZUNvbXBvbmVudEl0ZW0oaXRlbTogQ29tcG9uZW50SXRlbSwgZm9jdXM6IGJvb2xlYW4sIHN1cHByZXNzRm9jdXNFdmVudDogYm9vbGVhbik6IHZvaWQ7XHJcbn1cclxuIiwiaW1wb3J0IHsgUmVzb2x2ZWRJdGVtQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL3Jlc29sdmVkLWNvbmZpZydcclxuaW1wb3J0IHsgQnJvd3NlclBvcG91dCB9IGZyb20gJy4uL2NvbnRyb2xzL2Jyb3dzZXItcG9wb3V0J1xyXG5pbXBvcnQgeyBBc3NlcnRFcnJvciwgVW5leHBlY3RlZE51bGxFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9pbnRlcm5hbC1lcnJvcidcclxuaW1wb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4uL2xheW91dC1tYW5hZ2VyJ1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuLi91dGlscy9ldmVudC1lbWl0dGVyJ1xyXG5pbXBvcnQgeyBnZXRKUXVlcnlPZmZzZXQgfSBmcm9tICcuLi91dGlscy9qcXVlcnktbGVnYWN5J1xyXG5pbXBvcnQgeyBBcmVhTGlua2VkUmVjdCwgSXRlbVR5cGUgfSBmcm9tICcuLi91dGlscy90eXBlcydcclxuaW1wb3J0IHsgZ2V0VW5pcXVlSWQsIHNldEVsZW1lbnREaXNwbGF5VmlzaWJpbGl0eSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJ1xyXG5pbXBvcnQgeyBDb21wb25lbnRJdGVtIH0gZnJvbSAnLi9jb21wb25lbnQtaXRlbSdcclxuaW1wb3J0IHsgQ29tcG9uZW50UGFyZW50YWJsZUl0ZW0gfSBmcm9tICcuL2NvbXBvbmVudC1wYXJlbnRhYmxlLWl0ZW0nXHJcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi9zdGFjaydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIHRoZSBiYXNlY2xhc3MgdGhhdCBhbGwgY29udGVudCBpdGVtcyBpbmhlcml0IGZyb20uXHJcbiAqIE1vc3QgbWV0aG9kcyBwcm92aWRlIGEgc3Vic2V0IG9mIHdoYXQgdGhlIHN1Yi1jbGFzc2VzIGRvLlxyXG4gKlxyXG4gKiBJdCBhbHNvIHByb3ZpZGVzIGEgbnVtYmVyIG9mIGZ1bmN0aW9ucyBmb3IgdHJlZSB0cmF2ZXJzYWxcclxuICogQHB1YmxpY1xyXG4gKi9cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb250ZW50SXRlbSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF90eXBlOiBJdGVtVHlwZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lkOiBzdHJpbmc7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9wb3BJblBhcmVudElkczogc3RyaW5nW10gPSBbXTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2NvbnRlbnRJdGVtczogQ29udGVudEl0ZW1bXTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzQ2xvc2FibGU7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9wZW5kaW5nRXZlbnRQcm9wYWdhdGlvbnM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdGhyb3R0bGVkRXZlbnRzOiBzdHJpbmdbXTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzSW5pdGlhbGlzZWQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgd2lkdGg6IG51bWJlcjsgLy8gcGl4ZWxzXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBtaW5XaWR0aDogbnVtYmVyOyAvLyBwaXhlbHNcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGhlaWdodDogbnVtYmVyOyAvLyBwaXhlbHNcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIG1pbkhlaWdodDogbnVtYmVyOyAvLyBwaXhlbHNcclxuXHJcbiAgICBpc0dyb3VuZDogYm9vbGVhblxyXG4gICAgaXNSb3c6IGJvb2xlYW5cclxuICAgIGlzQ29sdW1uOiBib29sZWFuXHJcbiAgICBpc1N0YWNrOiBib29sZWFuXHJcbiAgICBpc0NvbXBvbmVudDogYm9vbGVhblxyXG5cclxuICAgIGdldCB0eXBlKCk6IEl0ZW1UeXBlIHsgcmV0dXJuIHRoaXMuX3R5cGU7IH1cclxuICAgIGdldCBpZCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5faWQ7IH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGdldCBwb3BJblBhcmVudElkcygpOiBzdHJpbmdbXSB7IHJldHVybiB0aGlzLl9wb3BJblBhcmVudElkczsgfVxyXG4gICAgZ2V0IHBhcmVudCgpOiBDb250ZW50SXRlbSB8IG51bGwgeyByZXR1cm4gdGhpcy5fcGFyZW50OyB9XHJcbiAgICBnZXQgY29udGVudEl0ZW1zKCk6IENvbnRlbnRJdGVtW10geyByZXR1cm4gdGhpcy5fY29udGVudEl0ZW1zOyB9XHJcbiAgICBnZXQgaXNDbG9zYWJsZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2lzQ2xvc2FibGU7IH1cclxuICAgIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7IH1cclxuICAgIGdldCBpc0luaXRpYWxpc2VkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faXNJbml0aWFsaXNlZDsgfVxyXG5cclxuICAgIHN0YXRpYyBpc1N0YWNrKGl0ZW06IENvbnRlbnRJdGVtKTogaXRlbSBpcyBTdGFjayB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0uaXNTdGFjaztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaXNDb21wb25lbnRJdGVtKGl0ZW06IENvbnRlbnRJdGVtKTogaXRlbSBpcyBDb21wb25lbnRJdGVtIHtcclxuICAgICAgICByZXR1cm4gaXRlbS5pc0NvbXBvbmVudDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaXNDb21wb25lbnRQYXJlbnRhYmxlSXRlbShpdGVtOiBDb250ZW50SXRlbSk6IGl0ZW0gaXMgQ29tcG9uZW50UGFyZW50YWJsZUl0ZW0ge1xyXG4gICAgICAgIHJldHVybiBpdGVtLmlzU3RhY2sgfHwgaXRlbS5pc0dyb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgbGF5b3V0TWFuYWdlcjogTGF5b3V0TWFuYWdlcixcclxuICAgICAgICBjb25maWc6IFJlc29sdmVkSXRlbUNvbmZpZyxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfcGFyZW50OiBDb250ZW50SXRlbSB8IG51bGwsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2VsZW1lbnQ6IEhUTUxFbGVtZW50XHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLl90eXBlID0gY29uZmlnLnR5cGU7XHJcbiAgICAgICAgdGhpcy5faWQgPSBjb25maWcuaWQ7XHJcblxyXG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbGlzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzR3JvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1JvdyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNDb2x1bW4gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzU3RhY2sgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzQ29tcG9uZW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMud2lkdGggPSBjb25maWcud2lkdGg7XHJcbiAgICAgICAgdGhpcy5taW5XaWR0aCA9IGNvbmZpZy5taW5XaWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGNvbmZpZy5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5taW5IZWlnaHQgPSBjb25maWcubWluSGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLl9pc0Nsb3NhYmxlID0gY29uZmlnLmlzQ2xvc2FibGU7XHJcblxyXG4gICAgICAgIHRoaXMuX3BlbmRpbmdFdmVudFByb3BhZ2F0aW9ucyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX3Rocm90dGxlZEV2ZW50cyA9IFsnc3RhdGVDaGFuZ2VkJ107XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRJdGVtcyA9IHRoaXMuY3JlYXRlQ29udGVudEl0ZW1zKGNvbmZpZy5jb250ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXJzIHRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQgYW5kIGl0cyBjaGlsZHJlbiwgY2FsbGVkIHJlY3Vyc2l2ZWx5XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgdXBkYXRlU2l6ZSgpOiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhIGNoaWxkIG5vZGUgKGFuZCBpdHMgY2hpbGRyZW4pIGZyb20gdGhlIHRyZWVcclxuICAgICAqIEBwYXJhbSBjb250ZW50SXRlbSAtIFRoZSBjaGlsZCBpdGVtIHRvIHJlbW92ZVxyXG4gICAgICogQHBhcmFtIGtlZXBDaGlsZCAtIFdoZXRoZXIgdG8gZGVzdHJveSB0aGUgcmVtb3ZlZCBpdGVtXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUNoaWxkKGNvbnRlbnRJdGVtOiBDb250ZW50SXRlbSwga2VlcENoaWxkID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIEdldCB0aGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gdGhhdCdzIHRvIGJlIHJlbW92ZWQgd2l0aGluIGFsbCBjb250ZW50IGl0ZW1zIHRoaXMgbm9kZSBjb250YWluc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fY29udGVudEl0ZW1zLmluZGV4T2YoY29udGVudEl0ZW0pO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIE1ha2Ugc3VyZSB0aGUgY29udGVudCBpdGVtIHRvIGJlIHJlbW92ZWQgaXMgYWN0dWFsbHkgYSBjaGlsZCBvZiB0aGlzIGl0ZW1cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCByZW1vdmUgY2hpbGQgaXRlbS4gVW5rbm93biBjb250ZW50IGl0ZW0nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG5cdFx0ICogQ2FsbCBkZXN0cm95IG9uIHRoZSBjb250ZW50IGl0ZW0uXHJcblx0XHQgKiBBbGwgY2hpbGRyZW4gYXJlIGRlc3Ryb3llZCBhcyB3ZWxsXHJcblx0XHQgKi9cclxuICAgICAgICBpZiAoIWtlZXBDaGlsZCkge1xyXG5cdFx0XHR0aGlzLl9jb250ZW50SXRlbXNbaW5kZXhdLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZSB0aGUgY29udGVudCBpdGVtIGZyb20gdGhpcyBub2RlcyBhcnJheSBvZiBjaGlsZHJlblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRJdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiB0aGlzIG5vZGUgc3RpbGwgY29udGFpbnMgb3RoZXIgY29udGVudCBpdGVtcywgYWRqdXN0IHRoZWlyIHNpemVcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5fY29udGVudEl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIElmIHRoaXMgd2FzIHRoZSBsYXN0IGNvbnRlbnQgaXRlbSwgcmVtb3ZlIHRoaXMgbm9kZSBhcyB3ZWxsXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNHcm91bmQgJiYgdGhpcy5faXNDbG9zYWJsZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3BhcmVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdDSVVDMDA4NzQnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB1cCB0aGUgdHJlZSBzdHJ1Y3R1cmUgZm9yIHRoZSBuZXdseSBhZGRlZCBjaGlsZFxyXG4gICAgICogVGhlIHJlc3BvbnNpYmlsaXR5IGZvciB0aGUgYWN0dWFsIERPTSBtYW5pcHVsYXRpb25zIGxpZXNcclxuICAgICAqIHdpdGggdGhlIGNvbmNyZXRlIGl0ZW1cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29udGVudEl0ZW0gLVxyXG4gICAgICogQHBhcmFtIGluZGV4IC0gSWYgb21pdHRlZCBpdGVtIHdpbGwgYmUgYXBwZW5kZWRcclxuICAgICAqIEBwYXJhbSBzdXNwZW5kUmVzaXplIC0gVXNlZCBieSBkZXNjZW5kZW50IGltcGxlbWVudGF0aW9uc1xyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBhZGRDaGlsZChjb250ZW50SXRlbTogQ29udGVudEl0ZW0sIGluZGV4PzogbnVtYmVyIHwgbnVsbCwgc3VzcGVuZFJlc2l6ZT86IGJvb2xlYW4pOiBudW1iZXIge1xyXG4gICAgICAgIGluZGV4ID8/PSB0aGlzLl9jb250ZW50SXRlbXMubGVuZ3RoO1xyXG5cclxuICAgICAgICB0aGlzLl9jb250ZW50SXRlbXMuc3BsaWNlKGluZGV4LCAwLCBjb250ZW50SXRlbSk7XHJcbiAgICAgICAgY29udGVudEl0ZW0uc2V0UGFyZW50KHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNJbml0aWFsaXNlZCA9PT0gdHJ1ZSAmJiBjb250ZW50SXRlbS5faXNJbml0aWFsaXNlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgY29udGVudEl0ZW0uaW5pdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVwbGFjZXMgb2xkQ2hpbGQgd2l0aCBuZXdDaGlsZFxyXG4gICAgICogQHBhcmFtIG9sZENoaWxkIC1cclxuICAgICAqIEBwYXJhbSBuZXdDaGlsZCAtXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcmVwbGFjZUNoaWxkKG9sZENoaWxkOiBDb250ZW50SXRlbSwgbmV3Q2hpbGQ6IENvbnRlbnRJdGVtLCBkZXN0cm95T2xkQ2hpbGQgPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIC8vIERvIG5vdCB0cnkgdG8gcmVwbGFjZSBDb21wb25lbnRJdGVtIC0gd2lsbCBub3Qgd29ya1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fY29udGVudEl0ZW1zLmluZGV4T2Yob2xkQ2hpbGQpO1xyXG4gICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBvbGRDaGlsZC5fZWxlbWVudC5wYXJlbnROb2RlO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignQ0lSQ0kyMzIzMicsICdDYW5cXCd0IHJlcGxhY2UgY2hpbGQuIG9sZENoaWxkIGlzIG5vdCBjaGlsZCBvZiB0aGlzJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFyZW50Tm9kZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignQ0lSQ1AyMzIzMicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld0NoaWxkLl9lbGVtZW50LCBvbGRDaGlsZC5fZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAqIE9wdGlvbmFsbHkgZGVzdHJveSB0aGUgb2xkIGNvbnRlbnQgaXRlbVxyXG4gICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZiAoZGVzdHJveU9sZENoaWxkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBvbGRDaGlsZC5fcGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIG9sZENoaWxkLmRlc3Ryb3koKTsgLy8gd2lsbCBub3cgYWxzbyBkZXN0cm95IGFsbCBjaGlsZHJlbiBvZiBvbGRDaGlsZFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAqIFdpcmUgdGhlIG5ldyBjb250ZW50SXRlbSBpbnRvIHRoZSB0cmVlXHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRJdGVtc1tpbmRleF0gPSBuZXdDaGlsZDtcclxuICAgICAgICAgICAgbmV3Q2hpbGQuc2V0UGFyZW50KHRoaXMpO1xyXG4gICAgICAgICAgICAvLyBuZXdDaGlsZCBpbmhlcml0cyB0aGUgc2l6ZXMgZnJvbSB0aGUgb2xkIGNoaWxkOlxyXG4gICAgICAgICAgICBuZXdDaGlsZC5oZWlnaHQgPSBvbGRDaGlsZC5oZWlnaHQ7XHJcbiAgICAgICAgICAgIG5ld0NoaWxkLndpZHRoID0gb2xkQ2hpbGQud2lkdGg7XHJcblxyXG4gICAgICAgICAgICAvL1RPRE8gVGhpcyBkb2Vzbid0IHVwZGF0ZSB0aGUgY29uZmlnLi4uIHJlZmFjdG9yIHRvIGxlYXZlIGl0ZW0gbm9kZXMgdW50b3VjaGVkIGFmdGVyIGNyZWF0aW9uXHJcbiAgICAgICAgICAgIGlmIChuZXdDaGlsZC5fcGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignQ0lSQ05DNDU2OTknKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdDaGlsZC5fcGFyZW50Ll9pc0luaXRpYWxpc2VkID09PSB0cnVlICYmIG5ld0NoaWxkLl9pc0luaXRpYWxpc2VkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmluaXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnZlbmllbmNlIG1ldGhvZC5cclxuICAgICAqIFNob3J0aGFuZCBmb3IgdGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQoIHRoaXMgKVxyXG4gICAgICovXHJcbiAgICByZW1vdmUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BhcmVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignQ0lSMTExMTAnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyB0aGUgY29tcG9uZW50IGZyb20gdGhlIGxheW91dCBhbmQgY3JlYXRlcyBhIG5ld1xyXG4gICAgICogYnJvd3NlciB3aW5kb3cgd2l0aCB0aGUgY29tcG9uZW50IGFuZCBpdHMgY2hpbGRyZW4gaW5zaWRlXHJcbiAgICAgKi9cclxuICAgIHBvcG91dCgpOiBCcm93c2VyUG9wb3V0IHtcclxuICAgICAgICBjb25zdCBwYXJlbnRJZCA9IGdldFVuaXF1ZUlkKCk7XHJcbiAgICAgICAgY29uc3QgYnJvd3NlclBvcG91dCA9IHRoaXMubGF5b3V0TWFuYWdlci5jcmVhdGVQb3BvdXRGcm9tQ29udGVudEl0ZW0odGhpcywgdW5kZWZpbmVkLCBwYXJlbnRJZCwgdW5kZWZpbmVkKTtcclxuICAgICAgICB0aGlzLmVtaXRCYXNlQnViYmxpbmdFdmVudCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgcmV0dXJuIGJyb3dzZXJQb3BvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgYWJzdHJhY3QgdG9Db25maWcoKTogUmVzb2x2ZWRJdGVtQ29uZmlnO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNhbGN1bGF0ZUNvbmZpZ0NvbnRlbnQoKTogUmVzb2x2ZWRJdGVtQ29uZmlnW10ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtcyA9IHRoaXMuX2NvbnRlbnRJdGVtcztcclxuICAgICAgICBjb25zdCBjb3VudCA9IGNvbnRlbnRJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFJlc29sdmVkSXRlbUNvbmZpZz4oY291bnQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gY29udGVudEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICByZXN1bHRbaV0gPSBpdGVtLnRvQ29uZmlnKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgaGlnaGxpZ2h0RHJvcFpvbmUoeDogbnVtYmVyLCB5OiBudW1iZXIsIGFyZWE6IEFyZWFMaW5rZWRSZWN0KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZHJvcFRhcmdldEluZGljYXRvciA9IHRoaXMubGF5b3V0TWFuYWdlci5kcm9wVGFyZ2V0SW5kaWNhdG9yO1xyXG4gICAgICAgIGlmIChkcm9wVGFyZ2V0SW5kaWNhdG9yID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdBQ0lIRFo1NTkzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZHJvcFRhcmdldEluZGljYXRvci5oaWdobGlnaHRBcmVhKGFyZWEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvbkRyb3AoY29udGVudEl0ZW06IENvbnRlbnRJdGVtLCBhcmVhOiBDb250ZW50SXRlbS5BcmVhKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hZGRDaGlsZChjb250ZW50SXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc2hvdygpOiB2b2lkIHtcclxuICAgICAgICAvLyBOb3Qgc3VyZSB3aHkgc2hvd0FsbEFjdGl2ZUNvbnRlbnRJdGVtcygpIHdhcyBjYWxsZWQuIEdvbGRlbkxheW91dCBzZWVtcyB0byB3b3JrIGZpbmUgd2l0aG91dCBpdC4gIExlZnQgY29tbWVudGVkIGNvZGVcclxuICAgICAgICAvLyBpbiBzb3VyY2UgaW4gY2FzZSBhIHJlYXNvbiBmb3IgaXQgYmVjb21lcyBhcHBhcmVudC5cclxuICAgICAgICAvLyB0aGlzLmxheW91dE1hbmFnZXIuc2hvd0FsbEFjdGl2ZUNvbnRlbnRJdGVtcygpO1xyXG4gICAgICAgIHNldEVsZW1lbnREaXNwbGF5VmlzaWJpbGl0eSh0aGlzLl9lbGVtZW50LCB0cnVlKTtcclxuICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIudXBkYXRlU2l6ZUZyb21Db250YWluZXIoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udGVudEl0ZW1zW2ldLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95cyB0aGlzIGl0ZW0gYW5kcyBpdHMgY2hpbGRyZW5cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRJdGVtc1tpXS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRJdGVtcyA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmVtaXRCYXNlQnViYmxpbmdFdmVudCgnYmVmb3JlSXRlbURlc3Ryb3llZCcpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ2l0ZW1EZXN0cm95ZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGFyZWEgdGhlIGNvbXBvbmVudCBjdXJyZW50bHkgb2NjdXBpZXNcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBnZXRFbGVtZW50QXJlYShlbGVtZW50PzogSFRNTEVsZW1lbnQpOiBDb250ZW50SXRlbS5BcmVhIHwgbnVsbCB7XHJcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQgPz8gdGhpcy5fZWxlbWVudDtcclxuXHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gZ2V0SlF1ZXJ5T2Zmc2V0KGVsZW1lbnQpO1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAvLyBjb25zdCB3aWR0aEFuZEhlaWdodCA9IGdldEpRdWVyeVdpZHRoQW5kSGVpZ2h0KGVsZW1lbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4MTogb2Zmc2V0LmxlZnQgKyAxLFxyXG4gICAgICAgICAgICB5MTogb2Zmc2V0LnRvcCArIDEsXHJcbiAgICAgICAgICAgIHgyOiBvZmZzZXQubGVmdCArIHdpZHRoIC0gMSxcclxuICAgICAgICAgICAgeTI6IG9mZnNldC50b3AgKyBoZWlnaHQgLSAxLFxyXG4gICAgICAgICAgICBzdXJmYWNlOiB3aWR0aCAqIGhlaWdodCxcclxuICAgICAgICAgICAgY29udGVudEl0ZW06IHRoaXNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRyZWUgb2YgY29udGVudCBpdGVtcyBpcyBjcmVhdGVkIGluIHR3byBzdGVwczogRmlyc3QgYWxsIGNvbnRlbnQgaXRlbXMgYXJlIGluc3RhbnRpYXRlZCxcclxuICAgICAqIHRoZW4gaW5pdCBpcyBjYWxsZWQgcmVjdXJzaXZlbHkgZnJvbSB0b3AgdG8gYm90dGVtLiBUaGlzIGlzIHRoZSBiYXNpYyBpbml0IGZ1bmN0aW9uLFxyXG4gICAgICogaXQgY2FuIGJlIHVzZWQsIGV4dGVuZGVkIG9yIG92ZXJ3cml0dGVuIGJ5IHRoZSBjb250ZW50IGl0ZW1zXHJcbiAgICAgKlxyXG4gICAgICogSXRzIGJlaGF2aW91ciBkZXBlbmRzIG9uIHRoZSBjb250ZW50IGl0ZW1cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBpbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbGlzZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZW1pdEJhc2VCdWJibGluZ0V2ZW50KCdpdGVtQ3JlYXRlZCcpO1xyXG4gICAgICAgIHRoaXMuZW1pdFVua25vd25CdWJibGluZ0V2ZW50KHRoaXMudHlwZSArICdDcmVhdGVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIHNldFBhcmVudChwYXJlbnQ6IENvbnRlbnRJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGFkZFBvcEluUGFyZW50SWQoaWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5wb3BJblBhcmVudElkcy5pbmNsdWRlcyhpZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wb3BJblBhcmVudElkcy5wdXNoKGlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIGluaXRDb250ZW50SXRlbXMoKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udGVudEl0ZW1zW2ldLmluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIGhpZGUoKTogdm9pZCB7XHJcbiAgICAgICAgc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5KHRoaXMuX2VsZW1lbnQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIudXBkYXRlU2l6ZUZyb21Db250YWluZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgdXBkYXRlQ29udGVudEl0ZW1zU2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50SXRlbXNbaV0udXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZXMgYWxsIGNvbnRlbnQgaXRlbXMgZm9yIHRoaXMgbm9kZSBhdCBpbml0aWFsaXNhdGlvbiB0aW1lXHJcbiAgICAgKiBQTEVBU0UgTk9URSwgcGxlYXNlIHNlZSBhZGRDaGlsZCBmb3IgYWRkaW5nIGNvbnRlbnRJdGVtcyBhdCBydW50aW1lXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVDb250ZW50SXRlbXMoY29udGVudDogcmVhZG9ubHkgUmVzb2x2ZWRJdGVtQ29uZmlnW10pIHtcclxuICAgICAgICBjb25zdCBjb3VudCA9IGNvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheTxDb250ZW50SXRlbT4oY291bnQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHRbaV0gPSB0aGlzLmxheW91dE1hbmFnZXIuY3JlYXRlQ29udGVudEl0ZW0oY29udGVudFtpXSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgZm9yIGV2ZXJ5IGV2ZW50IG9uIHRoZSBpdGVtIHRyZWUuIERlY2lkZXMgd2hldGhlciB0aGUgZXZlbnQgaXMgYSBidWJibGluZ1xyXG4gICAgICogZXZlbnQgYW5kIHByb3BhZ2F0ZXMgaXQgdG8gaXRzIHBhcmVudFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcHJvcGFnYXRlRXZlbnQobmFtZTogc3RyaW5nLCBhcmdzOiB1bmtub3duW10pIHtcclxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBhcmdzWzBdO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBFdmVudEVtaXR0ZXIuQnViYmxpbmdFdmVudCAmJlxyXG4gICAgICAgICAgICAgICAgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQgPT09IGZhbHNlICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0luaXRpYWxpc2VkID09PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBJbiBzb21lIGNhc2VzIChlLmcuIGlmIGFuIGVsZW1lbnQgaXMgY3JlYXRlZCBmcm9tIGEgRHJhZ1NvdXJjZSkgaXRcclxuICAgICAgICAgICAgICAgICAqIGRvZXNuJ3QgaGF2ZSBhIHBhcmVudCBhbmQgaXMgbm90IGEgY2hpbGQgb2YgR3JvdW5kSXRlbS4gSWYgdGhhdCdzIHRoZSBjYXNlXHJcbiAgICAgICAgICAgICAgICAgKiBwcm9wYWdhdGUgdGhlIGJ1YmJsaW5nIGV2ZW50IGZyb20gdGhlIHRvcCBsZXZlbCBvZiB0aGUgc3Vic3RyZWUgZGlyZWN0bHlcclxuICAgICAgICAgICAgICAgICAqIHRvIHRoZSBsYXlvdXRNYW5hZ2VyXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzR3JvdW5kID09PSBmYWxzZSAmJiB0aGlzLl9wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnQuZW1pdFVua25vd24obmFtZSwgZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlRXZlbnRQcm9wYWdhdGlvblRvTGF5b3V0TWFuYWdlcihuYW1lLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgdHJ5QnViYmxlRXZlbnQobmFtZTogc3RyaW5nLCBhcmdzOiB1bmtub3duW10pOiB2b2lkIHtcclxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBhcmdzWzBdO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBFdmVudEVtaXR0ZXIuQnViYmxpbmdFdmVudCAmJlxyXG4gICAgICAgICAgICAgICAgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQgPT09IGZhbHNlICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc0luaXRpYWxpc2VkID09PSB0cnVlXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBJbiBzb21lIGNhc2VzIChlLmcuIGlmIGFuIGVsZW1lbnQgaXMgY3JlYXRlZCBmcm9tIGEgRHJhZ1NvdXJjZSkgaXRcclxuICAgICAgICAgICAgICAgICAqIGRvZXNuJ3QgaGF2ZSBhIHBhcmVudCBhbmQgaXMgbm90IGEgY2hpbGQgb2YgR3JvdW5kSXRlbS4gSWYgdGhhdCdzIHRoZSBjYXNlXHJcbiAgICAgICAgICAgICAgICAgKiBwcm9wYWdhdGUgdGhlIGJ1YmJsaW5nIGV2ZW50IGZyb20gdGhlIHRvcCBsZXZlbCBvZiB0aGUgc3Vic3RyZWUgZGlyZWN0bHlcclxuICAgICAgICAgICAgICAgICAqIHRvIHRoZSBsYXlvdXRNYW5hZ2VyXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzR3JvdW5kID09PSBmYWxzZSAmJiB0aGlzLl9wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnQuZW1pdFVua25vd24obmFtZSwgZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlRXZlbnRQcm9wYWdhdGlvblRvTGF5b3V0TWFuYWdlcihuYW1lLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGwgcmF3IGV2ZW50cyBidWJibGUgdXAgdG8gdGhlIEdyb3VuZCBlbGVtZW50LiBTb21lIGV2ZW50cyB0aGF0XHJcbiAgICAgKiBhcmUgcHJvcGFnYXRlZCB0byAtIGFuZCBlbWl0dGVkIGJ5IC0gdGhlIGxheW91dE1hbmFnZXIgaG93ZXZlciBhcmVcclxuICAgICAqIG9ubHkgc3RyaW5nLWJhc2VkLCBiYXRjaGVkIGFuZCBzYW5pdGl6ZWQgdG8gbWFrZSB0aGVtIG1vcmUgdXNhYmxlXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNjaGVkdWxlRXZlbnRQcm9wYWdhdGlvblRvTGF5b3V0TWFuYWdlcihuYW1lOiBzdHJpbmcsIGV2ZW50OiBFdmVudEVtaXR0ZXIuQnViYmxpbmdFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLl90aHJvdHRsZWRFdmVudHMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmVtaXRVbmtub3duKG5hbWUsIGV2ZW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcGVuZGluZ0V2ZW50UHJvcGFnYXRpb25zW25hbWVdICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nRXZlbnRQcm9wYWdhdGlvbnNbbmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5wcm9wYWdhdGVFdmVudFRvTGF5b3V0TWFuYWdlcihuYW1lLCBldmVudCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrIGZvciBldmVudHMgc2NoZWR1bGVkIGJ5IF9zY2hlZHVsZUV2ZW50UHJvcGFnYXRpb25Ub0xheW91dE1hbmFnZXJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcHJvcGFnYXRlRXZlbnRUb0xheW91dE1hbmFnZXIobmFtZTogc3RyaW5nLCBldmVudDogRXZlbnRFbWl0dGVyLkJ1YmJsaW5nRXZlbnQpIHtcclxuICAgICAgICB0aGlzLl9wZW5kaW5nRXZlbnRQcm9wYWdhdGlvbnNbbmFtZV0gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIuZW1pdFVua25vd24obmFtZSwgZXZlbnQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIENvbnRlbnRJdGVtIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQXJlYSBleHRlbmRzIEFyZWFMaW5rZWRSZWN0IHtcclxuICAgICAgICBzdXJmYWNlOiBudW1iZXI7XHJcbiAgICAgICAgY29udGVudEl0ZW06IENvbnRlbnRJdGVtO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIChDb250ZW50SXRlbTpjbGFzcyl9ICovXHJcbmV4cG9ydCB0eXBlIEFic3RyYWN0Q29udGVudEl0ZW0gPSBDb250ZW50SXRlbTtcclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50SXRlbUNvbmZpZywgSXRlbUNvbmZpZywgUm93T3JDb2x1bW5JdGVtQ29uZmlnLCBTdGFja0l0ZW1Db25maWcgfSBmcm9tICcuLi9jb25maWcvY29uZmlnJztcclxuaW1wb3J0IHsgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnLCBSZXNvbHZlZEdyb3VuZEl0ZW1Db25maWcsIFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLCBSZXNvbHZlZEl0ZW1Db25maWcsIFJlc29sdmVkUm9vdEl0ZW1Db25maWcsIFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL3Jlc29sdmVkLWNvbmZpZyc7XHJcbmltcG9ydCB7IEFzc2VydEVycm9yLCBVbmV4cGVjdGVkTnVsbEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4uL2xheW91dC1tYW5hZ2VyJztcclxuaW1wb3J0IHsgRG9tQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvZG9tLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IEFyZWFMaW5rZWRSZWN0LCBJdGVtVHlwZSB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcclxuaW1wb3J0IHsgZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0LCBzZXRFbGVtZW50SGVpZ2h0LCBzZXRFbGVtZW50V2lkdGggfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuL2NvbXBvbmVudC1pdGVtJztcclxuaW1wb3J0IHsgQ29tcG9uZW50UGFyZW50YWJsZUl0ZW0gfSBmcm9tICcuL2NvbXBvbmVudC1wYXJlbnRhYmxlLWl0ZW0nO1xyXG5pbXBvcnQgeyBDb250ZW50SXRlbSB9IGZyb20gJy4vY29udGVudC1pdGVtJztcclxuaW1wb3J0IHsgUm93T3JDb2x1bW4gfSBmcm9tICcuL3Jvdy1vci1jb2x1bW4nO1xyXG5cclxuLyoqXHJcbiAqIEdyb3VuZEl0ZW0gaXMgdGhlIENvbnRlbnRJdGVtIHdob3NlIG9uZSBjaGlsZCBpcyB0aGUgcm9vdCBDb250ZW50SXRlbSAoUm9vdCBpcyBwbGFudGVkIGluIEdyb3VuZCkuXHJcbiAqIChQcmV2aW91c2x5IGl0IHdhcyBjYWxsZWQgcm9vdCBob3dldmVyIHRoaXMgd2FzIGluY29ycmVjdCBhcyBpdHMgY2hpbGQgaXMgdGhlIHJvb3QgaXRlbSlcclxuICogVGhlcmUgaXMgb25seSBvbmUgaW5zdGFuY2Ugb2YgR3JvdW5kSXRlbSBhbmQgaXQgaXMgYXV0b21hdGljYWxseSBjcmVhdGVkIGJ5IHRoZSBMYXlvdXQgTWFuYWdlclxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHcm91bmRJdGVtIGV4dGVuZHMgQ29tcG9uZW50UGFyZW50YWJsZUl0ZW0ge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2hpbGRFbGVtZW50Q29udGFpbmVyOiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NvbnRhaW5lckVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGxheW91dE1hbmFnZXI6IExheW91dE1hbmFnZXIsIHJvb3RJdGVtQ29uZmlnOiBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnIHwgdW5kZWZpbmVkLCBjb250YWluZXJFbGVtZW50OiBIVE1MRWxlbWVudCkge1xyXG5cclxuICAgICAgICBzdXBlcihsYXlvdXRNYW5hZ2VyLCBSZXNvbHZlZEdyb3VuZEl0ZW1Db25maWcuY3JlYXRlKHJvb3RJdGVtQ29uZmlnKSwgbnVsbCwgR3JvdW5kSXRlbS5jcmVhdGVFbGVtZW50KGRvY3VtZW50KSk7XHJcblxyXG4gICAgICAgIHRoaXMuaXNHcm91bmQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lciA9IHRoaXMuZWxlbWVudDtcclxuICAgICAgICB0aGlzLl9jb250YWluZXJFbGVtZW50ID0gY29udGFpbmVyRWxlbWVudDtcclxuICAgICAgICB0aGlzLl9jb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpc2VkID09PSB0cnVlKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlTm9kZVNpemUoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZEVsZW1lbnRDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50SXRlbXNbaV0uZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5pbml0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdENvbnRlbnRJdGVtcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9hZHMgYSBuZXcgTGF5b3V0XHJcbiAgICAgKiBJbnRlcm5hbCBvbmx5LiAgVG8gbG9hZCBhIG5ldyBsYXlvdXQgd2l0aCBBUEksIHVzZSB7QGxpbmsgKExheW91dE1hbmFnZXI6Y2xhc3MpLmxvYWRMYXlvdXR9XHJcbiAgICAgKi9cclxuICAgIGxvYWRSb290KHJvb3RJdGVtQ29uZmlnOiBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnIHwgdW5kZWZpbmVkKTogdm9pZCB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIHJvb3QgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgdGhpcy5jbGVhclJvb3QoKTtcclxuXHJcbiAgICAgICAgaWYgKHJvb3RJdGVtQ29uZmlnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgcm9vdENvbnRlbnRJdGVtID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZUFuZEluaXRDb250ZW50SXRlbShyb290SXRlbUNvbmZpZywgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQocm9vdENvbnRlbnRJdGVtLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJSb290KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyByb290IGlmIGl0IGV4aXN0c1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtcyA9IHRoaXMuY29udGVudEl0ZW1zO1xyXG4gICAgICAgIHN3aXRjaCAoY29udGVudEl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIDE6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nUm9vdENvbnRlbnRJdGVtID0gY29udGVudEl0ZW1zWzBdO1xyXG4gICAgICAgICAgICAgICAgZXhpc3RpbmdSb290Q29udGVudEl0ZW0ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdHSUxSMDc3MjEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBDb250ZW50SXRlbSBjaGlsZCB0byByb290IENvbnRlbnRJdGVtLlxyXG4gICAgICogSW50ZXJuYWwgb25seS4gIFRvIGxvYWQgYSBhZGQgd2l0aCBBUEksIHVzZSB7QGxpbmsgKExheW91dE1hbmFnZXI6Y2xhc3MpLmFkZEl0ZW19XHJcbiAgICAgKiBAcmV0dXJucyAtMSBpZiBhZGRlZCBhcyByb290IG90aGVyd2lzZSBpbmRleCBpbiByb290IENvbnRlbnRJdGVtJ3MgY29udGVudFxyXG4gICAgICovXHJcbiAgICBhZGRJdGVtKGl0ZW1Db25maWc6IFJvd09yQ29sdW1uSXRlbUNvbmZpZyB8IFN0YWNrSXRlbUNvbmZpZyB8IENvbXBvbmVudEl0ZW1Db25maWcsXHJcbiAgICAgICAgaW5kZXg/OiBudW1iZXJcclxuICAgICk6IG51bWJlciB7XHJcbiAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmNoZWNrTWluaW1pc2VNYXhpbWlzZWRTdGFjaygpO1xyXG5cclxuICAgICAgICBjb25zdCByZXNvbHZlZEl0ZW1Db25maWcgPSBJdGVtQ29uZmlnLnJlc29sdmUoaXRlbUNvbmZpZyk7XHJcbiAgICAgICAgbGV0IHBhcmVudDogQ29udGVudEl0ZW07XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gdGhpcy5jb250ZW50SXRlbXNbMF07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcmVudC5pc0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBhZGQgaXRlbSBhcyBjaGlsZCB0byBDb21wb25lbnRJdGVtJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSB0aGlzLmxheW91dE1hbmFnZXIuY3JlYXRlQW5kSW5pdENvbnRlbnRJdGVtKHJlc29sdmVkSXRlbUNvbmZpZywgcGFyZW50KTtcclxuICAgICAgICAgICAgaW5kZXggPSBwYXJlbnQuYWRkQ2hpbGQoY29udGVudEl0ZW0sIGluZGV4KTtcclxuICAgICAgICAgICAgcmV0dXJuIChwYXJlbnQgPT09IHRoaXMpID8gLTEgOiBpbmRleDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZENvbXBvbmVudEFzUm9vdChpdGVtQ29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnKTogdm9pZCB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIHJvb3QgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgdGhpcy5jbGVhclJvb3QoKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRJdGVtQ29uZmlnID0gSXRlbUNvbmZpZy5yZXNvbHZlKGl0ZW1Db25maWcpIGFzIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZztcclxuXHJcbiAgICAgICAgaWYgKHJlc29sdmVkSXRlbUNvbmZpZy5tYXhpbWlzZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSb290IENvbXBvbmVudCBjYW5ub3QgYmUgbWF4aW1pc2VkJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgcm9vdENvbnRlbnRJdGVtID0gbmV3IENvbXBvbmVudEl0ZW0odGhpcy5sYXlvdXRNYW5hZ2VyLCByZXNvbHZlZEl0ZW1Db25maWcsIHRoaXMpO1xyXG4gICAgICAgICAgICByb290Q29udGVudEl0ZW0uaW5pdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKHJvb3RDb250ZW50SXRlbSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIFJvb3QgQ29udGVudEl0ZW0uXHJcbiAgICAgKiBJbnRlcm5hbCBvbmx5LiAgVG8gcmVwbGFjZSBSb290IENvbnRlbnRJdGVtIHdpdGggQVBJLCB1c2Uge0BsaW5rIChMYXlvdXRNYW5hZ2VyOmNsYXNzKS5sb2FkTGF5b3V0fVxyXG4gICAgICovXHJcbiAgICBvdmVycmlkZSBhZGRDaGlsZChjb250ZW50SXRlbTogQ29udGVudEl0ZW0sIGluZGV4PzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5jb250ZW50SXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dyb3VuZCBub2RlIGNhbiBvbmx5IGhhdmUgYSBzaW5nbGUgY2hpbGQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb250ZW50SXRlbSA9IHRoaXMubGF5b3V0TWFuYWdlci5fJG5vcm1hbGl6ZUNvbnRlbnRJdGVtKGNvbnRlbnRJdGVtLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fY2hpbGRFbGVtZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRlbnRJdGVtLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICBpbmRleCA9IHN1cGVyLmFkZENoaWxkKGNvbnRlbnRJdGVtLCBpbmRleCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ3N0YXRlQ2hhbmdlZCcpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBjYWxjdWxhdGVDb25maWdDb250ZW50KCk6IFJlc29sdmVkUm9vdEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gdGhpcy5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBjb250ZW50SXRlbXMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheTxSZXNvbHZlZFJvb3RJdGVtQ29uZmlnPihjb3VudCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBjb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1Db25maWcgPSBpdGVtLnRvQ29uZmlnKCk7XHJcbiAgICAgICAgICAgIGlmIChSZXNvbHZlZFJvb3RJdGVtQ29uZmlnLmlzUm9vdEl0ZW1Db25maWcoaXRlbUNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IGl0ZW1Db25maWc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ1JDQ0M2NjgzMicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc2V0U2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkIHx8IGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpOyAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCB2MS54IEFQSVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldEVsZW1lbnRXaWR0aCh0aGlzLmVsZW1lbnQsIHdpZHRoKTtcclxuICAgICAgICAgICAgc2V0RWxlbWVudEhlaWdodCh0aGlzLmVsZW1lbnQsIGhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAvLyBHcm91bmRJdGVtIGNhbiBiZSBlbXB0eVxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50SXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc2V0RWxlbWVudFdpZHRoKHRoaXMuY29udGVudEl0ZW1zWzBdLmVsZW1lbnQsIHdpZHRoKTtcclxuICAgICAgICAgICAgICAgIHNldEVsZW1lbnRIZWlnaHQodGhpcy5jb250ZW50SXRlbXNbMF0uZWxlbWVudCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDb250ZW50SXRlbXNTaXplKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIFJvb3QgQ29udGVudEl0ZW0uXHJcbiAgICAgKiBJbnRlcm5hbCBvbmx5LiAgVG8gcmVwbGFjZSBSb290IENvbnRlbnRJdGVtIHdpdGggQVBJLCB1c2Uge0BsaW5rIChMYXlvdXRNYW5hZ2VyOmNsYXNzKS51cGRhdGVSb290U2l6ZX1cclxuICAgICAqL1xyXG4gICAgb3ZlcnJpZGUgdXBkYXRlU2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIuYmVnaW5WaXJ0dWFsU2l6ZWRDb250YWluZXJBZGRpbmcoKTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU5vZGVTaXplKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29udGVudEl0ZW1zU2l6ZSgpO1xyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5lbmRWaXJ0dWFsU2l6ZWRDb250YWluZXJBZGRpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU2lkZUFyZWFzKCk6IEdyb3VuZEl0ZW0uQXJlYVtdIHtcclxuICAgICAgICBjb25zdCBhcmVhU2l6ZSA9IDUwO1xyXG5cclxuICAgICAgICBjb25zdCBvcHBvc2l0ZVNpZGVzID0gR3JvdW5kSXRlbS5BcmVhLm9wcG9zaXRlU2lkZXM7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PEdyb3VuZEl0ZW0uQXJlYT4oT2JqZWN0LmtleXMob3Bwb3NpdGVTaWRlcykubGVuZ3RoKTtcclxuICAgICAgICBsZXQgaWR4ID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb3Bwb3NpdGVTaWRlcykge1xyXG4gICAgICAgICAgICBjb25zdCBzaWRlID0ga2V5IGFzIGtleW9mIEdyb3VuZEl0ZW0uQXJlYS5TaWRlcztcclxuICAgICAgICAgICAgY29uc3QgYXJlYSA9IHRoaXMuZ2V0RWxlbWVudEFyZWEoKSBhcyBHcm91bmRJdGVtLkFyZWE7XHJcbiAgICAgICAgICAgIGlmIChhcmVhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignUkNTQTc3NTUzJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhcmVhLnNpZGUgPSBzaWRlO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wcG9zaXRlU2lkZXNbc2lkZV1bMV0gPT09ICcyJyApXHJcbiAgICAgICAgICAgICAgICAgICAgYXJlYVtzaWRlXSA9IGFyZWFbb3Bwb3NpdGVTaWRlc1tzaWRlXV0gLSBhcmVhU2l6ZTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBhcmVhW3NpZGVdID0gYXJlYVtvcHBvc2l0ZVNpZGVzW3NpZGVdXSArIGFyZWFTaXplO1xyXG4gICAgICAgICAgICAgICAgYXJlYS5zdXJmYWNlID0gKGFyZWEueDIgLSBhcmVhLngxKSAqIChhcmVhLnkyIC0gYXJlYS55MSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbaWR4KytdID0gYXJlYTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBoaWdobGlnaHREcm9wWm9uZSh4OiBudW1iZXIsIHk6IG51bWJlciwgYXJlYTogQXJlYUxpbmtlZFJlY3QpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIudGFiRHJvcFBsYWNlaG9sZGVyLnJlbW92ZSgpO1xyXG4gICAgICAgIHN1cGVyLmhpZ2hsaWdodERyb3Bab25lKHgsIHksIGFyZWEpO1xyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlIG9uRHJvcChjb250ZW50SXRlbTogQ29udGVudEl0ZW0sIGFyZWE6IEdyb3VuZEl0ZW0uQXJlYSk6IHZvaWQge1xyXG5cclxuICAgICAgICBpZiAoY29udGVudEl0ZW0uaXNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbUNvbmZpZyA9IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnLmNyZWF0ZURlZmF1bHQoKTtcclxuICAgICAgICAgICAgLy8gc2luY2UgUmVzb2x2ZWRJdGVtQ29uZmlnLmNvbnRlbnRJdGVtcyBub3Qgc2V0IHVwLCB3ZSBuZWVkIHRvIGFkZCBoZWFkZXIgZnJvbSBDb21wb25lbnRcclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gY29udGVudEl0ZW0gYXMgQ29tcG9uZW50SXRlbTtcclxuICAgICAgICAgICAgaXRlbUNvbmZpZy5oZWFkZXIgPSBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIuY3JlYXRlQ29weShjb21wb25lbnQuaGVhZGVyQ29uZmlnKTtcclxuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSB0aGlzLmxheW91dE1hbmFnZXIuY3JlYXRlQW5kSW5pdENvbnRlbnRJdGVtKGl0ZW1Db25maWcsIHRoaXMpO1xyXG4gICAgICAgICAgICBzdGFjay5hZGRDaGlsZChjb250ZW50SXRlbSk7XHJcbiAgICAgICAgICAgIGNvbnRlbnRJdGVtID0gc3RhY2s7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jb250ZW50SXRlbXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY29udGVudEl0ZW0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAqIElmIHRoZSBjb250ZW50SXRlbSB0aGF0J3MgYmVpbmcgZHJvcHBlZCBpcyBub3QgZHJvcHBlZCBvbiBhIFN0YWNrIChjYXNlcyB3aGljaCBqdXN0IHBhc3NlZCBhYm92ZSBhbmRcclxuICAgICAgICAgICAgICogd2hpY2ggd291bGQgd3JhcCB0aGUgY29udGVudEl0ZW0gaW4gYSBTdGFjaykgd2UgbmVlZCB0byBjaGVjayB3aGV0aGVyIGNvbnRlbnRJdGVtIGlzIGEgUm93T3JDb2x1bW4uXHJcbiAgICAgICAgICAgICAqIElmIGl0IGlzLCB3ZSBuZWVkIHRvIHJlLXdyYXAgaXQgaW4gYSBTdGFjayBsaWtlIGl0IHdhcyB3aGVuIGl0IHdhcyBkcmFnZ2VkIGJ5IGl0cyBUYWIgKGl0IHdhcyBkcmFnZ2VkISkuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZihjb250ZW50SXRlbS50eXBlID09PSBJdGVtVHlwZS5yb3cgfHwgY29udGVudEl0ZW0udHlwZSA9PT0gSXRlbVR5cGUuY29sdW1uKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1Db25maWcgPSBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZy5jcmVhdGVEZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMubGF5b3V0TWFuYWdlci5jcmVhdGVDb250ZW50SXRlbShpdGVtQ29uZmlnLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIHN0YWNrLmFkZENoaWxkKGNvbnRlbnRJdGVtKVxyXG4gICAgICAgICAgICAgICAgY29udGVudEl0ZW0gPSBzdGFja1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0eXBlID0gYXJlYS5zaWRlWzBdID09ICd4JyA/IEl0ZW1UeXBlLnJvdyA6IEl0ZW1UeXBlLmNvbHVtbjtcclxuICAgICAgICAgICAgY29uc3QgZGltZW5zaW9uID0gYXJlYS5zaWRlWzBdID09ICd4JyA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcclxuICAgICAgICAgICAgY29uc3QgaW5zZXJ0QmVmb3JlID0gYXJlYS5zaWRlWzFdID09ICcyJztcclxuICAgICAgICAgICAgY29uc3QgY29sdW1uID0gdGhpcy5jb250ZW50SXRlbXNbMF07XHJcbiAgICAgICAgICAgIGlmICghKGNvbHVtbiBpbnN0YW5jZW9mIFJvd09yQ29sdW1uKSB8fCBjb2x1bW4udHlwZSAhPT0gdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbUNvbmZpZyA9IFJlc29sdmVkSXRlbUNvbmZpZy5jcmVhdGVEZWZhdWx0KHR5cGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93T3JDb2x1bW4gPSB0aGlzLmxheW91dE1hbmFnZXIuY3JlYXRlQ29udGVudEl0ZW0oaXRlbUNvbmZpZywgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VDaGlsZChjb2x1bW4sIHJvd09yQ29sdW1uKTtcclxuICAgICAgICAgICAgICAgIHJvd09yQ29sdW1uLmFkZENoaWxkKGNvbnRlbnRJdGVtLCBpbnNlcnRCZWZvcmUgPyAwIDogdW5kZWZpbmVkLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHJvd09yQ29sdW1uLmFkZENoaWxkKGNvbHVtbiwgaW5zZXJ0QmVmb3JlID8gdW5kZWZpbmVkIDogMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5bZGltZW5zaW9uXSA9IDUwO1xyXG4gICAgICAgICAgICAgICAgY29udGVudEl0ZW1bZGltZW5zaW9uXSA9IDUwO1xyXG4gICAgICAgICAgICAgICAgcm93T3JDb2x1bW4udXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2libGluZyA9IGNvbHVtbi5jb250ZW50SXRlbXNbaW5zZXJ0QmVmb3JlID8gMCA6IGNvbHVtbi5jb250ZW50SXRlbXMubGVuZ3RoIC0gMV1cclxuICAgICAgICAgICAgICAgIGNvbHVtbi5hZGRDaGlsZChjb250ZW50SXRlbSwgaW5zZXJ0QmVmb3JlID8gMCA6IHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBzaWJsaW5nW2RpbWVuc2lvbl0gKj0gMC41O1xyXG4gICAgICAgICAgICAgICAgY29udGVudEl0ZW1bZGltZW5zaW9uXSA9IHNpYmxpbmdbZGltZW5zaW9uXTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm8gQ29udGVudEl0ZW0gY2FuIGRvY2sgd2l0aCBncm91bmRJdGVtLiAgSG93ZXZlciBTdGFjayBjYW4gaGF2ZSBhIEdyb3VuZEl0ZW0gcGFyZW50IGFuZCBTdGFjayByZXF1aXJlcyB0aGF0XHJcbiAgICAvLyBpdHMgcGFyZW50IGltcGxlbWVudCBkb2NrKCkgZnVuY3Rpb24uICBBY2NvcmRpbmdseSB0aGlzIGZ1bmN0aW9uIGlzIGltcGxlbWVudGVkIGJ1dCB0aHJvd3MgYW4gZXhjZXB0aW9uIGFzIGl0IHNob3VsZFxyXG4gICAgLy8gbmV2ZXIgYmUgY2FsbGVkXHJcbiAgICBkb2NrKCk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignR0lEODc3MzEnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBObyBDb250ZW50SXRlbSBjYW4gZG9jayB3aXRoIGdyb3VuZEl0ZW0uICBIb3dldmVyIFN0YWNrIGNhbiBoYXZlIGEgR3JvdW5kSXRlbSBwYXJlbnQgYW5kIFN0YWNrIHJlcXVpcmVzIHRoYXRcclxuICAgIC8vIGl0cyBwYXJlbnQgaW1wbGVtZW50IHZhbGlkYXRlRG9ja2luZygpIGZ1bmN0aW9uLiAgQWNjb3JkaW5nbHkgdGhpcyBmdW5jdGlvbiBpcyBpbXBsZW1lbnRlZCBidXQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBhcyBpdCBzaG91bGRcclxuICAgIC8vIG5ldmVyIGJlIGNhbGxlZFxyXG4gICAgdmFsaWRhdGVEb2NraW5nKCk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignR0lWRDg3NzMyJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWxsQ29udGVudEl0ZW1zKCk6IENvbnRlbnRJdGVtW10ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogQ29udGVudEl0ZW1bXSA9IFt0aGlzXTtcclxuICAgICAgICB0aGlzLmRlZXBHZXRBbGxDb250ZW50SXRlbXModGhpcy5jb250ZW50SXRlbXMsIHJlc3VsdCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb25maWdNYXhpbWlzZWRJdGVtcygpOiBDb250ZW50SXRlbVtdIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IENvbnRlbnRJdGVtW10gPSBbXTtcclxuICAgICAgICB0aGlzLmRlZXBGaWx0ZXJDb250ZW50SXRlbXModGhpcy5jb250ZW50SXRlbXMsIHJlc3VsdCwgKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaWYgKENvbnRlbnRJdGVtLmlzU3RhY2soaXRlbSkgJiYgaXRlbS5pbml0aWFsV2FudE1heGltaXNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChDb250ZW50SXRlbS5pc0NvbXBvbmVudEl0ZW0oaXRlbSkgJiYgaXRlbS5pbml0aWFsV2FudE1heGltaXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldEl0ZW1zQnlQb3BJblBhcmVudElkKHBvcEluUGFyZW50SWQ6IHN0cmluZyk6IENvbnRlbnRJdGVtW10ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogQ29udGVudEl0ZW1bXSA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGVlcEZpbHRlckNvbnRlbnRJdGVtcyh0aGlzLmNvbnRlbnRJdGVtcywgcmVzdWx0LCAoaXRlbSkgPT4gaXRlbS5wb3BJblBhcmVudElkcy5pbmNsdWRlcyhwb3BJblBhcmVudElkKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICB0b0NvbmZpZygpOiBSZXNvbHZlZEl0ZW1Db25maWcge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGdlbmVyYXRlIEdyb3VuZEl0ZW0gY29uZmlnJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgc2V0QWN0aXZlQ29tcG9uZW50SXRlbShpdGVtOiBDb21wb25lbnRJdGVtLCBmb2N1czogYm9vbGVhbiwgc3VwcHJlc3NGb2N1c0V2ZW50OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgLy8gb25seSBhcHBsaWNhYmxlIGlmIENvbXBvbmVudEl0ZW0gaXMgcm9vdCBhbmQgdGhlbiBpdCBhbHdheXMgaGFzIGZvY3VzXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVOb2RlU2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGdldEVsZW1lbnRXaWR0aEFuZEhlaWdodCh0aGlzLl9jb250YWluZXJFbGVtZW50KTtcclxuXHJcbiAgICAgICAgc2V0RWxlbWVudFdpZHRoKHRoaXMuZWxlbWVudCwgd2lkdGgpO1xyXG4gICAgICAgIHNldEVsZW1lbnRIZWlnaHQodGhpcy5lbGVtZW50LCBoZWlnaHQpO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIEdyb3VuZEl0ZW0gY2FuIGJlIGVtcHR5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgc2V0RWxlbWVudFdpZHRoKHRoaXMuY29udGVudEl0ZW1zWzBdLmVsZW1lbnQsIHdpZHRoKTtcclxuICAgICAgICAgICAgc2V0RWxlbWVudEhlaWdodCh0aGlzLmNvbnRlbnRJdGVtc1swXS5lbGVtZW50LCBoZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRlZXBHZXRBbGxDb250ZW50SXRlbXMoY29udGVudDogcmVhZG9ubHkgQ29udGVudEl0ZW1bXSwgcmVzdWx0OiBDb250ZW50SXRlbVtdKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gY29udGVudFtpXTtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goY29udGVudEl0ZW0pO1xyXG4gICAgICAgICAgICB0aGlzLmRlZXBHZXRBbGxDb250ZW50SXRlbXMoY29udGVudEl0ZW0uY29udGVudEl0ZW1zLCByZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRlZXBGaWx0ZXJDb250ZW50SXRlbXMoY29udGVudDogcmVhZG9ubHkgQ29udGVudEl0ZW1bXSwgcmVzdWx0OiBDb250ZW50SXRlbVtdLFxyXG4gICAgICAgIGNoZWNrQWNjZXB0RnRuOiAoKHRoaXM6IHZvaWQsIGl0ZW06IENvbnRlbnRJdGVtKSA9PiBib29sZWFuKVxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gY29udGVudFtpXTtcclxuICAgICAgICAgICAgaWYgKGNoZWNrQWNjZXB0RnRuKGNvbnRlbnRJdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY29udGVudEl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZGVlcEZpbHRlckNvbnRlbnRJdGVtcyhjb250ZW50SXRlbS5jb250ZW50SXRlbXMsIHJlc3VsdCwgY2hlY2tBY2NlcHRGdG4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBHcm91bmRJdGVtIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQXJlYSBleHRlbmRzIENvbnRlbnRJdGVtLkFyZWEge1xyXG4gICAgICAgIHNpZGU6IGtleW9mIHR5cGVvZiBBcmVhLlNpZGU7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBBcmVhIHtcclxuICAgICAgICBleHBvcnQgY29uc3QgZW51bSBTaWRlIHtcclxuICAgICAgICAgICAgeTIsXHJcbiAgICAgICAgICAgIHgyLFxyXG4gICAgICAgICAgICB5MSxcclxuICAgICAgICAgICAgeDEsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnQgdHlwZSBTaWRlcyA9IHsgW3NpZGUgaW4ga2V5b2YgdHlwZW9mIFNpZGVdOiBrZXlvZiB0eXBlb2YgU2lkZTsgfVxyXG5cclxuICAgICAgICBleHBvcnQgY29uc3Qgb3Bwb3NpdGVTaWRlczogU2lkZXMgPSB7XHJcbiAgICAgICAgICAgIHkyOiAneTEnLFxyXG4gICAgICAgICAgICB4MjogJ3gxJyxcclxuICAgICAgICAgICAgeTE6ICd5MicsXHJcbiAgICAgICAgICAgIHgxOiAneDInLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoZG9jdW1lbnQ6IERvY3VtZW50KTogSFRNTERpdkVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Hb2xkZW5MYXlvdXQpO1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkl0ZW0pO1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlJvb3QpO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbXBvbmVudEl0ZW1Db25maWcsIEl0ZW1Db25maWcsIFJvd09yQ29sdW1uSXRlbUNvbmZpZywgU3RhY2tJdGVtQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZydcclxuaW1wb3J0IHsgUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcsIFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL3Jlc29sdmVkLWNvbmZpZydcclxuaW1wb3J0IHsgU3BsaXR0ZXIgfSBmcm9tICcuLi9jb250cm9scy9zcGxpdHRlcidcclxuaW1wb3J0IHsgQXNzZXJ0RXJyb3IsIFVuZXhwZWN0ZWROdWxsRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InXHJcbmltcG9ydCB7IExheW91dE1hbmFnZXIgfSBmcm9tICcuLi9sYXlvdXQtbWFuYWdlcidcclxuaW1wb3J0IHsgRG9tQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvZG9tLWNvbnN0YW50cydcclxuaW1wb3J0IHsgSXRlbVR5cGUsIEpzb25WYWx1ZSwgV2lkdGhPckhlaWdodFByb3BlcnR5TmFtZSB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJ1xyXG5pbXBvcnQge1xyXG4gICAgZ2V0RWxlbWVudEhlaWdodCxcclxuICAgIGdldEVsZW1lbnRXaWR0aCxcclxuICAgIGdldEVsZW1lbnRXaWR0aEFuZEhlaWdodCxcclxuICAgIG51bWJlclRvUGl4ZWxzLFxyXG4gICAgcGl4ZWxzVG9OdW1iZXIsXHJcbiAgICBzZXRFbGVtZW50SGVpZ2h0LFxyXG4gICAgc2V0RWxlbWVudFdpZHRoXHJcbn0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzXCJcclxuaW1wb3J0IHsgQ29tcG9uZW50SXRlbSB9IGZyb20gJy4vY29tcG9uZW50LWl0ZW0nXHJcbmltcG9ydCB7IENvbnRlbnRJdGVtIH0gZnJvbSAnLi9jb250ZW50LWl0ZW0nXHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgY2xhc3MgUm93T3JDb2x1bW4gZXh0ZW5kcyBDb250ZW50SXRlbSB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jaGlsZEVsZW1lbnRDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnVHlwZTogJ3JvdycgfCAnY29sdW1uJztcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2lzQ29sdW1uOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfc3BsaXR0ZXJTaXplOiBudW1iZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zcGxpdHRlckdyYWJTaXplOiBudW1iZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kaW1lbnNpb246IFdpZHRoT3JIZWlnaHRQcm9wZXJ0eU5hbWU7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zcGxpdHRlcjogU3BsaXR0ZXJbXSA9IFtdO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfc3BsaXR0ZXJQb3NpdGlvbjogbnVtYmVyIHwgbnVsbDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3NwbGl0dGVyTWluUG9zaXRpb246IG51bWJlciB8IG51bGw7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9zcGxpdHRlck1heFBvc2l0aW9uOiBudW1iZXIgfCBudWxsO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKGlzQ29sdW1uOiBib29sZWFuLCBsYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyLCBjb25maWc6IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9yb3dPckNvbHVtblBhcmVudDogQ29udGVudEl0ZW1cclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKGxheW91dE1hbmFnZXIsIGNvbmZpZywgX3Jvd09yQ29sdW1uUGFyZW50LCBSb3dPckNvbHVtbi5jcmVhdGVFbGVtZW50KGRvY3VtZW50LCBpc0NvbHVtbikpO1xyXG5cclxuICAgICAgICB0aGlzLmlzUm93ID0gIWlzQ29sdW1uO1xyXG4gICAgICAgIHRoaXMuaXNDb2x1bW4gPSBpc0NvbHVtbjtcclxuXHJcbiAgICAgICAgdGhpcy5fY2hpbGRFbGVtZW50Q29udGFpbmVyID0gdGhpcy5lbGVtZW50O1xyXG4gICAgICAgIHRoaXMuX3NwbGl0dGVyU2l6ZSA9IGxheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLmRpbWVuc2lvbnMuYm9yZGVyV2lkdGg7XHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJHcmFiU2l6ZSA9IGxheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLmRpbWVuc2lvbnMuYm9yZGVyR3JhYldpZHRoO1xyXG4gICAgICAgIHRoaXMuX2lzQ29sdW1uID0gaXNDb2x1bW47XHJcbiAgICAgICAgdGhpcy5fZGltZW5zaW9uID0gaXNDb2x1bW4gPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJQb3NpdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJNaW5Qb3NpdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJNYXhQb3NpdGlvbiA9IG51bGw7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoY29uZmlnLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5yb3c6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnVHlwZSA9IGNvbmZpZy50eXBlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ1JPQ0NDVDAwOTI1Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5ld0NvbXBvbmVudChjb21wb25lbnRUeXBlOiBKc29uVmFsdWUsIGNvbXBvbmVudFN0YXRlPzogSnNvblZhbHVlLCB0aXRsZT86IHN0cmluZywgaW5kZXg/OiBudW1iZXIpOiBDb21wb25lbnRJdGVtIHtcclxuICAgICAgICBjb25zdCBpdGVtQ29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnY29tcG9uZW50JyxcclxuICAgICAgICAgICAgY29tcG9uZW50VHlwZSxcclxuICAgICAgICAgICAgY29tcG9uZW50U3RhdGUsXHJcbiAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmV3SXRlbShpdGVtQ29uZmlnLCBpbmRleCkgYXMgQ29tcG9uZW50SXRlbTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRDb21wb25lbnQoY29tcG9uZW50VHlwZTogSnNvblZhbHVlLCBjb21wb25lbnRTdGF0ZT86IEpzb25WYWx1ZSwgdGl0bGU/OiBzdHJpbmcsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBpdGVtQ29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnY29tcG9uZW50JyxcclxuICAgICAgICAgICAgY29tcG9uZW50VHlwZSxcclxuICAgICAgICAgICAgY29tcG9uZW50U3RhdGUsXHJcbiAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkSXRlbShpdGVtQ29uZmlnLCBpbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3SXRlbShpdGVtQ29uZmlnOiBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnLCAgaW5kZXg/OiBudW1iZXIpOiBDb250ZW50SXRlbSB7XHJcbiAgICAgICAgaW5kZXggPSB0aGlzLmFkZEl0ZW0oaXRlbUNvbmZpZywgaW5kZXgpO1xyXG4gICAgICAgIGNvbnN0IGNyZWF0ZWRJdGVtID0gdGhpcy5jb250ZW50SXRlbXNbaW5kZXhdO1xyXG5cclxuICAgICAgICBpZiAoQ29udGVudEl0ZW0uaXNTdGFjayhjcmVhdGVkSXRlbSkgJiYgKEl0ZW1Db25maWcuaXNDb21wb25lbnQoaXRlbUNvbmZpZykpKSB7XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZWRJdGVtIGlzIGEgU3RhY2sgd2hpY2ggd2FzIGNyZWF0ZWQgdG8gaG9sZCB3YW50ZWQgY29tcG9uZW50LiAgUmV0dXJuIGNvbXBvbmVudFxyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlZEl0ZW0uY29udGVudEl0ZW1zWzBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVkSXRlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWRkSXRlbShpdGVtQ29uZmlnOiBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnLFxyXG4gICAgICAgIGluZGV4PzogbnVtYmVyXHJcbiAgICApOiBudW1iZXIge1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5jaGVja01pbmltaXNlTWF4aW1pc2VkU3RhY2soKTtcclxuICAgICAgICBjb25zdCByZXNvbHZlZEl0ZW1Db25maWcgPSBJdGVtQ29uZmlnLnJlc29sdmUoaXRlbUNvbmZpZyk7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSB0aGlzLmxheW91dE1hbmFnZXIuY3JlYXRlQW5kSW5pdENvbnRlbnRJdGVtKHJlc29sdmVkSXRlbUNvbmZpZywgdGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkQ2hpbGQoY29udGVudEl0ZW0sIGluZGV4LCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBuZXcgY29udGVudEl0ZW0gdG8gdGhlIFJvdyBvciBDb2x1bW5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29udGVudEl0ZW0gLVxyXG4gICAgICogQHBhcmFtIGluZGV4IC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBuZXcgaXRlbSB3aXRoaW4gdGhlIFJvdyBvciBDb2x1bW4uXHJcbiAgICAgKiAgICAgICAgICAgICAgICBJZiBubyBpbmRleCBpcyBwcm92aWRlZCB0aGUgaXRlbSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbmRcclxuICAgICAqIEBwYXJhbSBzdXNwZW5kUmVzaXplIC0gSWYgdHJ1ZSB0aGUgaXRlbXMgd29uJ3QgYmUgcmVzaXplZC4gVGhpcyB3aWxsIGxlYXZlIHRoZSBpdGVtIGluXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIGFuIGluY29uc2lzdGVudCBzdGF0ZSBhbmQgaXMgb25seSBpbnRlbmRlZCB0byBiZSB1c2VkIGlmIG11bHRpcGxlXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIG5lZWQgdG8gYmUgYWRkZWQgaW4gb25lIGdvIGFuZCByZXNpemUgaXMgY2FsbGVkIGFmdGVyd2FyZHNcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBvdmVycmlkZSBhZGRDaGlsZChjb250ZW50SXRlbTogQ29udGVudEl0ZW0sIGluZGV4PzogbnVtYmVyLCBzdXNwZW5kUmVzaXplPzogYm9vbGVhbik6IG51bWJlciB7XHJcblxyXG4gICAgICAgIC8vIGNvbnRlbnRJdGVtID0gdGhpcy5sYXlvdXRNYW5hZ2VyLl8kbm9ybWFsaXplQ29udGVudEl0ZW0oY29udGVudEl0ZW0sIHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0dGVyRWxlbWVudCA9IHRoaXMuY3JlYXRlU3BsaXR0ZXIoTWF0aC5tYXgoMCwgaW5kZXggLSAxKSkuZWxlbWVudDtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudEl0ZW1zW2luZGV4IC0gMV0uZWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgc3BsaXR0ZXJFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHNwbGl0dGVyRWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgY29udGVudEl0ZW0uZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRJdGVtc1swXS5lbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlYmVnaW4nLCBzcGxpdHRlckVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgc3BsaXR0ZXJFbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudCgnYmVmb3JlYmVnaW4nLCBjb250ZW50SXRlbS5lbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lci5hcHBlbmRDaGlsZChjb250ZW50SXRlbS5lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1cGVyLmFkZENoaWxkKGNvbnRlbnRJdGVtLCBpbmRleCk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld0l0ZW1TaXplID0gKDEgLyB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGgpICogMTAwO1xyXG5cclxuICAgICAgICBpZiAoc3VzcGVuZFJlc2l6ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRCYXNlQnViYmxpbmdFdmVudCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudEl0ZW1zW2ldID09PSBjb250ZW50SXRlbSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudEl0ZW1bdGhpcy5fZGltZW5zaW9uXSA9IG5ld0l0ZW1TaXplO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbVNpemUgPSB0aGlzLmNvbnRlbnRJdGVtc1tpXVt0aGlzLl9kaW1lbnNpb25dICo9ICgxMDAgLSBuZXdJdGVtU2l6ZSkgLyAxMDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRJdGVtc1tpXVt0aGlzLl9kaW1lbnNpb25dID0gaXRlbVNpemU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgIHRoaXMuZW1pdEJhc2VCdWJibGluZ0V2ZW50KCdzdGF0ZUNoYW5nZWQnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhIGNoaWxkIG9mIHRoaXMgZWxlbWVudFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjb250ZW50SXRlbSAtXHJcbiAgICAgKiBAcGFyYW0ga2VlcENoaWxkIC0gSWYgdHJ1ZSB0aGUgY2hpbGQgd2lsbCBiZSByZW1vdmVkLCBidXQgbm90IGRlc3Ryb3llZFxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgb3ZlcnJpZGUgcmVtb3ZlQ2hpbGQoY29udGVudEl0ZW06IENvbnRlbnRJdGVtLCBrZWVwQ2hpbGQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuY29udGVudEl0ZW1zLmluZGV4T2YoY29udGVudEl0ZW0pO1xyXG4gICAgICAgIGNvbnN0IHNwbGl0dGVySW5kZXggPSBNYXRoLm1heChpbmRleCAtIDEsIDApO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCByZW1vdmUgY2hpbGQuIENvbnRlbnRJdGVtIGlzIG5vdCBjaGlsZCBvZiB0aGlzIFJvdyBvciBDb2x1bW4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZSB0aGUgc3BsaXR0ZXIgYmVmb3JlIHRoZSBpdGVtIG9yIGFmdGVyIGlmIHRoZSBpdGVtIGhhcHBlbnNcclxuICAgICAgICAgKiB0byBiZSB0aGUgZmlyc3QgaW4gdGhlIHJvdy9jb2x1bW5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5fc3BsaXR0ZXJbc3BsaXR0ZXJJbmRleF0pIHtcclxuICAgICAgICAgICAgdGhpcy5fc3BsaXR0ZXJbc3BsaXR0ZXJJbmRleF0uZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9zcGxpdHRlci5zcGxpY2Uoc3BsaXR0ZXJJbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5yZW1vdmVDaGlsZChjb250ZW50SXRlbSwga2VlcENoaWxkKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA9PT0gMSAmJiB0aGlzLmlzQ2xvc2FibGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRJdGVtID0gdGhpcy5jb250ZW50SXRlbXNbMF07XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jvd09yQ29sdW1uUGFyZW50LnJlcGxhY2VDaGlsZCh0aGlzLCBjaGlsZEl0ZW0sIHRydWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRCYXNlQnViYmxpbmdFdmVudCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVwbGFjZXMgYSBjaGlsZCBvZiB0aGlzIFJvdyBvciBDb2x1bW4gd2l0aCBhbm90aGVyIGNvbnRlbnRJdGVtXHJcbiAgICAgKi9cclxuICAgIG92ZXJyaWRlIHJlcGxhY2VDaGlsZChvbGRDaGlsZDogQ29udGVudEl0ZW0sIG5ld0NoaWxkOiBDb250ZW50SXRlbSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNpemUgPSBvbGRDaGlsZFt0aGlzLl9kaW1lbnNpb25dO1xyXG4gICAgICAgIHN1cGVyLnJlcGxhY2VDaGlsZChvbGRDaGlsZCwgbmV3Q2hpbGQpO1xyXG4gICAgICAgIG5ld0NoaWxkW3RoaXMuX2RpbWVuc2lvbl0gPSBzaXplO1xyXG4gICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgIHRoaXMuZW1pdEJhc2VCdWJibGluZ0V2ZW50KCdzdGF0ZUNoYW5nZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuZXZlciB0aGUgZGltZW5zaW9ucyBvZiB0aGlzIGl0ZW0gb3Igb25lIG9mIGl0cyBwYXJlbnRzIGNoYW5nZVxyXG4gICAgICovXHJcbiAgICBvdmVycmlkZSB1cGRhdGVTaXplKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5iZWdpblZpcnR1YWxTaXplZENvbnRhaW5lckFkZGluZygpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTm9kZVNpemUoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDb250ZW50SXRlbXNTaXplKCk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmVuZFZpcnR1YWxTaXplZENvbnRhaW5lckFkZGluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEludm9rZWQgcmVjdXJzaXZlbHkgYnkgdGhlIGxheW91dCBtYW5hZ2VyLiBDb250ZW50SXRlbS5pbml0IGFwcGVuZHNcclxuICAgICAqIHRoZSBjb250ZW50SXRlbSdzIERPTSBlbGVtZW50cyB0byB0aGUgY29udGFpbmVyLCBSb3dPckNvbHVtbiBpbml0IGFkZHMgc3BsaXR0ZXJzXHJcbiAgICAgKiBpbiBiZXR3ZWVuIHRoZW1cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBvdmVycmlkZSBpbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGlzZWQgPT09IHRydWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVOb2RlU2l6ZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRJdGVtc1tpXS5lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1cGVyLmluaXQoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50SXRlbXNbaV0uZWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgdGhpcy5jcmVhdGVTcGxpdHRlcihpKS5lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdENvbnRlbnRJdGVtcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvQ29uZmlnKCk6IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUgYXMgJ3JvdycgfCAnY29sdW1uJyxcclxuICAgICAgICAgICAgY29udGVudDogdGhpcy5jYWxjdWxhdGVDb25maWdDb250ZW50KCkgYXMgKFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnIHwgUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcpW10sXHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxyXG4gICAgICAgICAgICBtaW5XaWR0aDogdGhpcy5taW5XaWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCxcclxuICAgICAgICAgICAgbWluSGVpZ2h0OiB0aGlzLm1pbkhlaWdodCxcclxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgICAgICAgIGlzQ2xvc2FibGU6IHRoaXMuaXNDbG9zYWJsZSxcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgc2V0UGFyZW50KHBhcmVudDogQ29udGVudEl0ZW0pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9yb3dPckNvbHVtblBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICBzdXBlci5zZXRQYXJlbnQocGFyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHVwZGF0ZU5vZGVTaXplKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlUmVsYXRpdmVTaXplcygpO1xyXG4gICAgICAgICAgICB0aGlzLnNldEFic29sdXRlU2l6ZXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ3N0YXRlQ2hhbmdlZCcpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgncmVzaXplJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUdXJucyB0aGUgcmVsYXRpdmUgc2l6ZXMgY2FsY3VsYXRlZCBieSBjYWxjdWxhdGVSZWxhdGl2ZVNpemVzIGludG9cclxuICAgICAqIGFic29sdXRlIHBpeGVsIHZhbHVlcyBhbmQgYXBwbGllcyB0aGVtIHRvIHRoZSBjaGlsZHJlbidzIERPTSBlbGVtZW50c1xyXG4gICAgICpcclxuICAgICAqIEFzc2lnbnMgYWRkaXRpb25hbCBwaXhlbHMgdG8gY291bnRlcmFjdCBNYXRoLmZsb29yXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzZXRBYnNvbHV0ZVNpemVzKCkge1xyXG4gICAgICAgIGNvbnN0IHNpemVEYXRhID0gdGhpcy5jYWxjdWxhdGVBYnNvbHV0ZVNpemVzKCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHNpemVEYXRhLmFkZGl0aW9uYWxQaXhlbCAtIGkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzaXplRGF0YS5pdGVtU2l6ZXNbaV0rKztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzQ29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRFbGVtZW50V2lkdGgodGhpcy5jb250ZW50SXRlbXNbaV0uZWxlbWVudCwgc2l6ZURhdGEudG90YWxXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICBzZXRFbGVtZW50SGVpZ2h0KHRoaXMuY29udGVudEl0ZW1zW2ldLmVsZW1lbnQsIHNpemVEYXRhLml0ZW1TaXplc1tpXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZXRFbGVtZW50V2lkdGgodGhpcy5jb250ZW50SXRlbXNbaV0uZWxlbWVudCwgc2l6ZURhdGEuaXRlbVNpemVzW2ldKTtcclxuICAgICAgICAgICAgICAgIHNldEVsZW1lbnRIZWlnaHQodGhpcy5jb250ZW50SXRlbXNbaV0uZWxlbWVudCwgc2l6ZURhdGEudG90YWxIZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgYWJzb2x1dGUgc2l6ZXMgb2YgYWxsIG9mIHRoZSBjaGlsZHJlbiBvZiB0aGlzIEl0ZW0uXHJcbiAgICAgKiBAcmV0dXJucyBTZXQgd2l0aCBhYnNvbHV0ZSBzaXplcyBhbmQgYWRkaXRpb25hbCBwaXhlbHMuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVBYnNvbHV0ZVNpemVzKCkge1xyXG4gICAgICAgIGNvbnN0IHRvdGFsU3BsaXR0ZXJTaXplID0gKHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCAtIDEpICogdGhpcy5fc3BsaXR0ZXJTaXplO1xyXG4gICAgICAgIGxldCB7IHdpZHRoOiB0b3RhbFdpZHRoLCBoZWlnaHQ6IHRvdGFsSGVpZ2h0IH0gPSBnZXRFbGVtZW50V2lkdGhBbmRIZWlnaHQodGhpcy5lbGVtZW50KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQ29sdW1uKSB7XHJcbiAgICAgICAgICAgIHRvdGFsSGVpZ2h0IC09IHRvdGFsU3BsaXR0ZXJTaXplO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRvdGFsV2lkdGggLT0gdG90YWxTcGxpdHRlclNpemU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdG90YWxBc3NpZ25lZCA9IDA7XHJcbiAgICAgICAgY29uc3QgaXRlbVNpemVzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGl0ZW1TaXplOiBudW1iZXI7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0NvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgaXRlbVNpemUgPSBNYXRoLmZsb29yKHRvdGFsSGVpZ2h0ICogKHRoaXMuY29udGVudEl0ZW1zW2ldLmhlaWdodCAvIDEwMCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaXRlbVNpemUgPSBNYXRoLmZsb29yKHRvdGFsV2lkdGggKiAodGhpcy5jb250ZW50SXRlbXNbaV0ud2lkdGggLyAxMDApKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG90YWxBc3NpZ25lZCArPSBpdGVtU2l6ZTtcclxuICAgICAgICAgICAgaXRlbVNpemVzLnB1c2goaXRlbVNpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYWRkaXRpb25hbFBpeGVsID0gTWF0aC5mbG9vcigodGhpcy5faXNDb2x1bW4gPyB0b3RhbEhlaWdodCA6IHRvdGFsV2lkdGgpIC0gdG90YWxBc3NpZ25lZCk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGl0ZW1TaXplczogaXRlbVNpemVzLFxyXG4gICAgICAgICAgICBhZGRpdGlvbmFsUGl4ZWw6IGFkZGl0aW9uYWxQaXhlbCxcclxuICAgICAgICAgICAgdG90YWxXaWR0aDogdG90YWxXaWR0aCxcclxuICAgICAgICAgICAgdG90YWxIZWlnaHQ6IHRvdGFsSGVpZ2h0XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIHJlbGF0aXZlIHNpemVzIG9mIGFsbCBjaGlsZHJlbiBvZiB0aGlzIEl0ZW0uIFRoZSBsb2dpY1xyXG4gICAgICogaXMgYXMgZm9sbG93czpcclxuICAgICAqXHJcbiAgICAgKiAtIEFkZCB1cCB0aGUgdG90YWwgc2l6ZSBvZiBhbGwgaXRlbXMgdGhhdCBoYXZlIGEgY29uZmlndXJlZCBzaXplXHJcbiAgICAgKlxyXG4gICAgICogLSBJZiB0aGUgdG90YWwgPT0gMTAwIChjaGVjayBmb3IgZmxvYXRpbmcgcG9pbnQgZXJyb3JzKVxyXG4gICAgICogICAgICAgIEV4Y2VsbGVudCwgam9iIGRvbmVcclxuICAgICAqXHJcbiAgICAgKiAtIElmIHRoZSB0b3RhbCBpcyBcXD4gMTAwLFxyXG4gICAgICogICAgICAgIHNldCB0aGUgc2l6ZSBvZiBpdGVtcyB3aXRob3V0IHNldCBkaW1lbnNpb25zIHRvIDEvMyBhbmQgYWRkIHRoaXMgdG8gdGhlIHRvdGFsXHJcbiAgICAgKiAgICAgICAgc2V0IHRoZSBzaXplIG9mZiBhbGwgaXRlbXMgc28gdGhhdCB0aGUgdG90YWwgaXMgaHVuZHJlZCByZWxhdGl2ZSB0byB0aGVpciBvcmlnaW5hbCBzaXplXHJcbiAgICAgKlxyXG4gICAgICogLSBJZiB0aGUgdG90YWwgaXMgXFw8IDEwMFxyXG4gICAgICogICAgICAgIElmIHRoZXJlIGFyZSBpdGVtcyB3aXRob3V0IHNldCBkaW1lbnNpb25zLCBkaXN0cmlidXRlIHRoZSByZW1haW5kZXIgdG8gMTAwIGV2ZW5seSBiZXR3ZWVuIHRoZW1cclxuICAgICAqICAgICAgICBJZiB0aGVyZSBhcmUgbm8gaXRlbXMgd2l0aG91dCBzZXQgZGltZW5zaW9ucywgaW5jcmVhc2UgYWxsIGl0ZW1zIHNpemVzIHJlbGF0aXZlIHRvXHJcbiAgICAgKiAgICAgICAgdGhlaXIgb3JpZ2luYWwgc2l6ZSBzbyB0aGF0IHRoZXkgYWRkIHVwIHRvIDEwMFxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZVJlbGF0aXZlU2l6ZXMoKSB7XHJcblxyXG4gICAgICAgIGxldCB0b3RhbCA9IDA7XHJcbiAgICAgICAgY29uc3QgaXRlbXNXaXRob3V0U2V0RGltZW5zaW9uOiBDb250ZW50SXRlbVtdID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudEl0ZW1zW2ldW3RoaXMuX2RpbWVuc2lvbl0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdG90YWwgKz0gdGhpcy5jb250ZW50SXRlbXNbaV1bdGhpcy5fZGltZW5zaW9uXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zV2l0aG91dFNldERpbWVuc2lvbi5wdXNoKHRoaXMuY29udGVudEl0ZW1zW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRXZlcnl0aGluZyBhZGRzIHVwIHRvIGh1bmRyZWQsIGFsbCBnb29kIDotKVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChNYXRoLnJvdW5kKHRvdGFsKSA9PT0gMTAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzcGVjdE1pbkl0ZW1XaWR0aCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbGxvY2F0ZSB0aGUgcmVtYWluaW5nIHNpemUgdG8gdGhlIGl0ZW1zIHdpdGhvdXQgYSBzZXQgZGltZW5zaW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKE1hdGgucm91bmQodG90YWwpIDwgMTAwICYmIGl0ZW1zV2l0aG91dFNldERpbWVuc2lvbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXNXaXRob3V0U2V0RGltZW5zaW9uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1dpdGhvdXRTZXREaW1lbnNpb25baV1bdGhpcy5fZGltZW5zaW9uXSA9ICgxMDAgLSB0b3RhbCkgLyBpdGVtc1dpdGhvdXRTZXREaW1lbnNpb24ubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucmVzcGVjdE1pbkl0ZW1XaWR0aCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiB0aGUgdG90YWwgaXMgPiAxMDAsIGJ1dCB0aGVyZSBhcmUgYWxzbyBpdGVtcyB3aXRob3V0IGEgc2V0IGRpbWVuc2lvbiBsZWZ0LCBhc3NpbmcgNTBcclxuICAgICAgICAgKiBhcyB0aGVpciBkaW1lbnNpb24gYW5kIGFkZCBpdCB0byB0aGUgdG90YWxcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIFRoaXMgd2lsbCBiZSByZXNldCBpbiB0aGUgbmV4dCBzdGVwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKE1hdGgucm91bmQodG90YWwpID4gMTAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXNXaXRob3V0U2V0RGltZW5zaW9uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1dpdGhvdXRTZXREaW1lbnNpb25baV1bdGhpcy5fZGltZW5zaW9uXSA9IDUwO1xyXG4gICAgICAgICAgICAgICAgdG90YWwgKz0gNTA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldCBldmVyeSBpdGVtcyBzaXplIHJlbGF0aXZlIHRvIDEwMCByZWxhdGl2ZSB0byBpdHMgc2l6ZSB0byB0b3RhbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50SXRlbXNbaV1bdGhpcy5fZGltZW5zaW9uXSA9ICh0aGlzLmNvbnRlbnRJdGVtc1tpXVt0aGlzLl9kaW1lbnNpb25dIC8gdG90YWwpICogMTAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZXNwZWN0TWluSXRlbVdpZHRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGp1c3RzIHRoZSBjb2x1bW4gd2lkdGhzIHRvIHJlc3BlY3QgdGhlIGRpbWVuc2lvbnMgbWluSXRlbVdpZHRoIGlmIHNldC5cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlc3BlY3RNaW5JdGVtV2lkdGgoKSB7XHJcbiAgICAgICAgaW50ZXJmYWNlIEVudHJ5IHtcclxuICAgICAgICAgICAgd2lkdGg6IG51bWJlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1pbkl0ZW1XaWR0aCA9IHRoaXMubGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuZGltZW5zaW9ucy5taW5JdGVtV2lkdGg7XHJcbiAgICAgICAgbGV0IHRvdGFsT3Zlck1pbiA9IDA7XHJcbiAgICAgICAgbGV0IHRvdGFsVW5kZXJNaW4gPSAwO1xyXG4gICAgICAgIGNvbnN0IGVudHJpZXNPdmVyTWluOiBFbnRyeVtdID0gW107XHJcbiAgICAgICAgY29uc3QgYWxsRW50cmllczogRW50cnlbXSA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNDb2x1bW4gfHwgIW1pbkl0ZW1XaWR0aCB8fCB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzaXplRGF0YSA9IHRoaXMuY2FsY3VsYXRlQWJzb2x1dGVTaXplcygpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBGaWd1cmUgb3V0IGhvdyBtdWNoIHdlIGFyZSB1bmRlciB0aGUgbWluIGl0ZW0gc2l6ZSB0b3RhbCBhbmQgaG93IG11Y2ggcm9vbSB3ZSBoYXZlIHRvIHVzZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemVEYXRhLml0ZW1TaXplcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtU2l6ZSA9IHNpemVEYXRhLml0ZW1TaXplc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGxldCBlbnRyeTogRW50cnk7XHJcbiAgICAgICAgICAgIGlmIChpdGVtU2l6ZSA8IG1pbkl0ZW1XaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgdG90YWxVbmRlck1pbiArPSBtaW5JdGVtV2lkdGggLSBpdGVtU2l6ZTtcclxuICAgICAgICAgICAgICAgIGVudHJ5ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBtaW5JdGVtV2lkdGhcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdG90YWxPdmVyTWluICs9IGl0ZW1TaXplIC0gbWluSXRlbVdpZHRoO1xyXG4gICAgICAgICAgICAgICAgZW50cnkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW1TaXplXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZW50cmllc092ZXJNaW4ucHVzaChlbnRyeSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFsbEVudHJpZXMucHVzaChlbnRyeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiB0aGVyZSBpcyBub3RoaW5nIHVuZGVyIG1pbiwgb3IgdGhlcmUgaXMgbm90IGVub3VnaCBvdmVyIHRvIG1ha2UgdXAgdGhlIGRpZmZlcmVuY2UsIGRvIG5vdGhpbmcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKHRvdGFsVW5kZXJNaW4gPT09IDAgfHwgdG90YWxVbmRlck1pbiA+IHRvdGFsT3Zlck1pbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFdmVubHkgcmVkdWNlIGFsbCBjb2x1bW5zIHRoYXQgYXJlIG92ZXIgdGhlIG1pbiBpdGVtIHdpZHRoIHRvIG1ha2UgdXAgdGhlIGRpZmZlcmVuY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3QgcmVkdWNlUGVyY2VudCA9IHRvdGFsVW5kZXJNaW4gLyB0b3RhbE92ZXJNaW47XHJcbiAgICAgICAgbGV0IHJlbWFpbmluZ1dpZHRoID0gdG90YWxVbmRlck1pbjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVudHJpZXNPdmVyTWluLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc092ZXJNaW5baV07XHJcbiAgICAgICAgICAgIGNvbnN0IHJlZHVjZWRXaWR0aCA9IE1hdGgucm91bmQoKGVudHJ5LndpZHRoIC0gbWluSXRlbVdpZHRoKSAqIHJlZHVjZVBlcmNlbnQpO1xyXG4gICAgICAgICAgICByZW1haW5pbmdXaWR0aCAtPSByZWR1Y2VkV2lkdGg7XHJcbiAgICAgICAgICAgIGVudHJ5LndpZHRoIC09IHJlZHVjZWRXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRha2UgYW55dGhpbmcgcmVtYWluaW5nIGZyb20gdGhlIGxhc3QgaXRlbS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAocmVtYWluaW5nV2lkdGggIT09IDApIHtcclxuICAgICAgICAgICAgYWxsRW50cmllc1thbGxFbnRyaWVzLmxlbmd0aCAtIDFdLndpZHRoIC09IHJlbWFpbmluZ1dpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0IGV2ZXJ5IGl0ZW1zIHNpemUgcmVsYXRpdmUgdG8gMTAwIHJlbGF0aXZlIHRvIGl0cyBzaXplIHRvIHRvdGFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRJdGVtc1tpXS53aWR0aCA9IChhbGxFbnRyaWVzW2ldLndpZHRoIC8gc2l6ZURhdGEudG90YWxXaWR0aCkgKiAxMDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5zdGFudGlhdGVzIGEgbmV3IFNwbGl0dGVyLCBiaW5kcyBldmVudHMgdG8gaXQgYW5kIGFkZHNcclxuICAgICAqIGl0IHRvIHRoZSBhcnJheSBvZiBzcGxpdHRlcnMgYXQgdGhlIHBvc2l0aW9uIHNwZWNpZmllZCBhcyB0aGUgaW5kZXggYXJndW1lbnRcclxuICAgICAqXHJcbiAgICAgKiBXaGF0IGl0IGRvZXNuJ3QgZG8gdGhvdWdoIGlzIGFwcGVuZCB0aGUgc3BsaXR0ZXIgdG8gdGhlIERPTVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbmRleCAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgc3BsaXR0ZXJcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlU3BsaXR0ZXIoaW5kZXg6IG51bWJlcik6IFNwbGl0dGVyIHtcclxuICAgICAgICBjb25zdCBzcGxpdHRlciA9IG5ldyBTcGxpdHRlcih0aGlzLl9pc0NvbHVtbiwgdGhpcy5fc3BsaXR0ZXJTaXplLCB0aGlzLl9zcGxpdHRlckdyYWJTaXplKTtcclxuICAgICAgICBzcGxpdHRlci5vbignZHJhZycsIChvZmZzZXRYLCBvZmZzZXRZKSA9PiB0aGlzLm9uU3BsaXR0ZXJEcmFnKHNwbGl0dGVyLCBvZmZzZXRYLCBvZmZzZXRZKSk7XHJcbiAgICAgICAgc3BsaXR0ZXIub24oJ2RyYWdTdG9wJywgKCkgPT4gdGhpcy5vblNwbGl0dGVyRHJhZ1N0b3Aoc3BsaXR0ZXIpKTtcclxuICAgICAgICBzcGxpdHRlci5vbignZHJhZ1N0YXJ0JywgKCkgPT4gdGhpcy5vblNwbGl0dGVyRHJhZ1N0YXJ0KHNwbGl0dGVyKSk7XHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXIuc3BsaWNlKGluZGV4LCAwLCBzcGxpdHRlcik7XHJcbiAgICAgICAgcmV0dXJuIHNwbGl0dGVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9jYXRlcyB0aGUgaW5zdGFuY2Ugb2YgU3BsaXR0ZXIgaW4gdGhlIGFycmF5IG9mXHJcbiAgICAgKiByZWdpc3RlcmVkIHNwbGl0dGVycyBhbmQgcmV0dXJucyBhIG1hcCBjb250YWluaW5nIHRoZSBjb250ZW50SXRlbVxyXG4gICAgICogYmVmb3JlIGFuZCBhZnRlciB0aGUgc3BsaXR0ZXJzLCBib3RoIG9mIHdoaWNoIGFyZSBhZmZlY3RlZCBpZiB0aGVcclxuICAgICAqIHNwbGl0dGVyIGlzIG1vdmVkXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgQSBtYXAgb2YgY29udGVudEl0ZW1zIHRoYXQgdGhlIHNwbGl0dGVyIGFmZmVjdHNcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEl0ZW1zRm9yU3BsaXR0ZXIoc3BsaXR0ZXI6IFNwbGl0dGVyKSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9zcGxpdHRlci5pbmRleE9mKHNwbGl0dGVyKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmVmb3JlOiB0aGlzLmNvbnRlbnRJdGVtc1tpbmRleF0sXHJcbiAgICAgICAgICAgIGFmdGVyOiB0aGlzLmNvbnRlbnRJdGVtc1tpbmRleCArIDFdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG1pbmltdW0gZGltZW5zaW9ucyBmb3IgdGhlIGdpdmVuIGl0ZW0gY29uZmlndXJhdGlvbiBhcnJheVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0TWluaW11bURpbWVuc2lvbnMoYXJyOiByZWFkb25seSBDb250ZW50SXRlbVtdKSB7XHJcbiAgICAgICAgbGV0IG1pbldpZHRoID0gMDtcclxuICAgICAgICBsZXQgbWluSGVpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbWluV2lkdGggPSBNYXRoLm1heChhcnJbaV0ubWluV2lkdGggPz8gMCwgbWluV2lkdGgpO1xyXG4gICAgICAgICAgICBtaW5IZWlnaHQgPSBNYXRoLm1heChhcnJbaV0ubWluSGVpZ2h0ID8/IDAsIG1pbkhlaWdodCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBob3Jpem9udGFsOiBtaW5XaWR0aCxcclxuICAgICAgICAgICAgdmVydGljYWw6IG1pbkhlaWdodFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBzcGxpdHRlcidzIGRyYWdMaXN0ZW5lciBmaXJlcyBkcmFnU3RhcnQuIENhbGN1bGF0ZXMgdGhlIHNwbGl0dGVyc1xyXG4gICAgICogbW92ZW1lbnQgYXJlYSBvbmNlIChzbyB0aGF0IGl0IGRvZXNuJ3QgbmVlZCBjYWxjdWxhdGluZyBvbiBldmVyeSBtb3VzZW1vdmUgZXZlbnQpXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvblNwbGl0dGVyRHJhZ1N0YXJ0KHNwbGl0dGVyOiBTcGxpdHRlcikge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5nZXRJdGVtc0ZvclNwbGl0dGVyKHNwbGl0dGVyKTtcclxuICAgICAgICBjb25zdCBtaW5TaXplID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmxheW91dENvbmZpZy5kaW1lbnNpb25zW3RoaXMuX2lzQ29sdW1uID8gJ21pbkl0ZW1IZWlnaHQnIDogJ21pbkl0ZW1XaWR0aCddO1xyXG5cclxuICAgICAgICBjb25zdCBiZWZvcmVNaW5EaW0gPSB0aGlzLmdldE1pbmltdW1EaW1lbnNpb25zKGl0ZW1zLmJlZm9yZS5jb250ZW50SXRlbXMpO1xyXG4gICAgICAgIGNvbnN0IGJlZm9yZU1pblNpemUgPSB0aGlzLl9pc0NvbHVtbiA/IGJlZm9yZU1pbkRpbS52ZXJ0aWNhbCA6IGJlZm9yZU1pbkRpbS5ob3Jpem9udGFsO1xyXG5cclxuICAgICAgICBjb25zdCBhZnRlck1pbkRpbSA9IHRoaXMuZ2V0TWluaW11bURpbWVuc2lvbnMoaXRlbXMuYWZ0ZXIuY29udGVudEl0ZW1zKTtcclxuICAgICAgICBjb25zdCBhZnRlck1pblNpemUgPSB0aGlzLl9pc0NvbHVtbiA/IGFmdGVyTWluRGltLnZlcnRpY2FsIDogYWZ0ZXJNaW5EaW0uaG9yaXpvbnRhbDtcclxuXHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJQb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJNaW5Qb3NpdGlvbiA9IC0xICogKHBpeGVsc1RvTnVtYmVyKGl0ZW1zLmJlZm9yZS5lbGVtZW50LnN0eWxlW3RoaXMuX2RpbWVuc2lvbl0pIC0gKGJlZm9yZU1pblNpemUgfHwgbWluU2l6ZSkpO1xyXG4gICAgICAgIHRoaXMuX3NwbGl0dGVyTWF4UG9zaXRpb24gPSBwaXhlbHNUb051bWJlcihpdGVtcy5hZnRlci5lbGVtZW50LnN0eWxlW3RoaXMuX2RpbWVuc2lvbl0pIC0gKGFmdGVyTWluU2l6ZSB8fCBtaW5TaXplKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEludm9rZWQgd2hlbiBhIHNwbGl0dGVyJ3MgRHJhZ0xpc3RlbmVyIGZpcmVzIGRyYWcuIFVwZGF0ZXMgdGhlIHNwbGl0dGVyJ3MgRE9NIHBvc2l0aW9uLFxyXG4gICAgICogYnV0IG5vdCB0aGUgc2l6ZXMgb2YgdGhlIGVsZW1lbnRzIHRoZSBzcGxpdHRlciBjb250cm9scyBpbiBvcmRlciB0byBtaW5pbWl6ZSByZXNpemUgZXZlbnRzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHNwbGl0dGVyIC1cclxuICAgICAqIEBwYXJhbSBvZmZzZXRYIC0gUmVsYXRpdmUgcGl4ZWwgdmFsdWVzIHRvIHRoZSBzcGxpdHRlcidzIG9yaWdpbmFsIHBvc2l0aW9uLiBDYW4gYmUgbmVnYXRpdmVcclxuICAgICAqIEBwYXJhbSBvZmZzZXRZIC0gUmVsYXRpdmUgcGl4ZWwgdmFsdWVzIHRvIHRoZSBzcGxpdHRlcidzIG9yaWdpbmFsIHBvc2l0aW9uLiBDYW4gYmUgbmVnYXRpdmVcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uU3BsaXR0ZXJEcmFnKHNwbGl0dGVyOiBTcGxpdHRlciwgb2Zmc2V0WDogbnVtYmVyLCBvZmZzZXRZOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgb2Zmc2V0ID0gdGhpcy5faXNDb2x1bW4gPyBvZmZzZXRZIDogb2Zmc2V0WDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3NwbGl0dGVyTWluUG9zaXRpb24gPT09IG51bGwgfHwgdGhpcy5fc3BsaXR0ZXJNYXhQb3NpdGlvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignUk9DT1NENTkyMjYnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5tYXgob2Zmc2V0LCB0aGlzLl9zcGxpdHRlck1pblBvc2l0aW9uKTtcclxuICAgICAgICBvZmZzZXQgPSBNYXRoLm1pbihvZmZzZXQsIHRoaXMuX3NwbGl0dGVyTWF4UG9zaXRpb24pO1xyXG5cclxuICAgICAgICB0aGlzLl9zcGxpdHRlclBvc2l0aW9uID0gb2Zmc2V0O1xyXG4gICAgICAgIGNvbnN0IG9mZnNldFBpeGVscyA9IG51bWJlclRvUGl4ZWxzKG9mZnNldCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQ29sdW1uKSB7XHJcbiAgICAgICAgICAgIHNwbGl0dGVyLmVsZW1lbnQuc3R5bGUudG9wID0gb2Zmc2V0UGl4ZWxzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNwbGl0dGVyLmVsZW1lbnQuc3R5bGUubGVmdCA9IG9mZnNldFBpeGVscztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBzcGxpdHRlcidzIERyYWdMaXN0ZW5lciBmaXJlcyBkcmFnU3RvcC4gUmVzZXRzIHRoZSBzcGxpdHRlcnMgRE9NIHBvc2l0aW9uLFxyXG4gICAgICogYW5kIGFwcGxpZXMgdGhlIG5ldyBzaXplcyB0byB0aGUgZWxlbWVudHMgYmVmb3JlIGFuZCBhZnRlciB0aGUgc3BsaXR0ZXIgYW5kIHRoZWlyIGNoaWxkcmVuXHJcbiAgICAgKiBvbiB0aGUgbmV4dCBhbmltYXRpb24gZnJhbWVcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uU3BsaXR0ZXJEcmFnU3RvcChzcGxpdHRlcjogU3BsaXR0ZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fc3BsaXR0ZXJQb3NpdGlvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignUk9DT1NEUzY2OTMyJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLmdldEl0ZW1zRm9yU3BsaXR0ZXIoc3BsaXR0ZXIpO1xyXG4gICAgICAgICAgICBjb25zdCBzaXplQmVmb3JlID0gcGl4ZWxzVG9OdW1iZXIoaXRlbXMuYmVmb3JlLmVsZW1lbnQuc3R5bGVbdGhpcy5fZGltZW5zaW9uXSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpemVBZnRlciA9IHBpeGVsc1RvTnVtYmVyKGl0ZW1zLmFmdGVyLmVsZW1lbnQuc3R5bGVbdGhpcy5fZGltZW5zaW9uXSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNwbGl0dGVyUG9zaXRpb25JblJhbmdlID0gKHRoaXMuX3NwbGl0dGVyUG9zaXRpb24gKyBzaXplQmVmb3JlKSAvIChzaXplQmVmb3JlICsgc2l6ZUFmdGVyKTtcclxuICAgICAgICAgICAgY29uc3QgdG90YWxSZWxhdGl2ZVNpemUgPSBpdGVtcy5iZWZvcmVbdGhpcy5fZGltZW5zaW9uXSArIGl0ZW1zLmFmdGVyW3RoaXMuX2RpbWVuc2lvbl07XHJcblxyXG4gICAgICAgICAgICBpdGVtcy5iZWZvcmVbdGhpcy5fZGltZW5zaW9uXSA9IHNwbGl0dGVyUG9zaXRpb25JblJhbmdlICogdG90YWxSZWxhdGl2ZVNpemU7XHJcbiAgICAgICAgICAgIGl0ZW1zLmFmdGVyW3RoaXMuX2RpbWVuc2lvbl0gPSAoMSAtIHNwbGl0dGVyUG9zaXRpb25JblJhbmdlKSAqIHRvdGFsUmVsYXRpdmVTaXplO1xyXG5cclxuICAgICAgICAgICAgc3BsaXR0ZXIuZWxlbWVudC5zdHlsZS50b3AgPSBudW1iZXJUb1BpeGVscygwKTtcclxuICAgICAgICAgICAgc3BsaXR0ZXIuZWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVtYmVyVG9QaXhlbHMoMCk7XHJcblxyXG4gICAgICAgICAgICBnbG9iYWxUaGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnVwZGF0ZVNpemUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJvd09yQ29sdW1uIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50RGltZW5zaW9uU2l6ZShlbGVtZW50OiBIVE1MRWxlbWVudCwgZGltZW5zaW9uOiBXaWR0aE9ySGVpZ2h0UHJvcGVydHlOYW1lKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoZGltZW5zaW9uID09PSAnd2lkdGgnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRFbGVtZW50V2lkdGgoZWxlbWVudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldEVsZW1lbnRIZWlnaHQoZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBzZXRFbGVtZW50RGltZW5zaW9uU2l6ZShlbGVtZW50OiBIVE1MRWxlbWVudCwgZGltZW5zaW9uOiBXaWR0aE9ySGVpZ2h0UHJvcGVydHlOYW1lLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGRpbWVuc2lvbiA9PT0gJ3dpZHRoJykge1xyXG4gICAgICAgICAgICByZXR1cm4gc2V0RWxlbWVudFdpZHRoKGVsZW1lbnQsIHZhbHVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gc2V0RWxlbWVudEhlaWdodChlbGVtZW50LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KGRvY3VtZW50OiBEb2N1bWVudCwgaXNDb2x1bW46IGJvb2xlYW4pOiBIVE1MRGl2RWxlbWVudCB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkl0ZW0pO1xyXG4gICAgICAgIGlmIChpc0NvbHVtbikge1xyXG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Db2x1bW4pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlJvdyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbXBvbmVudEl0ZW1Db25maWcsIEl0ZW1Db25maWcgfSBmcm9tICcuLi9jb25maWcvY29uZmlnJztcclxuaW1wb3J0IHsgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnLCBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZywgUmVzb2x2ZWRJdGVtQ29uZmlnLCBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9yZXNvbHZlZC1jb25maWcnO1xyXG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICcuLi9jb250cm9scy9oZWFkZXInO1xyXG5pbXBvcnQgeyBBc3NlcnRFcnJvciwgVW5leHBlY3RlZE51bGxFcnJvciwgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4uL2xheW91dC1tYW5hZ2VyJztcclxuaW1wb3J0IHsgRG9tQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvZG9tLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IERyYWdMaXN0ZW5lciB9IGZyb20gJy4uL3V0aWxzL2RyYWctbGlzdGVuZXInO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuLi91dGlscy9ldmVudC1lbWl0dGVyJztcclxuaW1wb3J0IHsgZ2V0SlF1ZXJ5T2Zmc2V0IH0gZnJvbSAnLi4vdXRpbHMvanF1ZXJ5LWxlZ2FjeSc7XHJcbmltcG9ydCB7IEFyZWFMaW5rZWRSZWN0LCBJdGVtVHlwZSwgSnNvblZhbHVlLCBTaWRlLCBXaWR0aEFuZEhlaWdodCwgV2lkdGhPckhlaWdodFByb3BlcnR5TmFtZSB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcclxuaW1wb3J0IHtcclxuICAgIGdldEVsZW1lbnRIZWlnaHQsXHJcbiAgICBnZXRFbGVtZW50V2lkdGgsXHJcbiAgICBnZXRFbGVtZW50V2lkdGhBbmRIZWlnaHQsXHJcbiAgICBudW1iZXJUb1BpeGVscyxcclxuICAgIHNldEVsZW1lbnREaXNwbGF5VmlzaWJpbGl0eVxyXG59IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgQ29tcG9uZW50SXRlbSB9IGZyb20gJy4vY29tcG9uZW50LWl0ZW0nO1xyXG5pbXBvcnQgeyBDb21wb25lbnRQYXJlbnRhYmxlSXRlbSB9IGZyb20gJy4vY29tcG9uZW50LXBhcmVudGFibGUtaXRlbSc7XHJcbmltcG9ydCB7IENvbnRlbnRJdGVtIH0gZnJvbSAnLi9jb250ZW50LWl0ZW0nO1xyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNsYXNzIFN0YWNrIGV4dGVuZHMgQ29tcG9uZW50UGFyZW50YWJsZUl0ZW0ge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfaGVhZGVyQ29uZmlnOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9oZWFkZXI6IEhlYWRlcjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NoaWxkRWxlbWVudENvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9tYXhpbWlzZWRFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfYWN0aXZlQ29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSB8IHVuZGVmaW5lZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2Ryb3BTZWdtZW50OiBTdGFjay5TZWdtZW50O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZHJvcEluZGV4OiBudW1iZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jb250ZW50QXJlYURpbWVuc2lvbnM6IFN0YWNrLkNvbnRlbnRBcmVhRGltZW5zaW9ucztcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2hlYWRlclNpZGVDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9pbml0aWFsV2FudE1heGltaXNlOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfaW5pdGlhbEFjdGl2ZUl0ZW1JbmRleDogbnVtYmVyO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3Jlc2l6ZUxpc3RlbmVyID0gKCkgPT4gdGhpcy5oYW5kbGVSZXNpemUoKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX21heGltaXNlZExpc3RlbmVyID0gKCkgPT4gdGhpcy5oYW5kbGVNYXhpbWlzZWQoKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX21pbmltaXNlZExpc3RlbmVyID0gKCkgPT4gdGhpcy5oYW5kbGVNaW5pbWlzZWQoKTtcclxuXHJcbiAgICBnZXQgY2hpbGRFbGVtZW50Q29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lcjsgfVxyXG4gICAgZ2V0IGhlYWRlclNob3coKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9oZWFkZXIuc2hvdzsgfVxyXG4gICAgZ2V0IGhlYWRlclNpZGUoKTogU2lkZSB7IHJldHVybiB0aGlzLl9oZWFkZXIuc2lkZTsgfVxyXG4gICAgZ2V0IGhlYWRlckxlZnRSaWdodFNpZGVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faGVhZGVyLmxlZnRSaWdodFNpZGVkOyB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBnZXQgY29udGVudEFyZWFEaW1lbnNpb25zKCk6IFN0YWNrLkNvbnRlbnRBcmVhRGltZW5zaW9ucyB8IHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLl9jb250ZW50QXJlYURpbWVuc2lvbnM7IH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGdldCBpbml0aWFsV2FudE1heGltaXNlKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faW5pdGlhbFdhbnRNYXhpbWlzZTsgfVxyXG4gICAgZ2V0IGlzTWF4aW1pc2VkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcyA9PT0gdGhpcy5sYXlvdXRNYW5hZ2VyLm1heGltaXNlZFN0YWNrOyB9XHJcbiAgICBnZXQgc3RhY2tQYXJlbnQoKTogQ29udGVudEl0ZW0ge1xyXG4gICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGFjayBzaG91bGQgYWx3YXlzIGhhdmUgYSBwYXJlbnQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKGxheW91dE1hbmFnZXI6IExheW91dE1hbmFnZXIsIGNvbmZpZzogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcsIHBhcmVudDogQ29udGVudEl0ZW0pIHtcclxuICAgICAgICBzdXBlcihsYXlvdXRNYW5hZ2VyLCBjb25maWcsIHBhcmVudCwgU3RhY2suY3JlYXRlRWxlbWVudChkb2N1bWVudCkpO1xyXG5cclxuICAgICAgICB0aGlzLl9oZWFkZXJDb25maWcgPSBjb25maWcuaGVhZGVyO1xyXG4gICAgICAgIGNvbnN0IGxheW91dEhlYWRlckNvbmZpZyA9IGxheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLmhlYWRlcjtcclxuICAgICAgICBjb25zdCBjb25maWdDb250ZW50ID0gY29uZmlnLmNvbnRlbnQ7XHJcbiAgICAgICAgLy8gSWYgc3RhY2sgaGFzIG9ubHkgb25lIGNvbXBvbmVudCwgdGhlbiB3ZSBjYW4gYWxzbyBjaGVjayB0aGlzIGZvciBoZWFkZXIgc2V0dGluZ3NcclxuICAgICAgICBsZXQgY29tcG9uZW50SGVhZGVyQ29uZmlnOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKGNvbmZpZ0NvbnRlbnQubGVuZ3RoICE9PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudEhlYWRlckNvbmZpZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdENoaWxkSXRlbUNvbmZpZyA9IGNvbmZpZ0NvbnRlbnRbMF07XHJcbiAgICAgICAgICAgIGNvbXBvbmVudEhlYWRlckNvbmZpZyA9IChmaXJzdENoaWxkSXRlbUNvbmZpZyBhcyBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZykuaGVhZGVyOyAvLyB3aWxsIGJlIHVuZGVmaW5lZCBpZiBub3QgY29tcG9uZW50IChhbmQgd29udCBiZSBzdGFjaylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2luaXRpYWxXYW50TWF4aW1pc2UgPSBjb25maWcubWF4aW1pc2VkO1xyXG4gICAgICAgIHRoaXMuX2luaXRpYWxBY3RpdmVJdGVtSW5kZXggPSBjb25maWcuYWN0aXZlSXRlbUluZGV4ID8/IDA7IC8vIG1ha2Ugc3VyZSBkZWZpbmVkXHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGZvciBkZWZpbmVkIHZhbHVlIGZvciBlYWNoIGl0ZW0gaW4gb3JkZXIgb2YgU3RhY2sgKHRoaXMgSXRlbSksIENvbXBvbmVudCAoZmlyc3QgY2hpbGQpLCBNYW5hZ2VyLlxyXG4gICAgICAgIGNvbnN0IHNob3cgPSB0aGlzLl9oZWFkZXJDb25maWc/LnNob3cgPz8gY29tcG9uZW50SGVhZGVyQ29uZmlnPy5zaG93ID8/IGxheW91dEhlYWRlckNvbmZpZy5zaG93O1xyXG4gICAgICAgIGNvbnN0IHBvcG91dCA9IHRoaXMuX2hlYWRlckNvbmZpZz8ucG9wb3V0ID8/IGNvbXBvbmVudEhlYWRlckNvbmZpZz8ucG9wb3V0ID8/IGxheW91dEhlYWRlckNvbmZpZy5wb3BvdXQ7XHJcbiAgICAgICAgY29uc3QgbWF4aW1pc2UgPSB0aGlzLl9oZWFkZXJDb25maWc/Lm1heGltaXNlID8/IGNvbXBvbmVudEhlYWRlckNvbmZpZz8ubWF4aW1pc2UgPz8gbGF5b3V0SGVhZGVyQ29uZmlnLm1heGltaXNlO1xyXG4gICAgICAgIGNvbnN0IGNsb3NlID0gdGhpcy5faGVhZGVyQ29uZmlnPy5jbG9zZSA/PyBjb21wb25lbnRIZWFkZXJDb25maWc/LmNsb3NlID8/IGxheW91dEhlYWRlckNvbmZpZy5jbG9zZTtcclxuICAgICAgICBjb25zdCBtaW5pbWlzZSA9IHRoaXMuX2hlYWRlckNvbmZpZz8ubWluaW1pc2UgPz8gY29tcG9uZW50SGVhZGVyQ29uZmlnPy5taW5pbWlzZSA/PyBsYXlvdXRIZWFkZXJDb25maWcubWluaW1pc2U7XHJcbiAgICAgICAgY29uc3QgdGFiRHJvcGRvd24gPSB0aGlzLl9oZWFkZXJDb25maWc/LnRhYkRyb3Bkb3duID8/IGNvbXBvbmVudEhlYWRlckNvbmZpZz8udGFiRHJvcGRvd24gPz8gbGF5b3V0SGVhZGVyQ29uZmlnLnRhYkRyb3Bkb3duO1xyXG4gICAgICAgIHRoaXMuX21heGltaXNlZEVuYWJsZWQgPSBtYXhpbWlzZSAhPT0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyU2V0dGluZ3M6IEhlYWRlci5TZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgc2hvdzogc2hvdyAhPT0gZmFsc2UsXHJcbiAgICAgICAgICAgIHNpZGU6IHNob3cgPT09IGZhbHNlID8gU2lkZS50b3AgOiBzaG93LFxyXG4gICAgICAgICAgICBwb3BvdXRFbmFibGVkOiBwb3BvdXQgIT09IGZhbHNlLFxyXG4gICAgICAgICAgICBwb3BvdXRMYWJlbDogcG9wb3V0ID09PSBmYWxzZSA/ICcnIDogcG9wb3V0LFxyXG4gICAgICAgICAgICBtYXhpbWlzZUVuYWJsZWQ6IHRoaXMuX21heGltaXNlZEVuYWJsZWQsXHJcbiAgICAgICAgICAgIG1heGltaXNlTGFiZWw6IG1heGltaXNlID09PSBmYWxzZSA/ICcnIDogbWF4aW1pc2UsXHJcbiAgICAgICAgICAgIGNsb3NlRW5hYmxlZDogY2xvc2UgIT09IGZhbHNlLFxyXG4gICAgICAgICAgICBjbG9zZUxhYmVsOiBjbG9zZSA9PT0gZmFsc2UgPyAnJyA6IGNsb3NlLFxyXG4gICAgICAgICAgICBtaW5pbWlzZUVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIG1pbmltaXNlTGFiZWw6IG1pbmltaXNlLFxyXG4gICAgICAgICAgICB0YWJEcm9wZG93bkVuYWJsZWQ6IHRhYkRyb3Bkb3duICE9PSBmYWxzZSxcclxuICAgICAgICAgICAgdGFiRHJvcGRvd25MYWJlbDogdGFiRHJvcGRvd24gPT09IGZhbHNlID8gJycgOiB0YWJEcm9wZG93bixcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLl9oZWFkZXIgPSBuZXcgSGVhZGVyKGxheW91dE1hbmFnZXIsXHJcbiAgICAgICAgICAgIHRoaXMsIGhlYWRlclNldHRpbmdzLFxyXG4gICAgICAgICAgICBjb25maWcuaXNDbG9zYWJsZSAmJiBjbG9zZSAhPT0gZmFsc2UsXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMuZ2V0QWN0aXZlQ29tcG9uZW50SXRlbSgpLFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnJlbW92ZSgpLFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmhhbmRsZVBvcG91dEV2ZW50KCksXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMudG9nZ2xlTWF4aW1pc2UoKSxcclxuICAgICAgICAgICAgKGV2KSA9PiB0aGlzLmhhbmRsZUhlYWRlckNsaWNrRXZlbnQoZXYpLFxyXG4gICAgICAgICAgICAoZXYpID0+IHRoaXMuaGFuZGxlSGVhZGVyVG91Y2hTdGFydEV2ZW50KGV2KSxcclxuICAgICAgICAgICAgKGl0ZW0pID0+IHRoaXMuaGFuZGxlSGVhZGVyQ29tcG9uZW50UmVtb3ZlRXZlbnQoaXRlbSksXHJcbiAgICAgICAgICAgIChpdGVtKSA9PiB0aGlzLmhhbmRsZUhlYWRlckNvbXBvbmVudEZvY3VzRXZlbnQoaXRlbSksXHJcbiAgICAgICAgICAgICh4LCB5LCBkcmFnTGlzdGVuZXIsIGl0ZW0pID0+IHRoaXMuaGFuZGxlSGVhZGVyQ29tcG9uZW50U3RhcnREcmFnRXZlbnQoeCwgeSwgZHJhZ0xpc3RlbmVyLCBpdGVtKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyB0aGlzLl9kcm9wWm9uZXMgPSB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5pc1N0YWNrID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fY2hpbGRFbGVtZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xyXG4gICAgICAgIHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuSXRlbXMpO1xyXG5cclxuICAgICAgICB0aGlzLm9uKCdyZXNpemUnLCB0aGlzLl9yZXNpemVMaXN0ZW5lcik7XHJcbiAgICAgICAgaWYgKHRoaXMuX21heGltaXNlZEVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vbignbWF4aW1pc2VkJywgdGhpcy5fbWF4aW1pc2VkTGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB0aGlzLm9uKCdtaW5pbWlzZWQnLCB0aGlzLl9taW5pbWlzZWRMaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5faGVhZGVyLmVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9jaGlsZEVsZW1lbnRDb250YWluZXIpO1xyXG5cclxuICAgICAgICB0aGlzLnNldHVwSGVhZGVyUG9zaXRpb24oKTtcclxuICAgICAgICB0aGlzLl9oZWFkZXIudXBkYXRlQ2xvc2FiaWxpdHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSB1cGRhdGVTaXplKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5iZWdpblZpcnR1YWxTaXplZENvbnRhaW5lckFkZGluZygpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTm9kZVNpemUoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDb250ZW50SXRlbXNTaXplKCk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmVuZFZpcnR1YWxTaXplZENvbnRhaW5lckFkZGluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBpbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGlzZWQgPT09IHRydWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVOb2RlU2l6ZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRJdGVtc1tpXS5lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1cGVyLmluaXQoKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gdGhpcy5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1Db3VudCA9IGNvbnRlbnRJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGNvbnRlbnRJdGVtQ291bnQgPiAwKSB7IC8vIGNvbnRlbnRJdGVtQ291bnQgd2lsbCBiZSAwIG9uIGRyYWcgZHJvcFxyXG4gICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbEFjdGl2ZUl0ZW1JbmRleCA8IDAgfHwgdGhpcy5faW5pdGlhbEFjdGl2ZUl0ZW1JbmRleCA+PSBjb250ZW50SXRlbUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFjdGl2ZUl0ZW1JbmRleCBvdXQgb2YgcmFuZ2U6ICR7dGhpcy5faW5pdGlhbEFjdGl2ZUl0ZW1JbmRleH0gaWQ6ICR7dGhpcy5pZH1gKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudEl0ZW1Db3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSBjb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoY29udGVudEl0ZW0gaW5zdGFuY2VvZiBDb21wb25lbnRJdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFN0YWNrIENvbnRlbnQgSXRlbSBpcyBub3Qgb2YgdHlwZSBDb21wb25lbnRJdGVtOiAke2l9IGlkOiAke3RoaXMuaWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZGVyLmNyZWF0ZVRhYihjb250ZW50SXRlbSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRJdGVtLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVDb21wb25lbnRJdGVtKGNvbnRlbnRJdGVtc1t0aGlzLl9pbml0aWFsQWN0aXZlSXRlbUluZGV4XSBhcyBDb21wb25lbnRJdGVtLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5faGVhZGVyLnVwZGF0ZVRhYlNpemVzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2hlYWRlci51cGRhdGVDbG9zYWJpbGl0eSgpO1xyXG4gICAgICAgIHRoaXMuaW5pdENvbnRlbnRJdGVtcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIChTdGFjazpjbGFzcykuc2V0QWN0aXZlQ29tcG9uZW50SXRlbX0gKi9cclxuICAgIHNldEFjdGl2ZUNvbnRlbnRJdGVtKGl0ZW06IENvbnRlbnRJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFDb250ZW50SXRlbS5pc0NvbXBvbmVudEl0ZW0oaXRlbSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGFjay5zZXRBY3RpdmVDb250ZW50SXRlbTogaXRlbSBpcyBub3QgYSBDb21wb25lbnRJdGVtJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVDb21wb25lbnRJdGVtKGl0ZW0sIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QWN0aXZlQ29tcG9uZW50SXRlbShjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtLCBmb2N1czogYm9vbGVhbiwgc3VwcHJlc3NGb2N1c0V2ZW50ID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbSAhPT0gY29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50SXRlbXMuaW5kZXhPZihjb21wb25lbnRJdGVtKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY29tcG9uZW50SXRlbSBpcyBub3QgYSBjaGlsZCBvZiB0aGlzIHN0YWNrJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVDb21wb25lbnRJdGVtID0gY29tcG9uZW50SXRlbTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hlYWRlci5wcm9jZXNzQWN0aXZlQ29tcG9uZW50Q2hhbmdlZChjb21wb25lbnRJdGVtKTtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudEl0ZW0uc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdhY3RpdmVDb250ZW50SXRlbUNoYW5nZWQnLCBjb21wb25lbnRJdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5lbWl0KCdhY3RpdmVDb250ZW50SXRlbUNoYW5nZWQnLCBjb21wb25lbnRJdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFN0YXRlQ2hhbmdlZEV2ZW50KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZvY3VzZWQgfHwgZm9jdXMpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLnNldEZvY3VzZWRDb21wb25lbnRJdGVtKGNvbXBvbmVudEl0ZW0sIHN1cHByZXNzRm9jdXNFdmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIChTdGFjazpjbGFzcykuZ2V0QWN0aXZlQ29tcG9uZW50SXRlbX0gKi9cclxuICAgIGdldEFjdGl2ZUNvbnRlbnRJdGVtKCk6IENvbnRlbnRJdGVtIHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWN0aXZlQ29tcG9uZW50SXRlbSgpID8/IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWN0aXZlQ29tcG9uZW50SXRlbSgpOiBDb21wb25lbnRJdGVtIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBmb2N1c0FjdGl2ZUNvbnRlbnRJdGVtKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZUNvbXBvbmVudEl0ZW0/LmZvY3VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgb3ZlcnJpZGUgc2V0Rm9jdXNlZFZhbHVlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5faGVhZGVyLmFwcGx5Rm9jdXNlZFZhbHVlKHZhbHVlKTtcclxuICAgICAgICBzdXBlci5zZXRGb2N1c2VkVmFsdWUodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNldFJvd0NvbHVtbkNsb3NhYmxlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5faGVhZGVyLnNldFJvd0NvbHVtbkNsb3NhYmxlKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBuZXdDb21wb25lbnQoY29tcG9uZW50VHlwZTogSnNvblZhbHVlLCBjb21wb25lbnRTdGF0ZT86IEpzb25WYWx1ZSwgdGl0bGU/OiBzdHJpbmcsIGluZGV4PzogbnVtYmVyKTogQ29tcG9uZW50SXRlbSB7XHJcbiAgICAgICAgY29uc3QgaXRlbUNvbmZpZzogQ29tcG9uZW50SXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2NvbXBvbmVudCcsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGUsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudFN0YXRlLFxyXG4gICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5ld0l0ZW0oaXRlbUNvbmZpZywgaW5kZXgpIGFzIENvbXBvbmVudEl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgYWRkQ29tcG9uZW50KGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZSwgY29tcG9uZW50U3RhdGU/OiBKc29uVmFsdWUsIHRpdGxlPzogc3RyaW5nLCBpbmRleD86IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgaXRlbUNvbmZpZzogQ29tcG9uZW50SXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2NvbXBvbmVudCcsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGUsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudFN0YXRlLFxyXG4gICAgICAgICAgICB0aXRsZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZEl0ZW0oaXRlbUNvbmZpZywgaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5ld0l0ZW0oaXRlbUNvbmZpZzogQ29tcG9uZW50SXRlbUNvbmZpZywgIGluZGV4PzogbnVtYmVyKTogQ29udGVudEl0ZW0ge1xyXG4gICAgICAgIGluZGV4ID0gdGhpcy5hZGRJdGVtKGl0ZW1Db25maWcsIGluZGV4KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50SXRlbXNbaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEl0ZW0oaXRlbUNvbmZpZzogQ29tcG9uZW50SXRlbUNvbmZpZywgaW5kZXg/OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5jaGVja01pbmltaXNlTWF4aW1pc2VkU3RhY2soKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZWRJdGVtQ29uZmlnID0gSXRlbUNvbmZpZy5yZXNvbHZlKGl0ZW1Db25maWcpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZUFuZEluaXRDb250ZW50SXRlbShyZXNvbHZlZEl0ZW1Db25maWcsIHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZENoaWxkKGNvbnRlbnRJdGVtLCBpbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgYWRkQ2hpbGQoY29udGVudEl0ZW06IENvbnRlbnRJdGVtLCBpbmRleD86IG51bWJlciwgZm9jdXMgPSBmYWxzZSk6IG51bWJlciB7XHJcbiAgICAgICAgaWYoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpbmRleCA+IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIGluZGV4IC09IDE7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignU0FDOTk3MjgnKTsgLy8gdW5kaXNwbGF5Q2hpbGQoKSByZW1vdmVkIHNvIHRoaXMgY29uZGl0aW9uIHNob3VsZCBubyBsb25nZXIgb2NjdXJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghKGNvbnRlbnRJdGVtIGluc3RhbmNlb2YgQ29tcG9uZW50SXRlbSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdTQUNDODg1MzInKTsgLy8gU3RhY2tzIGNhbiBvbmx5IGhhdmUgQ29tcG9uZW50IGNoaWxkcmVuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5kZXggPSBzdXBlci5hZGRDaGlsZChjb250ZW50SXRlbSwgaW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZEVsZW1lbnRDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGVudEl0ZW0uZWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYWRlci5jcmVhdGVUYWIoY29udGVudEl0ZW0sIGluZGV4KTtcclxuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVDb21wb25lbnRJdGVtKGNvbnRlbnRJdGVtLCBmb2N1cyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYWRlci51cGRhdGVUYWJTaXplcygpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgdGhpcy5faGVhZGVyLnVwZGF0ZUNsb3NhYmlsaXR5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdFN0YXRlQ2hhbmdlZEV2ZW50KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgcmVtb3ZlQ2hpbGQoY29udGVudEl0ZW06IENvbnRlbnRJdGVtLCBrZWVwQ2hpbGQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjb21wb25lbnRJdGVtID0gY29udGVudEl0ZW0gYXMgQ29tcG9uZW50SXRlbTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuY29udGVudEl0ZW1zLmluZGV4T2YoY29tcG9uZW50SXRlbSk7XHJcbiAgICAgICAgY29uc3Qgc3RhY2tXaWxsQmVEZWxldGVkID0gdGhpcy5jb250ZW50SXRlbXMubGVuZ3RoID09PSAxO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbSA9PT0gY29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50SXRlbS5mb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRJdGVtLmJsdXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXN0YWNrV2lsbEJlRGVsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB3ZSdyZSBhbHJlYWR5IHN1cmUgd2UgaGF2ZSBhdCBsZWFzdCBvbmUgY29udGVudCBpdGVtIGxlZnQgKmFmdGVyKlxyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZpbmcgY29udGVudEl0ZW0sIHNvIHdlIGNhbiBzYWZlbHkgYXNzdW1lIGluZGV4IDEgaXMgYSB2YWxpZCBvbmUgaWZcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBpbmRleCBvZiBjb250ZW50SXRlbSBpcyAwLCBvdGhlcndpc2Ugd2UganVzdCB1c2UgdGhlIHByZXZpb3VzIGNvbnRlbnQgaXRlbS5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FjdGl2ZUNvbXBvbmVudElkeCA9IGluZGV4ID09PSAwID8gMSA6IGluZGV4IC0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlQ29tcG9uZW50SXRlbSh0aGlzLmNvbnRlbnRJdGVtc1tuZXdBY3RpdmVDb21wb25lbnRJZHhdIGFzIENvbXBvbmVudEl0ZW0sIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faGVhZGVyLnJlbW92ZVRhYihjb21wb25lbnRJdGVtKTtcclxuXHJcbiAgICAgICAgc3VwZXIucmVtb3ZlQ2hpbGQoY29tcG9uZW50SXRlbSwga2VlcENoaWxkKTtcclxuXHJcbiAgICAgICAgaWYgKCFzdGFja1dpbGxCZURlbGV0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faGVhZGVyLnVwZGF0ZUNsb3NhYmlsaXR5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmVtaXRTdGF0ZUNoYW5nZWRFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWF4aW1pc2VzIHRoZSBJdGVtIG9yIG1pbmltaXNlcyBpdCBpZiBpdCBpcyBhbHJlYWR5IG1heGltaXNlZFxyXG4gICAgICovXHJcbiAgICB0b2dnbGVNYXhpbWlzZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5pc01heGltaXNlZCkge1xyXG4gICAgICAgICAgICB0aGlzLm1pbmltaXNlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5tYXhpbWlzZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtYXhpbWlzZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNNYXhpbWlzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLnNldE1heGltaXNlZFN0YWNrKHRoaXMpO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50SXRlbXMgPSB0aGlzLmNvbnRlbnRJdGVtcztcclxuICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW1Db3VudCA9IGNvbnRlbnRJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudEl0ZW1Db3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50SXRlbSA9IGNvbnRlbnRJdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50SXRlbSBpbnN0YW5jZW9mIENvbXBvbmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50SXRlbS5lbnRlclN0YWNrTWF4aW1pc2VkKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignU01BWEk4Nzc3MycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdFN0YXRlQ2hhbmdlZEV2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1pbmltaXNlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzTWF4aW1pc2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5zZXRNYXhpbWlzZWRTdGFjayh1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50SXRlbXMgPSB0aGlzLmNvbnRlbnRJdGVtcztcclxuICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW1Db3VudCA9IGNvbnRlbnRJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudEl0ZW1Db3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50SXRlbSA9IGNvbnRlbnRJdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50SXRlbSBpbnN0YW5jZW9mIENvbXBvbmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50SXRlbS5leGl0U3RhY2tNYXhpbWlzZWQoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdTTUlOSTg3NzczJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5lbWl0U3RhdGVDaGFuZ2VkRXZlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgb3ZlcnJpZGUgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbT8uZm9jdXNlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVDb21wb25lbnRJdGVtLmJsdXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMub2ZmKCdyZXNpemUnLCB0aGlzLl9yZXNpemVMaXN0ZW5lcik7XHJcbiAgICAgICAgaWYgKHRoaXMuX21heGltaXNlZEVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmYoJ21heGltaXNlZCcsIHRoaXMuX21heGltaXNlZExpc3RlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5vZmYoJ21pbmltaXNlZCcsIHRoaXMuX21pbmltaXNlZExpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faGVhZGVyLmRlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcbiAgICB0b0NvbmZpZygpOiBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgbGV0IGFjdGl2ZUl0ZW1JbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVDb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IHRoaXMuY29udGVudEl0ZW1zLmluZGV4T2YodGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbSk7XHJcbiAgICAgICAgICAgIGlmIChhY3RpdmVJdGVtSW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FjdGl2ZSBjb21wb25lbnQgaXRlbSBub3QgZm91bmQgaW4gc3RhY2snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb250ZW50SXRlbXMubGVuZ3RoID4gMCAmJiBhY3RpdmVJdGVtSW5kZXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIG5vbi1lbXB0eSBzdGFjayB0byBoYXZlIGFuIGFjdGl2ZSBjb21wb25lbnQgaXRlbScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3RhY2snLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogdGhpcy5jYWxjdWxhdGVDb25maWdDb250ZW50KCkgYXMgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnW10sXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcclxuICAgICAgICAgICAgICAgIG1pbldpZHRoOiB0aGlzLm1pbldpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCxcclxuICAgICAgICAgICAgICAgIG1pbkhlaWdodDogdGhpcy5taW5IZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgICAgICAgICAgIGlzQ2xvc2FibGU6IHRoaXMuaXNDbG9zYWJsZSxcclxuICAgICAgICAgICAgICAgIG1heGltaXNlZDogdGhpcy5pc01heGltaXNlZCxcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogdGhpcy5jcmVhdGVIZWFkZXJDb25maWcoKSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUl0ZW1JbmRleCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9rLCB0aGlzIG9uZSBpcyBnb2luZyB0byBiZSB0aGUgdHJpY2t5IG9uZTogVGhlIHVzZXIgaGFzIGRyb3BwZWQgYSB7QGxpbmsgKENvbnRlbnRJdGVtOmNsYXNzKX0gb250byB0aGlzIHN0YWNrLlxyXG4gICAgICpcclxuICAgICAqIEl0IHdhcyBkcm9wcGVkIG9uIGVpdGhlciB0aGUgc3RhY2tzIGhlYWRlciBvciB0aGUgdG9wLCByaWdodCwgYm90dG9tIG9yIGxlZnQgYml0IG9mIHRoZSBjb250ZW50IGFyZWFcclxuICAgICAqICh3aGljaCBvbmUgb2YgdGhvc2UgaXMgc3RvcmVkIGluIHRoaXMuX2Ryb3BTZWdtZW50KS4gTm93LCBpZiB0aGUgdXNlciBoYXMgZHJvcHBlZCBvbiB0aGUgaGVhZGVyIHRoZSBjYXNlXHJcbiAgICAgKiBpcyByZWxhdGl2ZWx5IGNsZWFyOiBXZSBhZGQgdGhlIGl0ZW0gdG8gdGhlIGV4aXN0aW5nIHN0YWNrLi4uIGpvYiBkb25lIChtaWdodCBiZSBnb29kIHRvIGhhdmVcclxuICAgICAqIHRhYiByZW9yZGVyaW5nIGF0IHNvbWUgcG9pbnQsIGJ1dCBsZXRzIG5vdCBzd2VhdCBpdCByaWdodCBub3cpXHJcbiAgICAgKlxyXG4gICAgICogSWYgdGhlIGl0ZW0gd2FzIGRyb3BwZWQgb24gdGhlIGNvbnRlbnQgcGFydCB0aGluZ3MgYXJlIGEgYml0IG1vcmUgY29tcGxpY2F0ZWQuIElmIGl0IHdhcyBkcm9wcGVkIG9uIGVpdGhlciB0aGVcclxuICAgICAqIHRvcCBvciBib3R0b20gcmVnaW9uIHdlIG5lZWQgdG8gY3JlYXRlIGEgbmV3IGNvbHVtbiBhbmQgcGxhY2UgdGhlIGl0ZW1zIGFjY29yZGluZ2x5LlxyXG4gICAgICogVW5sZXNzLCBvZiBjb3Vyc2UgaWYgdGhlIHN0YWNrIGlzIGFscmVhZHkgd2l0aGluIGEgY29sdW1uLi4uIGluIHdoaWNoIGNhc2Ugd2Ugd2FudFxyXG4gICAgICogdG8gYWRkIHRoZSBuZXdseSBjcmVhdGVkIGl0ZW0gdG8gdGhlIGV4aXN0aW5nIGNvbHVtbi4uLlxyXG4gICAgICogZWl0aGVyIHByZXBlbmQgb3IgYXBwZW5kIGl0LCBkZXBlbmRpbmcgb24gd2V0aGVyIGl0cyB0b3Agb3IgYm90dG9tLlxyXG4gICAgICpcclxuICAgICAqIFNhbWUgdGhpbmcgZm9yIHJvd3MgYW5kIGxlZnQgLyByaWdodCBkcm9wIHNlZ21lbnRzLi4uIHNvIGluIHRvdGFsIHRoZXJlIGFyZSA5IHRoaW5ncyB0aGF0IGNhbiBwb3RlbnRpYWxseSBoYXBwZW5cclxuICAgICAqIChsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b20pICogaXMgY2hpbGQgb2YgdGhlIHJpZ2h0IHBhcmVudCAocm93LCBjb2x1bW4pICsgaGVhZGVyIGRyb3BcclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb3ZlcnJpZGUgb25Ecm9wKGNvbnRlbnRJdGVtOiBDb250ZW50SXRlbSwgYXJlYTogQ29udGVudEl0ZW0uQXJlYSk6IHZvaWQge1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogVGhlIGl0ZW0gd2FzIGRyb3BwZWQgb24gdGhlIGhlYWRlciBhcmVhLiBKdXN0IGFkZCBpdCBhcyBhIGNoaWxkIG9mIHRoaXMgc3RhY2sgYW5kXHJcbiAgICAgICAgICogZ2V0IHRoZSBoZWxsIG91dCBvZiB0aGlzIGxvZ2ljXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKHRoaXMuX2Ryb3BTZWdtZW50ID09PSBTdGFjay5TZWdtZW50LkhlYWRlcikge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0SGVhZGVyRHJvcFpvbmUoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Ryb3BJbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdTT0RESTY4OTkwJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZENoaWxkKGNvbnRlbnRJdGVtLCB0aGlzLl9kcm9wSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIFRoZSBzdGFjayBpcyBlbXB0eS4gTGV0J3MganVzdCBhZGQgdGhlIGVsZW1lbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKHRoaXMuX2Ryb3BTZWdtZW50ID09PSBTdGFjay5TZWdtZW50LkJvZHkpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRDaGlsZChjb250ZW50SXRlbSwgMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogVGhlIGl0ZW0gd2FzIGRyb3BwZWQgb24gdGhlIHRvcC0sIGxlZnQtLCBib3R0b20tIG9yIHJpZ2h0LSBwYXJ0IG9mIHRoZSBjb250ZW50LiBMZXQnc1xyXG4gICAgICAgICAqIGFnZ3JlZ2F0ZSBzb21lIGNvbmRpdGlvbnMgdG8gbWFrZSB0aGUgaWYgc3RhdGVtZW50cyBsYXRlciBvbiBtb3JlIHJlYWRhYmxlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IHRoaXMuX2Ryb3BTZWdtZW50ID09PSBTdGFjay5TZWdtZW50LlRvcCB8fCB0aGlzLl9kcm9wU2VnbWVudCA9PT0gU3RhY2suU2VnbWVudC5Cb3R0b207XHJcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5fZHJvcFNlZ21lbnQgPT09IFN0YWNrLlNlZ21lbnQuTGVmdCB8fCB0aGlzLl9kcm9wU2VnbWVudCA9PT0gU3RhY2suU2VnbWVudC5SaWdodDtcclxuICAgICAgICBjb25zdCBpbnNlcnRCZWZvcmUgPSB0aGlzLl9kcm9wU2VnbWVudCA9PT0gU3RhY2suU2VnbWVudC5Ub3AgfHwgdGhpcy5fZHJvcFNlZ21lbnQgPT09IFN0YWNrLlNlZ21lbnQuTGVmdDtcclxuICAgICAgICBjb25zdCBoYXNDb3JyZWN0UGFyZW50ID0gKGlzVmVydGljYWwgJiYgdGhpcy5zdGFja1BhcmVudC5pc0NvbHVtbikgfHwgKGlzSG9yaXpvbnRhbCAmJiB0aGlzLnN0YWNrUGFyZW50LmlzUm93KTtcclxuICAgICAgICBjb25zdCBkaW1lbnNpb24gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIFRoZSBjb250ZW50IGl0ZW0gY2FuIGJlIGVpdGhlciBhIGNvbXBvbmVudCBvciBhIHN0YWNrLiBJZiBpdCBpcyBhIGNvbXBvbmVudCwgd3JhcCBpdCBpbnRvIGEgc3RhY2tcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoY29udGVudEl0ZW0uaXNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbUNvbmZpZyA9IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnLmNyZWF0ZURlZmF1bHQoKTtcclxuICAgICAgICAgICAgaXRlbUNvbmZpZy5oZWFkZXIgPSB0aGlzLmNyZWF0ZUhlYWRlckNvbmZpZygpO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMubGF5b3V0TWFuYWdlci5jcmVhdGVBbmRJbml0Q29udGVudEl0ZW0oaXRlbUNvbmZpZywgdGhpcyk7XHJcbiAgICAgICAgICAgIHN0YWNrLmFkZENoaWxkKGNvbnRlbnRJdGVtKTtcclxuICAgICAgICAgICAgY29udGVudEl0ZW0gPSBzdGFjaztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIElmIHRoZSBjb250ZW50SXRlbSB0aGF0J3MgYmVpbmcgZHJvcHBlZCBpcyBub3QgZHJvcHBlZCBvbiBhIFN0YWNrIChjYXNlcyB3aGljaCBqdXN0IHBhc3NlZCBhYm92ZSBhbmRcclxuICAgICAgICAgKiB3aGljaCB3b3VsZCB3cmFwIHRoZSBjb250ZW50SXRlbSBpbiBhIFN0YWNrKSB3ZSBuZWVkIHRvIGNoZWNrIHdoZXRoZXIgY29udGVudEl0ZW0gaXMgYSBSb3dPckNvbHVtbi5cclxuICAgICAgICAgKiBJZiBpdCBpcywgd2UgbmVlZCB0byByZS13cmFwIGl0IGluIGEgU3RhY2sgbGlrZSBpdCB3YXMgd2hlbiBpdCB3YXMgZHJhZ2dlZCBieSBpdHMgVGFiIChpdCB3YXMgZHJhZ2dlZCEpLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmKGNvbnRlbnRJdGVtLnR5cGUgPT09IEl0ZW1UeXBlLnJvdyB8fCBjb250ZW50SXRlbS50eXBlID09PSBJdGVtVHlwZS5jb2x1bW4pe1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtQ29uZmlnID0gUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcuY3JlYXRlRGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBpdGVtQ29uZmlnLmhlYWRlciA9IHRoaXMuY3JlYXRlSGVhZGVyQ29uZmlnKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZUNvbnRlbnRJdGVtKGl0ZW1Db25maWcsIHRoaXMpO1xyXG4gICAgICAgICAgICBzdGFjay5hZGRDaGlsZChjb250ZW50SXRlbSlcclxuICAgICAgICAgICAgY29udGVudEl0ZW0gPSBzdGFja1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBJZiB0aGUgaXRlbSBpcyBkcm9wcGVkIG9uIHRvcCBvciBib3R0b20gb2YgYSBjb2x1bW4gb3IgbGVmdCBhbmQgcmlnaHQgb2YgYSByb3csIGl0J3MgYWxyZWFkeVxyXG4gICAgICAgICAqIGxheWQgb3V0IGluIHRoZSBjb3JyZWN0IHdheS4gSnVzdCBhZGQgaXQgYXMgYSBjaGlsZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChoYXNDb3JyZWN0UGFyZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zdGFja1BhcmVudC5jb250ZW50SXRlbXMuaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5zdGFja1BhcmVudC5hZGRDaGlsZChjb250ZW50SXRlbSwgaW5zZXJ0QmVmb3JlID8gaW5kZXggOiBpbmRleCArIDEsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzW2RpbWVuc2lvbl0gKj0gMC41O1xyXG4gICAgICAgICAgICBjb250ZW50SXRlbVtkaW1lbnNpb25dID0gdGhpc1tkaW1lbnNpb25dO1xyXG4gICAgICAgICAgICB0aGlzLnN0YWNrUGFyZW50LnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICogVGhpcyBoYW5kbGVzIGl0ZW1zIHRoYXQgYXJlIGRyb3BwZWQgb24gdG9wIG9yIGJvdHRvbSBvZiBhIHJvdyBvciBsZWZ0IC8gcmlnaHQgb2YgYSBjb2x1bW4uIFdlIG5lZWRcclxuICAgICAgICAgICAgICogdG8gY3JlYXRlIHRoZSBhcHByb3ByaWF0ZSBjb250ZW50SXRlbSBmb3IgdGhlbSB0byBsaXZlIGluXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBpc1ZlcnRpY2FsID8gSXRlbVR5cGUuY29sdW1uIDogSXRlbVR5cGUucm93O1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtQ29uZmlnID0gUmVzb2x2ZWRJdGVtQ29uZmlnLmNyZWF0ZURlZmF1bHQodHlwZSkgYXMgUmVzb2x2ZWRJdGVtQ29uZmlnO1xyXG4gICAgICAgICAgICBjb25zdCByb3dPckNvbHVtbiA9IHRoaXMubGF5b3V0TWFuYWdlci5jcmVhdGVDb250ZW50SXRlbShpdGVtQ29uZmlnLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5zdGFja1BhcmVudC5yZXBsYWNlQ2hpbGQodGhpcywgcm93T3JDb2x1bW4pO1xyXG5cclxuICAgICAgICAgICAgcm93T3JDb2x1bW4uYWRkQ2hpbGQoY29udGVudEl0ZW0sIGluc2VydEJlZm9yZSA/IDAgOiB1bmRlZmluZWQsIHRydWUpO1xyXG4gICAgICAgICAgICByb3dPckNvbHVtbi5hZGRDaGlsZCh0aGlzLCBpbnNlcnRCZWZvcmUgPyB1bmRlZmluZWQgOiAwLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXNbZGltZW5zaW9uXSA9IDUwO1xyXG4gICAgICAgICAgICBjb250ZW50SXRlbVtkaW1lbnNpb25dID0gNTA7XHJcbiAgICAgICAgICAgIHJvd09yQ29sdW1uLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJZiB0aGUgdXNlciBob3ZlcnMgYWJvdmUgdGhlIGhlYWRlciBwYXJ0IG9mIHRoZSBzdGFjaywgaW5kaWNhdGUgZHJvcCBwb3NpdGlvbnMgZm9yIHRhYnMuXHJcbiAgICAgKiBvdGhlcndpc2UgaW5kaWNhdGUgd2hpY2ggc2VnbWVudCBvZiB0aGUgYm9keSB0aGUgZHJhZ2dlZCBpdGVtIHdvdWxkIGJlIGRyb3BwZWQgb25cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geCAtIEFic29sdXRlIFNjcmVlbiBYXHJcbiAgICAgKiBAcGFyYW0geSAtIEFic29sdXRlIFNjcmVlbiBZXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgb3ZlcnJpZGUgaGlnaGxpZ2h0RHJvcFpvbmUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9jb250ZW50QXJlYURpbWVuc2lvbnMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VnbWVudCA9IGtleSBhcyBTdGFjay5TZWdtZW50O1xyXG4gICAgICAgICAgICBjb25zdCBhcmVhID0gdGhpcy5fY29udGVudEFyZWFEaW1lbnNpb25zW3NlZ21lbnRdLmhvdmVyQXJlYTtcclxuXHJcbiAgICAgICAgICAgIGlmIChhcmVhLngxIDwgeCAmJiBhcmVhLngyID4geCAmJiBhcmVhLnkxIDwgeSAmJiBhcmVhLnkyID4geSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzZWdtZW50ID09PSBTdGFjay5TZWdtZW50LkhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BTZWdtZW50ID0gU3RhY2suU2VnbWVudC5IZWFkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRIZWFkZXJEcm9wWm9uZSh0aGlzLl9oZWFkZXIubGVmdFJpZ2h0U2lkZWQgPyB5IDogeCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRIZWFkZXJEcm9wWm9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGlnaGxpZ2h0Qm9keURyb3Bab25lKHNlZ21lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBnZXRBcmVhKCk6IENvbnRlbnRJdGVtLkFyZWEgfCBudWxsIHtcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPT09ICdub25lJykge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGhlYWRlckFyZWEgPSBzdXBlci5nZXRFbGVtZW50QXJlYSh0aGlzLl9oZWFkZXIuZWxlbWVudCk7XHJcbiAgICAgICAgY29uc3QgY29udGVudEFyZWEgPSBzdXBlci5nZXRFbGVtZW50QXJlYSh0aGlzLl9jaGlsZEVsZW1lbnRDb250YWluZXIpO1xyXG4gICAgICAgIGlmIChoZWFkZXJBcmVhID09PSBudWxsIHx8IGNvbnRlbnRBcmVhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdTR0FIQzEzMDg2Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRXaWR0aCA9IGNvbnRlbnRBcmVhLngyIC0gY29udGVudEFyZWEueDE7XHJcbiAgICAgICAgY29uc3QgY29udGVudEhlaWdodCA9IGNvbnRlbnRBcmVhLnkyIC0gY29udGVudEFyZWEueTE7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9ucyA9IHtcclxuICAgICAgICAgICAgaGVhZGVyOiB7XHJcbiAgICAgICAgICAgICAgICBob3ZlckFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogaGVhZGVyQXJlYS54MSxcclxuICAgICAgICAgICAgICAgICAgICB5MTogaGVhZGVyQXJlYS55MSxcclxuICAgICAgICAgICAgICAgICAgICB4MjogaGVhZGVyQXJlYS54MixcclxuICAgICAgICAgICAgICAgICAgICB5MjogaGVhZGVyQXJlYS55MlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodEFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogaGVhZGVyQXJlYS54MSxcclxuICAgICAgICAgICAgICAgICAgICB5MTogaGVhZGVyQXJlYS55MSxcclxuICAgICAgICAgICAgICAgICAgICB4MjogaGVhZGVyQXJlYS54MixcclxuICAgICAgICAgICAgICAgICAgICB5MjogaGVhZGVyQXJlYS55MlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGlnaGxpZ2h0IHRoZSBlbnRpcmUgYm9keSBpZiB0aGUgc3RhY2sgaXMgZW1wdHlcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5jb250ZW50SXRlbXMubGVuZ3RoID09PSAwKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50QXJlYURpbWVuc2lvbnMuYm9keSA9IHtcclxuICAgICAgICAgICAgICAgIGhvdmVyQXJlYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxOiBjb250ZW50QXJlYS54MSxcclxuICAgICAgICAgICAgICAgICAgICB5MTogY29udGVudEFyZWEueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgeDI6IGNvbnRlbnRBcmVhLngyLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBjb250ZW50QXJlYS55MlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodEFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogY29udGVudEFyZWEueDEsXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IGNvbnRlbnRBcmVhLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiBjb250ZW50QXJlYS54MixcclxuICAgICAgICAgICAgICAgICAgICB5MjogY29udGVudEFyZWEueTJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzdXBlci5nZXRFbGVtZW50QXJlYSh0aGlzLmVsZW1lbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9ucy5sZWZ0ID0ge1xyXG4gICAgICAgICAgICAgICAgaG92ZXJBcmVhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDE6IGNvbnRlbnRBcmVhLngxLFxyXG4gICAgICAgICAgICAgICAgICAgIHkxOiBjb250ZW50QXJlYS55MSxcclxuICAgICAgICAgICAgICAgICAgICB4MjogY29udGVudEFyZWEueDEgKyBjb250ZW50V2lkdGggKiAwLjI1LFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBjb250ZW50QXJlYS55MlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodEFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogY29udGVudEFyZWEueDEsXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IGNvbnRlbnRBcmVhLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiBjb250ZW50QXJlYS54MSArIGNvbnRlbnRXaWR0aCAqIDAuNSxcclxuICAgICAgICAgICAgICAgICAgICB5MjogY29udGVudEFyZWEueTJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9ucy50b3AgPSB7XHJcbiAgICAgICAgICAgICAgICBob3ZlckFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogY29udGVudEFyZWEueDEgKyBjb250ZW50V2lkdGggKiAwLjI1LFxyXG4gICAgICAgICAgICAgICAgICAgIHkxOiBjb250ZW50QXJlYS55MSxcclxuICAgICAgICAgICAgICAgICAgICB4MjogY29udGVudEFyZWEueDEgKyBjb250ZW50V2lkdGggKiAwLjc1LFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBjb250ZW50QXJlYS55MSArIGNvbnRlbnRIZWlnaHQgKiAwLjVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRBcmVhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDE6IGNvbnRlbnRBcmVhLngxLFxyXG4gICAgICAgICAgICAgICAgICAgIHkxOiBjb250ZW50QXJlYS55MSxcclxuICAgICAgICAgICAgICAgICAgICB4MjogY29udGVudEFyZWEueDIsXHJcbiAgICAgICAgICAgICAgICAgICAgeTI6IGNvbnRlbnRBcmVhLnkxICsgY29udGVudEhlaWdodCAqIDAuNVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fY29udGVudEFyZWFEaW1lbnNpb25zLnJpZ2h0ID0ge1xyXG4gICAgICAgICAgICAgICAgaG92ZXJBcmVhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDE6IGNvbnRlbnRBcmVhLngxICsgY29udGVudFdpZHRoICogMC43NSxcclxuICAgICAgICAgICAgICAgICAgICB5MTogY29udGVudEFyZWEueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgeDI6IGNvbnRlbnRBcmVhLngyLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBjb250ZW50QXJlYS55MlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodEFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogY29udGVudEFyZWEueDEgKyBjb250ZW50V2lkdGggKiAwLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IGNvbnRlbnRBcmVhLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiBjb250ZW50QXJlYS54MixcclxuICAgICAgICAgICAgICAgICAgICB5MjogY29udGVudEFyZWEueTJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9ucy5ib3R0b20gPSB7XHJcbiAgICAgICAgICAgICAgICBob3ZlckFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogY29udGVudEFyZWEueDEgKyBjb250ZW50V2lkdGggKiAwLjI1LFxyXG4gICAgICAgICAgICAgICAgICAgIHkxOiBjb250ZW50QXJlYS55MSArIGNvbnRlbnRIZWlnaHQgKiAwLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgeDI6IGNvbnRlbnRBcmVhLngxICsgY29udGVudFdpZHRoICogMC43NSxcclxuICAgICAgICAgICAgICAgICAgICB5MjogY29udGVudEFyZWEueTJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRBcmVhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDE6IGNvbnRlbnRBcmVhLngxLFxyXG4gICAgICAgICAgICAgICAgICAgIHkxOiBjb250ZW50QXJlYS55MSArIGNvbnRlbnRIZWlnaHQgKiAwLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgeDI6IGNvbnRlbnRBcmVhLngyLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBjb250ZW50QXJlYS55MlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnRBcmVhKHRoaXMuZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvZ3JhbW1hdGljYWxseSBvcGVyYXRlIHdpdGggaGVhZGVyIHBvc2l0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiAtXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgcHJldmlvdXMgaGVhZGVyIHBvc2l0aW9uXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcG9zaXRpb25IZWFkZXIocG9zaXRpb246IFNpZGUpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5faGVhZGVyLnNpZGUgIT09IHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYWRlci5zZXRTaWRlKHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5faGVhZGVyU2lkZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnNldHVwSGVhZGVyUG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVOb2RlU2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50OiBXaWR0aEFuZEhlaWdodCA9IGdldEVsZW1lbnRXaWR0aEFuZEhlaWdodCh0aGlzLmVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2hlYWRlci5zaG93KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaW1lbnNpb24gPSB0aGlzLl9oZWFkZXIubGVmdFJpZ2h0U2lkZWQgPyBXaWR0aE9ySGVpZ2h0UHJvcGVydHlOYW1lLndpZHRoIDogV2lkdGhPckhlaWdodFByb3BlcnR5TmFtZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50W2RpbWVuc2lvbl0gLT0gdGhpcy5sYXlvdXRNYW5hZ2VyLmxheW91dENvbmZpZy5kaW1lbnNpb25zLmhlYWRlckhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZEVsZW1lbnRDb250YWluZXIuc3R5bGUud2lkdGggPSBudW1iZXJUb1BpeGVscyhjb250ZW50LndpZHRoKTtcclxuICAgICAgICAgICAgdGhpcy5fY2hpbGRFbGVtZW50Q29udGFpbmVyLnN0eWxlLmhlaWdodCA9IG51bWJlclRvUGl4ZWxzKGNvbnRlbnQuaGVpZ2h0KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50SXRlbXNbaV0uZWxlbWVudC5zdHlsZS53aWR0aCA9IG51bWJlclRvUGl4ZWxzKGNvbnRlbnQud2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50SXRlbXNbaV0uZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBudW1iZXJUb1BpeGVscyhjb250ZW50LmhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZXNpemUnKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0U3RhdGVDaGFuZ2VkRXZlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoaWdobGlnaHRIZWFkZXJEcm9wWm9uZSh4OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICAvLyBPbmx5IHdhbGsgb3ZlciB0aGUgdmlzaWJsZSB0YWJzXHJcbiAgICAgICAgY29uc3QgdGFic0xlbmd0aCA9IHRoaXMuX2hlYWRlci5sYXN0VmlzaWJsZVRhYkluZGV4ICsgMTtcclxuXHJcbiAgICAgICAgY29uc3QgZHJvcFRhcmdldEluZGljYXRvciA9IHRoaXMubGF5b3V0TWFuYWdlci5kcm9wVGFyZ2V0SW5kaWNhdG9yO1xyXG4gICAgICAgIGlmIChkcm9wVGFyZ2V0SW5kaWNhdG9yID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdTSEhEWkRUSTk3MTEwJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYXJlYTogQXJlYUxpbmtlZFJlY3Q7XHJcblxyXG4gICAgICAgIC8vIEVtcHR5IHN0YWNrXHJcbiAgICAgICAgaWYgKHRhYnNMZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY29uc3QgaGVhZGVyT2Zmc2V0ID0gZ2V0SlF1ZXJ5T2Zmc2V0KHRoaXMuX2hlYWRlci5lbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRIZWlnaHQgPSBnZXRFbGVtZW50SGVpZ2h0KHRoaXMuX2hlYWRlci5lbGVtZW50KTtcclxuICAgICAgICAgICAgYXJlYSA9IHtcclxuICAgICAgICAgICAgICAgIHgxOiBoZWFkZXJPZmZzZXQubGVmdCxcclxuICAgICAgICAgICAgICAgIHgyOiBoZWFkZXJPZmZzZXQubGVmdCArIDEwMCxcclxuICAgICAgICAgICAgICAgIHkxOiBoZWFkZXJPZmZzZXQudG9wICsgZWxlbWVudEhlaWdodCAtIDIwLFxyXG4gICAgICAgICAgICAgICAgeTI6IGhlYWRlck9mZnNldC50b3AgKyBlbGVtZW50SGVpZ2h0LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB0YWJJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgaW5kaWNhdGVzIHdoZXRoZXIgb3VyIGN1cnNvciBpcyBleGFjdGx5IG92ZXIgYSB0YWJcclxuICAgICAgICAgICAgbGV0IGlzQWJvdmVUYWIgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IHRhYlRvcDogbnVtYmVyO1xyXG4gICAgICAgICAgICBsZXQgdGFiTGVmdDogbnVtYmVyO1xyXG4gICAgICAgICAgICBsZXQgdGFiV2lkdGg6IG51bWJlcjtcclxuICAgICAgICAgICAgbGV0IHRhYkVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICB0YWJFbGVtZW50ID0gdGhpcy5faGVhZGVyLnRhYnNbdGFiSW5kZXhdLmVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBnZXRKUXVlcnlPZmZzZXQodGFiRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faGVhZGVyLmxlZnRSaWdodFNpZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiTGVmdCA9IG9mZnNldC50b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiVG9wID0gb2Zmc2V0LmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiV2lkdGggPSBnZXRFbGVtZW50SGVpZ2h0KHRhYkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJMZWZ0ID0gb2Zmc2V0LmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiVG9wID0gb2Zmc2V0LnRvcDtcclxuICAgICAgICAgICAgICAgICAgICB0YWJXaWR0aCA9IGdldEVsZW1lbnRXaWR0aCh0YWJFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoeCA+PSB0YWJMZWZ0ICYmIHggPCB0YWJMZWZ0ICsgdGFiV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc0Fib3ZlVGFiID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXgrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSB3aGlsZSAodGFiSW5kZXggPCB0YWJzTGVuZ3RoICYmICFpc0Fib3ZlVGFiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBhYm92ZSBhbnkgdGFicywgb3IgdG8gdGhlIHJpZ2h0IG9mIGFueSB0YWIsIHdlIGFyZSBvdXQgb2YgdGhlIGFyZWEsIHNvIGdpdmUgdXBcclxuICAgICAgICAgICAgaWYgKGlzQWJvdmVUYWIgPT09IGZhbHNlICYmIHggPCB0YWJMZWZ0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGhhbGZYID0gdGFiTGVmdCArIHRhYldpZHRoIC8gMjtcclxuXHJcbiAgICAgICAgICAgIGlmICh4IDwgaGFsZlgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BJbmRleCA9IHRhYkluZGV4O1xyXG4gICAgICAgICAgICAgICAgdGFiRWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWJlZ2luJywgdGhpcy5sYXlvdXRNYW5hZ2VyLnRhYkRyb3BQbGFjZWhvbGRlcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kcm9wSW5kZXggPSBNYXRoLm1pbih0YWJJbmRleCArIDEsIHRhYnNMZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgdGFiRWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgdGhpcy5sYXlvdXRNYW5hZ2VyLnRhYkRyb3BQbGFjZWhvbGRlcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRhYkRyb3BQbGFjZWhvbGRlck9mZnNldCA9IGdldEpRdWVyeU9mZnNldCh0aGlzLmxheW91dE1hbmFnZXIudGFiRHJvcFBsYWNlaG9sZGVyKTtcclxuICAgICAgICAgICAgY29uc3QgdGFiRHJvcFBsYWNlaG9sZGVyV2lkdGggPSBnZXRFbGVtZW50V2lkdGgodGhpcy5sYXlvdXRNYW5hZ2VyLnRhYkRyb3BQbGFjZWhvbGRlcilcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2hlYWRlci5sZWZ0UmlnaHRTaWRlZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2VIb2xkZXJUb3AgPSB0YWJEcm9wUGxhY2Vob2xkZXJPZmZzZXQudG9wO1xyXG4gICAgICAgICAgICAgICAgYXJlYSA9IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogdGFiVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiB0YWJUb3AgKyB0YWJFbGVtZW50LmNsaWVudEhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICB5MTogcGxhY2VIb2xkZXJUb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgeTI6IHBsYWNlSG9sZGVyVG9wICsgdGFiRHJvcFBsYWNlaG9sZGVyV2lkdGgsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2VIb2xkZXJMZWZ0ID0gdGFiRHJvcFBsYWNlaG9sZGVyT2Zmc2V0LmxlZnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgYXJlYSA9IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogcGxhY2VIb2xkZXJMZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiBwbGFjZUhvbGRlckxlZnQgKyB0YWJEcm9wUGxhY2Vob2xkZXJXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICB5MTogdGFiVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiB0YWJUb3AgKyB0YWJFbGVtZW50LmNsaWVudEhlaWdodCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRyb3BUYXJnZXRJbmRpY2F0b3IuaGlnaGxpZ2h0QXJlYShhcmVhKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZXNldEhlYWRlckRyb3Bab25lKCkge1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci50YWJEcm9wUGxhY2Vob2xkZXIucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBzZXR1cEhlYWRlclBvc2l0aW9uKCkge1xyXG4gICAgICAgIHNldEVsZW1lbnREaXNwbGF5VmlzaWJpbGl0eSh0aGlzLl9oZWFkZXIuZWxlbWVudCwgdGhpcy5faGVhZGVyLnNob3cpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKERvbUNvbnN0YW50cy5DbGFzc05hbWUuTGVmdCwgRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5SaWdodCwgRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Cb3R0b20pO1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFkZXIubGVmdFJpZ2h0U2lkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2xtXycgKyB0aGlzLl9oZWFkZXIuc2lkZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2lmIChbU2lkZS5yaWdodCwgU2lkZS5ib3R0b21dLmluY2x1ZGVzKHRoaXMuX2hlYWRlci5zaWRlKSkge1xyXG4gICAgICAgIC8vICAgIC8vIG1vdmUgdGhlIGhlYWRlciBiZWhpbmQgdGhlIGNvbnRlbnQuXHJcbiAgICAgICAgLy8gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2hlYWRlci5lbGVtZW50KTtcclxuICAgICAgICAvL31cclxuICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhpZ2hsaWdodEJvZHlEcm9wWm9uZShzZWdtZW50OiBTdGFjay5TZWdtZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9ucyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ1NIQkRaQzgyMjY1Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaGlnaGxpZ2h0QXJlYSA9IHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9uc1tzZWdtZW50XS5oaWdobGlnaHRBcmVhO1xyXG4gICAgICAgICAgICBjb25zdCBkcm9wVGFyZ2V0SW5kaWNhdG9yID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmRyb3BUYXJnZXRJbmRpY2F0b3I7XHJcbiAgICAgICAgICAgIGlmIChkcm9wVGFyZ2V0SW5kaWNhdG9yID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignU0hCRFpEOTYxMTAnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRyb3BUYXJnZXRJbmRpY2F0b3IuaGlnaGxpZ2h0QXJlYShoaWdobGlnaHRBcmVhKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BTZWdtZW50ID0gc2VnbWVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhhbmRsZVJlc2l6ZSgpIHtcclxuICAgICAgICB0aGlzLl9oZWFkZXIudXBkYXRlVGFiU2l6ZXMoKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlTWF4aW1pc2VkKCkge1xyXG4gICAgICAgIHRoaXMuX2hlYWRlci5wcm9jZXNzTWF4aW1pc2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVNaW5pbWlzZWQoKSB7XHJcbiAgICAgICAgdGhpcy5faGVhZGVyLnByb2Nlc3NNaW5pbWlzZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhhbmRsZVBvcG91dEV2ZW50KCkge1xyXG4gICAgICAgIHRoaXMucG9wb3V0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVIZWFkZXJDbGlja0V2ZW50KGV2OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgZXZlbnROYW1lID0gRXZlbnRFbWl0dGVyLmhlYWRlckNsaWNrRXZlbnROYW1lO1xyXG4gICAgICAgIGNvbnN0IGJ1YmJsaW5nRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyLkNsaWNrQnViYmxpbmdFdmVudChldmVudE5hbWUsIHRoaXMsIGV2KTtcclxuICAgICAgICB0aGlzLmVtaXQoZXZlbnROYW1lLCBidWJibGluZ0V2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhhbmRsZUhlYWRlclRvdWNoU3RhcnRFdmVudChldjogVG91Y2hFdmVudCkge1xyXG4gICAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IEV2ZW50RW1pdHRlci5oZWFkZXJUb3VjaFN0YXJ0RXZlbnROYW1lO1xyXG4gICAgICAgIGNvbnN0IGJ1YmJsaW5nRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyLlRvdWNoU3RhcnRCdWJibGluZ0V2ZW50KGV2ZW50TmFtZSwgdGhpcywgZXYpO1xyXG4gICAgICAgIHRoaXMuZW1pdChldmVudE5hbWUsIGJ1YmJsaW5nRXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlSGVhZGVyQ29tcG9uZW50UmVtb3ZlRXZlbnQoaXRlbTogQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoaXRlbSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlSGVhZGVyQ29tcG9uZW50Rm9jdXNFdmVudChpdGVtOiBDb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgdGhpcy5zZXRBY3RpdmVDb21wb25lbnRJdGVtKGl0ZW0sIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlSGVhZGVyQ29tcG9uZW50U3RhcnREcmFnRXZlbnQoeDogbnVtYmVyLCB5OiBudW1iZXIsIGRyYWdMaXN0ZW5lcjogRHJhZ0xpc3RlbmVyLCBjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNNYXhpbWlzZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVNYXhpbWlzZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIuc3RhcnRDb21wb25lbnREcmFnKHgsIHksIGRyYWdMaXN0ZW5lciwgY29tcG9uZW50SXRlbSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVIZWFkZXJDb25maWcoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9oZWFkZXJTaWRlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcuSGVhZGVyLmNyZWF0ZUNvcHkodGhpcy5faGVhZGVyQ29uZmlnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzaG93ID0gdGhpcy5faGVhZGVyLnNob3cgPyB0aGlzLl9oZWFkZXIuc2lkZSA6IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLkhlYWRlci5jcmVhdGVDb3B5KHRoaXMuX2hlYWRlckNvbmZpZywgc2hvdyk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3csXHJcbiAgICAgICAgICAgICAgICAgICAgcG9wb3V0OiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4aW1pc2U6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbmltaXNlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFiRHJvcGRvd246IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBlbWl0U3RhdGVDaGFuZ2VkRXZlbnQoKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ3N0YXRlQ2hhbmdlZCcpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFN0YWNrIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBjb25zdCBlbnVtIFNlZ21lbnQge1xyXG4gICAgICAgIEhlYWRlciA9ICdoZWFkZXInLFxyXG4gICAgICAgIEJvZHkgPSAnYm9keScsXHJcbiAgICAgICAgTGVmdCA9ICdsZWZ0JyxcclxuICAgICAgICBSaWdodCA9ICdyaWdodCcsXHJcbiAgICAgICAgVG9wID0gJ3RvcCcsXHJcbiAgICAgICAgQm90dG9tID0gJ2JvdHRvbScsXHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50QXJlYURpbWVuc2lvbiB7XHJcbiAgICAgICAgaG92ZXJBcmVhOiBBcmVhTGlua2VkUmVjdDtcclxuICAgICAgICBoaWdobGlnaHRBcmVhOiBBcmVhTGlua2VkUmVjdDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBDb250ZW50QXJlYURpbWVuc2lvbnMgPSB7XHJcbiAgICAgICAgW3NlZ21lbnQ6IHN0cmluZ106IENvbnRlbnRBcmVhRGltZW5zaW9uO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlRWxlbWVudChkb2N1bWVudDogRG9jdW1lbnQpOiBIVE1MRGl2RWxlbWVudCB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkl0ZW0pO1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlN0YWNrKTtcclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnRJdGVtQ29uZmlnLCBJdGVtQ29uZmlnLCBMYXlvdXRDb25maWcsIFJvd09yQ29sdW1uSXRlbUNvbmZpZywgU3RhY2tJdGVtQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvY29uZmlnJztcclxuaW1wb3J0IHtcclxuICAgIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyxcclxuICAgIFJlc29sdmVkSXRlbUNvbmZpZyxcclxuICAgIFJlc29sdmVkTGF5b3V0Q29uZmlnLFxyXG4gICAgUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcsXHJcbiAgICBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnLFxyXG4gICAgUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcsXHJcbiAgICBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZ1xyXG59IGZyb20gXCIuL2NvbmZpZy9yZXNvbHZlZC1jb25maWdcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50Q29udGFpbmVyIH0gZnJvbSAnLi9jb250YWluZXIvY29tcG9uZW50LWNvbnRhaW5lcic7XHJcbmltcG9ydCB7IEJyb3dzZXJQb3BvdXQgfSBmcm9tICcuL2NvbnRyb2xzL2Jyb3dzZXItcG9wb3V0JztcclxuaW1wb3J0IHsgRHJhZ1Byb3h5IH0gZnJvbSAnLi9jb250cm9scy9kcmFnLXByb3h5JztcclxuaW1wb3J0IHsgRHJhZ1NvdXJjZSB9IGZyb20gJy4vY29udHJvbHMvZHJhZy1zb3VyY2UnO1xyXG5pbXBvcnQgeyBEcm9wVGFyZ2V0SW5kaWNhdG9yIH0gZnJvbSAnLi9jb250cm9scy9kcm9wLXRhcmdldC1pbmRpY2F0b3InO1xyXG5pbXBvcnQgeyBUcmFuc2l0aW9uSW5kaWNhdG9yIH0gZnJvbSAnLi9jb250cm9scy90cmFuc2l0aW9uLWluZGljYXRvcic7XHJcbmltcG9ydCB7IENvbmZpZ3VyYXRpb25FcnJvciB9IGZyb20gJy4vZXJyb3JzL2V4dGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgQXNzZXJ0RXJyb3IsIFVuZXhwZWN0ZWROdWxsRXJyb3IsIFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvciwgVW5yZWFjaGFibGVDYXNlRXJyb3IgfSBmcm9tICcuL2Vycm9ycy9pbnRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuL2l0ZW1zL2NvbXBvbmVudC1pdGVtJztcclxuaW1wb3J0IHsgQ29tcG9uZW50UGFyZW50YWJsZUl0ZW0gfSBmcm9tICcuL2l0ZW1zL2NvbXBvbmVudC1wYXJlbnRhYmxlLWl0ZW0nO1xyXG5pbXBvcnQgeyBDb250ZW50SXRlbSB9IGZyb20gJy4vaXRlbXMvY29udGVudC1pdGVtJztcclxuaW1wb3J0IHsgR3JvdW5kSXRlbSB9IGZyb20gJy4vaXRlbXMvZ3JvdW5kLWl0ZW0nO1xyXG5pbXBvcnQgeyBSb3dPckNvbHVtbiB9IGZyb20gJy4vaXRlbXMvcm93LW9yLWNvbHVtbic7XHJcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi9pdGVtcy9zdGFjayc7XHJcbmltcG9ydCB7IENvbmZpZ01pbmlmaWVyIH0gZnJvbSAnLi91dGlscy9jb25maWctbWluaWZpZXInO1xyXG5pbXBvcnQgeyBEb21Db25zdGFudHMgfSBmcm9tICcuL3V0aWxzL2RvbS1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIgfSBmcm9tICcuL3V0aWxzL2RyYWctbGlzdGVuZXInO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuL3V0aWxzL2V2ZW50LWVtaXR0ZXInO1xyXG5pbXBvcnQgeyBFdmVudEh1YiB9IGZyb20gJy4vdXRpbHMvZXZlbnQtaHViJztcclxuaW1wb3J0IHsgSTE4blN0cmluZ0lkLCBJMThuU3RyaW5ncywgaTE4blN0cmluZ3MgfSBmcm9tICcuL3V0aWxzL2kxOG4tc3RyaW5ncyc7XHJcbmltcG9ydCB7IEl0ZW1UeXBlLCBKc29uVmFsdWUsIFJlY3QsIFJlc3BvbnNpdmVNb2RlIH0gZnJvbSAnLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7XHJcbiAgICBnZXRFbGVtZW50V2lkdGhBbmRIZWlnaHQsXHJcbiAgICByZW1vdmVGcm9tQXJyYXksXHJcbiAgICBzZXRFbGVtZW50SGVpZ2h0LFxyXG4gICAgc2V0RWxlbWVudFdpZHRoXHJcbn0gZnJvbSAnLi91dGlscy91dGlscyc7XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIF9fZ2xJbnN0YW5jZTogTGF5b3V0TWFuYWdlcjtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoZSBtYWluIGNsYXNzIHRoYXQgd2lsbCBiZSBleHBvc2VkIGFzIEdvbGRlbkxheW91dC5cclxuICovXHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTGF5b3V0TWFuYWdlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jb250YWluZXJFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzRnVsbFBhZ2UgPSBmYWxzZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzSW5pdGlhbGlzZWQgPSBmYWxzZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2dyb3VuZEl0ZW06IEdyb3VuZEl0ZW0gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9vcGVuUG9wb3V0czogQnJvd3NlclBvcG91dFtdID0gW107XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9kcm9wVGFyZ2V0SW5kaWNhdG9yOiBEcm9wVGFyZ2V0SW5kaWNhdG9yIHwgbnVsbCA9IG51bGw7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF90cmFuc2l0aW9uSW5kaWNhdG9yOiBUcmFuc2l0aW9uSW5kaWNhdG9yIHwgbnVsbCA9IG51bGw7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9yZXNpemVUaW1lb3V0SWQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfaXRlbUFyZWFzOiBDb250ZW50SXRlbS5BcmVhW10gPSBbXTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX21heGltaXNlZFN0YWNrOiBTdGFjayB8IHVuZGVmaW5lZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX21heGltaXNlUGxhY2Vob2xkZXIgPSBMYXlvdXRNYW5hZ2VyLmNyZWF0ZU1heGltaXNlUGxhY2VFbGVtZW50KGRvY3VtZW50KTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3RhYkRyb3BQbGFjZWhvbGRlciA9IExheW91dE1hbmFnZXIuY3JlYXRlVGFiRHJvcFBsYWNlaG9sZGVyRWxlbWVudChkb2N1bWVudCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9kcmFnU291cmNlczogRHJhZ1NvdXJjZVtdID0gW107XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF91cGRhdGluZ0NvbHVtbnNSZXNwb25zaXZlID0gZmFsc2U7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9maXJzdExvYWQgPSB0cnVlO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZXZlbnRIdWIgPSBuZXcgRXZlbnRIdWIodGhpcyk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF93aWR0aDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9oZWlnaHQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZm9jdXNlZENvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0gfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF92aXJ0dWFsU2l6ZWRDb250YWluZXJzOiBDb21wb25lbnRDb250YWluZXJbXSA9IFtdO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdmlydHVhbFNpemVkQ29udGFpbmVyQWRkaW5nQmVnaW5Db3VudCA9IDA7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfd2luZG93UmVzaXplTGlzdGVuZXIgPSAoKSA9PiB0aGlzLnByb2Nlc3NSZXNpemVXaXRoRGVib3VuY2UoKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3dpbmRvd1VubG9hZExpc3RlbmVyID0gKCkgPT4gdGhpcy5vblVubG9hZCgpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfbWF4aW1pc2VkU3RhY2tCZWZvcmVEZXN0cm95ZWRMaXN0ZW5lciA9IChldjogRXZlbnRFbWl0dGVyLkJ1YmJsaW5nRXZlbnQpID0+IHRoaXMuY2xlYW51cEJlZm9yZU1heGltaXNlZFN0YWNrRGVzdHJveWVkKGV2KTtcclxuXHJcbiAgICByZWFkb25seSBpc1N1YldpbmRvdzogYm9vbGVhbjtcclxuICAgIGxheW91dENvbmZpZzogUmVzb2x2ZWRMYXlvdXRDb25maWc7XHJcblxyXG4gICAgYmVmb3JlVmlydHVhbFJlY3RpbmdFdmVudDogTGF5b3V0TWFuYWdlci5CZWZvcmVWaXJ0dWFsUmVjdGluZ0V2ZW50IHwgdW5kZWZpbmVkO1xyXG4gICAgYWZ0ZXJWaXJ0dWFsUmVjdGluZ0V2ZW50OiBMYXlvdXRNYW5hZ2VyLkFmdGVyVmlydHVhbFJlY3RpbmdFdmVudCB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBnZXQgY29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2NvbnRhaW5lckVsZW1lbnQ7IH1cclxuICAgIGdldCBpc0luaXRpYWxpc2VkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faXNJbml0aWFsaXNlZDsgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZ2V0IGdyb3VuZEl0ZW0oKTogR3JvdW5kSXRlbSB8IHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLl9ncm91bmRJdGVtOyB9XHJcbiAgICAvKiogQGludGVybmFsIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKExheW91dE1hbmFnZXI6Y2xhc3MpLmdyb3VuZEl0ZW19IGluc3RlYWQgKi9cclxuICAgIGdldCByb290KCk6IEdyb3VuZEl0ZW0gfCB1bmRlZmluZWQgeyByZXR1cm4gdGhpcy5fZ3JvdW5kSXRlbTsgfVxyXG4gICAgZ2V0IG9wZW5Qb3BvdXRzKCk6IEJyb3dzZXJQb3BvdXRbXSB7IHJldHVybiB0aGlzLl9vcGVuUG9wb3V0czsgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZ2V0IGRyb3BUYXJnZXRJbmRpY2F0b3IoKTogRHJvcFRhcmdldEluZGljYXRvciB8IG51bGwgeyByZXR1cm4gdGhpcy5fZHJvcFRhcmdldEluZGljYXRvcjsgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCBAZGVwcmVjYXRlZCBUbyBiZSByZW1vdmVkICovXHJcbiAgICBnZXQgdHJhbnNpdGlvbkluZGljYXRvcigpOiBUcmFuc2l0aW9uSW5kaWNhdG9yIHwgbnVsbCB7IHJldHVybiB0aGlzLl90cmFuc2l0aW9uSW5kaWNhdG9yOyB9XHJcbiAgICBnZXQgd2lkdGgoKTogbnVtYmVyIHwgbnVsbCB7IHJldHVybiB0aGlzLl93aWR0aDsgfVxyXG4gICAgZ2V0IGhlaWdodCgpOiBudW1iZXIgfCBudWxsIHsgcmV0dXJuIHRoaXMuX2hlaWdodDsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHtAbGluayAoRXZlbnRIdWI6Y2xhc3MpfSBpbnN0YW5jZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBsYXlvdXQgbWFuYWdlci5cclxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcHJvcGFnYXRlIGV2ZW50cyBiZXR3ZWVuIHRoZSB3aW5kb3dzXHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKi9cclxuICAgIGdldCBldmVudEh1YigpOiBFdmVudEh1YiB7IHJldHVybiB0aGlzLl9ldmVudEh1YjsgfVxyXG4gICAgZ2V0IHJvb3RJdGVtKCk6IENvbnRlbnRJdGVtIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFjY2VzcyByb290SXRlbSBiZWZvcmUgaW5pdCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdyb3VuZENvbnRlbnRJdGVtcyA9IHRoaXMuX2dyb3VuZEl0ZW0uY29udGVudEl0ZW1zO1xyXG4gICAgICAgICAgICBpZiAoZ3JvdW5kQ29udGVudEl0ZW1zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ncm91bmRJdGVtLmNvbnRlbnRJdGVtc1swXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldCBmb2N1c2VkQ29tcG9uZW50SXRlbSgpOiBDb21wb25lbnRJdGVtIHwgdW5kZWZpbmVkIHsgcmV0dXJuIHRoaXMuX2ZvY3VzZWRDb21wb25lbnRJdGVtOyB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBnZXQgdGFiRHJvcFBsYWNlaG9sZGVyKCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX3RhYkRyb3BQbGFjZWhvbGRlcjsgfVxyXG4gICAgZ2V0IG1heGltaXNlZFN0YWNrKCk6IFN0YWNrIHwgdW5kZWZpbmVkIHsgcmV0dXJuIHRoaXMuX21heGltaXNlZFN0YWNrOyB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAcGFyYW0gY29udGFpbmVyIC0gQSBEb20gSFRNTCBlbGVtZW50LiBEZWZhdWx0cyB0byBib2R5XHJcbiAgICAqIEBpbnRlcm5hbFxyXG4gICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnM6IExheW91dE1hbmFnZXIuQ29uc3RydWN0b3JQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgbGV0IGxheW91dENvbmZpZyA9IHBhcmFtZXRlcnMubGF5b3V0Q29uZmlnO1xyXG4gICAgICAgIGlmIChsYXlvdXRDb25maWcgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsYXlvdXRDb25maWcgPSBSZXNvbHZlZExheW91dENvbmZpZy5jcmVhdGVEZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxheW91dENvbmZpZyA9IGxheW91dENvbmZpZztcclxuICAgICAgICB0aGlzLmlzU3ViV2luZG93ID0gcGFyYW1ldGVycy5pc1N1YldpbmRvdztcclxuXHJcbiAgICAgICAgSTE4blN0cmluZ3MuY2hlY2tJbml0aWFsaXNlKCk7XHJcbiAgICAgICAgQ29uZmlnTWluaWZpZXIuY2hlY2tJbml0aWFsaXNlKCk7XHJcblxyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLmNvbnRhaW5lckVsZW1lbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXJFbGVtZW50ID0gcGFyYW1ldGVycy5jb250YWluZXJFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3lzIHRoZSBMYXlvdXRNYW5hZ2VyIGluc3RhbmNlIGl0c2VsZiBhcyB3ZWxsIGFzIGV2ZXJ5IENvbnRlbnRJdGVtXHJcbiAgICAgKiB3aXRoaW4gaXQuIEFmdGVyIHRoaXMgaXMgY2FsbGVkIG5vdGhpbmcgc2hvdWxkIGJlIGxlZnQgb2YgdGhlIExheW91dE1hbmFnZXIuXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzSW5pdGlhbGlzZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGF5b3V0Q29uZmlnLnNldHRpbmdzLmNsb3NlUG9wb3V0c09uVW5sb2FkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX29wZW5Qb3BvdXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3BlblBvcG91dHNbaV0uY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNGdWxsUGFnZSkge1xyXG4gICAgICAgICAgICAgICAgZ2xvYmFsVGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl93aW5kb3dSZXNpemVMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ2xvYmFsVGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd1bmxvYWQnLCB0aGlzLl93aW5kb3dVbmxvYWRMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIGdsb2JhbFRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5fd2luZG93VW5sb2FkTGlzdGVuZXIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ncm91bmRJdGVtLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl90YWJEcm9wUGxhY2Vob2xkZXIucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kcm9wVGFyZ2V0SW5kaWNhdG9yICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kcm9wVGFyZ2V0SW5kaWNhdG9yLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdHJhbnNpdGlvbkluZGljYXRvciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvbkluZGljYXRvci5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRIdWIuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBkcmFnU291cmNlIG9mIHRoaXMuX2RyYWdTb3VyY2VzKSB7XHJcbiAgICAgICAgICAgICAgICBkcmFnU291cmNlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9kcmFnU291cmNlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faXNJbml0aWFsaXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRha2VzIGEgR29sZGVuTGF5b3V0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGFuZFxyXG4gICAgICogcmVwbGFjZXMgaXRzIGtleXMgYW5kIHZhbHVlcyByZWN1cnNpdmVseSB3aXRoXHJcbiAgICAgKiBvbmUgbGV0dGVyIGNvZGVzXHJcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChSZXNvbHZlZExheW91dENvbmZpZzpuYW1lc3BhY2UpLm1pbmlmeUNvbmZpZ30gaW5zdGVhZFxyXG4gICAgICovXHJcbiAgICBtaW5pZnlDb25maWcoY29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZyk6IFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgICAgICByZXR1cm4gUmVzb2x2ZWRMYXlvdXRDb25maWcubWluaWZ5Q29uZmlnKGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUYWtlcyBhIGNvbmZpZ3VyYXRpb24gT2JqZWN0IHRoYXQgd2FzIHByZXZpb3VzbHkgbWluaWZpZWRcclxuICAgICAqIHVzaW5nIG1pbmlmeUNvbmZpZyBhbmQgcmV0dXJucyBpdHMgb3JpZ2luYWwgdmVyc2lvblxyXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoUmVzb2x2ZWRMYXlvdXRDb25maWc6bmFtZXNwYWNlKS51bm1pbmlmeUNvbmZpZ30gaW5zdGVhZFxyXG4gICAgICovXHJcbiAgICB1bm1pbmlmeUNvbmZpZyhjb25maWc6IFJlc29sdmVkTGF5b3V0Q29uZmlnKTogUmVzb2x2ZWRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIHJldHVybiBSZXNvbHZlZExheW91dENvbmZpZy51bm1pbmlmeUNvbmZpZyhjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGFic3RyYWN0IGJpbmRDb21wb25lbnQoY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXIsIGl0ZW1Db25maWc6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyk6IENvbXBvbmVudENvbnRhaW5lci5CaW5kYWJsZUNvbXBvbmVudDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGFic3RyYWN0IHVuYmluZENvbXBvbmVudChjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgdmlydHVhbDogYm9vbGVhbiwgY29tcG9uZW50OiBDb21wb25lbnRDb250YWluZXIuQ29tcG9uZW50IHwgdW5kZWZpbmVkKTogdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBmcm9tIEdvbGRlbkxheW91dCBjbGFzcy4gRmluaXNoZXMgb2YgaW5pdFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRDb250YWluZXIoKTtcclxuICAgICAgICB0aGlzLl9kcm9wVGFyZ2V0SW5kaWNhdG9yID0gbmV3IERyb3BUYXJnZXRJbmRpY2F0b3IoLyp0aGlzLmNvbnRhaW5lciovKTtcclxuICAgICAgICB0aGlzLl90cmFuc2l0aW9uSW5kaWNhdG9yID0gbmV3IFRyYW5zaXRpb25JbmRpY2F0b3IoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNpemVGcm9tQ29udGFpbmVyKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGxheW91dENvbmZpZyA9IHRoaXMubGF5b3V0Q29uZmlnO1xyXG4gICAgICAgIHRoaXMuX2dyb3VuZEl0ZW0gPSBuZXcgR3JvdW5kSXRlbSh0aGlzLCBsYXlvdXRDb25maWcucm9vdCwgdGhpcy5fY29udGFpbmVyRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5pbml0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuY2hlY2tMb2FkZWRMYXlvdXRNYXhpbWlzZUl0ZW0oKTtcclxuXHJcbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XHJcbiAgICAgICAgdGhpcy5faXNJbml0aWFsaXNlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5hZGp1c3RDb2x1bW5zUmVzcG9uc2l2ZSgpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnaW5pdGlhbGlzZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExvYWRzIGEgbmV3IGxheW91dFxyXG4gICAgICogQHBhcmFtIGxheW91dENvbmZpZyAtIE5ldyBsYXlvdXQgdG8gYmUgbG9hZGVkXHJcbiAgICAgKi9cclxuICAgIGxvYWRMYXlvdXQobGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWcpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXNlZCkge1xyXG4gICAgICAgICAgICAvLyBJbiBjYXNlIGFwcGxpY2F0aW9uIG5vdCBjb3JyZWN0bHkgdXNpbmcgbGVnYWN5IGNvbnN0cnVjdG9yXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR29sZGVuTGF5b3V0OiBOZWVkIHRvIGNhbGwgaW5pdCgpIGlmIExheW91dENvbmZpZyB3aXRoIGRlZmluZWQgcm9vdCBwYXNzZWQgdG8gY29uc3RydWN0b3InKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNTEwxMTExOScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXlvdXRDb25maWcgPSBMYXlvdXRDb25maWcucmVzb2x2ZShsYXlvdXRDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5sb2FkUm9vdCh0aGlzLmxheW91dENvbmZpZy5yb290KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tMb2FkZWRMYXlvdXRNYXhpbWlzZUl0ZW0oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRqdXN0Q29sdW1uc1Jlc3BvbnNpdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBsYXlvdXQgY29uZmlndXJhdGlvbiBvYmplY3QgYmFzZWQgb24gdGhlIHRoZSBjdXJyZW50IHN0YXRlXHJcbiAgICAgKlxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICogQHJldHVybnMgR29sZGVuTGF5b3V0IGNvbmZpZ3VyYXRpb25cclxuICAgICAqL1xyXG4gICAgc2F2ZUxheW91dCgpOiBSZXNvbHZlZExheW91dENvbmZpZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzSW5pdGlhbGlzZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBjcmVhdGUgY29uZmlnLCBsYXlvdXQgbm90IHlldCBpbml0aWFsaXNlZCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiAocm9vdCAhPT0gdW5kZWZpbmVkICYmICEocm9vdCBpbnN0YW5jZW9mIENvbnRlbnRJdGVtKSkge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhyb3cgbmV3IEVycm9yKCdSb290IG11c3QgYmUgYSBDb250ZW50SXRlbScpO1xyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAqIENvbnRlbnRcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1UQzE4MjQ0Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBncm91bmRDb250ZW50ID0gdGhpcy5fZ3JvdW5kSXRlbS5jYWxjdWxhdGVDb25maWdDb250ZW50KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHJvb3RJdGVtQ29uZmlnOiBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyb3VuZENvbnRlbnQubGVuZ3RoICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdEl0ZW1Db25maWcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3RJdGVtQ29uZmlnID0gZ3JvdW5kQ29udGVudFswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICAgKiBSZXRyaWV2ZSBjb25maWcgZm9yIHN1YndpbmRvd3NcclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29uY2lsZVBvcG91dFdpbmRvd3MoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wZW5Qb3BvdXRzOiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZ1tdID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX29wZW5Qb3BvdXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlblBvcG91dHMucHVzaCh0aGlzLl9vcGVuUG9wb3V0c1tpXS50b0NvbmZpZygpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWc6IFJlc29sdmVkTGF5b3V0Q29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IHJvb3RJdGVtQ29uZmlnLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5Qb3BvdXRzLFxyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiAgUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuY3JlYXRlQ29weSh0aGlzLmxheW91dENvbmZpZy5zZXR0aW5ncyksXHJcbiAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9uczogUmVzb2x2ZWRMYXlvdXRDb25maWcuRGltZW5zaW9ucy5jcmVhdGVDb3B5KHRoaXMubGF5b3V0Q29uZmlnLmRpbWVuc2lvbnMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcjogUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmNyZWF0ZUNvcHkodGhpcy5sYXlvdXRDb25maWcuaGVhZGVyKSxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhbnkgZXhpc3RpbmcgbGF5b3V0LiBFZmZlY3RpdmVseSwgYW4gZW1wdHkgbGF5b3V0IHdpbGwgYmUgbG9hZGVkLlxyXG4gICAgICovXHJcblxyXG4gICAgIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1DTDExMTI5Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5jbGVhclJvb3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIChMYXlvdXRNYW5hZ2VyOmNsYXNzKS5zYXZlTGF5b3V0fVxyXG4gICAgICovXHJcbiAgICB0b0NvbmZpZygpOiBSZXNvbHZlZExheW91dENvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZUxheW91dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyBDb21wb25lbnRJdGVtLiAgV2lsbCB1c2UgZGVmYXVsdCBsb2NhdGlvbiBzZWxlY3RvcnMgdG8gZW5zdXJlIGEgbG9jYXRpb24gaXMgZm91bmQgYW5kXHJcbiAgICAgKiBjb21wb25lbnQgaXMgc3VjY2Vzc2Z1bGx5IGFkZGVkXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50VHlwZU5hbWUgLSBOYW1lIG9mIGNvbXBvbmVudCB0eXBlIHRvIGJlIGNyZWF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBPcHRpb25hbCBpbml0aWFsIHN0YXRlIHRvIGJlIGFzc2lnbmVkIHRvIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnMgTmV3IENvbXBvbmVudEl0ZW0gY3JlYXRlZC5cclxuICAgICAqL1xyXG4gICAgbmV3Q29tcG9uZW50KGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZSwgY29tcG9uZW50U3RhdGU/OiBKc29uVmFsdWUsIHRpdGxlPzogc3RyaW5nKTogQ29tcG9uZW50SXRlbSB7XHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50SXRlbSA9IHRoaXMubmV3Q29tcG9uZW50QXRMb2NhdGlvbihjb21wb25lbnRUeXBlLCBjb21wb25lbnRTdGF0ZSwgdGl0bGUpO1xyXG4gICAgICAgIGlmIChjb21wb25lbnRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdMTU5DNjU1ODgnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50SXRlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgQ29tcG9uZW50SXRlbSBhdCB0aGUgZmlyc3QgdmFsaWQgc2VsZWN0b3IgbG9jYXRpb24uXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50VHlwZU5hbWUgLSBOYW1lIG9mIGNvbXBvbmVudCB0eXBlIHRvIGJlIGNyZWF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBPcHRpb25hbCBpbml0aWFsIHN0YXRlIHRvIGJlIGFzc2lnbmVkIHRvIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIGxvY2F0aW9uU2VsZWN0b3JzIC0gQXJyYXkgb2YgbG9jYXRpb24gc2VsZWN0b3JzIHVzZWQgdG8gZmluZCBsb2NhdGlvbiBpbiBsYXlvdXQgd2hlcmUgY29tcG9uZW50XHJcbiAgICAgKiB3aWxsIGJlIGFkZGVkLiBGaXJzdCBsb2NhdGlvbiBpbiBhcnJheSB3aGljaCBpcyB2YWxpZCB3aWxsIGJlIHVzZWQuIElmIGxvY2F0aW9uU2VsZWN0b3JzIGlzIHVuZGVmaW5lZCxcclxuICAgICAqIHtAbGluayAoTGF5b3V0TWFuYWdlcjpuYW1lc3BhY2UpLmRlZmF1bHRMb2NhdGlvblNlbGVjdG9yc30gd2lsbCBiZSB1c2VkXHJcbiAgICAgKiBAcmV0dXJucyBOZXcgQ29tcG9uZW50SXRlbSBjcmVhdGVkIG9yIHVuZGVmaW5lZCBpZiBubyB2YWxpZCBsb2NhdGlvbiBzZWxlY3RvciB3YXMgaW4gYXJyYXkuXHJcbiAgICAgKi9cclxuICAgIG5ld0NvbXBvbmVudEF0TG9jYXRpb24oY29tcG9uZW50VHlwZTogSnNvblZhbHVlLCBjb21wb25lbnRTdGF0ZT86IEpzb25WYWx1ZSwgdGl0bGU/OiBzdHJpbmcsXHJcbiAgICAgICAgbG9jYXRpb25TZWxlY3RvcnM/OiBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uU2VsZWN0b3JbXVxyXG4gICAgKTogQ29tcG9uZW50SXRlbSB8IHVuZGVmaW5lZHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFkZCBjb21wb25lbnQgYmVmb3JlIGluaXQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuYWRkQ29tcG9uZW50QXRMb2NhdGlvbihjb21wb25lbnRUeXBlLCBjb21wb25lbnRTdGF0ZSwgdGl0bGUsIGxvY2F0aW9uU2VsZWN0b3JzKTtcclxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVkSXRlbSA9IGxvY2F0aW9uLnBhcmVudEl0ZW0uY29udGVudEl0ZW1zW2xvY2F0aW9uLmluZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmICghQ29udGVudEl0ZW0uaXNDb21wb25lbnRJdGVtKGNyZWF0ZWRJdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1OQzk5Mjg3NzUzMycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlZEl0ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbmV3IENvbXBvbmVudEl0ZW0uICBXaWxsIHVzZSBkZWZhdWx0IGxvY2F0aW9uIHNlbGVjdG9ycyB0byBlbnN1cmUgYSBsb2NhdGlvbiBpcyBmb3VuZCBhbmRcclxuICAgICAqIGNvbXBvbmVudCBpcyBzdWNjZXNzZnVsbHkgYWRkZWRcclxuICAgICAqIEBwYXJhbSBjb21wb25lbnRUeXBlIC0gVHlwZSBvZiBjb21wb25lbnQgdG8gYmUgY3JlYXRlZC5cclxuICAgICAqIEBwYXJhbSBzdGF0ZSAtIE9wdGlvbmFsIGluaXRpYWwgc3RhdGUgdG8gYmUgYXNzaWduZWQgdG8gY29tcG9uZW50XHJcbiAgICAgKiBAcmV0dXJucyBMb2NhdGlvbiBvZiBuZXcgQ29tcG9uZW50SXRlbSBjcmVhdGVkLlxyXG4gICAgICovXHJcbiAgICBhZGRDb21wb25lbnQoY29tcG9uZW50VHlwZTogSnNvblZhbHVlLCBjb21wb25lbnRTdGF0ZT86IEpzb25WYWx1ZSwgdGl0bGU/OiBzdHJpbmcpOiBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uIHtcclxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuYWRkQ29tcG9uZW50QXRMb2NhdGlvbihjb21wb25lbnRUeXBlLCBjb21wb25lbnRTdGF0ZSwgdGl0bGUpO1xyXG4gICAgICAgIGlmIChsb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1BQzk5OTQzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBDb21wb25lbnRJdGVtIGF0IHRoZSBmaXJzdCB2YWxpZCBzZWxlY3RvciBsb2NhdGlvbi5cclxuICAgICAqIEBwYXJhbSBjb21wb25lbnRUeXBlIC0gVHlwZSBvZiBjb21wb25lbnQgdG8gYmUgY3JlYXRlZC5cclxuICAgICAqIEBwYXJhbSBzdGF0ZSAtIE9wdGlvbmFsIGluaXRpYWwgc3RhdGUgdG8gYmUgYXNzaWduZWQgdG8gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0gbG9jYXRpb25TZWxlY3RvcnMgLSBBcnJheSBvZiBsb2NhdGlvbiBzZWxlY3RvcnMgdXNlZCB0byBmaW5kIGRldGVybWluZSBsb2NhdGlvbiBpbiBsYXlvdXQgd2hlcmUgY29tcG9uZW50XHJcbiAgICAgKiB3aWxsIGJlIGFkZGVkLiBGaXJzdCBsb2NhdGlvbiBpbiBhcnJheSB3aGljaCBpcyB2YWxpZCB3aWxsIGJlIHVzZWQuIElmIHVuZGVmaW5lZCxcclxuICAgICAqIHtAbGluayAoTGF5b3V0TWFuYWdlcjpuYW1lc3BhY2UpLmRlZmF1bHRMb2NhdGlvblNlbGVjdG9yc30gd2lsbCBiZSB1c2VkLlxyXG4gICAgICogQHJldHVybnMgTG9jYXRpb24gb2YgbmV3IENvbXBvbmVudEl0ZW0gY3JlYXRlZCBvciB1bmRlZmluZWQgaWYgbm8gdmFsaWQgbG9jYXRpb24gc2VsZWN0b3Igd2FzIGluIGFycmF5LlxyXG4gICAgICovXHJcbiAgICBhZGRDb21wb25lbnRBdExvY2F0aW9uKGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZSwgY29tcG9uZW50U3RhdGU/OiBKc29uVmFsdWUsIHRpdGxlPzogc3RyaW5nLFxyXG4gICAgICAgIGxvY2F0aW9uU2VsZWN0b3JzPzogcmVhZG9ubHkgTGF5b3V0TWFuYWdlci5Mb2NhdGlvblNlbGVjdG9yW11cclxuICAgICk6IExheW91dE1hbmFnZXIuTG9jYXRpb24gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1Db25maWc6IENvbXBvbmVudEl0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdjb21wb25lbnQnLFxyXG4gICAgICAgICAgICBjb21wb25lbnRUeXBlLFxyXG4gICAgICAgICAgICBjb21wb25lbnRTdGF0ZSxcclxuICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkSXRlbUF0TG9jYXRpb24oaXRlbUNvbmZpZywgbG9jYXRpb25TZWxlY3RvcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyBDb250ZW50SXRlbS4gIFdpbGwgdXNlIGRlZmF1bHQgbG9jYXRpb24gc2VsZWN0b3JzIHRvIGVuc3VyZSBhIGxvY2F0aW9uIGlzIGZvdW5kIGFuZFxyXG4gICAgICogY29tcG9uZW50IGlzIHN1Y2Nlc3NmdWxseSBhZGRlZFxyXG4gICAgICogQHBhcmFtIGl0ZW1Db25maWcgLSBSZXNvbHZlZEl0ZW1Db25maWcgb2YgY2hpbGQgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBAcmV0dXJucyBOZXcgQ29udGVudEl0ZW0gY3JlYXRlZC5cclxuICAgICovXHJcbiAgICBuZXdJdGVtKGl0ZW1Db25maWc6IFJvd09yQ29sdW1uSXRlbUNvbmZpZyB8IFN0YWNrSXRlbUNvbmZpZyB8IENvbXBvbmVudEl0ZW1Db25maWcpOiBDb250ZW50SXRlbSB7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSB0aGlzLm5ld0l0ZW1BdExvY2F0aW9uKGl0ZW1Db25maWcpO1xyXG4gICAgICAgIGlmIChjb250ZW50SXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1OQzY1NTg4Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRJdGVtO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBuZXcgY2hpbGQgQ29udGVudEl0ZW0gdW5kZXIgdGhlIHJvb3QgQ29udGVudEl0ZW0uICBJZiBhIHJvb3QgZG9lcyBub3QgZXhpc3QsIHRoZW4gY3JlYXRlIHJvb3QgQ29udGVudEl0ZW0gaW5zdGVhZFxyXG4gICAgICogQHBhcmFtIGl0ZW1Db25maWcgLSBSZXNvbHZlZEl0ZW1Db25maWcgb2YgY2hpbGQgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBAcGFyYW0gbG9jYXRpb25TZWxlY3RvcnMgLSBBcnJheSBvZiBsb2NhdGlvbiBzZWxlY3RvcnMgdXNlZCB0byBmaW5kIGRldGVybWluZSBsb2NhdGlvbiBpbiBsYXlvdXQgd2hlcmUgQ29udGVudEl0ZW1cclxuICAgICAqIHdpbGwgYmUgYWRkZWQuIEZpcnN0IGxvY2F0aW9uIGluIGFycmF5IHdoaWNoIGlzIHZhbGlkIHdpbGwgYmUgdXNlZC4gSWYgdW5kZWZpbmVkLFxyXG4gICAgICoge0BsaW5rIChMYXlvdXRNYW5hZ2VyOm5hbWVzcGFjZSkuZGVmYXVsdExvY2F0aW9uU2VsZWN0b3JzfSB3aWxsIGJlIHVzZWQuXHJcbiAgICAgKiBAcmV0dXJucyBOZXcgQ29udGVudEl0ZW0gY3JlYXRlZCBvciB1bmRlZmluZWQgaWYgbm8gdmFsaWQgbG9jYXRpb24gc2VsZWN0b3Igd2FzIGluIGFycmF5LiAqL1xyXG4gICAgbmV3SXRlbUF0TG9jYXRpb24oaXRlbUNvbmZpZzogUm93T3JDb2x1bW5JdGVtQ29uZmlnIHwgU3RhY2tJdGVtQ29uZmlnIHwgQ29tcG9uZW50SXRlbUNvbmZpZyxcclxuICAgICAgICBsb2NhdGlvblNlbGVjdG9ycz86IHJlYWRvbmx5IExheW91dE1hbmFnZXIuTG9jYXRpb25TZWxlY3RvcltdXHJcbiAgICApOiBDb250ZW50SXRlbSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBhZGQgY29tcG9uZW50IGJlZm9yZSBpbml0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmFkZEl0ZW1BdExvY2F0aW9uKGl0ZW1Db25maWcsIGxvY2F0aW9uU2VsZWN0b3JzKTtcclxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVkSXRlbSA9IGxvY2F0aW9uLnBhcmVudEl0ZW0uY29udGVudEl0ZW1zW2xvY2F0aW9uLmluZGV4XTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVkSXRlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBuZXcgQ29udGVudEl0ZW0uICBXaWxsIHVzZSBkZWZhdWx0IGxvY2F0aW9uIHNlbGVjdG9ycyB0byBlbnN1cmUgYSBsb2NhdGlvbiBpcyBmb3VuZCBhbmRcclxuICAgICAqIGNvbXBvbmVudCBpcyBzdWNjZXNzZnVsbHkgYWRkZWQuXHJcbiAgICAgKiBAcGFyYW0gaXRlbUNvbmZpZyAtIFJlc29sdmVkSXRlbUNvbmZpZyBvZiBjaGlsZCB0byBiZSBhZGRlZC5cclxuICAgICAqIEByZXR1cm5zIExvY2F0aW9uIG9mIG5ldyBDb250ZW50SXRlbSBjcmVhdGVkLiAqL1xyXG4gICAgYWRkSXRlbShpdGVtQ29uZmlnOiBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnKTogTGF5b3V0TWFuYWdlci5Mb2NhdGlvbiB7XHJcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmFkZEl0ZW1BdExvY2F0aW9uKGl0ZW1Db25maWcpO1xyXG4gICAgICAgIGlmIChsb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1BSTk5OTQzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBDb250ZW50SXRlbSBhdCB0aGUgZmlyc3QgdmFsaWQgc2VsZWN0b3IgbG9jYXRpb24uXHJcbiAgICAgKiBAcGFyYW0gaXRlbUNvbmZpZyAtIFJlc29sdmVkSXRlbUNvbmZpZyBvZiBjaGlsZCB0byBiZSBhZGRlZC5cclxuICAgICAqIEBwYXJhbSBsb2NhdGlvblNlbGVjdG9ycyAtIEFycmF5IG9mIGxvY2F0aW9uIHNlbGVjdG9ycyB1c2VkIHRvIGZpbmQgZGV0ZXJtaW5lIGxvY2F0aW9uIGluIGxheW91dCB3aGVyZSBDb250ZW50SXRlbVxyXG4gICAgICogd2lsbCBiZSBhZGRlZC4gRmlyc3QgbG9jYXRpb24gaW4gYXJyYXkgd2hpY2ggaXMgdmFsaWQgd2lsbCBiZSB1c2VkLiBJZiB1bmRlZmluZWQsXHJcbiAgICAgKiB7QGxpbmsgKExheW91dE1hbmFnZXI6bmFtZXNwYWNlKS5kZWZhdWx0TG9jYXRpb25TZWxlY3RvcnN9IHdpbGwgYmUgdXNlZC5cclxuICAgICAqIEByZXR1cm5zIExvY2F0aW9uIG9mIG5ldyBDb250ZW50SXRlbSBjcmVhdGVkIG9yIHVuZGVmaW5lZCBpZiBubyB2YWxpZCBsb2NhdGlvbiBzZWxlY3RvciB3YXMgaW4gYXJyYXkuICovXHJcbiAgICBhZGRJdGVtQXRMb2NhdGlvbihpdGVtQ29uZmlnOiBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnLFxyXG4gICAgICAgIGxvY2F0aW9uU2VsZWN0b3JzPzogcmVhZG9ubHkgTGF5b3V0TWFuYWdlci5Mb2NhdGlvblNlbGVjdG9yW11cclxuICAgICk6IExheW91dE1hbmFnZXIuTG9jYXRpb24gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYWRkIGNvbXBvbmVudCBiZWZvcmUgaW5pdCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChsb2NhdGlvblNlbGVjdG9ycyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0TG9jYXRpb25TZWxlY3RvcnMgc2hvdWxkIGFsd2F5cyBmaW5kIGEgbG9jYXRpb25cclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uU2VsZWN0b3JzID0gTGF5b3V0TWFuYWdlci5kZWZhdWx0TG9jYXRpb25TZWxlY3RvcnM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5maW5kRmlyc3RMb2NhdGlvbihsb2NhdGlvblNlbGVjdG9ycyk7XHJcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhcmVudEl0ZW0gPSBsb2NhdGlvbi5wYXJlbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFkZElkeDogbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwYXJlbnRJdGVtLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmdyb3VuZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBncm91bmRJdGVtID0gcGFyZW50SXRlbSBhcyBHcm91bmRJdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJZHggPSBncm91bmRJdGVtLmFkZEl0ZW0oaXRlbUNvbmZpZywgbG9jYXRpb24uaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkSWR4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEl0ZW0gPSB0aGlzLl9ncm91bmRJdGVtLmNvbnRlbnRJdGVtc1swXTsgLy8gd2FzIGFkZGVkIHRvIHJvb3RJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRJZHggPSAwOyAvLyB3YXMgYWRkZWQgYXMgcm9vdEl0ZW0gKHdoaWNoIGlzIHRoZSBmaXJzdCBhbmQgb25seSBDb250ZW50SXRlbSBpbiBHcm91bmRJdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnJvdzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbHVtbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dPckNvbHVtbiA9IHBhcmVudEl0ZW0gYXMgUm93T3JDb2x1bW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZElkeCA9IHJvd09yQ29sdW1uLmFkZEl0ZW0oaXRlbUNvbmZpZywgbG9jYXRpb24uaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5zdGFjazoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUl0ZW1Db25maWcuaXNDb21wb25lbnQoaXRlbUNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGkxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5JdGVtQ29uZmlnSXNOb3RUeXBlQ29tcG9uZW50XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFjayA9IHBhcmVudEl0ZW0gYXMgU3RhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRJZHggPSBzdGFjay5hZGRJdGVtKGl0ZW1Db25maWcsIGxvY2F0aW9uLmluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29tcG9uZW50OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1BSUFMQzg3NDQ0NjAyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNhc2VFcnJvcignTE1BSUFMVTk4ODgxNzMzJywgcGFyZW50SXRlbS50eXBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoSXRlbUNvbmZpZy5pc0NvbXBvbmVudChpdGVtQ29uZmlnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlZSBpZiBzdGFjayB3YXMgaW5zZXJ0ZWRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gcGFyZW50SXRlbS5jb250ZW50SXRlbXNbYWRkSWR4XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ29udGVudEl0ZW0uaXNTdGFjayhpdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRJdGVtID0gaXRlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkSWR4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbG9jYXRpb24ucGFyZW50SXRlbSA9IHBhcmVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5pbmRleCA9IGFkZElkeDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIExvYWRzIHRoZSBzcGVjaWZpZWQgY29tcG9uZW50IFJlc29sdmVkSXRlbUNvbmZpZyBhcyByb290LlxyXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBkaXNwbGF5IGEgQ29tcG9uZW50IGFsbCBieSBpdHNlbGYuICBUaGUgbGF5b3V0IGNhbm5vdCBiZSBjaGFuZ2VkIG90aGVyIHRoYW4gaGF2aW5nIGFub3RoZXIgbmV3IGxheW91dCBsb2FkZWQuXHJcbiAgICAgKiBOb3RlIHRoYXQsIGlmIHRoaXMgbGF5b3V0IGlzIHNhdmVkIGFuZCByZWxvYWRlZCwgaXQgd2lsbCByZWxvYWQgd2l0aCB0aGUgQ29tcG9uZW50IGFzIGEgY2hpbGQgb2YgYSBTdGFjay5cclxuICAgICovXHJcbiAgICBsb2FkQ29tcG9uZW50QXNSb290KGl0ZW1Db25maWc6IENvbXBvbmVudEl0ZW1Db25maWcpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFkZCBpdGVtIGJlZm9yZSBpbml0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5sb2FkQ29tcG9uZW50QXNSb290KGl0ZW1Db25maWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayAoTGF5b3V0TWFuYWdlcjpjbGFzcykuc2V0U2l6ZX0gKi9cclxuICAgIHVwZGF0ZVNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBsYXlvdXQgbWFuYWdlcnMgc2l6ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB3aWR0aCAtIFdpZHRoIGluIHBpeGVsc1xyXG4gICAgICogQHBhcmFtIGhlaWdodCAtIEhlaWdodCBpbiBwaXhlbHNcclxuICAgICAqL1xyXG4gICAgc2V0U2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNJbml0aWFsaXNlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTVVTMTg4ODEnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dyb3VuZEl0ZW0uc2V0U2l6ZSh0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWF4aW1pc2VkU3RhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGdldEVsZW1lbnRXaWR0aEFuZEhlaWdodCh0aGlzLl9jb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRFbGVtZW50V2lkdGgodGhpcy5fbWF4aW1pc2VkU3RhY2suZWxlbWVudCwgd2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEVsZW1lbnRIZWlnaHQodGhpcy5fbWF4aW1pc2VkU3RhY2suZWxlbWVudCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXhpbWlzZWRTdGFjay51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGp1c3RDb2x1bW5zUmVzcG9uc2l2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHVwZGF0ZVNpemVGcm9tQ29udGFpbmVyKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0KHRoaXMuX2NvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB0aGUgc2l6ZSBvZiB0aGUgcm9vdCBDb250ZW50SXRlbS4gIFRoaXMgd2lsbCB1cGRhdGUgdGhlIHNpemUgb2YgYWxsIGNvbnRlbnRJdGVtcyBpbiB0aGUgdHJlZVxyXG4gICAgICovXHJcbiAgICB1cGRhdGVSb290U2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNVVJTMjg4ODEnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9ncm91bmRJdGVtLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBwdWJsaWMgKi9cclxuICAgIGNyZWF0ZUFuZEluaXRDb250ZW50SXRlbShjb25maWc6IFJlc29sdmVkSXRlbUNvbmZpZywgcGFyZW50OiBDb250ZW50SXRlbSk6IENvbnRlbnRJdGVtIHtcclxuICAgICAgICBjb25zdCBuZXdJdGVtID0gdGhpcy5jcmVhdGVDb250ZW50SXRlbShjb25maWcsIHBhcmVudCk7XHJcbiAgICAgICAgbmV3SXRlbS5pbml0KCk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0l0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWN1cnNpdmVseSBjcmVhdGVzIG5ldyBpdGVtIHRyZWUgc3RydWN0dXJlcyBiYXNlZCBvbiBhIHByb3ZpZGVkXHJcbiAgICAgKiBJdGVtQ29uZmlndXJhdGlvbiBvYmplY3RcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gUmVzb2x2ZWRJdGVtQ29uZmlnXHJcbiAgICAgKiBAcGFyYW0gcGFyZW50IC0gVGhlIGl0ZW0gdGhlIG5ld2x5IGNyZWF0ZWQgaXRlbSBzaG91bGQgYmUgYSBjaGlsZCBvZlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUNvbnRlbnRJdGVtKGNvbmZpZzogUmVzb2x2ZWRJdGVtQ29uZmlnLCBwYXJlbnQ6IENvbnRlbnRJdGVtKTogQ29udGVudEl0ZW0ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLnR5cGUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBDb25maWd1cmF0aW9uRXJyb3IoJ01pc3NpbmcgcGFyYW1ldGVyIFxcJ3R5cGVcXCcnLCBKU09OLnN0cmluZ2lmeShjb25maWcpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdlIGFkZCBhbiBhZGRpdGlvbmFsIHN0YWNrIGFyb3VuZCBldmVyeSBjb21wb25lbnQgdGhhdCdzIG5vdCB3aXRoaW4gYSBzdGFjayBhbnl3YXlzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIGNvbXBvbmVudFxyXG4gICAgICAgICAgICBSZXNvbHZlZEl0ZW1Db25maWcuaXNDb21wb25lbnRJdGVtKGNvbmZpZykgJiZcclxuXHJcbiAgICAgICAgICAgIC8vIGFuZCBpdCdzIG5vdCBhbHJlYWR5IHdpdGhpbiBhIHN0YWNrXHJcbiAgICAgICAgICAgICEocGFyZW50IGluc3RhbmNlb2YgU3RhY2spICYmXHJcblxyXG4gICAgICAgICAgICAvLyBhbmQgd2UgaGF2ZSBhIHBhcmVudFxyXG4gICAgICAgICAgICAhIXBhcmVudCAmJlxyXG5cclxuICAgICAgICAgICAgLy8gYW5kIGl0J3Mgbm90IHRoZSB0b3Btb3N0IGl0ZW0gaW4gYSBuZXcgd2luZG93XHJcbiAgICAgICAgICAgICEodGhpcy5pc1N1YldpbmRvdyA9PT0gdHJ1ZSAmJiBwYXJlbnQgaW5zdGFuY2VvZiBHcm91bmRJdGVtKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFja0NvbmZpZzogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBJdGVtVHlwZS5zdGFjayxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFtjb25maWddLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IGNvbmZpZy53aWR0aCxcclxuICAgICAgICAgICAgICAgIG1pbldpZHRoOiBjb25maWcubWluV2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGNvbmZpZy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBtaW5IZWlnaHQ6IGNvbmZpZy5taW5IZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBpZDogY29uZmlnLmlkLFxyXG4gICAgICAgICAgICAgICAgbWF4aW1pc2VkOiBjb25maWcubWF4aW1pc2VkLFxyXG4gICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogY29uZmlnLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgICAgICAgICBhY3RpdmVJdGVtSW5kZXg6IDAsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbmZpZyA9IHN0YWNrQ29uZmlnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSB0aGlzLmNyZWF0ZUNvbnRlbnRJdGVtRnJvbUNvbmZpZyhjb25maWcsIHBhcmVudCk7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnRJdGVtO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmRGaXJzdENvbXBvbmVudEl0ZW1CeUlkKGlkOiBzdHJpbmcpOiBDb21wb25lbnRJdGVtIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNRkZDSUJJODI0NDYnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maW5kRmlyc3RDb250ZW50SXRlbVR5cGVCeUlkUmVjdXJzaXZlKEl0ZW1UeXBlLmNvbXBvbmVudCwgaWQsIHRoaXMuX2dyb3VuZEl0ZW0pIGFzIENvbXBvbmVudEl0ZW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIHBvcG91dCB3aW5kb3cgd2l0aCB0aGUgc3BlY2lmaWVkIGNvbnRlbnQgYXQgdGhlIHNwZWNpZmllZCBwb3NpdGlvblxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpdGVtQ29uZmlnT3JDb250ZW50SXRlbSAtIFRoZSBjb250ZW50IG9mIHRoZSBwb3BvdXQgd2luZG93J3MgbGF5b3V0IG1hbmFnZXIgZGVyaXZlZCBmcm9tIGVpdGhlclxyXG4gICAgICogYSB7QGxpbmsgKENvbnRlbnRJdGVtOmNsYXNzKX0gb3Ige0BsaW5rIChJdGVtQ29uZmlnOmludGVyZmFjZSl9IG9yIFJlc29sdmVkSXRlbUNvbmZpZyBjb250ZW50IChhcnJheSBvZiB7QGxpbmsgKEl0ZW1Db25maWc6aW50ZXJmYWNlKX0pXHJcbiAgICAgKiBAcGFyYW0gcG9zaXRpb25BbmRTaXplIC0gVGhlIHdpZHRoLCBoZWlnaHQsIGxlZnQgYW5kIHRvcCBvZiBQb3BvdXQgd2luZG93XHJcbiAgICAgKiBAcGFyYW0gcGFyZW50SWQgLVRoZSBpZCBvZiB0aGUgZWxlbWVudCB0aGlzIGl0ZW0gd2lsbCBiZSBhcHBlbmRlZCB0byB3aGVuIHBvcEluIGlzIGNhbGxlZFxyXG4gICAgICogQHBhcmFtIGluZGV4SW5QYXJlbnQgLSBUaGUgcG9zaXRpb24gb2YgdGhpcyBpdGVtIHdpdGhpbiBpdHMgcGFyZW50IGVsZW1lbnRcclxuICAgICAqL1xyXG5cclxuICAgIGNyZWF0ZVBvcG91dChpdGVtQ29uZmlnT3JDb250ZW50SXRlbTogQ29udGVudEl0ZW0gfCBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnLFxyXG4gICAgICAgIHBvc2l0aW9uQW5kU2l6ZTogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcuV2luZG93LFxyXG4gICAgICAgIHBhcmVudElkOiBzdHJpbmcgfCBudWxsLFxyXG4gICAgICAgIGluZGV4SW5QYXJlbnQ6IG51bWJlciB8IG51bGxcclxuICAgICk6IEJyb3dzZXJQb3BvdXQge1xyXG4gICAgICAgIGlmIChpdGVtQ29uZmlnT3JDb250ZW50SXRlbSBpbnN0YW5jZW9mIENvbnRlbnRJdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVBvcG91dEZyb21Db250ZW50SXRlbShpdGVtQ29uZmlnT3JDb250ZW50SXRlbSwgcG9zaXRpb25BbmRTaXplLCBwYXJlbnRJZCwgaW5kZXhJblBhcmVudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUG9wb3V0RnJvbUl0ZW1Db25maWcoaXRlbUNvbmZpZ09yQ29udGVudEl0ZW0sIHBvc2l0aW9uQW5kU2l6ZSwgcGFyZW50SWQsIGluZGV4SW5QYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjcmVhdGVQb3BvdXRGcm9tQ29udGVudEl0ZW0oaXRlbTogQ29udGVudEl0ZW0sXHJcbiAgICAgICAgd2luZG93OiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZy5XaW5kb3cgfCB1bmRlZmluZWQsXHJcbiAgICAgICAgcGFyZW50SWQ6IHN0cmluZyB8IG51bGwsXHJcbiAgICAgICAgaW5kZXhJblBhcmVudDogbnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZCxcclxuICAgICk6IEJyb3dzZXJQb3BvdXQge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElmIHRoZSBpdGVtIGlzIHRoZSBvbmx5IGNvbXBvbmVudCB3aXRoaW4gYSBzdGFjayBvciBmb3Igc29tZVxyXG4gICAgICAgICAqIG90aGVyIHJlYXNvbiB0aGUgb25seSBjaGlsZCBvZiBpdHMgcGFyZW50IHRoZSBwYXJlbnQgd2lsbCBiZSBkZXN0cm95ZWRcclxuICAgICAgICAgKiB3aGVuIHRoZSBjaGlsZCBpcyByZW1vdmVkLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogSW4gb3JkZXIgdG8gc3VwcG9ydCB0aGlzIHdlIG1vdmUgdXAgdGhlIHRyZWUgdW50aWwgd2UgZmluZCBzb21ldGhpbmdcclxuICAgICAgICAgKiB0aGF0IHdpbGwgcmVtYWluIGFmdGVyIHRoZSBpdGVtIGlzIGJlaW5nIHBvcHBlZCBvdXRcclxuICAgICAgICAgKi9cclxuICAgICAgICBsZXQgcGFyZW50ID0gaXRlbS5wYXJlbnQ7XHJcbiAgICAgICAgbGV0IGNoaWxkID0gaXRlbTtcclxuICAgICAgICB3aGlsZSAocGFyZW50ICE9PSBudWxsICYmIHBhcmVudC5jb250ZW50SXRlbXMubGVuZ3RoID09PSAxICYmICFwYXJlbnQuaXNHcm91bmQpIHtcclxuICAgICAgICAgICAgY2hpbGQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdMTUNQRkNJMDA4MzQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXhJblBhcmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleEluUGFyZW50ID0gcGFyZW50LmNvbnRlbnRJdGVtcy5pbmRleE9mKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHBhcmVudElkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnQuYWRkUG9wSW5QYXJlbnRJZChwYXJlbnRJZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh3aW5kb3cgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgd2luZG93TGVmdCA9IGdsb2JhbFRoaXMuc2NyZWVuWCB8fCBnbG9iYWxUaGlzLnNjcmVlbkxlZnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3aW5kb3dUb3AgPSBnbG9iYWxUaGlzLnNjcmVlblkgfHwgZ2xvYmFsVGhpcy5zY3JlZW5Ub3A7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRMZWZ0ID0gaXRlbS5lbGVtZW50Lm9mZnNldExlZnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRUb3AgPSBpdGVtLmVsZW1lbnQub2Zmc2V0VG9wXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zdCB7IGxlZnQ6IG9mZnNldExlZnQsIHRvcDogb2Zmc2V0VG9wIH0gPSBnZXRKUXVlcnlMZWZ0QW5kVG9wKGl0ZW0uZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGdldEVsZW1lbnRXaWR0aEFuZEhlaWdodChpdGVtLmVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHdpbmRvdyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB3aW5kb3dMZWZ0ICsgb2Zmc2V0TGVmdCxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHdpbmRvd1RvcCArIG9mZnNldFRvcCxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpdGVtQ29uZmlnID0gaXRlbS50b0NvbmZpZygpO1xyXG4gICAgICAgICAgICBpdGVtLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFSZXNvbHZlZFJvb3RJdGVtQ29uZmlnLmlzUm9vdEl0ZW1Db25maWcoaXRlbUNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtpMThuU3RyaW5nc1tJMThuU3RyaW5nSWQuUG9wb3V0Q2Fubm90QmVDcmVhdGVkV2l0aEdyb3VuZEl0ZW1Db25maWddfWApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUG9wb3V0RnJvbUl0ZW1Db25maWcoaXRlbUNvbmZpZywgd2luZG93LCBwYXJlbnRJZCwgaW5kZXhJblBhcmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgYmVnaW5WaXJ0dWFsU2l6ZWRDb250YWluZXJBZGRpbmcoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCsrdGhpcy5fdmlydHVhbFNpemVkQ29udGFpbmVyQWRkaW5nQmVnaW5Db3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl92aXJ0dWFsU2l6ZWRDb250YWluZXJzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGFkZFZpcnR1YWxTaXplZENvbnRhaW5lcihjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3ZpcnR1YWxTaXplZENvbnRhaW5lcnMucHVzaChjb250YWluZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGVuZFZpcnR1YWxTaXplZENvbnRhaW5lckFkZGluZygpOiB2b2lkIHtcclxuICAgICAgICBpZiAoLS10aGlzLl92aXJ0dWFsU2l6ZWRDb250YWluZXJBZGRpbmdCZWdpbkNvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fdmlydHVhbFNpemVkQ29udGFpbmVycy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChjb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZUJlZm9yZVZpcnR1YWxSZWN0aW5nRXZlbnQoY291bnQpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5fdmlydHVhbFNpemVkQ29udGFpbmVyc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIubm90aWZ5VmlydHVhbFJlY3RpbmdSZXF1aXJlZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlQWZ0ZXJWaXJ0dWFsUmVjdGluZ0V2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aXJ0dWFsU2l6ZWRDb250YWluZXJzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZmlyZUJlZm9yZVZpcnR1YWxSZWN0aW5nRXZlbnQoY291bnQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmJlZm9yZVZpcnR1YWxSZWN0aW5nRXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmJlZm9yZVZpcnR1YWxSZWN0aW5nRXZlbnQoY291bnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBmaXJlQWZ0ZXJWaXJ0dWFsUmVjdGluZ0V2ZW50KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmFmdGVyVmlydHVhbFJlY3RpbmdFdmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJWaXJ0dWFsUmVjdGluZ0V2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlUG9wb3V0RnJvbUl0ZW1Db25maWcocm9vdEl0ZW1Db25maWc6IFJlc29sdmVkUm9vdEl0ZW1Db25maWcsXHJcbiAgICAgICAgd2luZG93OiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZy5XaW5kb3csXHJcbiAgICAgICAgcGFyZW50SWQ6IHN0cmluZyB8IG51bGwsXHJcbiAgICAgICAgaW5kZXhJblBhcmVudDogbnVtYmVyIHwgbnVsbFxyXG4gICAgKSB7XHJcbiAgICAgICAgY29uc3QgbGF5b3V0Q29uZmlnID0gdGhpcy50b0NvbmZpZygpO1xyXG5cclxuICAgICAgICBjb25zdCBwb3BvdXRMYXlvdXRDb25maWc6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnID0ge1xyXG4gICAgICAgICAgICByb290OiByb290SXRlbUNvbmZpZyxcclxuICAgICAgICAgICAgb3BlblBvcG91dHM6IFtdLFxyXG4gICAgICAgICAgICBzZXR0aW5nczogbGF5b3V0Q29uZmlnLnNldHRpbmdzLFxyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBsYXlvdXRDb25maWcuZGltZW5zaW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyOiBsYXlvdXRDb25maWcuaGVhZGVyLFxyXG4gICAgICAgICAgICB3aW5kb3csXHJcbiAgICAgICAgICAgIHBhcmVudElkLFxyXG4gICAgICAgICAgICBpbmRleEluUGFyZW50LFxyXG4gICAgICAgICAgICByZXNvbHZlZDogdHJ1ZSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVBvcG91dEZyb21Qb3BvdXRMYXlvdXRDb25maWcocG9wb3V0TGF5b3V0Q29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjcmVhdGVQb3BvdXRGcm9tUG9wb3V0TGF5b3V0Q29uZmlnKGNvbmZpZzogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcpOiBCcm93c2VyUG9wb3V0IHtcclxuICAgICAgICBjb25zdCBjb25maWdXaW5kb3cgPSBjb25maWcud2luZG93O1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxXaW5kb3c6IFJlY3QgPSB7XHJcbiAgICAgICAgICAgIGxlZnQ6IGNvbmZpZ1dpbmRvdy5sZWZ0ID8/IChnbG9iYWxUaGlzLnNjcmVlblggfHwgZ2xvYmFsVGhpcy5zY3JlZW5MZWZ0ICsgMjApLFxyXG4gICAgICAgICAgICB0b3A6IGNvbmZpZ1dpbmRvdy50b3AgPz8gKGdsb2JhbFRoaXMuc2NyZWVuWSB8fCBnbG9iYWxUaGlzLnNjcmVlblRvcCArIDIwKSxcclxuICAgICAgICAgICAgd2lkdGg6IGNvbmZpZ1dpbmRvdy53aWR0aCA/PyA1MDAsXHJcbiAgICAgICAgICAgIGhlaWdodDogY29uZmlnV2luZG93LmhlaWdodCA/PyAzMDksXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGJyb3dzZXJQb3BvdXQgPSBuZXcgQnJvd3NlclBvcG91dChjb25maWcsIGluaXRpYWxXaW5kb3csIHRoaXMpO1xyXG5cclxuICAgICAgICBicm93c2VyUG9wb3V0Lm9uKCdpbml0aWFsaXNlZCcsICgpID0+IHRoaXMuZW1pdCgnd2luZG93T3BlbmVkJywgYnJvd3NlclBvcG91dCkpO1xyXG4gICAgICAgIGJyb3dzZXJQb3BvdXQub24oJ2Nsb3NlZCcsICgpID0+IHRoaXMucmVjb25jaWxlUG9wb3V0V2luZG93cygpKTtcclxuXHJcbiAgICAgICAgdGhpcy5fb3BlblBvcG91dHMucHVzaChicm93c2VyUG9wb3V0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGJyb3dzZXJQb3BvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRhY2hlcyBEcmFnTGlzdGVuZXIgdG8gYW55IGdpdmVuIERPTSBlbGVtZW50XHJcbiAgICAgKiBhbmQgdHVybnMgaXQgaW50byBhIHdheSBvZiBjcmVhdGluZyBuZXcgQ29tcG9uZW50SXRlbXNcclxuICAgICAqIGJ5ICdkcmFnZ2luZycgdGhlIERPTSBlbGVtZW50IGludG8gdGhlIGxheW91dFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IC1cclxuICAgICAqIEBwYXJhbSBjb21wb25lbnRUeXBlT3JGdG4gLSBUeXBlIG9mIGNvbXBvbmVudCB0byBiZSBjcmVhdGVkLCBvciBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgcHJvdmlkZSBib3RoIGNvbXBvbmVudCB0eXBlIGFuZCBzdGF0ZVxyXG4gICAgICogQHBhcmFtIGNvbXBvbmVudFN0YXRlIC0gT3B0aW9uYWwgaW5pdGlhbCBzdGF0ZSBvZiBjb21wb25lbnQuICBUaGlzIHdpbGwgYmUgaWdub3JlZCBpZiBjb21wb25lbnRUeXBlT3JGdG4gaXMgYSBmdW5jdGlvblxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIGFuIG9wYXF1ZSBvYmplY3QgdGhhdCBpZGVudGlmaWVzIHRoZSBET00gZWxlbWVudFxyXG5cdCAqICAgICAgICAgIGFuZCB0aGUgYXR0YWNoZWQgaXRlbUNvbmZpZy4gVGhpcyBjYW4gYmUgdXNlZCBpblxyXG5cdCAqICAgICAgICAgIHJlbW92ZURyYWdTb3VyY2UoKSBsYXRlciB0byBnZXQgcmlkIG9mIHRoZSBkcmFnIGxpc3RlbmVycy5cclxuICAgICAqL1xyXG4gICAgbmV3RHJhZ1NvdXJjZShlbGVtZW50OiBIVE1MRWxlbWVudCxcclxuICAgICAgICBjb21wb25lbnRUeXBlT3JGdG46IEpzb25WYWx1ZSB8ICgoKSA9PiBEcmFnU291cmNlLkNvbXBvbmVudEl0ZW1Db25maWcpLFxyXG4gICAgICAgIGNvbXBvbmVudFN0YXRlPzogSnNvblZhbHVlLFxyXG4gICAgICAgIHRpdGxlPzogc3RyaW5nLFxyXG4gICAgKTogRHJhZ1NvdXJjZSB7XHJcbiAgICAgICAgY29uc3QgZHJhZ1NvdXJjZSA9IG5ldyBEcmFnU291cmNlKHRoaXMsIGVsZW1lbnQsIFtdLCBjb21wb25lbnRUeXBlT3JGdG4sIGNvbXBvbmVudFN0YXRlLCB0aXRsZSk7XHJcbiAgICAgICAgdGhpcy5fZHJhZ1NvdXJjZXMucHVzaChkcmFnU291cmNlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRyYWdTb3VyY2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcblx0ICogUmVtb3ZlcyBhIERyYWdMaXN0ZW5lciBhZGRlZCBieSBjcmVhdGVEcmFnU291cmNlKCkgc28gdGhlIGNvcnJlc3BvbmRpbmdcclxuXHQgKiBET00gZWxlbWVudCBpcyBub3QgYSBkcmFnIHNvdXJjZSBhbnkgbW9yZS5cclxuXHQgKi9cclxuXHRyZW1vdmVEcmFnU291cmNlKGRyYWdTb3VyY2U6IERyYWdTb3VyY2UpOiB2b2lkIHtcclxuXHRcdHJlbW92ZUZyb21BcnJheShkcmFnU291cmNlLCB0aGlzLl9kcmFnU291cmNlcyApO1xyXG5cdFx0ZHJhZ1NvdXJjZS5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc3RhcnRDb21wb25lbnREcmFnKHg6IG51bWJlciwgeTogbnVtYmVyLCBkcmFnTGlzdGVuZXI6IERyYWdMaXN0ZW5lciwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSwgc3RhY2s6IFN0YWNrKTogdm9pZCB7XHJcbiAgICAgICAgbmV3IERyYWdQcm94eShcclxuICAgICAgICAgICAgeCxcclxuICAgICAgICAgICAgeSxcclxuICAgICAgICAgICAgZHJhZ0xpc3RlbmVyLFxyXG4gICAgICAgICAgICB0aGlzLFxyXG4gICAgICAgICAgICBjb21wb25lbnRJdGVtLFxyXG4gICAgICAgICAgICBzdGFja1xyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9ncmFtbWF0aWNhbGx5IGZvY3VzZXMgYW4gaXRlbS4gVGhpcyBmb2N1c2VzIHRoZSBzcGVjaWZpZWQgY29tcG9uZW50IGl0ZW1cclxuICAgICAqIGFuZCB0aGUgaXRlbSBlbWl0cyBhIGZvY3VzIGV2ZW50XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGl0ZW0gLSBUaGUgY29tcG9uZW50IGl0ZW0gdG8gYmUgZm9jdXNlZFxyXG4gICAgICogQHBhcmFtIHN1cHByZXNzRXZlbnQgLSBXaGV0aGVyIHRvIGVtaXQgZm9jdXMgZXZlbnRcclxuICAgICAqL1xyXG4gICAgZm9jdXNDb21wb25lbnQoaXRlbTogQ29tcG9uZW50SXRlbSwgc3VwcHJlc3NFdmVudCA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgaXRlbS5mb2N1cyhzdXBwcmVzc0V2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2dyYW1tYXRpY2FsbHkgYmx1cnMgKGRlZm9jdXNlcykgdGhlIGN1cnJlbnRseSBmb2N1c2VkIGNvbXBvbmVudC5cclxuICAgICAqIElmIGEgY29tcG9uZW50IGl0ZW0gaXMgZm9jdXNlZCwgdGhlbiBpdCBpcyBibHVycmVkIGFuZCBhbmQgdGhlIGl0ZW0gZW1pdHMgYSBibHVyIGV2ZW50XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGl0ZW0gLSBUaGUgY29tcG9uZW50IGl0ZW0gdG8gYmUgYmx1cnJlZFxyXG4gICAgICogQHBhcmFtIHN1cHByZXNzRXZlbnQgLSBXaGV0aGVyIHRvIGVtaXQgYmx1ciBldmVudFxyXG4gICAgICovXHJcbiAgICBjbGVhckNvbXBvbmVudEZvY3VzKHN1cHByZXNzRXZlbnQgPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0Rm9jdXNlZENvbXBvbmVudEl0ZW0odW5kZWZpbmVkLCBzdXBwcmVzc0V2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2dyYW1tYXRpY2FsbHkgZm9jdXNlcyBhIGNvbXBvbmVudCBpdGVtIG9yIHJlbW92ZXMgZm9jdXMgKGJsdXJzKSBmcm9tIGFuIGV4aXN0aW5nIGZvY3VzZWQgY29tcG9uZW50IGl0ZW0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGl0ZW0gLSBJZiBkZWZpbmVkLCBzcGVjaWZpZXMgdGhlIGNvbXBvbmVudCBpdGVtIHRvIGJlIGdpdmVuIGZvY3VzLiAgSWYgdW5kZWZpbmVkLCBjbGVhciBjb21wb25lbnQgZm9jdXMuXHJcbiAgICAgKiBAcGFyYW0gc3VwcHJlc3NFdmVudHMgLSBXaGV0aGVyIHRvIGVtaXQgZm9jdXMgYW5kIGJsdXIgZXZlbnRzXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgc2V0Rm9jdXNlZENvbXBvbmVudEl0ZW0oaXRlbTogQ29tcG9uZW50SXRlbSB8IHVuZGVmaW5lZCwgc3VwcHJlc3NFdmVudHMgPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChpdGVtICE9PSB0aGlzLl9mb2N1c2VkQ29tcG9uZW50SXRlbSkge1xyXG5cclxuICAgICAgICAgICAgbGV0IG5ld0ZvY3VzZWRQYXJlbnRJdGVtOiBDb21wb25lbnRQYXJlbnRhYmxlSXRlbSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgbmV3Rm9jdXNlZFBhcmVudEl0ZW0gPT09IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ld0ZvY3VzZWRQYXJlbnRJdGVtID0gaXRlbS5wYXJlbnRJdGVtO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZm9jdXNlZENvbXBvbmVudEl0ZW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2xkRm9jdXNlZEl0ZW0gPSB0aGlzLl9mb2N1c2VkQ29tcG9uZW50SXRlbTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzZWRDb21wb25lbnRJdGVtID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgb2xkRm9jdXNlZEl0ZW0uc2V0Qmx1cnJlZChzdXBwcmVzc0V2ZW50cyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvbGRGb2N1c2VkUGFyZW50SXRlbSA9IG9sZEZvY3VzZWRJdGVtLnBhcmVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3Rm9jdXNlZFBhcmVudEl0ZW0gPT09IG9sZEZvY3VzZWRQYXJlbnRJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Rm9jdXNlZFBhcmVudEl0ZW0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG9sZEZvY3VzZWRQYXJlbnRJdGVtLnNldEZvY3VzZWRWYWx1ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpdGVtICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzZWRDb21wb25lbnRJdGVtID0gaXRlbTtcclxuICAgICAgICAgICAgICAgIGl0ZW0uc2V0Rm9jdXNlZChzdXBwcmVzc0V2ZW50cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3Rm9jdXNlZFBhcmVudEl0ZW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0ZvY3VzZWRQYXJlbnRJdGVtLnNldEZvY3VzZWRWYWx1ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZUNvbnRlbnRJdGVtRnJvbUNvbmZpZyhjb25maWc6IFJlc29sdmVkSXRlbUNvbmZpZywgcGFyZW50OiBDb250ZW50SXRlbSk6IENvbnRlbnRJdGVtIHtcclxuICAgICAgICBzd2l0Y2ggKGNvbmZpZy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuZ3JvdW5kOiB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ0xNQ0NJRkM2ODg3MScpO1xyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnJvdzogcmV0dXJuIG5ldyBSb3dPckNvbHVtbihmYWxzZSwgdGhpcywgY29uZmlnIGFzIFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbHVtbjogcmV0dXJuIG5ldyBSb3dPckNvbHVtbih0cnVlLCB0aGlzLCBjb25maWcgYXMgUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcsIHBhcmVudCk7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuc3RhY2s6IHJldHVybiBuZXcgU3RhY2sodGhpcywgY29uZmlnIGFzIFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbXBvbmVudDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcG9uZW50SXRlbSh0aGlzLCBjb25maWcgYXMgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnLCBwYXJlbnQgYXMgU3RhY2spO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ2FzZUVycm9yKCdDQ0M5MTM1NjQnLCBjb25maWcudHlwZSwgJ0ludmFsaWQgQ29uZmlnIEl0ZW0gdHlwZSBzcGVjaWZpZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBmcm9tIHN0YWNrIGNvbXBvbmVudC5cclxuICAgICAqIFN0YWNrIHdpbGwgbG9vayBhZnRlciBkb2NraW5nIHByb2Nlc3NpbmcgYXNzb2NpYXRlZCB3aXRoIG1heGltaXNlL21pbmltaXNlXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqKi9cclxuICAgIHNldE1heGltaXNlZFN0YWNrKHN0YWNrOiBTdGFjayB8IHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChzdGFjayA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYXhpbWlzZWRTdGFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NNaW5pbWlzZU1heGltaXNlZFN0YWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc3RhY2sgIT09IHRoaXMuX21heGltaXNlZFN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWF4aW1pc2VkU3RhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc01pbmltaXNlTWF4aW1pc2VkU3RhY2soKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NNYXhpbWlzZVN0YWNrKHN0YWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja01pbmltaXNlTWF4aW1pc2VkU3RhY2soKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21heGltaXNlZFN0YWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWF4aW1pc2VkU3RhY2subWluaW1pc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2hvd0FsbEFjdGl2ZUNvbnRlbnRJdGVtcygpIHdhcyBjYWxsZWQgZnJvbSBDb250ZW50SXRlbS5zaG93KCkuICBOb3Qgc3VyZSB3aGF0IGl0cyBwdXJwb3NlIHdhcyBzbyBoYXZlIGNvbW1lbnRlZCBvdXRcclxuICAgIC8vIEV2ZXJ5dGhpbmcgc2VlbXMgdG8gd29yayBvayB3aXRob3V0IHRoaXMuICBIYXZlIGxlZnQgY29tbWVudGVkIGNvZGUganVzdCBpbiBjYXNlIHRoZXJlIHdhcyBhIHJlYXNvbiBmb3IgaXQgYmVjb21lc1xyXG4gICAgLy8gYXBwYXJlbnRcclxuXHJcbiAgICAvLyAvKiogQGludGVybmFsICovXHJcbiAgICAvLyBzaG93QWxsQWN0aXZlQ29udGVudEl0ZW1zKCk6IHZvaWQge1xyXG4gICAgLy8gICAgIGNvbnN0IGFsbFN0YWNrcyA9IHRoaXMuZ2V0QWxsU3RhY2tzKCk7XHJcblxyXG4gICAgLy8gICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsU3RhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IHN0YWNrID0gYWxsU3RhY2tzW2ldO1xyXG4gICAgLy8gICAgICAgICBjb25zdCBhY3RpdmVDb250ZW50SXRlbSA9IHN0YWNrLmdldEFjdGl2ZUNvbXBvbmVudEl0ZW0oKTtcclxuXHJcbiAgICAvLyAgICAgICAgIGlmIChhY3RpdmVDb250ZW50SXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBpZiAoIShhY3RpdmVDb250ZW50SXRlbSBpbnN0YW5jZW9mIENvbXBvbmVudEl0ZW0pKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdMTVNBQUNJUzIyMjk4Jyk7XHJcbiAgICAvLyAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGFjdGl2ZUNvbnRlbnRJdGVtLmNvbnRhaW5lci5zaG93KCk7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gaGlkZUFsbEFjdGl2ZUNvbnRlbnRJdGVtcygpIHdhcyBjYWxsZWQgZnJvbSBDb250ZW50SXRlbS5oaWRlKCkuICBOb3Qgc3VyZSB3aGF0IGl0cyBwdXJwb3NlIHdhcyBzbyBoYXZlIGNvbW1lbnRlZCBvdXRcclxuICAgIC8vIEV2ZXJ5dGhpbmcgc2VlbXMgdG8gd29yayBvayB3aXRob3V0IHRoaXMuICBIYXZlIGxlZnQgY29tbWVudGVkIGNvZGUganVzdCBpbiBjYXNlIHRoZXJlIHdhcyBhIHJlYXNvbiBmb3IgaXQgYmVjb21lc1xyXG4gICAgLy8gYXBwYXJlbnRcclxuXHJcbiAgICAvLyAvKiogQGludGVybmFsICovXHJcbiAgICAvLyBoaWRlQWxsQWN0aXZlQ29udGVudEl0ZW1zKCk6IHZvaWQge1xyXG4gICAgLy8gICAgIGNvbnN0IGFsbFN0YWNrcyA9IHRoaXMuZ2V0QWxsU3RhY2tzKCk7XHJcblxyXG4gICAgLy8gICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsU3RhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IHN0YWNrID0gYWxsU3RhY2tzW2ldO1xyXG4gICAgLy8gICAgICAgICBjb25zdCBhY3RpdmVDb250ZW50SXRlbSA9IHN0YWNrLmdldEFjdGl2ZUNvbXBvbmVudEl0ZW0oKTtcclxuXHJcbiAgICAvLyAgICAgICAgIGlmIChhY3RpdmVDb250ZW50SXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBpZiAoIShhY3RpdmVDb250ZW50SXRlbSBpbnN0YW5jZW9mIENvbXBvbmVudEl0ZW0pKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdMTVNBQUNJSDIyMjk4Jyk7XHJcbiAgICAvLyAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGFjdGl2ZUNvbnRlbnRJdGVtLmNvbnRhaW5lci5oaWRlKCk7XHJcbiAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBjbGVhbnVwQmVmb3JlTWF4aW1pc2VkU3RhY2tEZXN0cm95ZWQoZXZlbnQ6IEV2ZW50RW1pdHRlci5CdWJibGluZ0V2ZW50KSB7XHJcblx0XHRpZiAodGhpcy5fbWF4aW1pc2VkU3RhY2sgIT09IG51bGwgJiYgdGhpcy5fbWF4aW1pc2VkU3RhY2sgPT09IGV2ZW50LnRhcmdldCkge1xyXG5cdFx0XHR0aGlzLl9tYXhpbWlzZWRTdGFjay5vZmYoJ2JlZm9yZUl0ZW1EZXN0cm95ZWQnLCB0aGlzLl9tYXhpbWlzZWRTdGFja0JlZm9yZURlc3Ryb3llZExpc3RlbmVyKTtcclxuXHRcdFx0dGhpcy5fbWF4aW1pc2VkU3RhY2sgPSB1bmRlZmluZWQ7XHJcblx0XHR9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGdldCBhcm91bmQgc2FuZGJveGVkIGlmcmFtZSByZXN0cmljdGlvbnMuXHJcbiAgICAgKiBJZiAnYWxsb3ctdG9wLW5hdmlnYXRpb24nIGlzIG5vdCBzcGVjaWZpZWQgaW4gdGhlIGlmcmFtZSdzICdzYW5kYm94JyBhdHRyaWJ1dGVcclxuICAgICAqIChhcyBpcyB0aGUgY2FzZSB3aXRoIGNvZGVwZW5zKSB0aGUgcGFyZW50IHdpbmRvdyBpcyBmb3JiaWRkZW4gZnJvbSBjYWxsaW5nIGNlcnRhaW5cclxuICAgICAqIG1ldGhvZHMgb24gdGhlIGNoaWxkLCBzdWNoIGFzIHdpbmRvdy5jbG9zZSgpIG9yIHNldHRpbmcgZG9jdW1lbnQubG9jYXRpb24uaHJlZi5cclxuICAgICAqXHJcbiAgICAgKiBUaGlzIHByZXZlbnRlZCBHb2xkZW5MYXlvdXQgcG9wb3V0cyBmcm9tIHBvcHBpbmcgaW4gaW4gY29kZXBlbnMuIFRoZSBmaXggaXMgdG8gY2FsbFxyXG4gICAgICogXyRjbG9zZVdpbmRvdyBvbiB0aGUgY2hpbGQgd2luZG93J3MgZ2wgaW5zdGFuY2Ugd2hpY2ggKGFmdGVyIGEgdGltZW91dCB0byBkaXNjb25uZWN0XHJcbiAgICAgKiB0aGUgaW52b2tpbmcgbWV0aG9kIGZyb20gdGhlIGNsb3NlIGNhbGwpIGNsb3NlcyBpdHNlbGYuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGNsb3NlV2luZG93KCk6IHZvaWQge1xyXG4gICAgICAgIGdsb2JhbFRoaXMuc2V0VGltZW91dCgoKSA9PiBnbG9iYWxUaGlzLmNsb3NlKCksIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGdldEFyZWEoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBDb250ZW50SXRlbS5BcmVhIHwgbnVsbCB7XHJcbiAgICAgICAgbGV0IG1hdGNoaW5nQXJlYSA9IG51bGw7XHJcbiAgICAgICAgbGV0IHNtYWxsZXN0U3VyZmFjZSA9IEluZmluaXR5O1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2l0ZW1BcmVhcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBhcmVhID0gdGhpcy5faXRlbUFyZWFzW2ldO1xyXG5cclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgeCA+IGFyZWEueDEgJiZcclxuICAgICAgICAgICAgICAgIHggPCBhcmVhLngyICYmXHJcbiAgICAgICAgICAgICAgICB5ID4gYXJlYS55MSAmJlxyXG4gICAgICAgICAgICAgICAgeSA8IGFyZWEueTIgJiZcclxuICAgICAgICAgICAgICAgIHNtYWxsZXN0U3VyZmFjZSA+IGFyZWEuc3VyZmFjZVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHNtYWxsZXN0U3VyZmFjZSA9IGFyZWEuc3VyZmFjZTtcclxuICAgICAgICAgICAgICAgIG1hdGNoaW5nQXJlYSA9IGFyZWE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBtYXRjaGluZ0FyZWE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgY2FsY3VsYXRlSXRlbUFyZWFzKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGFsbENvbnRlbnRJdGVtcyA9IHRoaXMuZ2V0QWxsQ29udGVudEl0ZW1zKCk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSWYgdGhlIGxhc3QgaXRlbSBpcyBkcmFnZ2VkIG91dCwgaGlnaGxpZ2h0IHRoZSBlbnRpcmUgY29udGFpbmVyIHNpemUgdG9cclxuICAgICAgICAgKiBhbGxvdyB0byByZS1kcm9wIGl0LiB0aGlzLmdyb3VuZC5jb250ZW50aUl0ZW1zLmxlbmd0aCA9PT0gMCBhdCB0aGlzIHBvaW50XHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBEb24ndCBpbmNsdWRlIGdyb3VuZCBpbnRvIHRoZSBwb3NzaWJsZSBkcm9wIGFyZWFzIHRob3VnaCBvdGhlcndpc2Ugc2luY2UgaXRcclxuICAgICAgICAgKiB3aWxsIHVzZWQgZm9yIGV2ZXJ5IGdhcCBpbiB0aGUgbGF5b3V0LCBlLmcuIHNwbGl0dGVyc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGdyb3VuZEl0ZW0gPSB0aGlzLl9ncm91bmRJdGVtO1xyXG4gICAgICAgIGlmIChncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1DSUFSNDQzNjUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoYWxsQ29udGVudEl0ZW1zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgLy8gTm8gcm9vdCBDb250ZW50SXRlbSAoanVzdCBHcm91bmQgQ29udGVudEl0ZW0pXHJcbiAgICAgICAgICAgICAgICBjb25zdCBncm91bmRBcmVhID0gZ3JvdW5kSXRlbS5nZXRFbGVtZW50QXJlYSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyb3VuZEFyZWEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignTE1DSUFSQTQ0MzY1JylcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXRlbUFyZWFzID0gW2dyb3VuZEFyZWFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGdyb3VuZEl0ZW0uY29udGVudEl0ZW1zWzBdLmlzU3RhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiByb290IGlzIFN0YWNrLCB0aGVuIHNwbGl0IHN0YWNrIGFuZCBzaWRlcyBvZiBMYXlvdXQgYXJlIHNhbWUsIHNvIHNraXAgc2lkZXNcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtQXJlYXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2lkZXMgb2YgbGF5b3V0XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXRlbUFyZWFzID0gZ3JvdW5kSXRlbS5jcmVhdGVTaWRlQXJlYXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbENvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gYWxsQ29udGVudEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDb250ZW50SXRlbS5pc1N0YWNrKHN0YWNrKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmVhID0gc3RhY2suZ2V0QXJlYSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZWEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXRlbUFyZWFzLnB1c2goYXJlYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFja0NvbnRlbnRBcmVhRGltZW5zaW9ucyA9IHN0YWNrLmNvbnRlbnRBcmVhRGltZW5zaW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFja0NvbnRlbnRBcmVhRGltZW5zaW9ucyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1DSUFTQzQ1NTk5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhpZ2hsaWdodEFyZWEgPSBzdGFja0NvbnRlbnRBcmVhRGltZW5zaW9ucy5oZWFkZXIuaGlnaGxpZ2h0QXJlYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1cmZhY2UgPSAoaGlnaGxpZ2h0QXJlYS54MiAtIGhpZ2hsaWdodEFyZWEueDEpICogKGhpZ2hsaWdodEFyZWEueTIgLSBoaWdobGlnaHRBcmVhLnkxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyOiBDb250ZW50SXRlbS5BcmVhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTogaGlnaGxpZ2h0QXJlYS54MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDI6IGhpZ2hsaWdodEFyZWEueDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkxOiBoaWdobGlnaHRBcmVhLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogaGlnaGxpZ2h0QXJlYS55MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEl0ZW06IHN0YWNrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXJmYWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXRlbUFyZWFzLnB1c2goaGVhZGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBhcyBwYXJ0IG9mIGxvYWRpbmcgYSBuZXcgbGF5b3V0IChpbmNsdWRpbmcgaW5pdGlhbCBpbml0KCkpLlxyXG4gICAgICogQ2hlY2tzIHRvIHNlZSBsYXlvdXQgaGFzIGEgbWF4aW1pc2VkIGl0ZW0uIElmIHNvLCBpdCBtYXhpbWlzZXMgdGhhdCBpdGVtLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2hlY2tMb2FkZWRMYXlvdXRNYXhpbWlzZUl0ZW0oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTUNMTE1JNDM0MzInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjb25maWdNYXhpbWlzZWRJdGVtcyA9IHRoaXMuX2dyb3VuZEl0ZW0uZ2V0Q29uZmlnTWF4aW1pc2VkSXRlbXMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb25maWdNYXhpbWlzZWRJdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbSA9IGNvbmZpZ01heGltaXNlZEl0ZW1zWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKENvbnRlbnRJdGVtLmlzQ29tcG9uZW50SXRlbShpdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gaXRlbS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdMTVhMTE1JNjk5OTknKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gc3RhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFDb250ZW50SXRlbS5pc1N0YWNrKGl0ZW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdMTUNMTE1JMTk5OTMnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5tYXhpbWlzZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcHJvY2Vzc01heGltaXNlU3RhY2soc3RhY2s6IFN0YWNrKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbWF4aW1pc2VkU3RhY2sgPSBzdGFjaztcclxuICAgICAgICBzdGFjay5vbignYmVmb3JlSXRlbURlc3Ryb3llZCcsIHRoaXMuX21heGltaXNlZFN0YWNrQmVmb3JlRGVzdHJveWVkTGlzdGVuZXIpO1xyXG4gICAgICAgIHN0YWNrLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLk1heGltaXNlZCk7XHJcbiAgICAgICAgc3RhY2suZWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgdGhpcy5fbWF4aW1pc2VQbGFjZWhvbGRlcik7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTU1YSTE5OTkzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5lbGVtZW50LnByZXBlbmQoc3RhY2suZWxlbWVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0KHRoaXMuX2NvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgICAgICBzZXRFbGVtZW50V2lkdGgoc3RhY2suZWxlbWVudCwgd2lkdGgpO1xyXG4gICAgICAgICAgICBzZXRFbGVtZW50SGVpZ2h0KHN0YWNrLmVsZW1lbnQsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIHN0YWNrLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgc3RhY2suZm9jdXNBY3RpdmVDb250ZW50SXRlbSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXhpbWlzZWRTdGFjay5lbWl0KCdtYXhpbWlzZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdzdGF0ZUNoYW5nZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBwcm9jZXNzTWluaW1pc2VNYXhpbWlzZWRTdGFjaygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fbWF4aW1pc2VkU3RhY2sgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ0xNTU1TNzQ0MjInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMuX21heGltaXNlZFN0YWNrO1xyXG4gICAgICAgICAgICBpZiAoc3RhY2sucGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignTE1NSTEzNjY4Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5NYXhpbWlzZWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWF4aW1pc2VQbGFjZWhvbGRlci5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgc3RhY2suZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhpbWlzZVBsYWNlaG9sZGVyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgc3RhY2sucGFyZW50LnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21heGltaXNlZFN0YWNrID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgc3RhY2sub2ZmKCdiZWZvcmVJdGVtRGVzdHJveWVkJywgdGhpcy5fbWF4aW1pc2VkU3RhY2tCZWZvcmVEZXN0cm95ZWRMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5lbWl0KCdtaW5pbWlzZWQnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIHRoZSBhcnJheSBvZiBvcGVuIHBvcG91dCB3aW5kb3dzIGFuZCByZW1vdmVzIHRoZSBvbmVzXHJcbiAgICAgKiB0aGF0IGFyZSBlZmZlY3RpdmVseSBjbG9zZWQuIFRoaXMgaXMgbmVjZXNzYXJ5IGR1ZSB0byB0aGUgbGFjayBvZiByZWxpYWJseVxyXG4gICAgICogbGlzdGVuaW5nIGZvciB3aW5kb3cuY2xvc2UgLyB1bmxvYWQgZXZlbnRzIGluIGEgY3Jvc3MgYnJvd3NlciBjb21wYXRpYmxlIGZhc2hpb24uXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWNvbmNpbGVQb3BvdXRXaW5kb3dzKCkge1xyXG4gICAgICAgIGNvbnN0IG9wZW5Qb3BvdXRzOiBCcm93c2VyUG9wb3V0W10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9vcGVuUG9wb3V0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3BlblBvcG91dHNbaV0uZ2V0V2luZG93KCkuY2xvc2VkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgb3BlblBvcG91dHMucHVzaCh0aGlzLl9vcGVuUG9wb3V0c1tpXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3dpbmRvd0Nsb3NlZCcsIHRoaXMuX29wZW5Qb3BvdXRzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wZW5Qb3BvdXRzLmxlbmd0aCAhPT0gb3BlblBvcG91dHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wZW5Qb3BvdXRzID0gb3BlblBvcG91dHM7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgYWxsIGNvbnRlbnQgaXRlbXMsXHJcbiAgICAgKiByZWdhcmRsZXMgb2YgbGV2ZWwgb3IgdHlwZVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0QWxsQ29udGVudEl0ZW1zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1HQUNJMTMxMzAnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdW5kSXRlbS5nZXRBbGxDb250ZW50SXRlbXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCaW5kcyB0byBET00vQk9NIGV2ZW50cyBvbiBpbml0XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBiaW5kRXZlbnRzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0Z1bGxQYWdlKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbFRoaXMuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fd2luZG93UmVzaXplTGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5hZGRFdmVudExpc3RlbmVyKCd1bmxvYWQnLCB0aGlzLl93aW5kb3dVbmxvYWRMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgIGdsb2JhbFRoaXMuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5fd2luZG93VW5sb2FkTGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlYm91bmNlcyByZXNpemUgZXZlbnRzXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwcm9jZXNzUmVzaXplV2l0aERlYm91bmNlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9yZXNpemVUaW1lb3V0SWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fcmVzaXplVGltZW91dElkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcmVzaXplVGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLnVwZGF0ZVNpemVGcm9tQ29udGFpbmVyKCksIDEwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmVzIHdoYXQgZWxlbWVudCB0aGUgbGF5b3V0IHdpbGwgYmUgY3JlYXRlZCBpblxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2V0Q29udGFpbmVyKCkge1xyXG4gICAgICAgIGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuICAgICAgICBjb25zdCBjb250YWluZXJFbGVtZW50ID0gdGhpcy5fY29udGFpbmVyRWxlbWVudCA/PyBib2R5RWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQgPT09IGJvZHlFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzRnVsbFBhZ2UgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG4gICAgICAgICAgICBkb2N1bWVudEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICBkb2N1bWVudEVsZW1lbnQuc3R5bGUubWFyZ2luID0gJzAnO1xyXG4gICAgICAgICAgICBkb2N1bWVudEVsZW1lbnQuc3R5bGUucGFkZGluZyA9ICcwJztcclxuICAgICAgICAgICAgZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIGJvZHlFbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuICAgICAgICAgICAgYm9keUVsZW1lbnQuc3R5bGUubWFyZ2luID0gJzAnO1xyXG4gICAgICAgICAgICBib2R5RWxlbWVudC5zdHlsZS5wYWRkaW5nID0gJzAnO1xyXG4gICAgICAgICAgICBib2R5RWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyRWxlbWVudCA9IGNvbnRhaW5lckVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgd2luZG93IGlzIGNsb3NlZCBvciB0aGUgdXNlciBuYXZpZ2F0ZXMgYXdheVxyXG4gICAgICogZnJvbSB0aGUgcGFnZVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25VbmxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGp1c3RzIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0byBiZSBsb3dlciB0byBmaXQgdGhlIHNjcmVlbiBhbmQgc3RpbGwgbWFpbnRhaW4gbWluSXRlbVdpZHRoLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYWRqdXN0Q29sdW1uc1Jlc3BvbnNpdmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTUFDUjIwODgzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZmlyc3RMb2FkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIG1pbiB3aWR0aCBzZXQsIG9yIG5vdCBjb250ZW50IGl0ZW1zLCBkbyBub3RoaW5nLlxyXG4gICAgICAgICAgICBpZiAodGhpcy51c2VSZXNwb25zaXZlTGF5b3V0KCkgJiZcclxuICAgICAgICAgICAgICAgICF0aGlzLl91cGRhdGluZ0NvbHVtbnNSZXNwb25zaXZlICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ncm91bmRJdGVtLmNvbnRlbnRJdGVtcy5sZW5ndGggPiAwICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ncm91bmRJdGVtLmNvbnRlbnRJdGVtc1swXS5pc1JvdylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93aWR0aCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNQUNSNzc0MTInKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgb25seSBvbmUgY29sdW1uLCBkbyBub3RoaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbkNvdW50ID0gdGhpcy5fZ3JvdW5kSXRlbS5jb250ZW50SXRlbXNbMF0uY29udGVudEl0ZW1zLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sdW1uQ291bnQgPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhleSBhbGwgc3RpbGwgZml0LCBkbyBub3RoaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW5JdGVtV2lkdGggPSB0aGlzLmxheW91dENvbmZpZy5kaW1lbnNpb25zLm1pbkl0ZW1XaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG90YWxNaW5XaWR0aCA9IGNvbHVtbkNvdW50ICogbWluSXRlbVdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG90YWxNaW5XaWR0aCA8PSB0aGlzLl93aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCB1cGRhdGVzIHdoaWxlIGl0IGlzIGFscmVhZHkgaGFwcGVuaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRpbmdDb2x1bW5zUmVzcG9uc2l2ZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlndXJlIG91dCBob3cgbWFueSBjb2x1bW5zIHRvIHN0YWNrLCBhbmQgcHV0IHRoZW0gYWxsIGluIHRoZSBmaXJzdCBzdGFjayBjb250YWluZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaW5hbENvbHVtbkNvdW50ID0gTWF0aC5tYXgoTWF0aC5mbG9vcih0aGlzLl93aWR0aCAvIG1pbkl0ZW1XaWR0aCksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhY2tDb2x1bW5Db3VudCA9IGNvbHVtbkNvdW50IC0gZmluYWxDb2x1bW5Db3VudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb290Q29udGVudEl0ZW0gPSB0aGlzLl9ncm91bmRJdGVtLmNvbnRlbnRJdGVtc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbFN0YWNrcyA9IHRoaXMuZ2V0QWxsU3RhY2tzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsU3RhY2tzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1BQ1JTNzc0MTMnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFN0YWNrQ29udGFpbmVyID0gYWxsU3RhY2tzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhY2tDb2x1bW5Db3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0YWNrIGZyb20gcmlnaHQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9IHJvb3RDb250ZW50SXRlbS5jb250ZW50SXRlbXNbcm9vdENvbnRlbnRJdGVtLmNvbnRlbnRJdGVtcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDaGlsZENvbnRlbnRJdGVtc1RvQ29udGFpbmVyKGZpcnN0U3RhY2tDb250YWluZXIsIGNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGluZ0NvbHVtbnNSZXNwb25zaXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHJlc3BvbnNpdmUgbGF5b3V0IHNob3VsZCBiZSB1c2VkLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgcmVzcG9uc2l2ZSBsYXlvdXQgc2hvdWxkIGJlIHVzZWQ7IG90aGVyd2lzZSBmYWxzZS5cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHVzZVJlc3BvbnNpdmVMYXlvdXQoKSB7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLmxheW91dENvbmZpZy5zZXR0aW5ncztcclxuICAgICAgICBjb25zdCBhbHdheXNSZXNwb25zaXZlTW9kZSA9IHNldHRpbmdzLnJlc3BvbnNpdmVNb2RlID09PSBSZXNwb25zaXZlTW9kZS5hbHdheXM7XHJcbiAgICAgICAgY29uc3Qgb25Mb2FkUmVzcG9uc2l2ZU1vZGVBbmRGaXJzdCA9IHNldHRpbmdzLnJlc3BvbnNpdmVNb2RlID09PSBSZXNwb25zaXZlTW9kZS5vbmxvYWQgJiYgdGhpcy5fZmlyc3RMb2FkO1xyXG4gICAgICAgIHJldHVybiBhbHdheXNSZXNwb25zaXZlTW9kZSB8fCBvbkxvYWRSZXNwb25zaXZlTW9kZUFuZEZpcnN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhbGwgY2hpbGRyZW4gb2YgYSBub2RlIHRvIGFub3RoZXIgY29udGFpbmVyIHJlY3Vyc2l2ZWx5LlxyXG4gICAgICogQHBhcmFtIGNvbnRhaW5lciAtIENvbnRhaW5lciB0byBhZGQgY2hpbGQgY29udGVudCBpdGVtcyB0by5cclxuICAgICAqIEBwYXJhbSBub2RlIC0gTm9kZSB0byBzZWFyY2ggZm9yIGNvbnRlbnQgaXRlbXMuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhZGRDaGlsZENvbnRlbnRJdGVtc1RvQ29udGFpbmVyKGNvbnRhaW5lcjogQ29udGVudEl0ZW0sIG5vZGU6IENvbnRlbnRJdGVtKSB7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gbm9kZS5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBTdGFjaykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGNvbnRlbnRJdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoaXRlbSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYWRkQ2hpbGQoaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGNvbnRlbnRJdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGRDb250ZW50SXRlbXNUb0NvbnRhaW5lcihjb250YWluZXIsIGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmluZHMgYWxsIHRoZSBzdGFja3MuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgZm91bmQgc3RhY2sgY29udGFpbmVycy5cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEFsbFN0YWNrcygpIHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNRkFTQzUyNzc4Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RhY2tzOiBTdGFja1tdID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuZmluZEFsbFN0YWNrc1JlY3Vyc2l2ZShzdGFja3MsIHRoaXMuX2dyb3VuZEl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHN0YWNrcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBmaW5kRmlyc3RDb250ZW50SXRlbVR5cGUodHlwZTogSXRlbVR5cGUpOiBDb250ZW50SXRlbSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTUZGQ0lUODI0NDYnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maW5kRmlyc3RDb250ZW50SXRlbVR5cGVSZWN1cnNpdmUodHlwZSwgdGhpcy5fZ3JvdW5kSXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgZmluZEZpcnN0Q29udGVudEl0ZW1UeXBlUmVjdXJzaXZlKHR5cGU6IEl0ZW1UeXBlLCBub2RlOiBDb250ZW50SXRlbSk6IENvbnRlbnRJdGVtIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBjb250ZW50SXRlbXMgPSBub2RlLmNvbnRlbnRJdGVtcztcclxuICAgICAgICBjb25zdCBjb250ZW50SXRlbUNvdW50ID0gY29udGVudEl0ZW1zLmxlbmd0aDtcclxuICAgICAgICBpZiAoY29udGVudEl0ZW1Db3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudEl0ZW1Db3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50SXRlbSA9IGNvbnRlbnRJdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50SXRlbS50eXBlID09PSB0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRJdGVtQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSBjb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZENvbnRlbnRJdGVtID0gdGhpcy5maW5kRmlyc3RDb250ZW50SXRlbVR5cGVSZWN1cnNpdmUodHlwZSwgY29udGVudEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kQ29udGVudEl0ZW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZENvbnRlbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGZpbmRGaXJzdENvbnRlbnRJdGVtVHlwZUJ5SWRSZWN1cnNpdmUodHlwZTogSXRlbVR5cGUsIGlkOiBzdHJpbmcsIG5vZGU6IENvbnRlbnRJdGVtKTogQ29udGVudEl0ZW0gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtcyA9IG5vZGUuY29udGVudEl0ZW1zO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtQ291bnQgPSBjb250ZW50SXRlbXMubGVuZ3RoO1xyXG4gICAgICAgIGlmIChjb250ZW50SXRlbUNvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50SXRlbUNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gY29udGVudEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRJdGVtLnR5cGUgPT09IHR5cGUgJiYgY29udGVudEl0ZW0uaWQgPT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRJdGVtQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSBjb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZENvbnRlbnRJdGVtID0gdGhpcy5maW5kRmlyc3RDb250ZW50SXRlbVR5cGVCeUlkUmVjdXJzaXZlKHR5cGUsIGlkLCBjb250ZW50SXRlbSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRDb250ZW50SXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kQ29udGVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmluZHMgYWxsIHRoZSBzdGFjayBjb250YWluZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzdGFja3MgLSBTZXQgb2YgY29udGFpbmVycyB0byBwb3B1bGF0ZS5cclxuICAgICAqIEBwYXJhbSBub2RlIC0gQ3VycmVudCBub2RlIHRvIHByb2Nlc3MuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBmaW5kQWxsU3RhY2tzUmVjdXJzaXZlKHN0YWNrczogU3RhY2tbXSwgbm9kZTogQ29udGVudEl0ZW0pIHtcclxuICAgICAgICBjb25zdCBjb250ZW50SXRlbXMgPSBub2RlLmNvbnRlbnRJdGVtcztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gY29udGVudEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFja3MucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXRlbS5pc0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZEFsbFN0YWNrc1JlY3Vyc2l2ZShzdGFja3MsIGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgZmluZEZpcnN0TG9jYXRpb24oc2VsZWN0b3JzOiByZWFkb25seSBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uU2VsZWN0b3JbXSk6IExheW91dE1hbmFnZXIuTG9jYXRpb24gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gc2VsZWN0b3JzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBzZWxlY3RvcnNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5maW5kTG9jYXRpb24oc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICBpZiAobG9jYXRpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBmaW5kTG9jYXRpb24oc2VsZWN0b3I6IExheW91dE1hbmFnZXIuTG9jYXRpb25TZWxlY3Rvcik6IExheW91dE1hbmFnZXIuTG9jYXRpb24gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdG9ySW5kZXggPSBzZWxlY3Rvci5pbmRleDtcclxuICAgICAgICBzd2l0Y2ggKHNlbGVjdG9yLnR5cGVJZCkge1xyXG4gICAgICAgICAgICBjYXNlIExheW91dE1hbmFnZXIuTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuRm9jdXNlZEl0ZW06IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mb2N1c2VkQ29tcG9uZW50SXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRJdGVtID0gdGhpcy5fZm9jdXNlZENvbXBvbmVudEl0ZW0ucGFyZW50SXRlbTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRDb250ZW50SXRlbXMgPSBwYXJlbnRJdGVtLmNvbnRlbnRJdGVtcztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRDb250ZW50SXRlbUNvdW50ID0gcGFyZW50Q29udGVudEl0ZW1zLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3JJbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhcmVudEl0ZW0sIGluZGV4OiBwYXJlbnRDb250ZW50SXRlbUNvdW50IH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9jdXNlZEluZGV4ID0gcGFyZW50Q29udGVudEl0ZW1zLmluZGV4T2YodGhpcy5fZm9jdXNlZENvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGZvY3VzZWRJbmRleCArIHNlbGVjdG9ySW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiBwYXJlbnRDb250ZW50SXRlbUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFyZW50SXRlbSwgaW5kZXggfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIExheW91dE1hbmFnZXIuTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuRm9jdXNlZFN0YWNrOiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZm9jdXNlZENvbXBvbmVudEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50SXRlbSA9IHRoaXMuX2ZvY3VzZWRDb21wb25lbnRJdGVtLnBhcmVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJ5Q3JlYXRlTG9jYXRpb25Gcm9tUGFyZW50SXRlbShwYXJlbnRJdGVtLCBzZWxlY3RvckluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIExheW91dE1hbmFnZXIuTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuRmlyc3RTdGFjazoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50SXRlbSA9IHRoaXMuZmluZEZpcnN0Q29udGVudEl0ZW1UeXBlKEl0ZW1UeXBlLnN0YWNrKTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50cnlDcmVhdGVMb2NhdGlvbkZyb21QYXJlbnRJdGVtKHBhcmVudEl0ZW0sIHNlbGVjdG9ySW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgTGF5b3V0TWFuYWdlci5Mb2NhdGlvblNlbGVjdG9yLlR5cGVJZC5GaXJzdFJvd09yQ29sdW1uOiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50SXRlbSA9IHRoaXMuZmluZEZpcnN0Q29udGVudEl0ZW1UeXBlKEl0ZW1UeXBlLnJvdyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50SXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJ5Q3JlYXRlTG9jYXRpb25Gcm9tUGFyZW50SXRlbShwYXJlbnRJdGVtLCBzZWxlY3RvckluZGV4KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50SXRlbSA9IHRoaXMuZmluZEZpcnN0Q29udGVudEl0ZW1UeXBlKEl0ZW1UeXBlLmNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudEl0ZW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50cnlDcmVhdGVMb2NhdGlvbkZyb21QYXJlbnRJdGVtKHBhcmVudEl0ZW0sIHNlbGVjdG9ySW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgTGF5b3V0TWFuYWdlci5Mb2NhdGlvblNlbGVjdG9yLlR5cGVJZC5GaXJzdFJvdzoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50SXRlbSA9IHRoaXMuZmluZEZpcnN0Q29udGVudEl0ZW1UeXBlKEl0ZW1UeXBlLnJvdyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50SXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJ5Q3JlYXRlTG9jYXRpb25Gcm9tUGFyZW50SXRlbShwYXJlbnRJdGVtLCBzZWxlY3RvckluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIExheW91dE1hbmFnZXIuTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuRmlyc3RDb2x1bW46IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEl0ZW0gPSB0aGlzLmZpbmRGaXJzdENvbnRlbnRJdGVtVHlwZShJdGVtVHlwZS5jb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyeUNyZWF0ZUxvY2F0aW9uRnJvbVBhcmVudEl0ZW0ocGFyZW50SXRlbSwgc2VsZWN0b3JJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLkVtcHR5OiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1GTFJJRjE4MjQ0Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb3RJdGVtICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3JJbmRleCA9PT0gdW5kZWZpbmVkIHx8IHNlbGVjdG9ySW5kZXggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXJlbnRJdGVtOiB0aGlzLl9ncm91bmRJdGVtLCBpbmRleDogMCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLlJvb3Q6IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTUZMRjE4MjQ0Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VuZENvbnRlbnRJdGVtcyA9IHRoaXMuX2dyb3VuZEl0ZW0uY29udGVudEl0ZW1zO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncm91bmRDb250ZW50SXRlbXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3RvckluZGV4ID09PSB1bmRlZmluZWQgfHwgc2VsZWN0b3JJbmRleCA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhcmVudEl0ZW06IHRoaXMuX2dyb3VuZEl0ZW0sIGluZGV4OiAwIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEl0ZW0gPSBncm91bmRDb250ZW50SXRlbXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyeUNyZWF0ZUxvY2F0aW9uRnJvbVBhcmVudEl0ZW0ocGFyZW50SXRlbSwgc2VsZWN0b3JJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgdHJ5Q3JlYXRlTG9jYXRpb25Gcm9tUGFyZW50SXRlbShwYXJlbnRJdGVtOiBDb250ZW50SXRlbSxcclxuICAgICAgICBzZWxlY3RvckluZGV4OiBudW1iZXIgfCB1bmRlZmluZWRcclxuICAgICk6IExheW91dE1hbmFnZXIuTG9jYXRpb24gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudENvbnRlbnRJdGVtcyA9IHBhcmVudEl0ZW0uY29udGVudEl0ZW1zO1xyXG4gICAgICAgIGNvbnN0IHBhcmVudENvbnRlbnRJdGVtQ291bnQgPSBwYXJlbnRDb250ZW50SXRlbXMubGVuZ3RoO1xyXG4gICAgICAgIGlmIChzZWxlY3RvckluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgcGFyZW50SXRlbSwgaW5kZXg6IHBhcmVudENvbnRlbnRJdGVtQ291bnQgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0b3JJbmRleCA8IDAgfHwgc2VsZWN0b3JJbmRleCA+IHBhcmVudENvbnRlbnRJdGVtQ291bnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBwYXJlbnRJdGVtLCBpbmRleDogc2VsZWN0b3JJbmRleCB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIExheW91dE1hbmFnZXIge1xyXG4gICAgZXhwb3J0IHR5cGUgQmVmb3JlVmlydHVhbFJlY3RpbmdFdmVudCA9ICh0aGlzOiB2b2lkLCBjb3VudDogbnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgZXhwb3J0IHR5cGUgQWZ0ZXJWaXJ0dWFsUmVjdGluZ0V2ZW50ID0gKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb25zdHJ1Y3RvclBhcmFtZXRlcnMge1xyXG4gICAgICAgIGxheW91dENvbmZpZzogUmVzb2x2ZWRMYXlvdXRDb25maWcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgaXNTdWJXaW5kb3c6IGJvb2xlYW47XHJcbiAgICAgICAgY29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1heGltaXNlUGxhY2VFbGVtZW50KGRvY3VtZW50OiBEb2N1bWVudCk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuTWF4aW1pc2VQbGFjZSk7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhYkRyb3BQbGFjZWhvbGRlckVsZW1lbnQoZG9jdW1lbnQ6IERvY3VtZW50KTogSFRNTEVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Ecm9wVGFiUGxhY2Vob2xkZXIpO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3BlY2lmaWVzIGEgbG9jYXRpb24gb2YgYSBDb250ZW50SXRlbSB3aXRob3V0IHJlZmVyZW5jaW5nIHRoZSBjb250ZW50IGl0ZW0uXHJcbiAgICAgKiBVc2VkIHRvIHNwZWNpZnkgd2hlcmUgYSBuZXcgaXRlbSBpcyB0byBiZSBhZGRlZFxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIExvY2F0aW9uIHtcclxuICAgICAgICBwYXJlbnRJdGVtOiBDb250ZW50SXRlbTtcclxuICAgICAgICBpbmRleDogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBzZWxlY3RvciB1c2VkIHRvIHNwZWNpZnkgYSB1bmlxdWUgbG9jYXRpb24gaW4gdGhlIGxheW91dFxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIExvY2F0aW9uU2VsZWN0b3Ige1xyXG4gICAgICAgIC8qKiBTcGVjaWZpZXMgc2VsZWN0b3IgYWxnb3JpdGhtICovXHJcbiAgICAgICAgdHlwZUlkOiBMb2NhdGlvblNlbGVjdG9yLlR5cGVJZDtcclxuICAgICAgICAvKiogVXNlZCBieSBhbGdvcml0aG0gdG8gZGV0ZXJtaW5lIGluZGV4IGluIGZvdW5kIENvbnRlbnRJdGVtICovXHJcbiAgICAgICAgaW5kZXg/OiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBwdWJsaWMgKi9cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgTG9jYXRpb25TZWxlY3RvciB7XHJcbiAgICAgICAgZXhwb3J0IGNvbnN0IGVudW0gVHlwZUlkIHtcclxuICAgICAgICAgICAgLyoqIFN0YWNrIHdpdGggZm9jdXNlZCBJdGVtLiBJbmRleCBzcGVjaWZpZXMgb2Zmc2V0IGZyb20gaW5kZXggb2YgZm9jdXNlZCBpdGVtIChlZyAxIGlzIHRoZSBwb3NpdGlvbiBhZnRlciBmb2N1c2VkIGl0ZW0pICovXHJcbiAgICAgICAgICAgIEZvY3VzZWRJdGVtLFxyXG4gICAgICAgICAgICAvKiogU3RhY2sgd2l0aCBmb2N1c2VkIEl0ZW0uIEluZGV4IHNwZWNmaWVzIENvbnRlbnRJdGVtcyBpbmRleCAqL1xyXG4gICAgICAgICAgICBGb2N1c2VkU3RhY2ssXHJcbiAgICAgICAgICAgIC8qKiBGaXJzdCBzdGFjayBmb3VuZCBpbiBsYXlvdXQgKi9cclxuICAgICAgICAgICAgRmlyc3RTdGFjayxcclxuICAgICAgICAgICAgLyoqIEZpcnN0IFJvdyBvciBDb2x1bW4gZm91bmQgaW4gbGF5b3V0IChyb3dzIGFyZSBzZWFyY2hlZCBmaXJzdCkgKi9cclxuICAgICAgICAgICAgRmlyc3RSb3dPckNvbHVtbixcclxuICAgICAgICAgICAgLyoqIEZpcnN0IFJvdyBpbiBsYXlvdXQgKi9cclxuICAgICAgICAgICAgRmlyc3RSb3csXHJcbiAgICAgICAgICAgIC8qKiBGaXJzdCBDb2x1bW4gaW4gbGF5b3V0ICovXHJcbiAgICAgICAgICAgIEZpcnN0Q29sdW1uLFxyXG4gICAgICAgICAgICAvKiogRmluZHMgYSBsb2NhdGlvbiBpZiBsYXlvdXQgaXMgZW1wdHkuIFRoZSBmb3VuZCBsb2NhdGlvbiB3aWxsIGJlIHRoZSByb290IENvbnRlbnRJdGVtLiAqL1xyXG4gICAgICAgICAgICBFbXB0eSxcclxuICAgICAgICAgICAgLyoqIEZpbmRzIHJvb3QgaWYgbGF5b3V0IGlzIGVtcHR5LCBvdGhlcndpc2UgYSBjaGlsZCB1bmRlciByb290ICovXHJcbiAgICAgICAgICAgIFJvb3QsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBMb2NhdGlvblNlbGVjdG9ycyBhcnJheSB1c2VkIGlmIG5vbmUgaXMgc3BlY2lmaWVkLiAgV2lsbCBhbHdheXMgZmluZCBhIGxvY2F0aW9uLlxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgY29uc3QgZGVmYXVsdExvY2F0aW9uU2VsZWN0b3JzOiByZWFkb25seSBMb2NhdGlvblNlbGVjdG9yW10gPSBbXHJcbiAgICAgICAgeyB0eXBlSWQ6IExvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLkZvY3VzZWRTdGFjaywgaW5kZXg6IHVuZGVmaW5lZCB9LFxyXG4gICAgICAgIHsgdHlwZUlkOiBMb2NhdGlvblNlbGVjdG9yLlR5cGVJZC5GaXJzdFN0YWNrLCBpbmRleDogdW5kZWZpbmVkIH0sXHJcbiAgICAgICAgeyB0eXBlSWQ6IExvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLkZpcnN0Um93T3JDb2x1bW4sIGluZGV4OiB1bmRlZmluZWQgfSxcclxuICAgICAgICB7IHR5cGVJZDogTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuUm9vdCwgaW5kZXg6IHVuZGVmaW5lZCB9LFxyXG4gICAgXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExvY2F0aW9uU2VsZWN0b3JzIHRvIHRyeSB0byBnZXQgbG9jYXRpb24gbmV4dCB0byBleGlzdGluZyBmb2N1c2VkIGl0ZW1cclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNvbnN0IGFmdGVyRm9jdXNlZEl0ZW1JZlBvc3NpYmxlTG9jYXRpb25TZWxlY3RvcnM6IHJlYWRvbmx5IExvY2F0aW9uU2VsZWN0b3JbXSA9IFtcclxuICAgICAgICB7IHR5cGVJZDogTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuRm9jdXNlZEl0ZW0sIGluZGV4OiAxIH0sXHJcbiAgICAgICAgeyB0eXBlSWQ6IExvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLkZpcnN0U3RhY2ssIGluZGV4OiB1bmRlZmluZWQgfSxcclxuICAgICAgICB7IHR5cGVJZDogTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuRmlyc3RSb3dPckNvbHVtbiwgaW5kZXg6IHVuZGVmaW5lZCB9LFxyXG4gICAgICAgIHsgdHlwZUlkOiBMb2NhdGlvblNlbGVjdG9yLlR5cGVJZC5Sb290LCBpbmRleDogdW5kZWZpbmVkIH0sXHJcbiAgICBdO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBNaW5pZmllcyBhbmQgdW5taW5pZmllcyBjb25maWdzIGJ5IHJlcGxhY2luZyBmcmVxdWVudCBrZXlzXHJcbiAqIGFuZCB2YWx1ZXMgd2l0aCBvbmUgbGV0dGVyIHN1YnN0aXR1dGVzLiBDb25maWcgb3B0aW9ucyBtdXN0XHJcbiAqIHJldGFpbiBhcnJheSBwb3NpdGlvbi9pbmRleCwgYWRkIG5ldyBvcHRpb25zIGF0IHRoZSBlbmQuXHJcbiAqIEBpbnRlcm5hbFxyXG4qL1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBDb25maWdNaW5pZmllciB7XHJcblxyXG4gICAgZXhwb3J0IHR5cGUgWVkgPSAnaWQnIHwgJ3RpdGxlJztcclxuICAgIGV4cG9ydCBjb25zdCBlbnVtIFhYIHtcclxuICAgICAgICBpZCA9ICdpZCdcclxuICAgIH1cclxuICAgIGNvbnN0IGtleXM6IHJlYWRvbmx5IHN0cmluZ1tdID0gW1xyXG4gICAgICAgICdzZXR0aW5ncycsXHJcbiAgICAgICAgJ2hhc0hlYWRlcnMnLFxyXG4gICAgICAgICdjb25zdHJhaW5EcmFnVG9Db250YWluZXInLFxyXG4gICAgICAgICdzZWxlY3Rpb25FbmFibGVkJyxcclxuICAgICAgICAnZGltZW5zaW9ucycsXHJcbiAgICAgICAgJ2JvcmRlcldpZHRoJyxcclxuICAgICAgICAnbWluSXRlbUhlaWdodCcsXHJcbiAgICAgICAgJ21pbkl0ZW1XaWR0aCcsXHJcbiAgICAgICAgJ2hlYWRlckhlaWdodCcsXHJcbiAgICAgICAgJ2RyYWdQcm94eVdpZHRoJyxcclxuICAgICAgICAnZHJhZ1Byb3h5SGVpZ2h0JyxcclxuICAgICAgICAnbGFiZWxzJyxcclxuICAgICAgICAnY2xvc2UnLFxyXG4gICAgICAgICdtYXhpbWlzZScsXHJcbiAgICAgICAgJ21pbmltaXNlJyxcclxuICAgICAgICAncG9wb3V0JyxcclxuICAgICAgICAnY29udGVudCcsXHJcbiAgICAgICAgJ2NvbXBvbmVudFR5cGUnLFxyXG4gICAgICAgICdjb21wb25lbnRTdGF0ZScsXHJcbiAgICAgICAgJ2lkJyxcclxuICAgICAgICAnd2lkdGgnLFxyXG4gICAgICAgICd0eXBlJyxcclxuICAgICAgICAnaGVpZ2h0JyxcclxuICAgICAgICAnaXNDbG9zYWJsZScsXHJcbiAgICAgICAgJ3RpdGxlJyxcclxuICAgICAgICAncG9wb3V0V2hvbGVTdGFjaycsXHJcbiAgICAgICAgJ29wZW5Qb3BvdXRzJyxcclxuICAgICAgICAncGFyZW50SWQnLFxyXG4gICAgICAgICdhY3RpdmVJdGVtSW5kZXgnLFxyXG4gICAgICAgICdyZW9yZGVyRW5hYmxlZCcsXHJcbiAgICAgICAgJ2JvcmRlckdyYWJXaWR0aCcsXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIC8vTWF4aW11bSAzNiBlbnRyaWVzLCBkbyBub3QgY3Jvc3MgdGhpcyBsaW5lIVxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCB2YWx1ZXM6IHJlYWRvbmx5IChib29sZWFuIHwgc3RyaW5nKVtdID0gW1xyXG4gICAgICAgIHRydWUsXHJcbiAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgJ3JvdycsXHJcbiAgICAgICAgJ2NvbHVtbicsXHJcbiAgICAgICAgJ3N0YWNrJyxcclxuICAgICAgICAnY29tcG9uZW50JyxcclxuICAgICAgICAnY2xvc2UnLFxyXG4gICAgICAgICdtYXhpbWlzZScsXHJcbiAgICAgICAgJ21pbmltaXNlJyxcclxuICAgICAgICAnb3BlbiBpbiBuZXcgd2luZG93J1xyXG4gICAgXTtcclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY2hlY2tJbml0aWFsaXNlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChrZXlzLmxlbmd0aCA+IDM2KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVG9vIG1hbnkga2V5cyBpbiBjb25maWcgbWluaWZpZXIgbWFwJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGVPYmplY3QoZnJvbTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sIG1pbmlmeTogYm9vbGVhbik6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcclxuICAgICAgICBjb25zdCB0bzogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tKSB7XHJcbiAgICAgICAgICAgIGlmIChmcm9tLmhhc093blByb3BlcnR5KGtleSkpIHsgLy8gSW4gY2FzZSBzb21ldGhpbmcgaGFzIGV4dGVuZGVkIE9iamVjdCBwcm90b3R5cGVzXHJcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNsYXRlZEtleTogc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1pbmlmeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWRLZXkgPSBtaW5pZnlLZXkoa2V5KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlZEtleSA9IHVubWluaWZ5S2V5KGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbVZhbHVlID0gZnJvbVtrZXldO1xyXG4gICAgICAgICAgICAgICAgdG9bdHJhbnNsYXRlZEtleV0gPSB0cmFuc2xhdGVWYWx1ZShmcm9tVmFsdWUsIG1pbmlmeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0bztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVBcnJheShmcm9tOiB1bmtub3duW10sIG1pbmlmeTogYm9vbGVhbikge1xyXG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGZyb20ubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHRvID0gbmV3IEFycmF5PHVua25vd24+KGxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBJbiBvcmlnaW5hbCBjb2RlLCBhcnJheSBpbmRpY2VzIHdlcmUgbnVtYmVycyBhbmQgbm90IHRyYW5zbGF0ZWRcclxuICAgICAgICAgICAgY29uc3QgZnJvbVZhbHVlID0gZnJvbVtpXTtcclxuICAgICAgICAgICAgdG9baV0gPSB0cmFuc2xhdGVWYWx1ZShmcm9tVmFsdWUsIG1pbmlmeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0bztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVWYWx1ZShmcm9tOiB1bmtub3duLCBtaW5pZnk6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodHlwZW9mIGZyb20gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChmcm9tID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGZyb20pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZUFycmF5KGZyb20sIG1pbmlmeSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGVPYmplY3QoZnJvbSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwgbWluaWZ5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChtaW5pZnkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtaW5pZnlWYWx1ZShmcm9tKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bm1pbmlmeVZhbHVlKGZyb20pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1pbmlmeUtleSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSWYgYSB2YWx1ZSBhY3R1YWxseSBpcyBhIHNpbmdsZSBjaGFyYWN0ZXIsIHByZWZpeCBpdFxyXG4gICAgICAgICAqIHdpdGggX19fIHRvIGF2b2lkIG1pc3Rha2luZyBpdCBmb3IgYSBtaW5pZmljYXRpb24gY29kZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ19fXycgKyB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBjb25zdCBpbmRleCA9IGluZGV4T2ZLZXkodmFsdWUpO1xyXG4gICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogdmFsdWUgbm90IGZvdW5kIGluIHRoZSBkaWN0aW9uYXJ5LCByZXR1cm4gaXQgdW5tb2RpZmllZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiB2YWx1ZSBmb3VuZCBpbiBkaWN0aW9uYXJ5LCByZXR1cm4gaXRzIGJhc2UzNiBjb3VudGVycGFydFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bm1pbmlmeUtleShrZXk6IHN0cmluZykge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHZhbHVlIGlzIGEgc2luZ2xlIGNoYXJhY3Rlci4gQXNzdW1lIHRoYXQgaXQncyBhIHRyYW5zbGF0aW9uXHJcbiAgICAgICAgICogYW5kIHJldHVybiB0aGUgb3JpZ2luYWwgdmFsdWUgZnJvbSB0aGUgZGljdGlvbmFyeVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBrZXlzW3BhcnNlSW50KGtleSwgMzYpXTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB2YWx1ZSBvcmlnaW5hbGx5IHdhcyBhIHNpbmdsZSBjaGFyYWN0ZXIgYW5kIHdhcyBwcmVmaXhlZCB3aXRoIF9fX1xyXG4gICAgICAgICAqIHRvIGF2b2lkIG1pc3Rha2luZyBpdCBmb3IgYSB0cmFuc2xhdGlvbi4gUmVtb3ZlIHRoZSBwcmVmaXhcclxuICAgICAgICAgKiBhbmQgcmV0dXJuIHRoZSBvcmlnaW5hbCBjaGFyYWN0ZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoa2V5LnN1YnN0cigwLCAzKSA9PT0gJ19fXycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGtleVszXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogdmFsdWUgd2FzIG5vdCBtaW5pZmllZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWluaWZ5VmFsdWUodmFsdWU6IHVua25vd24pIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiBhIHZhbHVlIGFjdHVhbGx5IGlzIGEgc2luZ2xlIGNoYXJhY3RlciwgcHJlZml4IGl0XHJcbiAgICAgICAgICogd2l0aCBfX18gdG8gYXZvaWQgbWlzdGFraW5nIGl0IGZvciBhIG1pbmlmaWNhdGlvbiBjb2RlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnX19fJyArIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gaW5kZXhPZlZhbHVlKHZhbHVlKTtcclxuICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHZhbHVlIG5vdCBmb3VuZCBpbiB0aGUgZGljdGlvbmFyeSwgcmV0dXJuIGl0IHVubW9kaWZpZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogdmFsdWUgZm91bmQgaW4gZGljdGlvbmFyeSwgcmV0dXJuIGl0cyBiYXNlMzYgY291bnRlcnBhcnRcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4LnRvU3RyaW5nKDM2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5taW5pZnlWYWx1ZSh2YWx1ZTogdW5rbm93bikge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHZhbHVlIGlzIGEgc2luZ2xlIGNoYXJhY3Rlci4gQXNzdW1lIHRoYXQgaXQncyBhIHRyYW5zbGF0aW9uXHJcbiAgICAgICAgICogYW5kIHJldHVybiB0aGUgb3JpZ2luYWwgdmFsdWUgZnJvbSB0aGUgZGljdGlvbmFyeVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzW3BhcnNlSW50KHZhbHVlLCAzNildO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogdmFsdWUgb3JpZ2luYWxseSB3YXMgYSBzaW5nbGUgY2hhcmFjdGVyIGFuZCB3YXMgcHJlZml4ZWQgd2l0aCBfX19cclxuICAgICAgICAgKiB0byBhdm9pZCBtaXN0YWtpbmcgaXQgZm9yIGEgdHJhbnNsYXRpb24uIFJlbW92ZSB0aGUgcHJlZml4XHJcbiAgICAgICAgICogYW5kIHJldHVybiB0aGUgb3JpZ2luYWwgY2hhcmFjdGVyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuc3Vic3RyKDAsIDMpID09PSAnX19fJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVbM107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHZhbHVlIHdhcyBub3QgbWluaWZpZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5kZXhPZktleShrZXk6IHN0cmluZykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoa2V5c1tpXSA9PT0ga2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5kZXhPZlZhbHVlKHZhbHVlOiB1bmtub3duKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlc1tpXSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEb21Db25zdGFudHMgfSBmcm9tICcuL2RvbS1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuL2V2ZW50LWVtaXR0ZXInO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY2xhc3MgRHJhZ0xpc3RlbmVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIHByaXZhdGUgX3RpbWVvdXQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBfYWxsb3dhYmxlVGFyZ2V0czogSFRNTEVsZW1lbnRbXTtcclxuICAgIHByaXZhdGUgX29Eb2N1bWVudDogRG9jdW1lbnQ7XHJcbiAgICBwcml2YXRlIF9lQm9keTogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIF9uRGVsYXk6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX25EaXN0YW5jZTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfblg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX25ZOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9uT3JpZ2luYWxYOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9uT3JpZ2luYWxZOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9kcmFnZ2luZzogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgX3BvaW50ZXJUcmFja2luZyA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgX3BvaW50ZXJEb3duRXZlbnRMaXN0ZW5lciA9IChldjogUG9pbnRlckV2ZW50KSA9PiB0aGlzLm9uUG9pbnRlckRvd24oZXYpO1xyXG4gICAgcHJpdmF0ZSBfcG9pbnRlck1vdmVFdmVudExpc3RlbmVyID0gKGV2OiBQb2ludGVyRXZlbnQpID0+IHRoaXMub25Qb2ludGVyTW92ZShldik7XHJcbiAgICBwcml2YXRlIF9wb2ludGVyVXBFdmVudExpc3RlbmVyID0gKGV2OiBQb2ludGVyRXZlbnQpID0+IHRoaXMub25Qb2ludGVyVXAoZXYpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2VFbGVtZW50OiBIVE1MRWxlbWVudCwgZXh0cmFBbGxvd2FibGVDaGlsZFRhcmdldHM6IEhUTUxFbGVtZW50W10pIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLl90aW1lb3V0ID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICB0aGlzLl9hbGxvd2FibGVUYXJnZXRzID0gW19lRWxlbWVudCwgLi4uZXh0cmFBbGxvd2FibGVDaGlsZFRhcmdldHNdO1xyXG4gICAgICAgIHRoaXMuX29Eb2N1bWVudCA9IGRvY3VtZW50O1xyXG4gICAgICAgIHRoaXMuX2VCb2R5ID0gZG9jdW1lbnQuYm9keTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGRlbGF5IGFmdGVyIHdoaWNoIHRvIHN0YXJ0IHRoZSBkcmFnIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgICAgICAqIERvIE5PVCBtYWtlIHRvbyBzaG9ydCAocHJldmlvdXMgdmFsdWUgb2YgMjAwIHdhcyBub3QgbG9uZyBlbm91Z2ggZm9yIG15IHRvdWNocGFkKVxyXG4gICAgICAgICAqIFNob3VsZCBnZW5lcmFsbHkgcmVseSBvbiB0aGUgbW91c2UgbW92ZSB0byBzdGFydCBkcmFnLiAgTm90IHRoaXMgZGVsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fbkRlbGF5ID0gMTgwMDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGRpc3RhbmNlIHRoZSBtb3VzZSBuZWVkcyB0byBiZSBtb3ZlZCB0byBxdWFsaWZ5IGFzIGEgZHJhZ1xyXG4gICAgICAgICAqIFByZXZpb3VzIGNvbW1lbnQ6IHdvcmtzIGJldHRlciB3aXRoIGRlbGF5IG9ubHlcclxuICAgICAgICAgKiA/Pz9cclxuICAgICAgICAgKiBQcm9iYWJseSBzb21laG93IG5lZWRzIHR1bmluZyBmb3IgZGlmZmVyZW50IGRldmljZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9uRGlzdGFuY2UgPSAxMDtcclxuXHJcbiAgICAgICAgdGhpcy5fblggPSAwO1xyXG4gICAgICAgIHRoaXMuX25ZID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5fbk9yaWdpbmFsWCA9IDA7XHJcbiAgICAgICAgdGhpcy5fbk9yaWdpbmFsWSA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuX2RyYWdnaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuX2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5fcG9pbnRlckRvd25FdmVudExpc3RlbmVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNoZWNrUmVtb3ZlUG9pbnRlclRyYWNraW5nRXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLl9wb2ludGVyRG93bkV2ZW50TGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbmNlbERyYWcoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzRHJhZ1N0b3AodW5kZWZpbmVkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uUG9pbnRlckRvd24ob0V2ZW50OiBQb2ludGVyRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5fYWxsb3dhYmxlVGFyZ2V0cy5pbmNsdWRlcyhvRXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50KSAmJiBvRXZlbnQuaXNQcmltYXJ5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gdGhpcy5nZXRQb2ludGVyQ29vcmRpbmF0ZXMob0V2ZW50KTtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzUG9pbnRlckRvd24oY29vcmRpbmF0ZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHByb2Nlc3NQb2ludGVyRG93bihjb29yZGluYXRlczogRHJhZ0xpc3RlbmVyLlBvaW50ZXJDb29yZGluYXRlcykge1xyXG4gICAgICAgIHRoaXMuX25PcmlnaW5hbFggPSBjb29yZGluYXRlcy54O1xyXG4gICAgICAgIHRoaXMuX25PcmlnaW5hbFkgPSBjb29yZGluYXRlcy55O1xyXG5cclxuICAgICAgICB0aGlzLl9vRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLl9wb2ludGVyTW92ZUV2ZW50TGlzdGVuZXIpO1xyXG4gICAgICAgIHRoaXMuX29Eb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLl9wb2ludGVyVXBFdmVudExpc3RlbmVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XHJcbiAgICAgICAgdGhpcy5fcG9pbnRlclRyYWNraW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydERyYWcoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLCB0aGlzLl9uRGVsYXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Qb2ludGVyTW92ZShvRXZlbnQ6IFBvaW50ZXJFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9wb2ludGVyVHJhY2tpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzRHJhZ01vdmUob0V2ZW50KTtcclxuICAgICAgICAgICAgb0V2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcHJvY2Vzc0RyYWdNb3ZlKGRyYWdFdmVudDogUG9pbnRlckV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fblggPSBkcmFnRXZlbnQucGFnZVggLSB0aGlzLl9uT3JpZ2luYWxYO1xyXG4gICAgICAgIHRoaXMuX25ZID0gZHJhZ0V2ZW50LnBhZ2VZIC0gdGhpcy5fbk9yaWdpbmFsWTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2RyYWdnaW5nID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBNYXRoLmFicyh0aGlzLl9uWCkgPiB0aGlzLl9uRGlzdGFuY2UgfHxcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKHRoaXMuX25ZKSA+IHRoaXMuX25EaXN0YW5jZVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREcmFnKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9kcmFnZ2luZykge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2RyYWcnLCB0aGlzLl9uWCwgdGhpcy5fblksIGRyYWdFdmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Qb2ludGVyVXAob0V2ZW50OiBQb2ludGVyRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnByb2Nlc3NEcmFnU3RvcChvRXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcHJvY2Vzc0RyYWdTdG9wKGRyYWdFdmVudD86IFBvaW50ZXJFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLl90aW1lb3V0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lb3V0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jaGVja1JlbW92ZVBvaW50ZXJUcmFja2luZ0V2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICBcclxuICAgICAgICBpZiAodGhpcy5fZHJhZ2dpbmcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fZUJvZHkuY2xhc3NMaXN0LnJlbW92ZShEb21Db25zdGFudHMuQ2xhc3NOYW1lLkRyYWdnaW5nKTtcclxuICAgICAgICAgICAgdGhpcy5fZUVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShEb21Db25zdGFudHMuQ2xhc3NOYW1lLkRyYWdnaW5nKTtcclxuICAgICAgICAgICAgdGhpcy5fb0RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpPy5zdHlsZS5zZXRQcm9wZXJ0eSgncG9pbnRlci1ldmVudHMnLCAnJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZHJhZ1N0b3AnLCBkcmFnRXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrUmVtb3ZlUG9pbnRlclRyYWNraW5nRXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvaW50ZXJUcmFja2luZykge1xyXG4gICAgICAgICAgICB0aGlzLl9vRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLl9wb2ludGVyTW92ZUV2ZW50TGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9vRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgdGhpcy5fcG9pbnRlclVwRXZlbnRMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvaW50ZXJUcmFja2luZyA9IGZhbHNlO1xyXG4gICAgICAgIH0gICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGFydERyYWcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2RyYWdnaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9lQm9keS5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRHJhZ2dpbmcpO1xyXG4gICAgICAgIHRoaXMuX2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5EcmFnZ2luZyk7XHJcbiAgICAgICAgdGhpcy5fb0RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpPy5zdHlsZS5zZXRQcm9wZXJ0eSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnZHJhZ1N0YXJ0JywgdGhpcy5fbk9yaWdpbmFsWCwgdGhpcy5fbk9yaWdpbmFsWSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQb2ludGVyQ29vcmRpbmF0ZXMoZXZlbnQ6IFBvaW50ZXJFdmVudCkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogRHJhZ0xpc3RlbmVyLlBvaW50ZXJDb29yZGluYXRlcyA9IHtcclxuICAgICAgICAgICAgeDogZXZlbnQucGFnZVgsXHJcbiAgICAgICAgICAgIHk6IGV2ZW50LnBhZ2VZXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIERyYWdMaXN0ZW5lciB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIFBvaW50ZXJDb29yZGluYXRlcyB7XHJcbiAgICAgICAgeDogbnVtYmVyLFxyXG4gICAgICAgIHk6IG51bWJlcixcclxuICAgIH1cclxufSIsImltcG9ydCB7IEJyb3dzZXJQb3BvdXQgfSBmcm9tICcuLi9jb250cm9scy9icm93c2VyLXBvcG91dCc7XHJcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4uL2NvbnRyb2xzL3RhYic7XHJcbmltcG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuLi9pdGVtcy9jb21wb25lbnQtaXRlbSc7XHJcblxyXG4vKipcclxuICogQSBnZW5lcmljIGFuZCB2ZXJ5IGZhc3QgRXZlbnRFbWl0dGVyIGltcGxlbWVudGF0aW9uLiBPbiB0b3Agb2YgZW1pdHRpbmcgdGhlIGFjdHVhbCBldmVudCBpdCBlbWl0cyBhblxyXG4gKiB7QGxpbmsgKEV2ZW50RW1pdHRlcjpuYW1lc3BhY2UpLkFMTF9FVkVOVH0gZXZlbnQgZm9yIGV2ZXJ5IGV2ZW50IHRyaWdnZXJlZC4gVGhpcyBhbGxvd3MgdG8gaG9vayBpbnRvIGl0IGFuZCBwcm94eSBldmVudHMgZm9yd2FyZHNcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9hbGxFdmVudFN1YnNjcmlwdGlvbnM6IEV2ZW50RW1pdHRlci5Vbmtub3duQ2FsbGJhY2tbXSA9IFtdO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBFdmVudEVtaXR0ZXIuVW5rbm93bkNhbGxiYWNrW10+KCk7XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgdHJ5QnViYmxlRXZlbnQobmFtZTogc3RyaW5nLCBhcmdzOiB1bmtub3duW10pOiB2b2lkIHtcclxuICAgICAgICAvLyBvdmVycmlkZGVuIGJ5IENvbnRlbnRJdGVtXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbWl0IGFuIGV2ZW50IGFuZCBub3RpZnkgbGlzdGVuZXJzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG4gICAgICogQHBhcmFtIGFyZ3MgLSBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBsaXN0ZW5lclxyXG4gICAgICovXHJcbiAgICBlbWl0PEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSywgLi4uYXJnczogRXZlbnRFbWl0dGVyLkV2ZW50UGFyYW1zTWFwW0tdKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN1YmNyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnNNYXAuZ2V0KGV2ZW50TmFtZSk7XHJcblxyXG4gICAgICAgIGlmIChzdWJjcmlwdGlvbnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBzdWJjcmlwdGlvbnMgPSBzdWJjcmlwdGlvbnMuc2xpY2UoKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHN1YmNyaXB0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiguLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbWl0QWxsRXZlbnQoZXZlbnROYW1lLCBhcmdzKTtcclxuICAgICAgICB0aGlzLnRyeUJ1YmJsZUV2ZW50KGV2ZW50TmFtZSwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZW1pdFVua25vd24oZXZlbnROYW1lOiBzdHJpbmcsIC4uLmFyZ3M6IEV2ZW50RW1pdHRlci5Vbmtub3duUGFyYW1zKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN1YnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zTWFwLmdldChldmVudE5hbWUpO1xyXG5cclxuICAgICAgICBpZiAoc3VicyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHN1YnMgPSBzdWJzLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vicy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc3Vic1tpXSguLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbWl0QWxsRXZlbnQoZXZlbnROYW1lLCBhcmdzKTtcclxuICAgICAgICB0aGlzLnRyeUJ1YmJsZUV2ZW50KGV2ZW50TmFtZSwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogQGludGVybmFsICoqL1xyXG4gICAgZW1pdEJhc2VCdWJibGluZ0V2ZW50PEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlci5CdWJibGluZ0V2ZW50KGV2ZW50TmFtZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5lbWl0VW5rbm93bihldmVudE5hbWUsIGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBlbWl0VW5rbm93bkJ1YmJsaW5nRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudEVtaXR0ZXIuQnViYmxpbmdFdmVudChldmVudE5hbWUsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZW1pdFVua25vd24oZXZlbnROYW1lLCBldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgbGlzdGVuZXIgZm9yIGFuIGV2ZW50LlxyXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjYWxsYmFjayBtZXRob2QgKG9wdGlvbmFsKVxyXG4gICAgICovXHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSywgY2FsbGJhY2s6IEV2ZW50RW1pdHRlci5DYWxsYmFjazxLPik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHVua25vd25DYWxsYmFjayA9IGNhbGxiYWNrIGFzIEV2ZW50RW1pdHRlci5Vbmtub3duQ2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVVbmtub3duRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHVua25vd25DYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgb2ZmPEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSywgY2FsbGJhY2s6IEV2ZW50RW1pdHRlci5DYWxsYmFjazxLPik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciBvZmZcclxuICAgICAqL1xyXG4gICAgdW5iaW5kID0gdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIGVtaXRcclxuICAgICAqL1xyXG4gICAgdHJpZ2dlciA9IHRoaXMuZW1pdDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExpc3RlbiBmb3IgZXZlbnRzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gdG9cclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IG9jY3Vyc1xyXG4gICAgICovXHJcbiAgICBhZGRFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSywgY2FsbGJhY2s6IEV2ZW50RW1pdHRlci5DYWxsYmFjazxLPik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHVua25vd25DYWxsYmFjayA9IGNhbGxiYWNrIGFzIEV2ZW50RW1pdHRlci5Vbmtub3duQ2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5hZGRVbmtub3duRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHVua25vd25DYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgb248SyBleHRlbmRzIGtleW9mIEV2ZW50RW1pdHRlci5FdmVudFBhcmFtc01hcD4oZXZlbnROYW1lOiBLLCBjYWxsYmFjazogRXZlbnRFbWl0dGVyLkNhbGxiYWNrPEs+KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgYWRkVW5rbm93bkV2ZW50TGlzdGVuZXIoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBFdmVudEVtaXR0ZXIuVW5rbm93bkNhbGxiYWNrKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gRXZlbnRFbWl0dGVyLkFMTF9FVkVOVCkge1xyXG4gICAgICAgICAgICB0aGlzLl9hbGxFdmVudFN1YnNjcmlwdGlvbnMucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zTWFwLmdldChldmVudE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucyA9IFtjYWxsYmFja107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zTWFwLnNldChldmVudE5hbWUsIHN1YnNjcmlwdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVtb3ZlVW5rbm93bkV2ZW50TGlzdGVuZXIoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBFdmVudEVtaXR0ZXIuVW5rbm93bkNhbGxiYWNrKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gRXZlbnRFbWl0dGVyLkFMTF9FVkVOVCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVN1YnNjcmlwdGlvbihldmVudE5hbWUsIHRoaXMuX2FsbEV2ZW50U3Vic2NyaXB0aW9ucywgY2FsbGJhY2spO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zTWFwLmdldChldmVudE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHN1YnNjcmlidGlvbnMgdG8gdW5zdWJzY3JpYmUgZm9yIGV2ZW50ICcgKyBldmVudE5hbWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24oZXZlbnROYW1lLCBzdWJzY3JpcHRpb25zLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZW1vdmVTdWJzY3JpcHRpb24oZXZlbnROYW1lOiBzdHJpbmcsIHN1YnNjcmlwdGlvbnM6IEV2ZW50RW1pdHRlci5Vbmtub3duQ2FsbGJhY2tbXSwgY2FsbGJhY2s6IEV2ZW50RW1pdHRlci5Vbmtub3duQ2FsbGJhY2spIHtcclxuICAgICAgICBjb25zdCBpZHggPSBzdWJzY3JpcHRpb25zLmluZGV4T2YoY2FsbGJhY2spO1xyXG4gICAgICAgIGlmIChpZHggPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90aGluZyB0byB1bmJpbmQgZm9yICcgKyBldmVudE5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgZW1pdEFsbEV2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBhcmdzOiB1bmtub3duW10pIHtcclxuICAgICAgICBjb25zdCBhbGxFdmVudFN1YnNjcmlwdGlvbnNDb3VudCA9IHRoaXMuX2FsbEV2ZW50U3Vic2NyaXB0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGFsbEV2ZW50U3Vic2NyaXB0aW9uc0NvdW50ID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCB1bmtub3duQXJncyA9IGFyZ3Muc2xpY2UoKSBhcyBFdmVudEVtaXR0ZXIuVW5rbm93blBhcmFtcztcclxuICAgICAgICAgICAgdW5rbm93bkFyZ3MudW5zaGlmdChldmVudE5hbWUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYWxsRXZlbnRTdWJjcmlwdGlvbnMgPSB0aGlzLl9hbGxFdmVudFN1YnNjcmlwdGlvbnMuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsRXZlbnRTdWJzY3JpcHRpb25zQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYWxsRXZlbnRTdWJjcmlwdGlvbnNbaV0oLi4udW5rbm93bkFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEV2ZW50RW1pdHRlciB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0aGF0J3MgdHJpZ2dlcmVkIGZvciBldmVyeSBldmVudFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY29uc3QgQUxMX0VWRU5UID0gJ19fYWxsJztcclxuXHJcbiAgICBleHBvcnQgY29uc3QgaGVhZGVyQ2xpY2tFdmVudE5hbWUgPSAnc3RhY2tIZWFkZXJDbGljayc7XHJcbiAgICBleHBvcnQgY29uc3QgaGVhZGVyVG91Y2hTdGFydEV2ZW50TmFtZSA9ICdzdGFja0hlYWRlclRvdWNoU3RhcnQnO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIFVua25vd25DYWxsYmFjayA9ICh0aGlzOiB2b2lkLCAuLi5hcmdzOiBVbmtub3duUGFyYW1zKSA9PiB2b2lkO1xyXG4gICAgZXhwb3J0IHR5cGUgQ2FsbGJhY2s8SyBleHRlbmRzIGtleW9mIEV2ZW50RW1pdHRlci5FdmVudFBhcmFtc01hcD4gPSAodGhpczogdm9pZCwgLi4uYXJnczogRXZlbnRQYXJhbXNNYXBbS10pID0+IHZvaWQ7XHJcblxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBFdmVudFBhcmFtc01hcCB7XHJcbiAgICAgICAgXCJfX2FsbFwiOiBVbmtub3duUGFyYW1zO1xyXG4gICAgICAgIFwiYWN0aXZlQ29udGVudEl0ZW1DaGFuZ2VkXCI6IENvbXBvbmVudEl0ZW1QYXJhbTtcclxuICAgICAgICBcImNsb3NlXCI6IE5vUGFyYW1zO1xyXG4gICAgICAgIFwiY2xvc2VkXCI6IE5vUGFyYW1zO1xyXG4gICAgICAgIFwiZGVzdHJveVwiOiBOb1BhcmFtcztcclxuICAgICAgICBcImRyYWdcIjogRHJhZ1BhcmFtcztcclxuICAgICAgICBcImRyYWdTdGFydFwiOiBEcmFnU3RhcnRQYXJhbXM7XHJcbiAgICAgICAgXCJkcmFnU3RvcFwiOiBEcmFnU3RvcFBhcmFtcztcclxuICAgICAgICBcImhpZGVcIjogTm9QYXJhbXM7XHJcbiAgICAgICAgXCJpbml0aWFsaXNlZFwiOiBOb1BhcmFtcztcclxuICAgICAgICBcIml0ZW1Ecm9wcGVkXCI6IENvbXBvbmVudEl0ZW1QYXJhbTtcclxuICAgICAgICBcIm1heGltaXNlZFwiOiBOb1BhcmFtcztcclxuICAgICAgICBcIm1pbmltaXNlZFwiOiBOb1BhcmFtcztcclxuICAgICAgICBcIm9wZW5cIjogTm9QYXJhbXM7XHJcbiAgICAgICAgXCJwb3BJblwiOiBOb1BhcmFtcztcclxuICAgICAgICBcInJlc2l6ZVwiOiBOb1BhcmFtcztcclxuICAgICAgICBcInNob3dcIjogTm9QYXJhbXM7XHJcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIC0gdXNlIHNob3cgaW5zdGVhZCAqL1xyXG4gICAgICAgIFwic2hvd25cIjogTm9QYXJhbXM7XHJcbiAgICAgICAgXCJzdGF0ZUNoYW5nZWRcIjogTm9QYXJhbXM7XHJcbiAgICAgICAgXCJ0YWJcIjogVGFiUGFyYW07XHJcbiAgICAgICAgXCJ0YWJDcmVhdGVkXCI6IFRhYlBhcmFtO1xyXG4gICAgICAgIFwidGl0bGVDaGFuZ2VkXCI6IFN0cmluZ1BhcmFtO1xyXG4gICAgICAgIFwid2luZG93Q2xvc2VkXCI6IFBvcG91dFBhcmFtO1xyXG4gICAgICAgIFwid2luZG93T3BlbmVkXCI6IFBvcG91dFBhcmFtO1xyXG4gICAgICAgIFwiYmVmb3JlQ29tcG9uZW50UmVsZWFzZVwiOiBCZWZvcmVDb21wb25lbnRSZWxlYXNlUGFyYW1zO1xyXG4gICAgICAgIFwiYmVmb3JlSXRlbURlc3Ryb3llZFwiOiBCdWJibGluZ0V2ZW50UGFyYW07XHJcbiAgICAgICAgXCJpdGVtQ3JlYXRlZFwiOiBCdWJibGluZ0V2ZW50UGFyYW07XHJcbiAgICAgICAgXCJpdGVtRGVzdHJveWVkXCI6IEJ1YmJsaW5nRXZlbnRQYXJhbTtcclxuICAgICAgICBcImZvY3VzXCI6IEJ1YmJsaW5nRXZlbnRQYXJhbTtcclxuICAgICAgICBcImJsdXJcIjogQnViYmxpbmdFdmVudFBhcmFtO1xyXG4gICAgICAgIFwic3RhY2tIZWFkZXJDbGlja1wiOiBDbGlja0J1YmJsaW5nRXZlbnRQYXJhbTtcclxuICAgICAgICBcInN0YWNrSGVhZGVyVG91Y2hTdGFydFwiOiBUb3VjaFN0YXJ0QnViYmxpbmdFdmVudFBhcmFtO1xyXG4gICAgICAgIFwidXNlckJyb2FkY2FzdFwiOiBVbmtub3duUGFyYW1zO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCB0eXBlIFVua25vd25QYXJhbXMgPSB1bmtub3duW107XHJcbiAgICBleHBvcnQgdHlwZSBOb1BhcmFtcyA9IFtdO1xyXG4gICAgZXhwb3J0IHR5cGUgVW5rbm93blBhcmFtID0gW3Vua25vd25dO1xyXG4gICAgZXhwb3J0IHR5cGUgUG9wb3V0UGFyYW0gPSBbQnJvd3NlclBvcG91dF07XHJcbiAgICBleHBvcnQgdHlwZSBDb21wb25lbnRJdGVtUGFyYW0gPSBbQ29tcG9uZW50SXRlbV07XHJcbiAgICBleHBvcnQgdHlwZSBUYWJQYXJhbSA9IFtUYWJdO1xyXG4gICAgZXhwb3J0IHR5cGUgQnViYmxpbmdFdmVudFBhcmFtID0gW0V2ZW50RW1pdHRlci5CdWJibGluZ0V2ZW50XVxyXG4gICAgZXhwb3J0IHR5cGUgU3RyaW5nUGFyYW0gPSBbc3RyaW5nXTtcclxuICAgIGV4cG9ydCB0eXBlIERyYWdTdGFydFBhcmFtcyA9IFtvcmlnaW5hbFg6IG51bWJlciwgb3JpZ2luYWxZOiBudW1iZXJdO1xyXG4gICAgZXhwb3J0IHR5cGUgRHJhZ1N0b3BQYXJhbXMgPSBbZXZlbnQ6IFBvaW50ZXJFdmVudCB8IHVuZGVmaW5lZF07XHJcbiAgICBleHBvcnQgdHlwZSBEcmFnUGFyYW1zID0gW29mZnNldFg6IG51bWJlciwgb2Zmc2V0WTogbnVtYmVyLCBldmVudDogUG9pbnRlckV2ZW50XTtcclxuICAgIGV4cG9ydCB0eXBlIEJlZm9yZUNvbXBvbmVudFJlbGVhc2VQYXJhbXMgPSBbY29tcG9uZW50OiB1bmtub3duXTtcclxuICAgIGV4cG9ydCB0eXBlIENsaWNrQnViYmxpbmdFdmVudFBhcmFtID0gW0NsaWNrQnViYmxpbmdFdmVudF07XHJcbiAgICBleHBvcnQgdHlwZSBUb3VjaFN0YXJ0QnViYmxpbmdFdmVudFBhcmFtID0gW1RvdWNoU3RhcnRCdWJibGluZ0V2ZW50XTtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgQnViYmxpbmdFdmVudCB7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgX2lzUHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGdldCBuYW1lKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl9uYW1lOyB9XHJcbiAgICAgICAgZ2V0IHRhcmdldCgpOiBFdmVudEVtaXR0ZXIgeyByZXR1cm4gdGhpcy5fdGFyZ2V0OyB9XHJcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKEV2ZW50RW1pdHRlcjpuYW1lc3BhY2UpLihCdWJibGluZ0V2ZW50OmNsYXNzKS50YXJnZXR9IGluc3RlYWQgKi9cclxuICAgICAgICBnZXQgb3JpZ2luKCk6IEV2ZW50RW1pdHRlciB7IHJldHVybiB0aGlzLl90YXJnZXQ7IH1cclxuICAgICAgICBnZXQgaXNQcm9wYWdhdGlvblN0b3BwZWQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9pc1Byb3BhZ2F0aW9uU3RvcHBlZDsgfVxyXG5cclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfbmFtZTogc3RyaW5nLFxyXG4gICAgICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhcmdldDogRXZlbnRFbWl0dGVyKSB7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdG9wUHJvcGFnYXRpb24oKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzUHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIENsaWNrQnViYmxpbmdFdmVudCBleHRlbmRzIEJ1YmJsaW5nRXZlbnQge1xyXG4gICAgICAgIGdldCBtb3VzZUV2ZW50KCk6IE1vdXNlRXZlbnQgeyByZXR1cm4gdGhpcy5fbW91c2VFdmVudDsgfVxyXG5cclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB0YXJnZXQ6IEV2ZW50RW1pdHRlcixcclxuICAgICAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9tb3VzZUV2ZW50OiBNb3VzZUV2ZW50XHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKG5hbWUsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBUb3VjaFN0YXJ0QnViYmxpbmdFdmVudCBleHRlbmRzIEJ1YmJsaW5nRXZlbnQge1xyXG4gICAgICAgIGdldCB0b3VjaEV2ZW50KCk6IFRvdWNoRXZlbnQgeyByZXR1cm4gdGhpcy5fdG91Y2hFdmVudDsgfVxyXG5cclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB0YXJnZXQ6IEV2ZW50RW1pdHRlcixcclxuICAgICAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF90b3VjaEV2ZW50OiBUb3VjaEV2ZW50XHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHN1cGVyKG5hbWUsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFVuZXhwZWN0ZWROdWxsRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBMYXlvdXRNYW5hZ2VyIH0gZnJvbSAnLi4vbGF5b3V0LW1hbmFnZXInO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuL2V2ZW50LWVtaXR0ZXInO1xyXG5cclxuLy8gQWRkIG91ciBDaGlsZEV2ZW50IHRvIFdpbmRvd0V2ZW50TWFwIGZvciB0eXBlIHNhZmV0eVxyXG4vKiogQHB1YmxpYyAqL1xyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93RXZlbnRNYXAge1xyXG4gICAgICAgIFtFdmVudEh1Yi5DaGlsZEV2ZW50TmFtZV06IEN1c3RvbUV2ZW50PEV2ZW50SHViLkNoaWxkRXZlbnREZXRhaWw+O1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQW4gRXZlbnRFbWl0dGVyIHNpbmdsZXRvbiB0aGF0IHByb3BhZ2F0ZXMgZXZlbnRzXHJcbiAqIGFjcm9zcyBtdWx0aXBsZSB3aW5kb3dzLiBUaGlzIGlzIGEgbGl0dGxlIGJpdCB0cmlja2llciBzaW5jZVxyXG4gKiB3aW5kb3dzIGFyZSBhbGxvd2VkIHRvIG9wZW4gY2hpbGRXaW5kb3dzIGluIHRoZWlyIG93biByaWdodC5cclxuICpcclxuICogVGhpcyBtZWFucyB0aGF0IHdlIGRlYWwgd2l0aCBhIHRyZWUgb2Ygd2luZG93cy4gVGhlcmVmb3JlLCB3ZSBkbyB0aGUgZXZlbnQgcHJvcGFnYXRpb24gaW4gdHdvIHBoYXNlczpcclxuICpcclxuICogLSBQcm9wYWdhdGUgZXZlbnRzIGZyb20gdGhpcyBsYXlvdXQgdG8gdGhlIHBhcmVudCBsYXlvdXRcclxuICogICAtIFJlcGVhdCB1bnRpbCB0aGUgZXZlbnQgYXJyaXZlZCBhdCB0aGUgcm9vdCBsYXlvdXRcclxuICogLSBQcm9wYWdhdGUgZXZlbnRzIHRvIHRoaXMgbGF5b3V0IGFuZCB0byBhbGwgY2hpbGRyZW5cclxuICogICAtIFJlcGVhdCB1bnRpbCBhbGwgbGF5b3V0cyBnb3QgdGhlIGV2ZW50XHJcbiAqXHJcbiAqICoqV0FSTklORyoqOiBPbmx5IHVzZXJCcm9hZGNhc3QgZXZlbnRzIGFyZSBwcm9wYWdhdGVkIGJldHdlZW4gd2luZG93cy5cclxuICogVGhpcyBtZWFucyB0aGUgeW91IGhhdmUgdG8gdGFrZSBjYXJlIG9mIHByb3BhZ2F0aW5nIHN0YXRlIGNoYW5nZXMgYmV0d2VlbiB3aW5kb3dzIHlvdXJzZWxmLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXZlbnRIdWIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2NoaWxkRXZlbnRMaXN0ZW5lciA9IChjaGlsZEV2ZW50OiBDdXN0b21FdmVudDxFdmVudEh1Yi5DaGlsZEV2ZW50RGV0YWlsPikgPT4gdGhpcy5vbkV2ZW50RnJvbUNoaWxkKGNoaWxkRXZlbnQpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBFdmVudEh1YiBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIF9sYXlvdXRNYW5hZ2VyIC0gdGhlIGxheW91dCBtYW5hZ2VyIHRvIHN5bmNocm9uaXplIGJldHdlZW4gdGhlIHdpbmRvd3NcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfbGF5b3V0TWFuYWdlcjogTGF5b3V0TWFuYWdlclxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBnbG9iYWxUaGlzLmFkZEV2ZW50TGlzdGVuZXIoRXZlbnRIdWIuQ2hpbGRFdmVudE5hbWUsIHRoaXMuX2NoaWxkRXZlbnRMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRW1pdCBhbiBldmVudCBhbmQgbm90aWZ5IGxpc3RlbmVyc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuICAgICAqIEBwYXJhbSBhcmdzIC0gQWRkaXRpb25hbCBhcmd1bWVudHMgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgbGlzdGVuZXJcclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqL1xyXG4gICAgb3ZlcnJpZGUgZW1pdDxLIGV4dGVuZHMga2V5b2YgRXZlbnRFbWl0dGVyLkV2ZW50UGFyYW1zTWFwPihldmVudE5hbWU6IEssIC4uLmFyZ3M6IEV2ZW50RW1pdHRlci5FdmVudFBhcmFtc01hcFtLXSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChldmVudE5hbWUgPT09ICd1c2VyQnJvYWRjYXN0Jykge1xyXG4gICAgICAgICAgICAvLyBFeHBsaWNpdGx5IHJlZGlyZWN0IHRoZSB1c2VyIGJyb2FkY2FzdCB0byBvdXIgb3ZlcnJpZGRlbiBtZXRob2QuXHJcbiAgICAgICAgICAgIHRoaXMuZW1pdFVzZXJCcm9hZGNhc3QoLi4uYXJncyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3VwZXIuZW1pdChldmVudE5hbWUsIC4uLmFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEJyb2FkY2FzdHMgYSBtZXNzYWdlIHRvIGFsbCBvdGhlciBjdXJyZW50bHkgb3BlbmVkIHdpbmRvd3MuXHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKi9cclxuICAgIGVtaXRVc2VyQnJvYWRjYXN0KC4uLmFyZ3M6IEV2ZW50RW1pdHRlci5Vbmtub3duUGFyYW1zKTogdm9pZCB7XHJcbiAgICAgICAgLy8gU3RlcCAxOiBCdWJibGUgdXAgdGhlIGV2ZW50XHJcbiAgICAgICAgdGhpcy5oYW5kbGVVc2VyQnJvYWRjYXN0RXZlbnQoJ3VzZXJCcm9hZGNhc3QnLCBhcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3lzIHRoZSBFdmVudEh1YlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKEV2ZW50SHViLkNoaWxkRXZlbnROYW1lLCB0aGlzLl9jaGlsZEV2ZW50TGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJuYWwgcHJvY2Vzc29yIHRvIHByb2Nlc3MgbG9jYWwgZXZlbnRzLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlVXNlckJyb2FkY2FzdEV2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBhcmdzOiB1bmtub3duW10pIHtcclxuICAgICAgICBpZiAodGhpcy5fbGF5b3V0TWFuYWdlci5pc1N1YldpbmRvdykge1xyXG4gICAgICAgICAgICAvLyBXZSBhcmUgYSBzdWIgd2luZG93IGFuZCByZWNlaXZlZCBhbiBldmVudCBmcm9tIG9uZSBvZiBvdXIgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgIC8vIFNvIHByb3BhZ2F0ZSBpdCB0byB0aGUgUm9vdC5cclxuICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVUb1BhcmVudChldmVudE5hbWUsIGFyZ3MpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFdlIGFyZSB0aGUgcm9vdCB3aW5kb3csIHByb3BhZ2F0ZSBpdCB0byB0aGUgc3VidHJlZSBiZWxvdyB1cy5cclxuICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVUb1RoaXNBbmRTdWJ0cmVlKGV2ZW50TmFtZSwgYXJncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgZm9yIGNoaWxkIGV2ZW50cyByYWlzZWQgb24gdGhlIHdpbmRvd1xyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25FdmVudEZyb21DaGlsZChldmVudDogQ3VzdG9tRXZlbnQ8RXZlbnRIdWIuQ2hpbGRFdmVudERldGFpbD4pIHtcclxuICAgICAgICBjb25zdCBkZXRhaWwgPSBldmVudC5kZXRhaWw7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVVc2VyQnJvYWRjYXN0RXZlbnQoZGV0YWlsLmV2ZW50TmFtZSwgZGV0YWlsLmFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvcGFnYXRlcyB0aGUgZXZlbnQgdG8gdGhlIHBhcmVudCBieSBlbWl0dGluZ1xyXG4gICAgICogaXQgb24gdGhlIHBhcmVudCdzIERPTSB3aW5kb3dcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHByb3BhZ2F0ZVRvUGFyZW50KGV2ZW50TmFtZTogc3RyaW5nLCBhcmdzOiB1bmtub3duW10pIHtcclxuICAgICAgICBjb25zdCBkZXRhaWw6IEV2ZW50SHViLkNoaWxkRXZlbnREZXRhaWwgPSB7XHJcbiAgICAgICAgICAgIGxheW91dE1hbmFnZXI6IHRoaXMuX2xheW91dE1hbmFnZXIsXHJcbiAgICAgICAgICAgIGV2ZW50TmFtZSxcclxuICAgICAgICAgICAgYXJnczogYXJncyxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGV2ZW50SW5pdDogRXZlbnRIdWIuQ2hpbGRFdmVudEluaXQgPSB7XHJcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXHJcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGRldGFpbCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudDxFdmVudEh1Yi5DaGlsZEV2ZW50RGV0YWlsPihFdmVudEh1Yi5DaGlsZEV2ZW50TmFtZSwgZXZlbnRJbml0KTtcclxuICAgICAgICBjb25zdCBvcGVuZXIgPSBnbG9iYWxUaGlzLm9wZW5lcjtcclxuICAgICAgICBpZiAob3BlbmVyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdFSFBUUDE1Nzc4JylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wZW5lci5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb3BhZ2F0ZSBldmVudHMgdG8gdGhlIHdob2xlIHN1YnRyZWUgdW5kZXIgdGhpcyBldmVudCBodWIuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwcm9wYWdhdGVUb1RoaXNBbmRTdWJ0cmVlKGV2ZW50TmFtZTogc3RyaW5nLCBhcmdzOiB1bmtub3duW10pIHtcclxuICAgICAgICB0aGlzLmVtaXRVbmtub3duKGV2ZW50TmFtZSwgLi4uYXJncyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9sYXlvdXRNYW5hZ2VyLm9wZW5Qb3BvdXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkR2wgPSB0aGlzLl9sYXlvdXRNYW5hZ2VyLm9wZW5Qb3BvdXRzW2ldLmdldEdsSW5zdGFuY2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjaGlsZEdsKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZEdsLmV2ZW50SHViLnByb3BhZ2F0ZVRvVGhpc0FuZFN1YnRyZWUoZXZlbnROYW1lLCBhcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBFdmVudEh1YiB7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGNvbnN0IENoaWxkRXZlbnROYW1lID0gJ2dsX2NoaWxkX2V2ZW50JztcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBDaGlsZEV2ZW50RGV0YWlsID0ge1xyXG4gICAgICAgIGxheW91dE1hbmFnZXI6IExheW91dE1hbmFnZXI7XHJcbiAgICAgICAgZXZlbnROYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgYXJnczogdW5rbm93bltdO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBDaGlsZEV2ZW50SW5pdCA9IEN1c3RvbUV2ZW50SW5pdDxDaGlsZEV2ZW50RGV0YWlsPjtcclxufVxyXG4iLCJpbXBvcnQgeyBBc3NlcnRFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9pbnRlcm5hbC1lcnJvcic7XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgY29uc3QgZW51bSBJMThuU3RyaW5nSWQge1xyXG4gICAgUG9wb3V0Q2Fubm90QmVDcmVhdGVkV2l0aEdyb3VuZEl0ZW1Db25maWcsXHJcbiAgICBQbGVhc2VSZWdpc3RlckFDb25zdHJ1Y3RvckZ1bmN0aW9uLFxyXG4gICAgQ29tcG9uZW50VHlwZU5vdFJlZ2lzdGVyZWRBbmRCaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyTm90QXNzaWduZWQsXHJcbiAgICBDb21wb25lbnRJc0FscmVhZHlSZWdpc3RlcmVkLFxyXG4gICAgQ29tcG9uZW50SXNOb3RWaXJ0dWFibGUsXHJcbiAgICBWaXJ0dWFsQ29tcG9uZW50RG9lc05vdEhhdmVSb290SHRtbEVsZW1lbnQsXHJcbiAgICBJdGVtQ29uZmlnSXNOb3RUeXBlQ29tcG9uZW50LFxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEkxOG5TdHJpbmdzIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGxldCBpbml0aWFsaXNlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGludGVyZmFjZSBJbmZvIHtcclxuICAgICAgICByZWFkb25seSBpZDogSTE4blN0cmluZ0lkO1xyXG4gICAgICAgIHJlYWRvbmx5IGRlZmF1bHQ6IHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICB0eXBlIEluZm9zT2JqZWN0ID0geyBbaWQgaW4ga2V5b2YgdHlwZW9mIEkxOG5TdHJpbmdJZF06IEluZm8gfTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdCBpbmZvc09iamVjdDogSW5mb3NPYmplY3QgPSB7XHJcbiAgICAgICAgUG9wb3V0Q2Fubm90QmVDcmVhdGVkV2l0aEdyb3VuZEl0ZW1Db25maWc6IHtcclxuICAgICAgICAgICAgaWQ6IEkxOG5TdHJpbmdJZC5Qb3BvdXRDYW5ub3RCZUNyZWF0ZWRXaXRoR3JvdW5kSXRlbUNvbmZpZyxcclxuICAgICAgICAgICAgZGVmYXVsdDogJ1BvcG91dCBjYW5ub3QgYmUgY3JlYXRlZCB3aXRoIGdyb3VuZCBJdGVtQ29uZmlnJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgUGxlYXNlUmVnaXN0ZXJBQ29uc3RydWN0b3JGdW5jdGlvbjoge1xyXG4gICAgICAgICAgICBpZDogSTE4blN0cmluZ0lkLlBsZWFzZVJlZ2lzdGVyQUNvbnN0cnVjdG9yRnVuY3Rpb24sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdQbGVhc2UgcmVnaXN0ZXIgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbidcclxuICAgICAgICB9LFxyXG4gICAgICAgIENvbXBvbmVudFR5cGVOb3RSZWdpc3RlcmVkQW5kQmluZENvbXBvbmVudEV2ZW50SGFuZGxlck5vdEFzc2lnbmVkOiB7XHJcbiAgICAgICAgICAgIGlkOiBJMThuU3RyaW5nSWQuQ29tcG9uZW50VHlwZU5vdFJlZ2lzdGVyZWRBbmRCaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyTm90QXNzaWduZWQsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdDb21wb25lbnQgdHlwZSBub3QgcmVnaXN0ZXJlZCBhbmQgQmluZENvbXBvbmVudEV2ZW50IGhhbmRsZXIgbm90IGFzc2lnbmVkJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIENvbXBvbmVudElzQWxyZWFkeVJlZ2lzdGVyZWQ6IHtcclxuICAgICAgICAgICAgaWQ6IEkxOG5TdHJpbmdJZC5Db21wb25lbnRJc0FscmVhZHlSZWdpc3RlcmVkLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnQ29tcG9uZW50IGlzIGFscmVhZHkgcmVnaXN0ZXJlZCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBDb21wb25lbnRJc05vdFZpcnR1YWJsZToge1xyXG4gICAgICAgICAgICBpZDogSTE4blN0cmluZ0lkLkNvbXBvbmVudElzTm90VmlydHVhYmxlLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnQ29tcG9uZW50IGlzIG5vdCB2aXJ0dWFibGUuIFJlcXVpcmVzIHJvb3RIdG1sRWxlbWVudCBmaWVsZC9nZXR0ZXInLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgVmlydHVhbENvbXBvbmVudERvZXNOb3RIYXZlUm9vdEh0bWxFbGVtZW50OiB7XHJcbiAgICAgICAgICAgIGlkOiBJMThuU3RyaW5nSWQuVmlydHVhbENvbXBvbmVudERvZXNOb3RIYXZlUm9vdEh0bWxFbGVtZW50LFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnVmlydHVhbCBjb21wb25lbnQgZG9lcyBub3QgaGF2ZSBnZXR0ZXIgXCJyb290SHRtbEVsZW1lbnRcIicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBJdGVtQ29uZmlnSXNOb3RUeXBlQ29tcG9uZW50OiB7XHJcbiAgICAgICAgICAgIGlkOiBJMThuU3RyaW5nSWQuSXRlbUNvbmZpZ0lzTm90VHlwZUNvbXBvbmVudCxcclxuICAgICAgICAgICAgZGVmYXVsdDogJ0l0ZW1Db25maWcgaXMgbm90IG9mIHR5cGUgY29tcG9uZW50JyxcclxuICAgICAgICB9LFxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjb25zdCBpZENvdW50ID0gT2JqZWN0LmtleXMoaW5mb3NPYmplY3QpLmxlbmd0aDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0IGluZm9zID0gT2JqZWN0LnZhbHVlcyhpbmZvc09iamVjdCk7XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSW5pdGlhbGlzZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWluaXRpYWxpc2VkKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gaW5mb3NbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5mby5pZCAhPT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignSU5TSTAwMTEwJywgYCR7aX06ICR7aW5mby5pZH1gKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaTE4blN0cmluZ3NbaV0gPSBpbmZvLmRlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaW5pdGlhbGlzZWQgPSB0cnVlO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgY29uc3QgaTE4blN0cmluZ3MgPSBuZXcgQXJyYXk8c3RyaW5nPihJMThuU3RyaW5ncy5pZENvdW50KTtcclxuIiwiaW1wb3J0IHsgTGVmdEFuZFRvcCB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBwaXhlbHNUb051bWJlciB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEpRdWVyeU9mZnNldCB7XHJcbiAgICB0b3A6IG51bWJlcjtcclxuICAgIGxlZnQ6IG51bWJlcjsgICAgXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEpRdWVyeU9mZnNldChlbGVtZW50OiBIVE1MRWxlbWVudCk6IEpRdWVyeU9mZnNldCB7XHJcbiAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdG9wOiByZWN0LnRvcCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wLFxyXG4gICAgICAgIGxlZnQ6IHJlY3QubGVmdCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCxcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SlF1ZXJ5TGVmdEFuZFRvcChlbGVtZW50OiBIVE1MRWxlbWVudCk6IExlZnRBbmRUb3Age1xyXG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xyXG4gICAgY29uc3QgbGVmdEFuZFRvcDogTGVmdEFuZFRvcCA9IHtcclxuICAgICAgICBsZWZ0OiBwaXhlbHNUb051bWJlcihzdHlsZS5sZWZ0KSxcclxuICAgICAgICB0b3A6IHBpeGVsc1RvTnVtYmVyKHN0eWxlLnRvcCksXHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVmdEFuZFRvcDtcclxufVxyXG4iLCIvKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFN0eWxlQ29uc3RhbnRzIHtcclxuICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0Q29tcG9uZW50QmFzZVpJbmRleCA9ICdhdXRvJztcclxuICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0Q29tcG9uZW50RHJhZ1pJbmRleCA9ICczMic7XHJcbiAgICBleHBvcnQgY29uc3QgZGVmYXVsdENvbXBvbmVudFN0YWNrTWF4aW1pc2VkWkluZGV4ID0gJzQxJztcclxufVxyXG4iLCIvKiogQGludGVybmFsICovXHJcbmV4cG9ydCB0eXBlIFdpZHRoT3JIZWlnaHRQcm9wZXJ0eU5hbWUgPSAnd2lkdGgnIHwgJ2hlaWdodCc7XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgV2lkdGhPckhlaWdodFByb3BlcnR5TmFtZSB7XHJcbiAgICBleHBvcnQgY29uc3Qgd2lkdGggPSAnd2lkdGgnO1xyXG4gICAgZXhwb3J0IGNvbnN0IGhlaWdodCA9ICdoZWlnaHQnO1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgV2lkdGhBbmRIZWlnaHQge1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGVmdEFuZFRvcCB7XHJcbiAgICBsZWZ0OiBudW1iZXI7XHJcbiAgICB0b3A6IG51bWJlcjtcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IHR5cGUgU2lkZSA9ICd0b3AnIHwgJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdib3R0b20nO1xyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFNpZGUge1xyXG4gICAgZXhwb3J0IGNvbnN0IHRvcCA9ICd0b3AnO1xyXG4gICAgZXhwb3J0IGNvbnN0IGxlZnQgPSAnbGVmdCc7XHJcbiAgICBleHBvcnQgY29uc3QgcmlnaHQgPSAncmlnaHQnO1xyXG4gICAgZXhwb3J0IGNvbnN0IGJvdHRvbSA9ICdib3R0b20nO1xyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgdHlwZSBMb2dpY2FsWkluZGV4ID0gJ2Jhc2UnIHwgJ2RyYWcnIHwgJ3N0YWNrTWF4aW1pc2VkJztcclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBMb2dpY2FsWkluZGV4IHtcclxuICAgIGV4cG9ydCBjb25zdCBiYXNlID0gJ2Jhc2UnO1xyXG4gICAgZXhwb3J0IGNvbnN0IGRyYWcgPSAnZHJhZyc7XHJcbiAgICBleHBvcnQgY29uc3Qgc3RhY2tNYXhpbWlzZWQgPSAnc3RhY2tNYXhpbWlzZWQnO1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVjdCB7XHJcbiAgICBsZWZ0OiBudW1iZXIsXHJcbiAgICB0b3A6IG51bWJlcixcclxuICAgIHdpZHRoOiBudW1iZXIsXHJcbiAgICBoZWlnaHQ6IG51bWJlcixcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEFyZWFMaW5rZWRSZWN0IHtcclxuICAgIHgxOiBudW1iZXIsIC8vIGxlZnRcclxuICAgIHgyOiBudW1iZXIsIC8vIG5leHRMZWZ0XHJcbiAgICB5MTogbnVtYmVyLCAvLyB0b3BcclxuICAgIHkyOiBudW1iZXIsIC8vIG5leHRUb3BcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcclxuZXhwb3J0IHR5cGUgSnNvblZhbHVlID0gc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IG51bGwgfCBKc29uIHwgb2JqZWN0IHwgSnNvblZhbHVlQXJyYXk7XHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSnNvbiB7XHJcbiAgICBbbmFtZTogc3RyaW5nXTogSnNvblZhbHVlO1xyXG59XHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCB0eXBlIEpzb25WYWx1ZUFycmF5ID0gQXJyYXk8SnNvblZhbHVlPlxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEpzb25WYWx1ZSB7XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNKc29uKHZhbHVlOiBKc29uVmFsdWUpOiB2YWx1ZSBpcyBKc29uIHtcclxuICAgICAgICByZXR1cm4gaXNKc29uT2JqZWN0KHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzSnNvbk9iamVjdCh2YWx1ZTogSnNvblZhbHVlKTogdmFsdWUgaXMgSnNvbiB8IG9iamVjdCB7XHJcbiAgICAgICAgcmV0dXJuICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgdHlwZSBJdGVtVHlwZSA9ICdncm91bmQnIHwgJ3JvdycgfCAnY29sdW1uJyB8ICdzdGFjaycgfCAnY29tcG9uZW50JztcclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgSXRlbVR5cGUge1xyXG4gICAgZXhwb3J0IGNvbnN0IGdyb3VuZCA9ICdncm91bmQnO1xyXG4gICAgZXhwb3J0IGNvbnN0IHJvdyA9ICdyb3cnO1xyXG4gICAgZXhwb3J0IGNvbnN0IGNvbHVtbiA9ICdjb2x1bW4nO1xyXG4gICAgZXhwb3J0IGNvbnN0IHN0YWNrID0gJ3N0YWNrJztcclxuICAgIGV4cG9ydCBjb25zdCBjb21wb25lbnQgPSAnY29tcG9uZW50JztcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IHR5cGUgUmVzcG9uc2l2ZU1vZGUgPSAnbm9uZScgfCAnYWx3YXlzJyB8ICdvbmxvYWQnO1xyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNpdmVNb2RlIHtcclxuICAgIGV4cG9ydCBjb25zdCBub25lID0gJ25vbmUnO1xyXG4gICAgZXhwb3J0IGNvbnN0IGFsd2F5cyA9ICdhbHdheXMnO1xyXG4gICAgZXhwb3J0IGNvbnN0IG9ubG9hZCA9ICdvbmxvYWQnO1xyXG59XHJcbiIsImltcG9ydCB7IFdpZHRoQW5kSGVpZ2h0IH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJUb1BpeGVscyh2YWx1ZTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygxMCkgKyAncHgnO1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwaXhlbHNUb051bWJlcih2YWx1ZTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IG51bWJlclN0ciA9IHZhbHVlLnJlcGxhY2UoXCJweFwiLCBcIlwiKTtcclxuICAgIHJldHVybiBwYXJzZUZsb2F0KG51bWJlclN0cik7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRXaWR0aChlbGVtZW50OiBIVE1MRWxlbWVudCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRXaWR0aDtcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0RWxlbWVudFdpZHRoKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB3aWR0aDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCB3aWR0aEFzUGl4ZWxzID0gbnVtYmVyVG9QaXhlbHMod2lkdGgpO1xyXG4gICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoQXNQaXhlbHM7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRIZWlnaHQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRFbGVtZW50SGVpZ2h0KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc3QgaGVpZ2h0QXNQaXhlbHMgPSBudW1iZXJUb1BpeGVscyhoZWlnaHQpO1xyXG4gICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHRBc1BpeGVscztcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogV2lkdGhBbmRIZWlnaHQge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCxcclxuICAgICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0LFxyXG4gICAgfTtcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB2aXNpYmxlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBpZiAodmlzaWJsZSkge1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUVsZW1lbnRQb3NpdGlvbkFic29sdXRlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCBhYnNvbHV0ZVBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIGlmIChlbGVtZW50LnN0eWxlLnBvc2l0aW9uICE9PSBhYnNvbHV0ZVBvc2l0aW9uKSB7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IGFic29sdXRlUG9zaXRpb247XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXBsYWNlbWVudCBmb3IgSlF1ZXJ5ICQuZXh0ZW5kKHRhcmdldCwgb2JqKVxyXG4gKiBAaW50ZXJuYWxcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQ6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBvYmo6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gb2JqW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcGxhY2VtZW50IGZvciBKUXVlcnkgJC5leHRlbmQodHJ1ZSwgdGFyZ2V0LCBvYmopXHJcbiAqIEBpbnRlcm5hbFxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVlcEV4dGVuZCh0YXJnZXQ6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBvYmo6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgdW5kZWZpbmVkKTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xyXG4gICAgaWYgKG9iaiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVGFyZ2V0ID0gdGFyZ2V0W2tleV07XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IGRlZXBFeHRlbmRWYWx1ZShleGlzdGluZ1RhcmdldCwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFeHRlbmRWYWx1ZShleGlzdGluZ1RhcmdldDogdW5rbm93biwgdmFsdWU6IHVua25vd24pOiB1bmtub3duIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBcnJheSA9IG5ldyBBcnJheTx1bmtub3duPihsZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdmFsdWVbaV07XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRBcnJheVtpXSA9IGRlZXBFeHRlbmRWYWx1ZSh7fSwgZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldEFycmF5O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZU9iaiA9IHZhbHVlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nVGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVlcEV4dGVuZCh7fSwgdmFsdWVPYmopOyAvLyBvdmVyd3JpdGVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleGlzdGluZ1RhcmdldCAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVlcEV4dGVuZCh7fSwgdmFsdWVPYmopOyAvLyBvdmVyd3JpdGVcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShleGlzdGluZ1RhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWVwRXh0ZW5kKHt9LCB2YWx1ZU9iaik7IC8vIG92ZXJ3cml0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nVGFyZ2V0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZXBFeHRlbmQoe30sIHZhbHVlT2JqKTsgLy8gb3ZlcndyaXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVGFyZ2V0T2JqID0gZXhpc3RpbmdUYXJnZXQgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZXBFeHRlbmQoZXhpc3RpbmdUYXJnZXRPYmosIHZhbHVlT2JqKTsgLy8gbWVyZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRnJvbUFycmF5PFQ+KGl0ZW06IFQsIGFycmF5OiBUW10pOiB2b2lkIHtcclxuICAgIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcclxuXHJcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IHJlbW92ZSBpdGVtIGZyb20gYXJyYXkuIEl0ZW0gaXMgbm90IGluIHRoZSBhcnJheScpO1xyXG4gICAgfVxyXG5cclxuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXF1ZUlkKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwMDAwMDAwKVxyXG4gICAgICAgIC50b1N0cmluZygzNilcclxuICAgICAgICAucmVwbGFjZSgnLicsICcnKTtcclxufVxyXG4iLCJpbXBvcnQgeyBMYXlvdXRDb25maWcgfSBmcm9tICcuL2NvbmZpZy9jb25maWcnO1xyXG5pbXBvcnQgeyBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcsIFJlc29sdmVkTGF5b3V0Q29uZmlnLCBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZyB9IGZyb20gJy4vY29uZmlnL3Jlc29sdmVkLWNvbmZpZyc7XHJcbmltcG9ydCB7IENvbXBvbmVudENvbnRhaW5lciB9IGZyb20gJy4vY29udGFpbmVyL2NvbXBvbmVudC1jb250YWluZXInO1xyXG5pbXBvcnQgeyBCaW5kRXJyb3IgfSBmcm9tICcuL2Vycm9ycy9leHRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvciB9IGZyb20gJy4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4vbGF5b3V0LW1hbmFnZXInO1xyXG5pbXBvcnQgeyBEb21Db25zdGFudHMgfSBmcm9tICcuL3V0aWxzL2RvbS1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBJMThuU3RyaW5nSWQsIGkxOG5TdHJpbmdzIH0gZnJvbSAnLi91dGlscy9pMThuLXN0cmluZ3MnO1xyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNsYXNzIFZpcnR1YWxMYXlvdXQgZXh0ZW5kcyBMYXlvdXRNYW5hZ2VyIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3N1YldpbmRvd3NDcmVhdGVkID0gZmFsc2U7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jcmVhdGlvblRpbWVvdXRQYXNzZWQgPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKFZpcnR1YWxMYXlvdXQ6Y2xhc3MpLmJpbmRDb21wb25lbnRFdmVudH0gYW5kXHJcbiAgICAgKiB7QGxpbmsgKFZpcnR1YWxMYXlvdXQ6Y2xhc3MpLnVuYmluZENvbXBvbmVudEV2ZW50fSB3aXRoIHZpcnR1YWwgY29tcG9uZW50c1xyXG4gICAgICovXHJcbiAgICBnZXRDb21wb25lbnRFdmVudDogVmlydHVhbExheW91dC5HZXRDb21wb25lbnRFdmVudEhhbmRsZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKFZpcnR1YWxMYXlvdXQ6Y2xhc3MpLmJpbmRDb21wb25lbnRFdmVudH0gYW5kXHJcbiAgICAgKiB7QGxpbmsgKFZpcnR1YWxMYXlvdXQ6Y2xhc3MpLnVuYmluZENvbXBvbmVudEV2ZW50fSB3aXRoIHZpcnR1YWwgY29tcG9uZW50c1xyXG4gICAgICovXHJcbiAgICByZWxlYXNlQ29tcG9uZW50RXZlbnQ6IFZpcnR1YWxMYXlvdXQuUmVsZWFzZUNvbXBvbmVudEV2ZW50SGFuZGxlciB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBiaW5kQ29tcG9uZW50RXZlbnQ6IFZpcnR1YWxMYXlvdXQuQmluZENvbXBvbmVudEV2ZW50SGFuZGxlciB8IHVuZGVmaW5lZDtcclxuICAgIHVuYmluZENvbXBvbmVudEV2ZW50OiBWaXJ0dWFsTGF5b3V0LlVuYmluZENvbXBvbmVudEV2ZW50SGFuZGxlciB8IHVuZGVmaW5lZDtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBjb250YWluZXIgLSBBIERvbSBIVE1MIGVsZW1lbnQuIERlZmF1bHRzIHRvIGJvZHlcclxuICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBjb250YWluZXI/OiBIVE1MRWxlbWVudCxcclxuICAgICAgICBiaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyPzogVmlydHVhbExheW91dC5CaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyLFxyXG4gICAgICAgIHVuYmluZENvbXBvbmVudEV2ZW50SGFuZGxlcj86IFZpcnR1YWxMYXlvdXQuVW5iaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyLFxyXG4gICAgKTtcclxuICAgIC8qKiBAZGVwcmVjYXRlZCBzcGVjaWZ5IGxheW91dENvbmZpZyBpbiB7QGxpbmsgKExheW91dE1hbmFnZXI6Y2xhc3MpLmxvYWRMYXlvdXR9ICovXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IExheW91dENvbmZpZywgY29udGFpbmVyPzogSFRNTEVsZW1lbnQpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnT3JPcHRpb25hbENvbnRhaW5lcjogTGF5b3V0Q29uZmlnIHwgSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQsXHJcbiAgICAgICAgY29udGFpbmVyT3JCaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyPzogSFRNTEVsZW1lbnQgfCBWaXJ0dWFsTGF5b3V0LkJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIsXHJcbiAgICAgICAgdW5iaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyPzogVmlydHVhbExheW91dC5VbmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIsXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihWaXJ0dWFsTGF5b3V0LmNyZWF0ZUxheW91dE1hbmFnZXJDb25zdHJ1Y3RvclBhcmFtZXRlcnMoY29uZmlnT3JPcHRpb25hbENvbnRhaW5lciwgY29udGFpbmVyT3JCaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyKSk7XHJcblxyXG4gICAgICAgIC8vIE1vcmUgd29yayBuZWVkZWQgdG8gZ2V0IHBvcG91dHMgd29ya2luZyB3aXRoIHZpcnR1YWwuXHJcbiAgICAgICAgaWYgKGNvbnRhaW5lck9yQmluZENvbXBvbmVudEV2ZW50SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGFpbmVyT3JCaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmRDb21wb25lbnRFdmVudCA9IGNvbnRhaW5lck9yQmluZENvbXBvbmVudEV2ZW50SGFuZGxlcjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodW5iaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuYmluZENvbXBvbmVudEV2ZW50ID0gdW5iaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc1N1YldpbmRvdykge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxheW91dENvbmZpZy5yb290ID09PSB1bmRlZmluZWQgfHwgdGhpcy5pc1N1YldpbmRvdykge1xyXG4gICAgICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmJpbmRDb21wb25lbnRFdmVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnVuYmluZENvbXBvbmVudEV2ZW50ID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgYWN0dWFsIGxheW91dC4gTXVzdCBiZSBjYWxsZWQgYWZ0ZXIgYWxsIGluaXRpYWwgY29tcG9uZW50c1xyXG4gICAgICogYXJlIHJlZ2lzdGVyZWQuIFJlY3Vyc2VzIHRocm91Z2ggdGhlIGNvbmZpZ3VyYXRpb24gYW5kIHNldHMgdXBcclxuICAgICAqIHRoZSBpdGVtIHRyZWUuXHJcbiAgICAgKlxyXG4gICAgICogSWYgY2FsbGVkIGJlZm9yZSB0aGUgZG9jdW1lbnQgaXMgcmVhZHkgaXQgYWRkcyBpdHNlbGYgYXMgYSBsaXN0ZW5lclxyXG4gICAgICogdG8gdGhlIGRvY3VtZW50LnJlYWR5IGV2ZW50XHJcbiAgICAgKiBAZGVwcmVjYXRlZCBMYXlvdXRDb25maWcgc2hvdWxkIG5vdCBiZSBsb2FkZWQgaW4ge0BsaW5rIChMYXlvdXRNYW5hZ2VyOmNsYXNzKX0gY29uc3RydWN0b3IsIGJ1dCByYXRoZXIgaW4gYVxyXG4gICAgICoge0BsaW5rIChMYXlvdXRNYW5hZ2VyOmNsYXNzKS5sb2FkTGF5b3V0fSBjYWxsLiAgSWYgTGF5b3V0Q29uZmlnIGlzIG5vdCBzcGVjaWZpZWQgaW4ge0BsaW5rIChMYXlvdXRNYW5hZ2VyOmNsYXNzKX0gY29uc3RydWN0b3IsXHJcbiAgICAgKiB0aGVuIGluaXQoKSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2FsbGVkIGludGVybmFsbHkgYW5kIHNob3VsZCBub3QgYmUgY2FsbGVkIGV4dGVybmFsbHkuXHJcbiAgICAgKi9cclxuICAgIG92ZXJyaWRlIGluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlIHRoZSBwb3BvdXQgd2luZG93cyBzdHJhaWdodCBhd2F5LiBJZiBwb3BvdXRzIGFyZSBibG9ja2VkXHJcbiAgICAgICAgICogYW4gZXJyb3IgaXMgdGhyb3duIG9uIHRoZSBzYW1lICd0aHJlYWQnIHJhdGhlciB0aGFuIGEgdGltZW91dCBhbmQgY2FuXHJcbiAgICAgICAgICogYmUgY2F1Z2h0LiBUaGlzIGFsc28gcHJldmVudHMgYW55IGZ1cnRoZXIgaW5pdGlsaXNhdGlvbiBmcm9tIHRha2luZyBwbGFjZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5fc3ViV2luZG93c0NyZWF0ZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlU3ViV2luZG93cygpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdWJXaW5kb3dzQ3JlYXRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSWYgdGhlIGRvY3VtZW50IGlzbid0IHJlYWR5IHlldCwgd2FpdCBmb3IgaXQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJyB8fCBkb2N1bWVudC5ib2R5ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB0aGlzLmluaXQoKSwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiB0aGlzIGlzIGEgc3Vid2luZG93LCB3YWl0IGEgZmV3IG1pbGxpc2Vjb25kcyBmb3IgdGhlIG9yaWdpbmFsXHJcbiAgICAgICAgICogcGFnZSdzIGpzIGNhbGxzIHRvIGJlIGV4ZWN1dGVkLCB0aGVuIHJlcGxhY2UgdGhlIGJvZGllcyBjb250ZW50XHJcbiAgICAgICAgICogd2l0aCBHb2xkZW5MYXlvdXRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5pc1N1YldpbmRvdyA9PT0gdHJ1ZSAmJiB0aGlzLl9jcmVhdGlvblRpbWVvdXRQYXNzZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5pbml0KCksIDcpO1xyXG4gICAgICAgICAgICB0aGlzLl9jcmVhdGlvblRpbWVvdXRQYXNzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc1N1YldpbmRvdyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkanVzdFRvV2luZG93TW9kZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBiaW5kQ29tcG9uZW50KGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCBpdGVtQ29uZmlnOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcpOiBDb21wb25lbnRDb250YWluZXIuQmluZGFibGVDb21wb25lbnQge1xyXG4gICAgICAgIGlmICh0aGlzLmJpbmRDb21wb25lbnRFdmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJpbmRhYmxlQ29tcG9uZW50ID0gdGhpcy5iaW5kQ29tcG9uZW50RXZlbnQoY29udGFpbmVyLCBpdGVtQ29uZmlnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJpbmRhYmxlQ29tcG9uZW50O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdldENvbXBvbmVudEV2ZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlydHVhbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLmdldENvbXBvbmVudEV2ZW50KGNvbnRhaW5lciwgaXRlbUNvbmZpZyksXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBjb21wb25lbnQgcmVnaXN0ZXJlZCBmb3IgdGhpcyB0eXBlLCBhbmQgd2UgZG9uJ3QgaGF2ZSBhIGdldENvbXBvbmVudEV2ZW50IGRlZmluZWQuXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG1pZ2h0IGhhcHBlbiB3aGVuIHRoZSB1c2VyIHBvcHMgb3V0IGEgZGlhbG9nIGFuZCB0aGUgY29tcG9uZW50IHR5cGVzIGFyZSBub3QgcmVnaXN0ZXJlZCB1cGZyb250LlxyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGkxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5Db21wb25lbnRUeXBlTm90UmVnaXN0ZXJlZEFuZEJpbmRDb21wb25lbnRFdmVudEhhbmRsZXJOb3RBc3NpZ25lZF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGV4dH06ICR7SlNPTi5zdHJpbmdpZnkoaXRlbUNvbmZpZyl9YFxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJpbmRFcnJvcihtZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSB1bmJpbmRDb21wb25lbnQoY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXIsIHZpcnR1YWw6IGJvb2xlYW4sIGNvbXBvbmVudDogQ29tcG9uZW50Q29udGFpbmVyLkNvbXBvbmVudCB8IHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh2aXJ0dWFsKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVuYmluZENvbXBvbmVudEV2ZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5iaW5kQ29tcG9uZW50RXZlbnQoY29udGFpbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlbGVhc2VDb21wb25lbnRFdmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdWQ1VDUkNVMzMzOTk4Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVsZWFzZUNvbXBvbmVudEV2ZW50KGNvbnRhaW5lciwgY29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgU3Vid2luZG93cyAoaWYgdGhlcmUgYXJlIGFueSkuIFRocm93cyBhbiBlcnJvclxyXG4gICAgICogaWYgcG9wb3V0cyBhcmUgYmxvY2tlZC5cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVN1YldpbmRvd3MoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxheW91dENvbmZpZy5vcGVuUG9wb3V0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBwb3BvdXRDb25maWcgPSB0aGlzLmxheW91dENvbmZpZy5vcGVuUG9wb3V0c1tpXTtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVQb3BvdXRGcm9tUG9wb3V0TGF5b3V0Q29uZmlnKHBvcG91dENvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBpcyBleGVjdXRlZCB3aGVuIEdvbGRlbkxheW91dCBkZXRlY3RzIHRoYXQgaXQgaXMgcnVuXHJcbiAgICAgKiB3aXRoaW4gYSBwcmV2aW91c2x5IG9wZW5lZCBwb3BvdXQgd2luZG93LlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYWRqdXN0VG9XaW5kb3dNb2RlKCkge1xyXG4gICAgICAgIGNvbnN0IGhlYWRFbGVtZW50ID0gZG9jdW1lbnQuaGVhZDtcclxuXHJcbiAgICAgICAgY29uc3QgYXBwZW5kTm9kZUxpc3RzID0gbmV3IEFycmF5PE5vZGVMaXN0T2Y8RWxlbWVudD4+KDQpO1xyXG4gICAgICAgIGFwcGVuZE5vZGVMaXN0c1swXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2JvZHkgbGluaycpO1xyXG4gICAgICAgIGFwcGVuZE5vZGVMaXN0c1sxXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2JvZHkgc3R5bGUnKTtcclxuICAgICAgICBhcHBlbmROb2RlTGlzdHNbMl0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0ZW1wbGF0ZScpO1xyXG4gICAgICAgIGFwcGVuZE5vZGVMaXN0c1szXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5nbF9rZWVwJyk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGxpc3RJZHggPSAwOyBsaXN0SWR4IDwgYXBwZW5kTm9kZUxpc3RzLmxlbmd0aDsgbGlzdElkeCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFwcGVuZE5vZGVMaXN0ID0gYXBwZW5kTm9kZUxpc3RzW2xpc3RJZHhdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBub2RlSWR4ID0gMDsgbm9kZUlkeCA8IGFwcGVuZE5vZGVMaXN0Lmxlbmd0aDsgbm9kZUlkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gYXBwZW5kTm9kZUxpc3Rbbm9kZUlkeF07XHJcbiAgICAgICAgICAgICAgICBoZWFkRWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xyXG4gICAgICAgIGJvZHlFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGJvZHlFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgaWYgKCF0aGlzLmxheW91dENvbmZpZy5zZXR0aW5ncy5wb3BJbk9uQ2xvc2UpIHtcclxuICAgICAgICAgICAgY29uc3QgcG9wSW5CdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHBvcEluQnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuUG9waW4pO1xyXG4gICAgICAgICAgICBwb3BJbkJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsIHRoaXMubGF5b3V0Q29uZmlnLmhlYWRlci5kb2NrKTtcclxuICAgICAgICAgICAgY29uc3QgaWNvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgaWNvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkljb24pO1xyXG4gICAgICAgICAgICBjb25zdCBiZ0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgYmdFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5CZyk7XHJcbiAgICAgICAgICAgIHBvcEluQnV0dG9uRWxlbWVudC5hcHBlbmRDaGlsZChpY29uRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHBvcEluQnV0dG9uRWxlbWVudC5hcHBlbmRDaGlsZChiZ0VsZW1lbnQpO1xyXG4gICAgICAgICAgICBwb3BJbkJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmVtaXQoJ3BvcEluJykpO1xyXG4gICAgICAgICAgICBib2R5RWxlbWVudC5hcHBlbmRDaGlsZChwb3BJbkJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAqIFRoaXMgc2VlbXMgYSBiaXQgcG9pbnRsZXNzLCBidXQgYWN0dWFsbHkgY2F1c2VzIGEgcmVmbG93L3JlLWV2YWx1YXRpb24gZ2V0dGluZyBhcm91bmRcclxuICAgICAgICAqIHNsaWNrZ3JpZCdzIFwiQ2Fubm90IGZpbmQgc3R5bGVzaGVldC5cIiBidWcgaW4gY2hyb21lXHJcbiAgICAgICAgKi9cclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICAgICAgY29uc3QgeCA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICogRXhwb3NlIHRoaXMgaW5zdGFuY2Ugb24gdGhlIHdpbmRvdyBvYmplY3RcclxuICAgICAgICAqIHRvIGFsbG93IHRoZSBvcGVuaW5nIHdpbmRvdyB0byBpbnRlcmFjdCB3aXRoXHJcbiAgICAgICAgKiBpdFxyXG4gICAgICAgICovXHJcbiAgICAgICAgd2luZG93Ll9fZ2xJbnN0YW5jZSA9IHRoaXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgVmlydHVhbExheW91dCB7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB2aXJ0dWFsIGNvbXBvbmVudHMgd2l0aCB7QGxpbmsgKFZpcnR1YWxMYXlvdXQ6Y2xhc3MpLmJpbmRDb21wb25lbnRFdmVudH0gYW5kXHJcbiAgICAgKiB7QGxpbmsgKFZpcnR1YWxMYXlvdXQ6Y2xhc3MpLnVuYmluZENvbXBvbmVudEV2ZW50fSBldmVudHMuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCB0eXBlIEdldENvbXBvbmVudEV2ZW50SGFuZGxlciA9XHJcbiAgICAgICAgKHRoaXM6IHZvaWQsIGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCBpdGVtQ29uZmlnOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcpID0+IENvbXBvbmVudENvbnRhaW5lci5Db21wb25lbnQ7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB2aXJ0dWFsIGNvbXBvbmVudHMgd2l0aCB7QGxpbmsgKFZpcnR1YWxMYXlvdXQ6Y2xhc3MpLmJpbmRDb21wb25lbnRFdmVudH0gYW5kXHJcbiAgICAgKiB7QGxpbmsgKFZpcnR1YWxMYXlvdXQ6Y2xhc3MpLnVuYmluZENvbXBvbmVudEV2ZW50fSBldmVudHMuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCB0eXBlIFJlbGVhc2VDb21wb25lbnRFdmVudEhhbmRsZXIgPVxyXG4gICAgICAgICh0aGlzOiB2b2lkLCBjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgY29tcG9uZW50OiBDb21wb25lbnRDb250YWluZXIuQ29tcG9uZW50KSA9PiB2b2lkO1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIEJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIgPVxyXG4gICAgICAgICh0aGlzOiB2b2lkLCBjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgaXRlbUNvbmZpZzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnKSA9PiBDb21wb25lbnRDb250YWluZXIuQmluZGFibGVDb21wb25lbnQ7XHJcbiAgICBleHBvcnQgdHlwZSBVbmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIgPVxyXG4gICAgICAgICh0aGlzOiB2b2lkLCBjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lcikgPT4gdm9pZDtcclxuXHJcbiAgICBleHBvcnQgdHlwZSBCZWZvcmVWaXJ0dWFsUmVjdGluZ0V2ZW50ID0gKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbFxyXG4gICAgICogVmVyaWFibGUgdG8gaG9sZCB0aGUgc3RhdGUgd2hldGhlciB3ZSBhbHJlYWR5IGNoZWNrZWQgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gYSBzdWIgd2luZG93LlxyXG4gICAgICogRml4ZXMgcG9wb3V0IGFuZCBjcmVhdGlvbiBvZiBuZXN0ZWQgZ29sZGVuLWxheW91dHMuXHJcbiAgICAgKi9cclxuICAgIGxldCBzdWJXaW5kb3dDaGVja2VkID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxheW91dE1hbmFnZXJDb25zdHJ1Y3RvclBhcmFtZXRlcnMoY29uZmlnT3JPcHRpb25hbENvbnRhaW5lcjogTGF5b3V0Q29uZmlnIHwgSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQsXHJcbiAgICAgICAgY29udGFpbmVyT3JCaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyPzogSFRNTEVsZW1lbnQgfCAgVmlydHVhbExheW91dC5CaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyKTpcclxuICAgICAgICBMYXlvdXRNYW5hZ2VyLkNvbnN0cnVjdG9yUGFyYW1ldGVyc1xyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IHdpbmRvd0NvbmZpZ0tleSA9IHN1YldpbmRvd0NoZWNrZWQgPyBudWxsIDogbmV3IFVSTChkb2N1bWVudC5sb2NhdGlvbi5ocmVmKS5zZWFyY2hQYXJhbXMuZ2V0KCdnbC13aW5kb3cnKTtcclxuICAgICAgICBzdWJXaW5kb3dDaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBpc1N1YldpbmRvdyA9IHdpbmRvd0NvbmZpZ0tleSAhPT0gbnVsbDtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRhaW5lckVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBjb25maWc6IFJlc29sdmVkTGF5b3V0Q29uZmlnIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICh3aW5kb3dDb25maWdLZXkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3Qgd2luZG93Q29uZmlnU3RyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0od2luZG93Q29uZmlnS2V5KTtcclxuICAgICAgICAgICAgaWYgKHdpbmRvd0NvbmZpZ1N0ciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOdWxsIGdsLXdpbmRvdyBDb25maWcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh3aW5kb3dDb25maWdLZXkpO1xyXG4gICAgICAgICAgICBjb25zdCBtaW5pZmllZFdpbmRvd0NvbmZpZyA9IEpTT04ucGFyc2Uod2luZG93Q29uZmlnU3RyKSBhcyBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZztcclxuICAgICAgICAgICAgY29uZmlnID0gUmVzb2x2ZWRMYXlvdXRDb25maWcudW5taW5pZnlDb25maWcobWluaWZpZWRXaW5kb3dDb25maWcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb25maWdPck9wdGlvbmFsQ29udGFpbmVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb25maWdPck9wdGlvbmFsQ29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudCA9IGNvbmZpZ09yT3B0aW9uYWxDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChMYXlvdXRDb25maWcuaXNSZXNvbHZlZChjb25maWdPck9wdGlvbmFsQ29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWdPck9wdGlvbmFsQ29udGFpbmVyIGFzIFJlc29sdmVkTGF5b3V0Q29uZmlnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IExheW91dENvbmZpZy5yZXNvbHZlKGNvbmZpZ09yT3B0aW9uYWxDb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lck9yQmluZENvbXBvbmVudEV2ZW50SGFuZGxlciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudCA9IGNvbnRhaW5lck9yQmluZENvbXBvbmVudEV2ZW50SGFuZGxlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGF5b3V0Q29uZmlnOiBjb25maWcsXHJcbiAgICAgICAgICAgIGlzU3ViV2luZG93LFxyXG4gICAgICAgICAgICBjb250YWluZXJFbGVtZW50LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgKiBmcm9tICcuL3RzL2NvbmZpZy9jb25maWcnO1xyXG5leHBvcnQgKiBmcm9tICcuL3RzL2NvbmZpZy9yZXNvbHZlZC1jb25maWcnO1xyXG5leHBvcnQgeyBDb21wb25lbnRDb250YWluZXIgfSBmcm9tICcuL3RzL2NvbnRhaW5lci9jb21wb25lbnQtY29udGFpbmVyJztcclxuZXhwb3J0IHsgQnJvd3NlclBvcG91dCB9IGZyb20gJy4vdHMvY29udHJvbHMvYnJvd3Nlci1wb3BvdXQnO1xyXG5leHBvcnQgeyBEcmFnU291cmNlIH0gZnJvbSAnLi90cy9jb250cm9scy9kcmFnLXNvdXJjZSc7XHJcbmV4cG9ydCB7IEhlYWRlciB9IGZyb20gJy4vdHMvY29udHJvbHMvaGVhZGVyJztcclxuZXhwb3J0IHsgVGFiIH0gZnJvbSAnLi90cy9jb250cm9scy90YWInO1xyXG5leHBvcnQgKiBmcm9tICcuL3RzL2Vycm9ycy9leHRlcm5hbC1lcnJvcic7XHJcbmV4cG9ydCB7IEdvbGRlbkxheW91dCB9IGZyb20gJy4vdHMvZ29sZGVuLWxheW91dCc7XHJcbmV4cG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuL3RzL2l0ZW1zL2NvbXBvbmVudC1pdGVtJztcclxuZXhwb3J0IHsgQ29udGVudEl0ZW0gfSBmcm9tICcuL3RzL2l0ZW1zL2NvbnRlbnQtaXRlbSc7XHJcbmV4cG9ydCB7IFJvd09yQ29sdW1uIH0gZnJvbSAnLi90cy9pdGVtcy9yb3ctb3ItY29sdW1uJztcclxuZXhwb3J0IHsgU3RhY2sgfSBmcm9tICcuL3RzL2l0ZW1zL3N0YWNrJztcclxuZXhwb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4vdHMvbGF5b3V0LW1hbmFnZXInO1xyXG5leHBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuL3RzL3V0aWxzL2V2ZW50LWVtaXR0ZXInO1xyXG5leHBvcnQgeyBFdmVudEh1YiB9IGZyb20gJy4vdHMvdXRpbHMvZXZlbnQtaHViJztcclxuZXhwb3J0ICogZnJvbSAnLi90cy91dGlscy9pMThuLXN0cmluZ3MnO1xyXG5leHBvcnQgeyBTdHlsZUNvbnN0YW50cyB9IGZyb20gJy4vdHMvdXRpbHMvc3R5bGUtY29uc3RhbnRzJztcclxuZXhwb3J0ICogZnJvbSAnLi90cy91dGlscy90eXBlcyc7XHJcbmV4cG9ydCB7IFZpcnR1YWxMYXlvdXQgfSBmcm9tICcuL3RzL3ZpcnR1YWwtbGF5b3V0JztcclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=